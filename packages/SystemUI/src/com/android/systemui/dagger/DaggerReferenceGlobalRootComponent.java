package com.android.systemui.dagger;

import android.app.Activity;
import android.app.ActivityManager;
import android.app.ActivityTaskManager;
import android.app.AlarmManager;
import android.app.DreamManager;
import android.app.IActivityManager;
import android.app.IActivityTaskManager;
import android.app.INotificationManager;
import android.app.IUriGrantsManager;
import android.app.IWallpaperManager;
import android.app.KeyguardManager;
import android.app.NotificationManager;
import android.app.StatsManager;
import android.app.StatusBarManager;
import android.app.UiModeManager;
import android.app.WallpaperManager;
import android.app.admin.DevicePolicyManager;
import android.app.backup.BackupManager;
import android.app.job.JobScheduler;
import android.app.role.RoleManager;
import android.app.smartspace.SmartspaceManager;
import android.app.trust.TrustManager;
import android.appwidget.AppWidgetManager;
import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothManager;
import android.companion.virtual.VirtualDeviceManager;
import android.content.ClipboardManager;
import android.content.ComponentName;
import android.content.ContentResolver;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.SharedPreferences;
import android.content.om.OverlayManager;
import android.content.pm.IPackageManager;
import android.content.pm.LauncherApps;
import android.content.pm.PackageInstaller;
import android.content.pm.PackageManager;
import android.content.pm.ShortcutManager;
import android.content.pm.UserInfo;
import android.content.res.Resources;
import android.hardware.Sensor;
import android.hardware.SensorManager;
import android.hardware.SensorPrivacyManager;
import android.hardware.biometrics.BiometricManager;
import android.hardware.camera2.CameraManager;
import android.hardware.devicestate.DeviceStateManager;
import android.hardware.display.AmbientDisplayConfiguration;
import android.hardware.display.ColorDisplayManager;
import android.hardware.display.DisplayManager;
import android.hardware.face.FaceManager;
import android.hardware.fingerprint.FingerprintManager;
import android.hardware.input.InputManager;
import android.location.LocationManager;
import android.media.AudioManager;
import android.media.IAudioService;
import android.media.MediaRouter2Manager;
import android.media.Spatializer;
import android.media.projection.IMediaProjectionManager;
import android.media.projection.MediaProjectionManager;
import android.media.session.MediaSession;
import android.media.session.MediaSessionManager;
import android.nearby.NearbyManager;
import android.net.ConnectivityManager;
import android.net.NetworkScoreManager;
import android.net.wifi.WifiManager;
import android.os.Build;
import android.os.Bundle;
import android.os.Handler;
import android.os.HandlerExecutor;
import android.os.HandlerThread;
import android.os.IDeviceIdleController;
import android.os.Looper;
import android.os.PowerExemptionManager;
import android.os.PowerManager;
import android.os.ServiceManager;
import android.os.SystemProperties;
import android.os.UserHandle;
import android.os.UserManager;
import android.os.Vibrator;
import android.os.storage.StorageManager;
import android.permission.PermissionManager;
import android.safetycenter.SafetyCenterManager;
import android.service.dreams.IDreamManager;
import android.service.notification.NotificationListenerService;
import android.service.notification.StatusBarNotification;
import android.service.quickaccesswallet.QuickAccessWalletClient;
import android.service.quicksettings.IQSService;
import android.service.vr.IVrManager;
import android.telecom.TelecomManager;
import android.telephony.CarrierConfigManager;
import android.telephony.SubscriptionManager;
import android.telephony.TelephonyManager;
import android.telephony.euicc.EuiccManager;
import android.telephony.satellite.SatelliteManager;
import android.util.AttributeSet;
import android.util.DisplayMetrics;
import android.util.TypedValue;
import android.view.Choreographer;
import android.view.CrossWindowBlurListeners;
import android.view.Display;
import android.view.GestureDetector;
import android.view.IWindowManager;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewConfiguration;
import android.view.ViewGroup;
import android.view.ViewParent;
import android.view.ViewStub;
import android.view.Window;
import android.view.WindowManager;
import android.view.WindowManagerGlobal;
import android.view.accessibility.AccessibilityManager;
import android.view.accessibility.CaptioningManager;
import android.view.inputmethod.InputMethodManager;
import android.view.textclassifier.TextClassificationManager;
import android.widget.FrameLayout;
import androidx.activity.ComponentActivity;
import androidx.asynclayoutinflater.view.AsyncLayoutInflater;
import androidx.constraintlayout.motion.widget.MotionLayout;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.core.app.NotificationManagerCompat;
import androidx.datastore.core.DataStore;
import androidx.lifecycle.DefaultLifecycleObserver;
import androidx.lifecycle.Lifecycle;
import androidx.lifecycle.LifecycleOwner;
import androidx.lifecycle.SavedStateHandle;
import androidx.lifecycle.ViewModel;
import androidx.lifecycle.ViewModelProvider;
import androidx.lifecycle.ViewModelStore;
import androidx.room.Room;
import androidx.room.RoomDatabase;
import androidx.slice.SliceViewManager;
import androidx.slice.SliceViewManagerWrapper;
import com.android.app.motiontool.DdmHandleMotionTool;
import com.android.app.motiontool.MotionToolManager;
import com.android.dream.lowlight.LowLightTransitionCoordinator;
import com.android.dream.lowlight.dagger.LowLightDreamModule;
import com.android.internal.app.AssistUtils;
import com.android.internal.app.IBatteryStats;
import com.android.internal.foldables.FoldLockSettingAvailabilityProvider;
import com.android.internal.jank.InteractionJankMonitor;
import com.android.internal.logging.InstanceId;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.UiEventLogger;
import com.android.internal.logging.UiEventLoggerImpl;
import com.android.internal.statusbar.IStatusBarService;
import com.android.internal.util.EmergencyAffordanceManager;
import com.android.internal.util.LatencyTracker;
import com.android.internal.util.NotificationMessagingUtil;
import com.android.internal.widget.LockPatternUtils;
import com.android.keyguard.ActiveUnlockConfig;
import com.android.keyguard.AdminSecondaryLockScreenController;
import com.android.keyguard.CarrierText;
import com.android.keyguard.CarrierTextController;
import com.android.keyguard.CarrierTextManager;
import com.android.keyguard.ClockEventController;
import com.android.keyguard.ConnectedDisplayKeyguardPresentation;
import com.android.keyguard.DualDarInnerLockScreenController;
import com.android.keyguard.EmergencyButtonController;
import com.android.keyguard.EmptyLockIconViewController;
import com.android.keyguard.KeyguardArrowView;
import com.android.keyguard.KeyguardArrowViewController;
import com.android.keyguard.KeyguardBiometricLockoutLogger;
import com.android.keyguard.KeyguardCarrierTextView;
import com.android.keyguard.KeyguardCarrierTextViewController;
import com.android.keyguard.KeyguardClockSwitch;
import com.android.keyguard.KeyguardClockSwitchController;
import com.android.keyguard.KeyguardDisplayManager;
import com.android.keyguard.KeyguardInputViewController;
import com.android.keyguard.KeyguardMessageAreaController;
import com.android.keyguard.KeyguardPluginControllerImpl;
import com.android.keyguard.KeyguardPresentationDisabler;
import com.android.keyguard.KeyguardSecSecurityContainer;
import com.android.keyguard.KeyguardSecSecurityContainerController;
import com.android.keyguard.KeyguardSecUpdateMonitorImpl;
import com.android.keyguard.KeyguardSecurityContainer;
import com.android.keyguard.KeyguardSecurityModel;
import com.android.keyguard.KeyguardSecurityViewFlipper;
import com.android.keyguard.KeyguardSecurityViewFlipperController;
import com.android.keyguard.KeyguardSliceView;
import com.android.keyguard.KeyguardSliceViewController;
import com.android.keyguard.KeyguardStatusView;
import com.android.keyguard.KeyguardStatusViewController;
import com.android.keyguard.KeyguardUnfoldTransition;
import com.android.keyguard.KeyguardUpdateMonitor;
import com.android.keyguard.KeyguardViewController;
import com.android.keyguard.LiftToActivateListener;
import com.android.keyguard.LockIconViewController;
import com.android.keyguard.SecLockIconView;
import com.android.keyguard.SecLockIconViewController;
import com.android.keyguard.SecRotationWatcher;
import com.android.keyguard.ViewMediatorCallback;
import com.android.keyguard.WifiTextManager;
import com.android.keyguard.biometrics.KeyguardBiometricView;
import com.android.keyguard.biometrics.KeyguardBiometricViewController;
import com.android.keyguard.dagger.ClockRegistryModule_GetClockRegistryFactory;
import com.android.keyguard.dagger.KeyguardBouncerComponent;
import com.android.keyguard.dagger.KeyguardDisplayModule;
import com.android.keyguard.dagger.KeyguardDisplayModule_Companion_GetDisplayContextFactory;
import com.android.keyguard.dagger.KeyguardQsUserSwitchComponent;
import com.android.keyguard.dagger.KeyguardStatusBarViewComponent;
import com.android.keyguard.dagger.KeyguardStatusViewComponent;
import com.android.keyguard.dagger.KeyguardStatusViewModule_GetKeyguardClockSwitchFactory;
import com.android.keyguard.dagger.KeyguardUserSwitcherComponent;
import com.android.keyguard.domain.interactor.KeyguardKeyboardInteractor;
import com.android.keyguard.emm.EngineeringModeManagerWrapper;
import com.android.keyguard.logging.BiometricUnlockLogger;
import com.android.keyguard.logging.CarrierTextManagerLogger;
import com.android.keyguard.logging.DeviceEntryIconLogger;
import com.android.keyguard.logging.KeyguardLogger;
import com.android.keyguard.logging.KeyguardTransitionAnimationLogger;
import com.android.keyguard.logging.KeyguardUpdateMonitorLogger;
import com.android.keyguard.logging.ScrimLogger;
import com.android.keyguard.logging.TrustRepositoryLogger;
import com.android.keyguard.mediator.ScreenOnCoordinator;
import com.android.keyguard.punchhole.KeyguardPunchHoleVIView;
import com.android.keyguard.punchhole.KeyguardPunchHoleVIViewController;
import com.android.launcher3.icons.IconFactory;
import com.android.launcher3.icons.IconProvider;
import com.android.settingslib.bluetooth.LocalBluetoothManager;
import com.android.settingslib.devicestate.DeviceStateRotationLockSettingsManager;
import com.android.settingslib.media.data.repository.SpatializerRepository;
import com.android.settingslib.media.data.repository.SpatializerRepositoryImpl;
import com.android.settingslib.media.domain.interactor.SpatializerInteractor;
import com.android.settingslib.statusbar.notification.data.repository.NotificationsSoundPolicyRepository;
import com.android.settingslib.statusbar.notification.data.repository.NotificationsSoundPolicyRepositoryImpl;
import com.android.settingslib.statusbar.notification.domain.interactor.NotificationsSoundPolicyInteractor;
import com.android.settingslib.users.CreateUserDialogController;
import com.android.settingslib.view.accessibility.data.repository.CaptioningRepository;
import com.android.settingslib.view.accessibility.data.repository.CaptioningRepositoryImpl;
import com.android.settingslib.view.accessibility.domain.interactor.CaptioningInteractor;
import com.android.settingslib.volume.data.repository.AudioRepository;
import com.android.settingslib.volume.data.repository.AudioRepositoryImpl;
import com.android.settingslib.volume.data.repository.AudioSharingRepository;
import com.android.settingslib.volume.data.repository.AudioSharingRepositoryImpl;
import com.android.settingslib.volume.data.repository.MediaControllerRepository;
import com.android.settingslib.volume.data.repository.MediaControllerRepositoryImpl;
import com.android.settingslib.volume.domain.interactor.AudioModeInteractor;
import com.android.settingslib.volume.domain.interactor.AudioVolumeInteractor;
import com.android.settingslib.volume.shared.AudioManagerEventsReceiver;
import com.android.settingslib.volume.shared.AudioManagerEventsReceiverImpl;
import com.android.systemui.ActivityIntentHelper;
import com.android.systemui.BasicRune;
import com.android.systemui.BinderProxyDumpHelper;
import com.android.systemui.BootAnimationFinishedCache;
import com.android.systemui.BootAnimationFinishedCacheImpl;
import com.android.systemui.BootAnimationFinishedTrigger;
import com.android.systemui.BootCompleteCache;
import com.android.systemui.BootCompleteCacheImpl;
import com.android.systemui.CameraProtectionLoaderImpl;
import com.android.systemui.CoreStartable;
import com.android.systemui.Dependency;
import com.android.systemui.Flags;
import com.android.systemui.ForegroundServicesDialog;
import com.android.systemui.GuestResetOrExitSessionReceiver;
import com.android.systemui.GuestResumeSessionReceiver;
import com.android.systemui.GuestSessionNotification;
import com.android.systemui.HeapDumpHelper;
import com.android.systemui.InitController;
import com.android.systemui.LatencyTester;
import com.android.systemui.LsRuneWrapper;
import com.android.systemui.NoOpCoreStartable;
import com.android.systemui.Prefs;
import com.android.systemui.R;
import com.android.systemui.Rune;
import com.android.systemui.ScreenDecorations;
import com.android.systemui.ScreenDecorationsComponent;
import com.android.systemui.ScreenDecorationsController;
import com.android.systemui.ShelfToolTipManager;
import com.android.systemui.SliceBroadcastRelayHandler;
import com.android.systemui.SysUICutoutProvider;
import com.android.systemui.SystemUIAppComponentFactoryBase;
import com.android.systemui.SystemUISecondaryUserService;
import com.android.systemui.SystemUIService;
import com.android.systemui.UiOffloadThread;
import com.android.systemui.VendorServices;
import com.android.systemui.accessibility.AccessibilityButtonModeObserver;
import com.android.systemui.accessibility.AccessibilityButtonTargetsObserver;
import com.android.systemui.accessibility.AccessibilityLogger;
import com.android.systemui.accessibility.FlexModePanel;
import com.android.systemui.accessibility.Magnification;
import com.android.systemui.accessibility.ModeSwitchesController;
import com.android.systemui.accessibility.SystemActions;
import com.android.systemui.accessibility.data.repository.AccessibilityQsShortcutsRepository;
import com.android.systemui.accessibility.data.repository.AccessibilityQsShortcutsRepositoryImpl;
import com.android.systemui.accessibility.data.repository.AccessibilityRepository;
import com.android.systemui.accessibility.data.repository.AccessibilityRepositoryImpl;
import com.android.systemui.accessibility.data.repository.AccessibilityRepositoryModule;
import com.android.systemui.accessibility.data.repository.ColorCorrectionRepository;
import com.android.systemui.accessibility.data.repository.ColorCorrectionRepositoryImpl;
import com.android.systemui.accessibility.data.repository.ColorInversionRepository;
import com.android.systemui.accessibility.data.repository.ColorInversionRepositoryImpl;
import com.android.systemui.accessibility.data.repository.NightDisplayRepository;
import com.android.systemui.accessibility.data.repository.OneHandedModeRepository;
import com.android.systemui.accessibility.data.repository.OneHandedModeRepositoryImpl;
import com.android.systemui.accessibility.data.repository.UserA11yQsShortcutsRepository;
import com.android.systemui.accessibility.domain.interactor.AccessibilityInteractor;
import com.android.systemui.accessibility.floatingmenu.AccessibilityFloatingMenuController;
import com.android.systemui.accessibility.fontscaling.FontScalingDialogDelegate;
import com.android.systemui.accessibility.hearingaid.HearingDevicesChecker;
import com.android.systemui.accessibility.hearingaid.HearingDevicesDialogDelegate;
import com.android.systemui.accessibility.hearingaid.HearingDevicesDialogManager;
import com.android.systemui.accessibility.hearingaid.HearingDevicesDialogReceiver;
import com.android.systemui.accessibility.qs.QSAccessibilityModule;
import com.android.systemui.accessibility.qs.QSAccessibilityModule_Companion_ProvideColorCorrectionTileConfigFactory;
import com.android.systemui.accessibility.qs.QSAccessibilityModule_Companion_ProvideColorInversionTileConfigFactory;
import com.android.systemui.accessibility.qs.QSAccessibilityModule_Companion_ProvideFontScalingTileConfigFactory;
import com.android.systemui.accessibility.qs.QSAccessibilityModule_Companion_ProvideNightDisplayTileConfigFactory;
import com.android.systemui.accessibility.qs.QSAccessibilityModule_Companion_ProvideOneHandedTileConfigFactory;
import com.android.systemui.accessibility.qs.QSAccessibilityModule_Companion_ProvideReduceBrightColorsTileConfigFactory;
import com.android.systemui.aiagent.AiAgentEffect;
import com.android.systemui.aibrief.AiBriefManagerImpl;
import com.android.systemui.aibrief.control.BriefNotificationController;
import com.android.systemui.aibrief.control.BriefNowBarController;
import com.android.systemui.aibrief.log.BriefLogger;
import com.android.systemui.aibrief.ui.BriefViewController;
import com.android.systemui.ambient.statusbar.dagger.AmbientStatusBarComponent;
import com.android.systemui.ambient.statusbar.ui.AmbientStatusBarView;
import com.android.systemui.ambient.statusbar.ui.AmbientStatusBarViewController;
import com.android.systemui.ambient.touch.BouncerSwipeTouchHandler;
import com.android.systemui.ambient.touch.InputSession;
import com.android.systemui.ambient.touch.ShadeTouchHandler;
import com.android.systemui.ambient.touch.TouchHandler;
import com.android.systemui.ambient.touch.TouchMonitor;
import com.android.systemui.ambient.touch.dagger.AmbientTouchComponent;
import com.android.systemui.ambient.touch.dagger.AmbientTouchModule;
import com.android.systemui.ambient.touch.dagger.BouncerSwipeModule$$ExternalSyntheticLambda0;
import com.android.systemui.ambient.touch.dagger.InputSessionComponent;
import com.android.systemui.ambient.touch.scrim.BouncerScrimController;
import com.android.systemui.ambient.touch.scrim.BouncerlessScrimController;
import com.android.systemui.ambient.touch.scrim.ScrimManager;
import com.android.systemui.animation.ActivityTransitionAnimator;
import com.android.systemui.animation.AnimationFeatureFlags;
import com.android.systemui.animation.DialogTransitionAnimator;
import com.android.systemui.aod.AODAmbientWallpaperHelper;
import com.android.systemui.aod.AODTouchModeManager;
import com.android.systemui.appops.AppOpsController;
import com.android.systemui.appops.AppOpsControllerImpl;
import com.android.systemui.assist.AssistLogger;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.assist.PhoneStateMonitor;
import com.android.systemui.assist.data.repository.AssistRepository;
import com.android.systemui.assist.domain.interactor.AssistInteractor;
import com.android.systemui.assist.ui.DefaultUiController;
import com.android.systemui.audio.soundcraft.SoundCraftNowBarController;
import com.android.systemui.audio.soundcraft.SoundCraftNowBarView;
import com.android.systemui.audio.soundcraft.di.SoundCraftNowBarViewModule;
import com.android.systemui.audio.soundcraft.di.vm.SoundCraftViewModelFactory;
import com.android.systemui.audio.soundcraft.interfaces.audio.AudioPlaybackManager;
import com.android.systemui.audio.soundcraft.interfaces.connectivity.BluetoothDeviceManager;
import com.android.systemui.audio.soundcraft.interfaces.connectivity.SoundCraftManager;
import com.android.systemui.audio.soundcraft.interfaces.routine.manager.RoutineManager;
import com.android.systemui.audio.soundcraft.interfaces.settings.SoundCraftSettings;
import com.android.systemui.audio.soundcraft.interfaces.soundalive.SoundAliveIntentFactory;
import com.android.systemui.audio.soundcraft.interfaces.soundalive.SoundAliveManager;
import com.android.systemui.audio.soundcraft.interfaces.volume.VolumeManager;
import com.android.systemui.audio.soundcraft.interfaces.wearable.WearableManager;
import com.android.systemui.audio.soundcraft.interfaces.wearable.setting.BudsSettingIntentFactory;
import com.android.systemui.audio.soundcraft.model.ModelProvider;
import com.android.systemui.audio.soundcraft.view.SoundCraftQpDetailAdapter;
import com.android.systemui.audio.soundcraft.view.SoundCraftViewComponent;
import com.android.systemui.audio.soundcraft.viewmodel.SoundCraftViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.audioeffect.SpatialAudioViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.battery.BatteryInfoBoxViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.ActiveNoiseCancelingViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.AdaptiveViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.AmbientSoundViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.AmbientVolumeViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.NoiseCancelingLevelViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.NoiseCancelingSwitchBarViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.NoiseControlBoxViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.NoiseControlEffectBoxViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.buds.noisecontrol.NoiseControlOffViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.actionbar.SoundCraftActionBarViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.audioeffect.AudioEffectBoxViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.audioeffect.AudioEffectHeaderViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.audioeffect.EqualizerViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.audioeffect.VoiceBoostViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.audioeffect.VolumeNormalizationViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.routine.RoutineTestViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.common.volume.VolumeBarViewModel;
import com.android.systemui.audio.soundcraft.viewmodel.phone.audioeffect.DolbyViewModel;
import com.android.systemui.authentication.AuthenticationModule;
import com.android.systemui.authentication.data.repository.AuthenticationRepository;
import com.android.systemui.authentication.data.repository.AuthenticationRepositoryImpl;
import com.android.systemui.authentication.domain.interactor.AuthenticationInteractor;
import com.android.systemui.back.domain.interactor.BackActionInteractor;
import com.android.systemui.basic.util.CoverUtilWrapper;
import com.android.systemui.basic.util.LogWrapper;
import com.android.systemui.basic.util.ModuleType;
import com.android.systemui.battery.BatteryMeterView;
import com.android.systemui.battery.BatteryMeterViewController;
import com.android.systemui.battery.BatterySaverModule;
import com.android.systemui.battery.BatterySaverModule_Companion_ProvideBatterySaverTileConfigFactory;
import com.android.systemui.biometrics.AuthController;
import com.android.systemui.biometrics.AuthDialogPanelInteractionDetector;
import com.android.systemui.biometrics.AuthRippleController;
import com.android.systemui.biometrics.AuthRippleView;
import com.android.systemui.biometrics.BiometricNotificationBroadcastReceiver;
import com.android.systemui.biometrics.BiometricNotificationDialogFactory;
import com.android.systemui.biometrics.BiometricNotificationService;
import com.android.systemui.biometrics.FaceAuthAccessibilityDelegate;
import com.android.systemui.biometrics.FaceHelpMessageDeferralFactory;
import com.android.systemui.biometrics.UdfpsController;
import com.android.systemui.biometrics.UdfpsHapticsSimulator;
import com.android.systemui.biometrics.UdfpsKeyguardAccessibilityDelegate;
import com.android.systemui.biometrics.UdfpsLogger;
import com.android.systemui.biometrics.UdfpsShell;
import com.android.systemui.biometrics.UdfpsUtils;
import com.android.systemui.biometrics.dagger.BiometricsModule;
import com.android.systemui.biometrics.dagger.BiometricsModule_Companion_ProvidesOverlapDetectorFactory;
import com.android.systemui.biometrics.data.repository.BiometricStatusRepository;
import com.android.systemui.biometrics.data.repository.BiometricStatusRepositoryImpl;
import com.android.systemui.biometrics.data.repository.DisplayStateRepository;
import com.android.systemui.biometrics.data.repository.DisplayStateRepositoryImpl;
import com.android.systemui.biometrics.data.repository.FacePropertyRepository;
import com.android.systemui.biometrics.data.repository.FacePropertyRepositoryImpl;
import com.android.systemui.biometrics.data.repository.FaceSettingsRepository;
import com.android.systemui.biometrics.data.repository.FaceSettingsRepositoryImpl;
import com.android.systemui.biometrics.data.repository.FingerprintPropertyRepository;
import com.android.systemui.biometrics.data.repository.FingerprintPropertyRepositoryImpl;
import com.android.systemui.biometrics.data.repository.PromptRepository;
import com.android.systemui.biometrics.data.repository.PromptRepositoryImpl;
import com.android.systemui.biometrics.domain.interactor.BiometricStatusInteractor;
import com.android.systemui.biometrics.domain.interactor.BiometricStatusInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.CredentialInteractor;
import com.android.systemui.biometrics.domain.interactor.CredentialInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.DisplayStateInteractor;
import com.android.systemui.biometrics.domain.interactor.DisplayStateInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.FingerprintPropertyInteractor;
import com.android.systemui.biometrics.domain.interactor.LogContextInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.PromptCredentialInteractor;
import com.android.systemui.biometrics.domain.interactor.PromptSelectorInteractor;
import com.android.systemui.biometrics.domain.interactor.PromptSelectorInteractorImpl;
import com.android.systemui.biometrics.domain.interactor.SideFpsSensorInteractor;
import com.android.systemui.biometrics.domain.interactor.UdfpsOverlayInteractor;
import com.android.systemui.biometrics.udfps.OverlapDetector;
import com.android.systemui.biometrics.udfps.SinglePointerTouchProcessor;
import com.android.systemui.biometrics.ui.binder.SideFpsOverlayViewBinder;
import com.android.systemui.biometrics.ui.viewmodel.CredentialViewModel;
import com.android.systemui.biometrics.ui.viewmodel.DefaultUdfpsTouchOverlayViewModel;
import com.android.systemui.biometrics.ui.viewmodel.DeviceEntryUdfpsTouchOverlayViewModel;
import com.android.systemui.biometrics.ui.viewmodel.PromptViewModel;
import com.android.systemui.bixby2.SystemUICommandActionHandler;
import com.android.systemui.bixby2.controller.AppController;
import com.android.systemui.bixby2.controller.DeviceController;
import com.android.systemui.bixby2.controller.MWBixbyController;
import com.android.systemui.bixby2.controller.NotificationController;
import com.android.systemui.bixby2.controller.ScreenController;
import com.android.systemui.bixby2.interactor.AppControlActionInteractor;
import com.android.systemui.bixby2.interactor.DeviceControlActionInteractor;
import com.android.systemui.bixby2.interactor.MusicControlActionInteractor;
import com.android.systemui.bixby2.interactor.NotificationControlActionInteractor;
import com.android.systemui.bixby2.interactor.ScreenControlActionInteractor;
import com.android.systemui.bixby2.interactor.ShareViaActionInteractor;
import com.android.systemui.bixby2.util.ActivityLauncher;
import com.android.systemui.bluetooth.BluetoothLogger;
import com.android.systemui.bluetooth.BroadcastDialogController;
import com.android.systemui.bluetooth.BroadcastDialogDelegate;
import com.android.systemui.blur.SecQpBlurController;
import com.android.systemui.bouncer.data.repository.BouncerMessageRepository;
import com.android.systemui.bouncer.data.repository.BouncerMessageRepositoryImpl;
import com.android.systemui.bouncer.data.repository.BouncerRepository;
import com.android.systemui.bouncer.data.repository.EmergencyServicesRepository;
import com.android.systemui.bouncer.data.repository.KeyguardBouncerRepository;
import com.android.systemui.bouncer.data.repository.KeyguardBouncerRepositoryImpl;
import com.android.systemui.bouncer.data.repository.SimBouncerRepository;
import com.android.systemui.bouncer.data.repository.SimBouncerRepositoryImpl;
import com.android.systemui.bouncer.domain.interactor.AlternateBouncerInteractor;
import com.android.systemui.bouncer.domain.interactor.BouncerActionButtonInteractor;
import com.android.systemui.bouncer.domain.interactor.BouncerInteractor;
import com.android.systemui.bouncer.domain.interactor.BouncerInteractorModule;
import com.android.systemui.bouncer.domain.interactor.BouncerInteractorModule$emergencyDialerIntentFactory$1;
import com.android.systemui.bouncer.domain.interactor.BouncerMessageAuditLogger;
import com.android.systemui.bouncer.domain.interactor.BouncerMessageInteractor;
import com.android.systemui.bouncer.domain.interactor.CountDownTimerUtil;
import com.android.systemui.bouncer.domain.interactor.EmergencyDialerIntentFactory;
import com.android.systemui.bouncer.domain.interactor.PrimaryBouncerCallbackInteractor;
import com.android.systemui.bouncer.domain.interactor.PrimaryBouncerInteractor;
import com.android.systemui.bouncer.domain.interactor.SimBouncerInteractor;
import com.android.systemui.bouncer.log.BouncerLoggerStartable;
import com.android.systemui.bouncer.shared.flag.ComposeBouncerFlags;
import com.android.systemui.bouncer.shared.flag.ComposeBouncerFlagsImpl;
import com.android.systemui.bouncer.shared.flag.ComposeBouncerFlagsModule;
import com.android.systemui.bouncer.ui.BouncerDialogFactory;
import com.android.systemui.bouncer.ui.BouncerView;
import com.android.systemui.bouncer.ui.BouncerViewImpl;
import com.android.systemui.bouncer.ui.BouncerViewModule;
import com.android.systemui.bouncer.ui.binder.BouncerViewBinder;
import com.android.systemui.bouncer.ui.binder.ComposeBouncerDependencies;
import com.android.systemui.bouncer.ui.binder.LegacyBouncerDependencies;
import com.android.systemui.bouncer.ui.composable.BouncerScene;
import com.android.systemui.bouncer.ui.viewmodel.BouncerMessageViewModel;
import com.android.systemui.bouncer.ui.viewmodel.BouncerMessageViewModelModule;
import com.android.systemui.bouncer.ui.viewmodel.BouncerViewModel;
import com.android.systemui.bouncer.ui.viewmodel.BouncerViewModelModule;
import com.android.systemui.bouncer.ui.viewmodel.KeyguardBouncerViewModel;
import com.android.systemui.brightness.dagger.ScreenBrightnessModule;
import com.android.systemui.brightness.data.repository.BrightnessPolicyRepository;
import com.android.systemui.brightness.data.repository.BrightnessPolicyRepositoryImpl;
import com.android.systemui.brightness.data.repository.ScreenBrightnessDisplayManagerRepository;
import com.android.systemui.brightness.data.repository.ScreenBrightnessRepository;
import com.android.systemui.brightness.domain.interactor.BrightnessPolicyEnforcementInteractor;
import com.android.systemui.brightness.domain.interactor.ScreenBrightnessInteractor;
import com.android.systemui.brightness.ui.viewmodel.BrightnessSliderViewModel;
import com.android.systemui.broadcast.BroadcastDispatcher;
import com.android.systemui.broadcast.BroadcastDispatcherStartable;
import com.android.systemui.broadcast.BroadcastSender;
import com.android.systemui.broadcast.PendingRemovalStore;
import com.android.systemui.broadcast.logging.BroadcastDispatcherLogger;
import com.android.systemui.camera.CameraGestureHelper;
import com.android.systemui.camera.CameraIntentsWrapper;
import com.android.systemui.camera.data.repository.CameraAutoRotateRepository;
import com.android.systemui.camera.data.repository.CameraAutoRotateRepositoryImpl;
import com.android.systemui.camera.data.repository.CameraSensorPrivacyRepository;
import com.android.systemui.camera.data.repository.CameraSensorPrivacyRepositoryImpl;
import com.android.systemui.charging.WiredChargingRippleController;
import com.android.systemui.classifier.BrightLineFalsingManager;
import com.android.systemui.classifier.DiagonalClassifier;
import com.android.systemui.classifier.DistanceClassifier;
import com.android.systemui.classifier.DoubleTapClassifier;
import com.android.systemui.classifier.FalsingA11yDelegate;
import com.android.systemui.classifier.FalsingClassifier;
import com.android.systemui.classifier.FalsingCollector;
import com.android.systemui.classifier.FalsingCollectorImpl;
import com.android.systemui.classifier.FalsingCollectorNoOp;
import com.android.systemui.classifier.FalsingCoreStartable;
import com.android.systemui.classifier.FalsingDataProvider;
import com.android.systemui.classifier.FalsingManagerProxy;
import com.android.systemui.classifier.HistoryTracker;
import com.android.systemui.classifier.LongTapClassifier;
import com.android.systemui.classifier.PointerCountClassifier;
import com.android.systemui.classifier.ProximityClassifier;
import com.android.systemui.classifier.SingleTapClassifier;
import com.android.systemui.classifier.TypeClassifier;
import com.android.systemui.classifier.ZigZagClassifier;
import com.android.systemui.classifier.domain.interactor.FalsingInteractor;
import com.android.systemui.clipboardoverlay.ClipboardImageLoader;
import com.android.systemui.clipboardoverlay.ClipboardListener;
import com.android.systemui.clipboardoverlay.ClipboardOverlayController;
import com.android.systemui.clipboardoverlay.ClipboardOverlayUtils;
import com.android.systemui.clipboardoverlay.ClipboardOverlayView;
import com.android.systemui.clipboardoverlay.ClipboardOverlayWindow;
import com.android.systemui.clipboardoverlay.ClipboardToast;
import com.android.systemui.clipboardoverlay.ClipboardTransitionExecutor;
import com.android.systemui.clipboardoverlay.SemClipboardToastController;
import com.android.systemui.colorextraction.SysuiColorExtractor;
import com.android.systemui.common.data.repository.PackageChangeRepository;
import com.android.systemui.common.data.repository.PackageChangeRepositoryImpl;
import com.android.systemui.common.data.repository.PackageInstallerMonitor;
import com.android.systemui.common.data.repository.PackageUpdateLogger;
import com.android.systemui.common.data.repository.PackageUpdateMonitor;
import com.android.systemui.common.domain.interactor.PackageChangeInteractor;
import com.android.systemui.common.ui.ConfigurationState;
import com.android.systemui.common.ui.data.repository.ConfigurationRepository;
import com.android.systemui.common.ui.data.repository.ConfigurationRepositoryImpl;
import com.android.systemui.common.ui.domain.interactor.ConfigurationInteractor;
import com.android.systemui.communal.CommunalBackupRestoreStartable;
import com.android.systemui.communal.CommunalDreamStartable;
import com.android.systemui.communal.CommunalSceneStartable;
import com.android.systemui.communal.dagger.CommunalModule;
import com.android.systemui.communal.dagger.CommunalModule_Companion_ProvidesCommunalSceneDataSourceDelegatorFactory;
import com.android.systemui.communal.data.backup.CommunalBackupUtils;
import com.android.systemui.communal.data.db.CommunalDatabase;
import com.android.systemui.communal.data.db.CommunalDatabaseModule;
import com.android.systemui.communal.data.db.CommunalWidgetDao;
import com.android.systemui.communal.data.db.DefaultWidgetPopulation;
import com.android.systemui.communal.data.repository.CommunalMediaRepository;
import com.android.systemui.communal.data.repository.CommunalMediaRepositoryImpl;
import com.android.systemui.communal.data.repository.CommunalPrefsRepository;
import com.android.systemui.communal.data.repository.CommunalPrefsRepositoryImpl;
import com.android.systemui.communal.data.repository.CommunalSceneRepository;
import com.android.systemui.communal.data.repository.CommunalSceneRepositoryImpl;
import com.android.systemui.communal.data.repository.CommunalSettingsRepository;
import com.android.systemui.communal.data.repository.CommunalSettingsRepositoryImpl;
import com.android.systemui.communal.data.repository.CommunalTutorialDisabledRepositoryImpl;
import com.android.systemui.communal.data.repository.CommunalTutorialRepository;
import com.android.systemui.communal.data.repository.CommunalWidgetRepository;
import com.android.systemui.communal.data.repository.CommunalWidgetRepositoryImpl;
import com.android.systemui.communal.domain.interactor.CommunalInteractor;
import com.android.systemui.communal.domain.interactor.CommunalSceneInteractor;
import com.android.systemui.communal.domain.interactor.CommunalSettingsInteractor;
import com.android.systemui.communal.domain.interactor.CommunalTutorialInteractor;
import com.android.systemui.communal.log.CommunalLoggerStartable;
import com.android.systemui.communal.smartspace.CommunalSmartspaceController;
import com.android.systemui.communal.smartspace.SmartspaceInteractionHandler;
import com.android.systemui.communal.ui.compose.CommunalContent;
import com.android.systemui.communal.ui.compose.CommunalScene;
import com.android.systemui.communal.ui.compose.section.AmbientStatusBarSection;
import com.android.systemui.communal.ui.view.layout.sections.CommunalTutorialIndicatorSection;
import com.android.systemui.communal.ui.viewmodel.CommunalEditModeViewModel;
import com.android.systemui.communal.ui.viewmodel.CommunalTransitionViewModel;
import com.android.systemui.communal.ui.viewmodel.CommunalTutorialIndicatorViewModel;
import com.android.systemui.communal.ui.viewmodel.CommunalViewModel;
import com.android.systemui.communal.util.CommunalColors;
import com.android.systemui.communal.util.CommunalColorsImpl;
import com.android.systemui.communal.widgets.CommunalAppWidgetHost;
import com.android.systemui.communal.widgets.CommunalAppWidgetHostStartable;
import com.android.systemui.communal.widgets.CommunalWidgetHost;
import com.android.systemui.communal.widgets.CommunalWidgetModule;
import com.android.systemui.communal.widgets.EditWidgetsActivity;
import com.android.systemui.communal.widgets.EditWidgetsActivityStarterImpl;
import com.android.systemui.communal.widgets.WidgetConfigurationController;
import com.android.systemui.communal.widgets.WidgetInteractionHandler;
import com.android.systemui.complication.Complication;
import com.android.systemui.complication.ComplicationCollectionLiveData;
import com.android.systemui.complication.ComplicationCollectionViewModel;
import com.android.systemui.complication.ComplicationHostViewController;
import com.android.systemui.complication.ComplicationId;
import com.android.systemui.complication.ComplicationLayoutEngine;
import com.android.systemui.complication.ComplicationViewModel;
import com.android.systemui.complication.ComplicationViewModelProvider;
import com.android.systemui.complication.ComplicationViewModelTransformer;
import com.android.systemui.complication.dagger.ComplicationComponent;
import com.android.systemui.complication.dagger.ComplicationViewModelComponent;
import com.android.systemui.complication.dagger.DaggerViewModelProviderFactory;
import com.android.systemui.controls.ControlsMetricsLogger;
import com.android.systemui.controls.ControlsMetricsLoggerImpl;
import com.android.systemui.controls.controller.ControlsBindingController;
import com.android.systemui.controls.controller.ControlsBindingControllerImpl;
import com.android.systemui.controls.controller.ControlsController;
import com.android.systemui.controls.controller.ControlsControllerImpl;
import com.android.systemui.controls.controller.PackageUpdateMonitor;
import com.android.systemui.controls.controller.SecControlsBindingController;
import com.android.systemui.controls.controller.SecControlsController;
import com.android.systemui.controls.controller.SecDeviceControlsController;
import com.android.systemui.controls.controller.SecDeviceControlsControllerImpl;
import com.android.systemui.controls.controller.util.BadgeProvider;
import com.android.systemui.controls.controller.util.BadgeProviderImpl;
import com.android.systemui.controls.controller.util.BadgeSubject;
import com.android.systemui.controls.dagger.ControlsComponent;
import com.android.systemui.controls.dagger.ControlsModule;
import com.android.systemui.controls.dagger.ControlsModule_Companion_ProvideDeviceControlsTileConfigFactory;
import com.android.systemui.controls.management.ControlsListingController;
import com.android.systemui.controls.management.ControlsListingControllerImpl;
import com.android.systemui.controls.management.ControlsRequestDialog;
import com.android.systemui.controls.management.ControlsRequestReceiver;
import com.android.systemui.controls.management.SecControlsFavoritingActivity;
import com.android.systemui.controls.management.SecControlsProviderSelectorActivity;
import com.android.systemui.controls.management.SecControlsReorderActivity;
import com.android.systemui.controls.panels.AuthorizedPanelsRepositoryImpl;
import com.android.systemui.controls.panels.SecSelectedComponentRepository;
import com.android.systemui.controls.panels.SecSelectedComponentRepositoryImpl;
import com.android.systemui.controls.panels.SelectedComponentRepository;
import com.android.systemui.controls.panels.SelectedComponentRepositoryImpl;
import com.android.systemui.controls.settings.ControlsSettingsRepository;
import com.android.systemui.controls.settings.ControlsSettingsRepositoryImpl;
import com.android.systemui.controls.start.ControlsStartable;
import com.android.systemui.controls.ui.ControlActionCoordinator;
import com.android.systemui.controls.ui.ControlActionCoordinatorImpl;
import com.android.systemui.controls.ui.ControlsSettingActivity;
import com.android.systemui.controls.ui.ControlsUiController;
import com.android.systemui.controls.ui.SecControlActionCoordinator;
import com.android.systemui.controls.ui.SecControlsActivity;
import com.android.systemui.controls.ui.SecControlsUiController;
import com.android.systemui.controls.ui.SecControlsUiControllerImpl;
import com.android.systemui.controls.ui.fragment.ControlsFragmentFactory;
import com.android.systemui.controls.ui.util.AUIFacade;
import com.android.systemui.controls.ui.util.AUIFacadeImpl;
import com.android.systemui.controls.ui.util.BlurFacade;
import com.android.systemui.controls.ui.util.BlurFacadeImpl;
import com.android.systemui.controls.ui.util.ControlsActivityStarter;
import com.android.systemui.controls.ui.util.ControlsActivityStarterImpl;
import com.android.systemui.controls.ui.util.LayoutUtil;
import com.android.systemui.controls.util.ControlsBackupRestoreReceiver;
import com.android.systemui.controls.util.ControlsFileLoader;
import com.android.systemui.controls.util.ControlsUtil;
import com.android.systemui.controls.util.EncryptDecryptWrapper;
import com.android.systemui.controls.util.SALogger;
import com.android.systemui.controls.util.SystemUIAnalyticsWrapper;
import com.android.systemui.cover.CoverHomeActivity;
import com.android.systemui.cover.CoverHost;
import com.android.systemui.cover.CoverScreenManager;
import com.android.systemui.cover.CoverWindowDelegate;
import com.android.systemui.cover.SysUICoverService;
import com.android.systemui.dagger.ReferenceGlobalRootComponent;
import com.android.systemui.dagger.ReferenceSysUIComponent;
import com.android.systemui.dagger.WMComponent;
import com.android.systemui.decor.CoverPrivacyDotDecorProviderFactory;
import com.android.systemui.decor.FaceScanningProviderFactory;
import com.android.systemui.decor.PrivacyDotDecorProviderFactory;
import com.android.systemui.demomode.DemoModeController;
import com.android.systemui.demomode.dagger.DemoModeModule_ProvideDemoModeControllerFactory;
import com.android.systemui.deviceentry.DeviceEntryModule;
import com.android.systemui.deviceentry.data.repository.DeviceEntryFaceAuthRepository;
import com.android.systemui.deviceentry.data.repository.DeviceEntryFaceAuthRepositoryImpl;
import com.android.systemui.deviceentry.data.repository.DeviceEntryRepository;
import com.android.systemui.deviceentry.data.repository.DeviceEntryRepositoryImpl;
import com.android.systemui.deviceentry.data.repository.FaceWakeUpTriggersConfig;
import com.android.systemui.deviceentry.data.repository.FaceWakeUpTriggersConfigImpl;
import com.android.systemui.deviceentry.domain.interactor.AuthRippleInteractor;
import com.android.systemui.deviceentry.domain.interactor.BiometricMessageInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryBiometricAuthInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryBiometricSettingsInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryFaceAuthInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryFingerprintAuthInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryHapticsInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntrySourceInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceEntryUdfpsInteractor;
import com.android.systemui.deviceentry.domain.interactor.DeviceUnlockedInteractor;
import com.android.systemui.deviceentry.domain.interactor.FaceHelpMessageDeferralInteractor;
import com.android.systemui.deviceentry.domain.interactor.NoopDeviceEntryFaceAuthInteractor;
import com.android.systemui.deviceentry.domain.interactor.OccludingAppDeviceEntryInteractor;
import com.android.systemui.deviceentry.domain.interactor.SystemUIDeviceEntryFaceAuthInteractor;
import com.android.systemui.deviceentry.ui.binder.LiftToRunFaceAuthBinder;
import com.android.systemui.deviceentry.ui.viewmodel.AlternateBouncerUdfpsAccessibilityOverlayViewModel;
import com.android.systemui.deviceentry.ui.viewmodel.DeviceEntryUdfpsAccessibilityOverlayViewModel;
import com.android.systemui.display.data.repository.DisplayMetricsRepository;
import com.android.systemui.display.data.repository.DisplayRepository;
import com.android.systemui.display.data.repository.DisplayRepositoryImpl;
import com.android.systemui.display.domain.interactor.ConnectedDisplayInteractor;
import com.android.systemui.display.domain.interactor.ConnectedDisplayInteractorImpl;
import com.android.systemui.display.ui.view.MirroringConfirmationDialogDelegate$Factory;
import com.android.systemui.display.ui.viewmodel.ConnectingDisplayViewModel;
import com.android.systemui.dock.DockManager;
import com.android.systemui.dock.DockManagerImpl;
import com.android.systemui.doze.AODIntentService;
import com.android.systemui.doze.AODMachine;
import com.android.systemui.doze.AODScreenBrightness;
import com.android.systemui.doze.AODUi;
import com.android.systemui.doze.AlwaysOnDisplayPolicy;
import com.android.systemui.doze.DozeAuthRemover;
import com.android.systemui.doze.DozeDockHandler;
import com.android.systemui.doze.DozeFalsingManagerAdapter;
import com.android.systemui.doze.DozeHost;
import com.android.systemui.doze.DozeLog;
import com.android.systemui.doze.DozeLogger;
import com.android.systemui.doze.DozeMachine;
import com.android.systemui.doze.DozePauser;
import com.android.systemui.doze.DozeScreenBrightness;
import com.android.systemui.doze.DozeScreenState;
import com.android.systemui.doze.DozeService;
import com.android.systemui.doze.DozeSuppressor;
import com.android.systemui.doze.DozeTransitionListener;
import com.android.systemui.doze.DozeTriggers;
import com.android.systemui.doze.DozeUi;
import com.android.systemui.doze.DozeWallpaperState;
import com.android.systemui.doze.PluginAODManager;
import com.android.systemui.doze.dagger.DozeComponent;
import com.android.systemui.doze.dagger.DozeModule_ProvidesBrightnessSensorsFactory;
import com.android.systemui.doze.dagger.DozeModule_ProvidesWrappedServiceFactory;
import com.android.systemui.doze.util.BurnInHelperWrapper;
import com.android.systemui.dreams.AssistantAttentionMonitor;
import com.android.systemui.dreams.DreamMonitor;
import com.android.systemui.dreams.DreamOverlayAnimationsController;
import com.android.systemui.dreams.DreamOverlayCallbackController;
import com.android.systemui.dreams.DreamOverlayContainerView;
import com.android.systemui.dreams.DreamOverlayContainerViewController;
import com.android.systemui.dreams.DreamOverlayLifecycleOwner;
import com.android.systemui.dreams.DreamOverlayService;
import com.android.systemui.dreams.DreamOverlayStateController;
import com.android.systemui.dreams.DreamOverlayStatusBarItemsProvider;
import com.android.systemui.dreams.SystemDialogsCloser;
import com.android.systemui.dreams.callbacks.AssistantAttentionCallback;
import com.android.systemui.dreams.callbacks.DreamStatusBarStateCallback;
import com.android.systemui.dreams.complication.HideComplicationTouchHandler;
import com.android.systemui.dreams.complication.dagger.ComplicationComponent;
import com.android.systemui.dreams.complication.dagger.ComplicationModule;
import com.android.systemui.dreams.conditions.AssistantAttentionCondition;
import com.android.systemui.dreams.conditions.DreamCondition;
import com.android.systemui.dreams.dagger.DreamModule$$ExternalSyntheticLambda0;
import com.android.systemui.dreams.dagger.DreamModule_ProvideDreamTileConfigFactory;
import com.android.systemui.dreams.dagger.DreamOverlayComponent;
import com.android.systemui.dreams.homecontrols.DreamServiceDelegateImpl;
import com.android.systemui.dreams.homecontrols.HomeControlsDreamService;
import com.android.systemui.dreams.homecontrols.HomeControlsDreamStartable;
import com.android.systemui.dreams.homecontrols.TaskFragmentComponent;
import com.android.systemui.dreams.homecontrols.domain.interactor.HomeControlsComponentInteractor;
import com.android.systemui.dreams.touch.CommunalTouchHandler;
import com.android.systemui.dreams.touch.dagger.CommunalTouchModule;
import com.android.systemui.dreams.ui.viewmodel.DreamViewModel;
import com.android.systemui.dump.DumpHandler;
import com.android.systemui.dump.DumpManager;
import com.android.systemui.dump.LogBufferEulogizer;
import com.android.systemui.dump.LogBufferFreezer;
import com.android.systemui.dump.SystemUIAuxiliaryDumpService;
import com.android.systemui.dump.SystemUIConfigDumpable;
import com.android.systemui.emergency.EmergencyGestureModule;
import com.android.systemui.emergency.EmergencyGestureModule$emergencyGestureIntentFactory$1;
import com.android.systemui.facewidget.FaceWidgetNotificationController;
import com.android.systemui.facewidget.plugin.ExternalClockProvider;
import com.android.systemui.facewidget.plugin.FaceWidgetContainerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetDisplayLifeCycleWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetKeyguardStatusCallbackWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetKeyguardUpdateMonitorWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetKnoxStateMonitorWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetLockPatternUtilsWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetLockscreenShadeTransitionControllerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetNotificationControllerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetPluginControllerImpl;
import com.android.systemui.facewidget.plugin.FaceWidgetPluginLockManagerWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetPositionAlgorithmWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetWakefulnessLifecycleWrapper;
import com.android.systemui.facewidget.plugin.FaceWidgetWallpaperUtilsWrapper;
import com.android.systemui.facewidget.plugin.KeyguardStatusViewAlphaChangeControllerWrapper;
import com.android.systemui.facewidget.plugin.PluginFaceWidgetManager;
import com.android.systemui.flags.ConditionalRestarter;
import com.android.systemui.flags.FeatureFlags;
import com.android.systemui.flags.FeatureFlagsClassic;
import com.android.systemui.flags.FeatureFlagsClassicRelease;
import com.android.systemui.flags.FeatureFlagsReleaseStartable;
import com.android.systemui.flags.FlagDependencies;
import com.android.systemui.flags.FlagDependenciesBase;
import com.android.systemui.flags.FlagDependenciesNotifier;
import com.android.systemui.flags.FlagsCommonModule;
import com.android.systemui.flags.FlagsFactory;
import com.android.systemui.flags.FlagsModule;
import com.android.systemui.flags.NotOccludedCondition;
import com.android.systemui.flags.PluggedInCondition;
import com.android.systemui.flags.RestartDozeListener;
import com.android.systemui.flags.ScreenIdleCondition;
import com.android.systemui.flags.ServerFlagReader;
import com.android.systemui.flags.ServerFlagReaderImpl;
import com.android.systemui.flags.ServerFlagReaderModule;
import com.android.systemui.flags.SystemExitRestarter;
import com.android.systemui.flags.SystemPropertiesHelper;
import com.android.systemui.fragments.FragmentHostManager;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.globalactions.GlobalActionsComponent;
import com.android.systemui.globalactions.GlobalActionsDialogLite;
import com.android.systemui.globalactions.GlobalActionsImpl;
import com.android.systemui.globalactions.ShutdownUi;
import com.android.systemui.globalactions.data.repository.GlobalActionsRepository;
import com.android.systemui.globalactions.domain.interactor.GlobalActionsInteractor;
import com.android.systemui.graphics.ImageLoader;
import com.android.systemui.indexsearch.SystemUIIndexMediator;
import com.android.systemui.inputmethod.data.repository.InputMethodRepository;
import com.android.systemui.inputmethod.data.repository.InputMethodRepositoryImpl;
import com.android.systemui.inputmethod.domain.interactor.InputMethodInteractor;
import com.android.systemui.keyboard.BluetoothDialogDelegate;
import com.android.systemui.keyboard.KeyboardUI;
import com.android.systemui.keyboard.PhysicalKeyboardCoreStartable;
import com.android.systemui.keyboard.backlight.domain.interactor.KeyboardBacklightInteractor;
import com.android.systemui.keyboard.backlight.ui.KeyboardBacklightDialogCoordinator;
import com.android.systemui.keyboard.backlight.ui.viewmodel.BacklightDialogViewModel;
import com.android.systemui.keyboard.data.repository.KeyboardRepository;
import com.android.systemui.keyboard.data.repository.KeyboardRepositoryImpl;
import com.android.systemui.keyboard.docking.binder.KeyboardDockingIndicationViewBinder;
import com.android.systemui.keyboard.docking.domain.interactor.KeyboardDockingIndicationInteractor;
import com.android.systemui.keyboard.docking.ui.viewmodel.KeyboardDockingIndicationViewModel;
import com.android.systemui.keyboard.shortcut.NoOpStartable;
import com.android.systemui.keyboard.shortcut.ShortcutHelperModule;
import com.android.systemui.keyboard.shortcut.data.repository.ShortcutHelperRepository;
import com.android.systemui.keyboard.shortcut.domain.interactor.ShortcutHelperInteractor;
import com.android.systemui.keyboard.shortcut.ui.ShortcutHelperActivityStarter;
import com.android.systemui.keyboard.shortcut.ui.view.ShortcutHelperActivity;
import com.android.systemui.keyboard.shortcut.ui.viewmodel.ShortcutHelperViewModel;
import com.android.systemui.keyboard.stickykeys.StickyKeysLogger;
import com.android.systemui.keyboard.stickykeys.data.repository.StickyKeysRepository;
import com.android.systemui.keyboard.stickykeys.data.repository.StickyKeysRepositoryImpl;
import com.android.systemui.keyboard.stickykeys.ui.StickyKeyDialogFactory;
import com.android.systemui.keyboard.stickykeys.ui.StickyKeysIndicatorCoordinator;
import com.android.systemui.keyboard.stickykeys.ui.viewmodel.StickyKeysIndicatorViewModel;
import com.android.systemui.keyevent.data.repository.KeyEventRepository;
import com.android.systemui.keyevent.data.repository.KeyEventRepositoryImpl;
import com.android.systemui.keyevent.domain.interactor.KeyEventInteractor;
import com.android.systemui.keyevent.domain.interactor.SysUIKeyEventHandler;
import com.android.systemui.keyguard.CustomizationProvider;
import com.android.systemui.keyguard.DismissCallbackRegistry;
import com.android.systemui.keyguard.DisplayLifecycle;
import com.android.systemui.keyguard.KeyguardClickController;
import com.android.systemui.keyguard.KeyguardClickControllerImpl;
import com.android.systemui.keyguard.KeyguardEditModeController;
import com.android.systemui.keyguard.KeyguardEditModeControllerImpl;
import com.android.systemui.keyguard.KeyguardFastBioUnlockController;
import com.android.systemui.keyguard.KeyguardFixedRotationMonitor;
import com.android.systemui.keyguard.KeyguardFoldController;
import com.android.systemui.keyguard.KeyguardFoldControllerConfig;
import com.android.systemui.keyguard.KeyguardFoldControllerConfigImpl;
import com.android.systemui.keyguard.KeyguardFoldControllerDependency;
import com.android.systemui.keyguard.KeyguardFoldControllerDependencyImpl;
import com.android.systemui.keyguard.KeyguardFoldControllerImpl;
import com.android.systemui.keyguard.KeyguardLifecyclesDispatcher;
import com.android.systemui.keyguard.KeyguardSecLegacyUnlockAnimationControllerImpl;
import com.android.systemui.keyguard.KeyguardService;
import com.android.systemui.keyguard.KeyguardSliceProvider;
import com.android.systemui.keyguard.KeyguardSurfaceControllerImpl;
import com.android.systemui.keyguard.KeyguardSysDumpTrigger;
import com.android.systemui.keyguard.KeyguardUnlockAnimationController;
import com.android.systemui.keyguard.KeyguardViewConfigurator;
import com.android.systemui.keyguard.KeyguardViewMediator;
import com.android.systemui.keyguard.KeyguardViewMediatorHelper;
import com.android.systemui.keyguard.KeyguardViewMediatorHelperImpl;
import com.android.systemui.keyguard.KeyguardVisibilityMonitor;
import com.android.systemui.keyguard.LifecycleScreenStatusProvider;
import com.android.systemui.keyguard.ResourceTrimmer;
import com.android.systemui.keyguard.SafeUIKeyguardViewMediator;
import com.android.systemui.keyguard.ScreenLifecycle;
import com.android.systemui.keyguard.SurfaceVisibilityController;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.keyguard.WindowManagerLockscreenVisibilityManager;
import com.android.systemui.keyguard.WindowManagerOcclusionManager;
import com.android.systemui.keyguard.WindowVisibilityController;
import com.android.systemui.keyguard.WorkLockActivity;
import com.android.systemui.keyguard.animator.KeyguardTouchAnimator;
import com.android.systemui.keyguard.animator.KeyguardTouchDymLockInjector;
import com.android.systemui.keyguard.animator.KeyguardTouchLoggingInjector;
import com.android.systemui.keyguard.animator.KeyguardTouchSecurityInjector;
import com.android.systemui.keyguard.animator.KeyguardTouchSwipeDetector;
import com.android.systemui.keyguard.data.quickaffordance.CameraQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.DoNotDisturbQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.FlashlightQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.GlanceableHubQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.HomeControlsKeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardDataQuickAffordanceModule;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceLegacySettingSyncer;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceLocalUserSelectionManager;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceProviderClientFactoryImpl;
import com.android.systemui.keyguard.data.quickaffordance.KeyguardQuickAffordanceRemoteUserSelectionManager;
import com.android.systemui.keyguard.data.quickaffordance.MuteQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.MuteQuickAffordanceCoreStartable;
import com.android.systemui.keyguard.data.quickaffordance.QrCodeScannerKeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.QuickAccessWalletKeyguardQuickAffordanceConfig;
import com.android.systemui.keyguard.data.quickaffordance.VideoCameraQuickAffordanceConfig;
import com.android.systemui.keyguard.data.repository.BiometricSettingsRepository;
import com.android.systemui.keyguard.data.repository.BiometricSettingsRepositoryImpl;
import com.android.systemui.keyguard.data.repository.DeviceEntryFaceAuthModule;
import com.android.systemui.keyguard.data.repository.DeviceEntryFingerprintAuthRepository;
import com.android.systemui.keyguard.data.repository.DeviceEntryFingerprintAuthRepositoryImpl;
import com.android.systemui.keyguard.data.repository.DevicePostureRepository;
import com.android.systemui.keyguard.data.repository.DevicePostureRepositoryImpl;
import com.android.systemui.keyguard.data.repository.InWindowLauncherUnlockAnimationRepository;
import com.android.systemui.keyguard.data.repository.KeyguardBlueprintRepository;
import com.android.systemui.keyguard.data.repository.KeyguardClockRepository;
import com.android.systemui.keyguard.data.repository.KeyguardClockRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardOcclusionRepository;
import com.android.systemui.keyguard.data.repository.KeyguardQuickAffordanceRepository;
import com.android.systemui.keyguard.data.repository.KeyguardRepository;
import com.android.systemui.keyguard.data.repository.KeyguardRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardSmartspaceRepository;
import com.android.systemui.keyguard.data.repository.KeyguardSmartspaceRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardSurfaceBehindRepository;
import com.android.systemui.keyguard.data.repository.KeyguardSurfaceBehindRepositoryImpl;
import com.android.systemui.keyguard.data.repository.KeyguardTransitionRepository;
import com.android.systemui.keyguard.data.repository.KeyguardTransitionRepositoryImpl;
import com.android.systemui.keyguard.data.repository.LightRevealScrimRepository;
import com.android.systemui.keyguard.data.repository.LightRevealScrimRepositoryImpl;
import com.android.systemui.keyguard.data.repository.LockscreenSceneTransitionRepository;
import com.android.systemui.keyguard.data.repository.TrustRepository;
import com.android.systemui.keyguard.data.repository.TrustRepositoryImpl;
import com.android.systemui.keyguard.domain.interactor.BiometricUnlockInteractor;
import com.android.systemui.keyguard.domain.interactor.BurnInInteractor;
import com.android.systemui.keyguard.domain.interactor.DeviceEntrySideFpsOverlayInteractor;
import com.android.systemui.keyguard.domain.interactor.DevicePostureInteractor;
import com.android.systemui.keyguard.domain.interactor.DozeInteractor;
import com.android.systemui.keyguard.domain.interactor.FromAlternateBouncerTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromAodTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromDozingTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromDreamingLockscreenHostedTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromDreamingTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromGlanceableHubTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromGoneTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromLockscreenTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromOccludedTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.FromPrimaryBouncerTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.GlanceableHubTransitions;
import com.android.systemui.keyguard.domain.interactor.InWindowLauncherUnlockAnimationInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardBlueprintInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardBottomAreaInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardClockInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardDismissActionInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardDismissInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardEnabledInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardKeyEventInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardLongPressInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardOcclusionInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardQuickAffordanceInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardSmartspaceInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardSurfaceBehindInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionAuditLogger;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionBootInteractor;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionCoreStartable;
import com.android.systemui.keyguard.domain.interactor.KeyguardTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.LightRevealScrimInteractor;
import com.android.systemui.keyguard.domain.interactor.NaturalScrollingSettingObserver;
import com.android.systemui.keyguard.domain.interactor.SwipeToDismissInteractor;
import com.android.systemui.keyguard.domain.interactor.ToAodFoldTransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.TransitionInteractor;
import com.android.systemui.keyguard.domain.interactor.TrustInteractor;
import com.android.systemui.keyguard.domain.interactor.WindowManagerLockscreenVisibilityInteractor;
import com.android.systemui.keyguard.domain.interactor.scenetransition.LockscreenSceneTransitionInteractor;
import com.android.systemui.keyguard.shared.model.KeyguardBlueprint;
import com.android.systemui.keyguard.shared.quickaffordance.KeyguardQuickAffordancesMetricsLoggerImpl;
import com.android.systemui.keyguard.ui.KeyguardTransitionAnimationFlow;
import com.android.systemui.keyguard.ui.SwipeUpAnywhereGestureHandler;
import com.android.systemui.keyguard.ui.binder.AlternateBouncerViewBinder;
import com.android.systemui.keyguard.ui.binder.KeyguardDismissActionBinder;
import com.android.systemui.keyguard.ui.binder.KeyguardDismissBinder;
import com.android.systemui.keyguard.ui.binder.KeyguardSurfaceBehindParamsApplier;
import com.android.systemui.keyguard.ui.binder.SideFpsProgressBarViewBinder;
import com.android.systemui.keyguard.ui.composable.LockscreenContent;
import com.android.systemui.keyguard.ui.composable.LockscreenScene;
import com.android.systemui.keyguard.ui.composable.blueprint.CommunalBlueprint;
import com.android.systemui.keyguard.ui.composable.blueprint.ComposableLockscreenSceneBlueprint;
import com.android.systemui.keyguard.ui.composable.blueprint.DefaultBlueprint;
import com.android.systemui.keyguard.ui.composable.blueprint.ShortcutsBesideUdfpsBlueprint;
import com.android.systemui.keyguard.ui.composable.section.BottomAreaSection;
import com.android.systemui.keyguard.ui.composable.section.DefaultClockSection;
import com.android.systemui.keyguard.ui.composable.section.LockSection;
import com.android.systemui.keyguard.ui.composable.section.MediaCarouselSection;
import com.android.systemui.keyguard.ui.composable.section.NotificationSection;
import com.android.systemui.keyguard.ui.composable.section.SettingsMenuSection;
import com.android.systemui.keyguard.ui.composable.section.SmartSpaceSection;
import com.android.systemui.keyguard.ui.composable.section.StatusBarSection;
import com.android.systemui.keyguard.ui.composable.section.TopAreaSection;
import com.android.systemui.keyguard.ui.composable.section.WeatherClockSection;
import com.android.systemui.keyguard.ui.preview.KeyguardPreviewRenderer;
import com.android.systemui.keyguard.ui.preview.KeyguardPreviewRendererFactory;
import com.android.systemui.keyguard.ui.preview.KeyguardRemotePreviewManager;
import com.android.systemui.keyguard.ui.transitions.DeviceEntryIconTransition;
import com.android.systemui.keyguard.ui.view.InWindowLauncherUnlockAnimationManager;
import com.android.systemui.keyguard.ui.view.KeyguardRootView;
import com.android.systemui.keyguard.ui.view.SideFpsProgressBar;
import com.android.systemui.keyguard.ui.view.layout.KeyguardBlueprintCommandListener;
import com.android.systemui.keyguard.ui.view.layout.blueprints.DefaultKeyguardBlueprint;
import com.android.systemui.keyguard.ui.view.layout.blueprints.ShortcutsBesideUdfpsKeyguardBlueprint;
import com.android.systemui.keyguard.ui.view.layout.blueprints.SplitShadeKeyguardBlueprint;
import com.android.systemui.keyguard.ui.view.layout.sections.AccessibilityActionsSection;
import com.android.systemui.keyguard.ui.view.layout.sections.AlignShortcutsToUdfpsSection;
import com.android.systemui.keyguard.ui.view.layout.sections.AodBurnInSection;
import com.android.systemui.keyguard.ui.view.layout.sections.AodNotificationIconsSection;
import com.android.systemui.keyguard.ui.view.layout.sections.ClockSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultDeviceEntrySection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultIndicationAreaSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultNotificationStackScrollLayoutSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultSettingsPopupMenuSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultShortcutsSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultStatusBarSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultStatusViewSection;
import com.android.systemui.keyguard.ui.view.layout.sections.DefaultUdfpsAccessibilityOverlaySection;
import com.android.systemui.keyguard.ui.view.layout.sections.KeyguardSliceViewSection;
import com.android.systemui.keyguard.ui.view.layout.sections.SmartspaceSection;
import com.android.systemui.keyguard.ui.view.layout.sections.SplitShadeGuidelines;
import com.android.systemui.keyguard.ui.view.layout.sections.SplitShadeMediaSection;
import com.android.systemui.keyguard.ui.view.layout.sections.SplitShadeNotificationStackScrollLayoutSection;
import com.android.systemui.keyguard.ui.viewmodel.AccessibilityActionsViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerDependencies;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerMessageAreaViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerToAodTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerToDozingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerToOccludedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerToPrimaryBouncerTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerUdfpsIconViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AlternateBouncerWindowViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AodAlphaViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AodBurnInViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AodToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AodToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AodToOccludedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.AodToPrimaryBouncerTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.BouncerToGoneFlows;
import com.android.systemui.keyguard.ui.viewmodel.DeviceEntryBackgroundViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DeviceEntryForegroundViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DeviceEntryIconViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DozingToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DozingToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DozingToOccludedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DozingToPrimaryBouncerTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DreamingHostedToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DreamingToAodTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DreamingToGlanceableHubTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DreamingToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.DreamingToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GlanceableHubToDreamingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GlanceableHubToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GlanceableHubToOccludedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToAodTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToDozingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToDreamingLockscreenHostedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToDreamingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToGlanceableHubTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.GoneToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.InWindowLauncherAnimationViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardBlueprintViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardBottomAreaViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardClockViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardIndicationAreaViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardLongPressViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardMediaViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardPreviewClockViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardPreviewSmartspaceViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardQuickAffordancesCombinedViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardRootViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardSettingsMenuViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardSmartspaceViewModel;
import com.android.systemui.keyguard.ui.viewmodel.KeyguardSurfaceBehindViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LightRevealScrimViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenContentViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenSceneViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToAodTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToDozingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToDreamingHostedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToDreamingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToGlanceableHubTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToOccludedTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.LockscreenToPrimaryBouncerTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludedToAodTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludedToDozingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludedToGlanceableHubTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludedToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludedToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OccludingAppDeviceEntryMessageViewModel;
import com.android.systemui.keyguard.ui.viewmodel.OffToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.PrimaryBouncerToAodTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.PrimaryBouncerToDozingTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.PrimaryBouncerToGoneTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.PrimaryBouncerToLockscreenTransitionViewModel;
import com.android.systemui.keyguard.ui.viewmodel.ShadeDependentFlows;
import com.android.systemui.keyguard.ui.viewmodel.SideFpsProgressBarViewModel;
import com.android.systemui.keyguard.ui.viewmodel.WindowManagerLockscreenVisibilityViewModel;
import com.android.systemui.keyguard.util.IndicationHelper;
import com.android.systemui.keyguardimage.WallpaperImageInjectCreator;
import com.android.systemui.knox.KnoxStateMonitor;
import com.android.systemui.knox.KnoxStateMonitorImpl;
import com.android.systemui.lockstar.GoodLockLifecycle;
import com.android.systemui.lockstar.PluginLockStarManager;
import com.android.systemui.log.BouncerLogger;
import com.android.systemui.log.FaceAuthenticationLogger;
import com.android.systemui.log.LogBuffer;
import com.android.systemui.log.LogBufferFactory;
import com.android.systemui.log.LogcatEchoTracker;
import com.android.systemui.log.MediaLogWriter;
import com.android.systemui.log.MediaLogger;
import com.android.systemui.log.MediaLoggerImpl;
import com.android.systemui.log.NoLogcatEchoTracker;
import com.android.systemui.log.QuickPanelExternalLogger;
import com.android.systemui.log.SamsungServiceLogger;
import com.android.systemui.log.SamsungServiceLoggerImpl;
import com.android.systemui.log.ScreenDecorationsLogger;
import com.android.systemui.log.SessionTracker;
import com.android.systemui.log.SideFpsLogger;
import com.android.systemui.log.echo.LogcatEchoTrackerDebug;
import com.android.systemui.log.echo.LogcatEchoTrackerProd;
import com.android.systemui.log.table.TableLogBuffer;
import com.android.systemui.log.table.TableLogBufferFactory;
import com.android.systemui.logging.NotiCinemaLogger;
import com.android.systemui.logging.PanelScreenShotBufferLogger;
import com.android.systemui.mdm.MdmOverlayContainer;
import com.android.systemui.media.MediaBluetoothHelper;
import com.android.systemui.media.MediaOutputHelper;
import com.android.systemui.media.MediaOutputView;
import com.android.systemui.media.RingtonePlayer;
import com.android.systemui.media.SecMediaControlPanel;
import com.android.systemui.media.SecMediaHost;
import com.android.systemui.media.SecMediaPlayerData;
import com.android.systemui.media.SecSeekBarViewModel;
import com.android.systemui.media.SubscreenMusicWidgetController;
import com.android.systemui.media.controls.data.repository.MediaDataRepository;
import com.android.systemui.media.controls.data.repository.MediaFilterRepository;
import com.android.systemui.media.controls.domain.MediaDomainModule;
import com.android.systemui.media.controls.domain.pipeline.LegacyMediaDataFilterImpl;
import com.android.systemui.media.controls.domain.pipeline.LegacyMediaDataManagerImpl;
import com.android.systemui.media.controls.domain.pipeline.MediaDataCombineLatest;
import com.android.systemui.media.controls.domain.pipeline.MediaDataFilterImpl;
import com.android.systemui.media.controls.domain.pipeline.MediaDataManager;
import com.android.systemui.media.controls.domain.pipeline.MediaDataProcessor;
import com.android.systemui.media.controls.domain.pipeline.MediaDeviceManager;
import com.android.systemui.media.controls.domain.pipeline.MediaLoadingLogger;
import com.android.systemui.media.controls.domain.pipeline.MediaSessionBasedFilter;
import com.android.systemui.media.controls.domain.pipeline.MediaTimeoutListener;
import com.android.systemui.media.controls.domain.pipeline.MediaTimeoutLogger;
import com.android.systemui.media.controls.domain.pipeline.interactor.MediaCarouselInteractor;
import com.android.systemui.media.controls.domain.pipeline.interactor.MediaControlInteractor;
import com.android.systemui.media.controls.domain.pipeline.interactor.MediaRecommendationsInteractor;
import com.android.systemui.media.controls.domain.pipeline.interactor.factory.MediaControlInteractorFactory;
import com.android.systemui.media.controls.domain.resume.MediaBrowserFactory;
import com.android.systemui.media.controls.domain.resume.MediaResumeListener;
import com.android.systemui.media.controls.domain.resume.ResumeMediaBrowserFactory;
import com.android.systemui.media.controls.domain.resume.ResumeMediaBrowserLogger;
import com.android.systemui.media.controls.shared.model.SmartspaceMediaDataProvider;
import com.android.systemui.media.controls.ui.controller.KeyguardMediaController;
import com.android.systemui.media.controls.ui.controller.KeyguardMediaControllerLogger;
import com.android.systemui.media.controls.ui.controller.MediaCarouselController;
import com.android.systemui.media.controls.ui.controller.MediaCarouselControllerLogger;
import com.android.systemui.media.controls.ui.controller.MediaControlPanel;
import com.android.systemui.media.controls.ui.controller.MediaHierarchyManager;
import com.android.systemui.media.controls.ui.controller.MediaHostStatesManager;
import com.android.systemui.media.controls.ui.controller.MediaViewController;
import com.android.systemui.media.controls.ui.controller.MediaViewLogger;
import com.android.systemui.media.controls.ui.view.MediaHost;
import com.android.systemui.media.controls.ui.viewmodel.MediaCarouselViewModel;
import com.android.systemui.media.controls.ui.viewmodel.MediaRecommendationsViewModel;
import com.android.systemui.media.controls.ui.viewmodel.SeekBarViewModel;
import com.android.systemui.media.controls.util.LocalMediaManagerFactory;
import com.android.systemui.media.controls.util.MediaControllerFactory;
import com.android.systemui.media.controls.util.MediaFeatureFlag;
import com.android.systemui.media.controls.util.MediaFlags;
import com.android.systemui.media.controls.util.MediaSessionLegacyHelperWrapper;
import com.android.systemui.media.controls.util.MediaUiEventLogger;
import com.android.systemui.media.dialog.MediaOutputBroadcastDialogManager;
import com.android.systemui.media.dialog.MediaOutputController;
import com.android.systemui.media.dialog.MediaOutputDialogManager;
import com.android.systemui.media.dialog.MediaOutputDialogReceiver;
import com.android.systemui.media.dialog.MediaOutputSwitcherDialogUI;
import com.android.systemui.media.mediaoutput.MediaOutputController;
import com.android.systemui.media.mediaoutput.activity.MediaOutputActivity;
import com.android.systemui.media.mediaoutput.controller.device.AudioMirroringDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.AuracastDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.BluetoothDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.BuiltInDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.ChromeCastDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.DisconnectedDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.MusicShareDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.RemoteDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.SmartMirroringDeviceController;
import com.android.systemui.media.mediaoutput.controller.device.WifiDisplayDeviceController;
import com.android.systemui.media.mediaoutput.dagger.MediaOutputModule;
import com.android.systemui.media.mediaoutput.dagger.MediaOutputModule_Companion_ProvideDataStoreFactory;
import com.android.systemui.media.mediaoutput.dagger.SavedStateHandleAssisted;
import com.android.systemui.media.mediaoutput.viewmodel.DeviceAudioPathViewModel;
import com.android.systemui.media.mediaoutput.viewmodel.LabsViewModel;
import com.android.systemui.media.mediaoutput.viewmodel.MediaDeviceViewModel;
import com.android.systemui.media.mediaoutput.viewmodel.MediaSessionViewModel;
import com.android.systemui.media.mediaoutput.viewmodel.SessionAudioPathViewModel;
import com.android.systemui.media.mediaoutput.viewmodel.SettingViewModel;
import com.android.systemui.media.mediaoutput.viewmodel.ViewModelFactory;
import com.android.systemui.media.muteawait.MediaMuteAwaitConnectionCli;
import com.android.systemui.media.muteawait.MediaMuteAwaitConnectionManagerFactory;
import com.android.systemui.media.muteawait.MediaMuteAwaitLogger;
import com.android.systemui.media.nearby.NearbyMediaDevicesLogger;
import com.android.systemui.media.nearby.NearbyMediaDevicesManager;
import com.android.systemui.media.taptotransfer.MediaTttCommandLineHelper;
import com.android.systemui.media.taptotransfer.MediaTttFlags;
import com.android.systemui.media.taptotransfer.receiver.MediaTttChipControllerReceiver;
import com.android.systemui.media.taptotransfer.receiver.MediaTttReceiverLogger;
import com.android.systemui.media.taptotransfer.receiver.MediaTttReceiverRippleController;
import com.android.systemui.media.taptotransfer.receiver.MediaTttReceiverUiEventLogger;
import com.android.systemui.media.taptotransfer.sender.MediaTttSenderCoordinator;
import com.android.systemui.media.taptotransfer.sender.MediaTttSenderLogger;
import com.android.systemui.media.taptotransfer.sender.MediaTttSenderUiEventLogger;
import com.android.systemui.mediaprojection.MediaProjectionMetricsLogger;
import com.android.systemui.mediaprojection.MediaProjectionServiceHelper;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorActivity;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorController;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorModule;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorResultHandler;
import com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorView;
import com.android.systemui.mediaprojection.appselector.MediaProjectionBlockerEmptyStateProvider;
import com.android.systemui.mediaprojection.appselector.data.ActivityTaskManagerLabelLoader;
import com.android.systemui.mediaprojection.appselector.data.ActivityTaskManagerThumbnailLoader;
import com.android.systemui.mediaprojection.appselector.data.BadgedAppIconLoader;
import com.android.systemui.mediaprojection.appselector.data.BasicAppIconLoader;
import com.android.systemui.mediaprojection.appselector.data.BasicPackageManagerAppIconLoader;
import com.android.systemui.mediaprojection.appselector.data.RecentTask;
import com.android.systemui.mediaprojection.appselector.data.RecentTaskLabelLoader;
import com.android.systemui.mediaprojection.appselector.data.RecentTaskListProvider;
import com.android.systemui.mediaprojection.appselector.data.RecentTaskThumbnailLoader;
import com.android.systemui.mediaprojection.appselector.data.ShellRecentTaskListProvider;
import com.android.systemui.mediaprojection.appselector.view.MediaProjectionRecentsViewController;
import com.android.systemui.mediaprojection.appselector.view.RecentTaskViewHolder;
import com.android.systemui.mediaprojection.appselector.view.RecentTasksAdapter;
import com.android.systemui.mediaprojection.appselector.view.TaskPreviewSizeProvider;
import com.android.systemui.mediaprojection.appselector.view.WindowMetricsProviderImpl;
import com.android.systemui.mediaprojection.data.repository.MediaProjectionManagerRepository;
import com.android.systemui.mediaprojection.data.repository.MediaProjectionRepository;
import com.android.systemui.mediaprojection.devicepolicy.MediaProjectionDevicePolicyModule;
import com.android.systemui.mediaprojection.devicepolicy.MediaProjectionDevicePolicyModule_PersonalUserHandleFactory;
import com.android.systemui.mediaprojection.devicepolicy.ScreenCaptureDevicePolicyResolver;
import com.android.systemui.mediaprojection.devicepolicy.ScreenCaptureDisabledDialogDelegate;
import com.android.systemui.mediaprojection.permission.MediaProjectionPermissionActivity;
import com.android.systemui.mediaprojection.taskswitcher.MediaProjectionTaskSwitcherCoreStartable;
import com.android.systemui.mediaprojection.taskswitcher.data.repository.ActivityTaskManagerTasksRepository;
import com.android.systemui.mediaprojection.taskswitcher.data.repository.TasksRepository;
import com.android.systemui.mediaprojection.taskswitcher.domain.interactor.TaskSwitchInteractor;
import com.android.systemui.mediaprojection.taskswitcher.ui.TaskSwitcherNotificationCoordinator;
import com.android.systemui.mediaprojection.taskswitcher.ui.viewmodel.TaskSwitcherNotificationViewModel;
import com.android.systemui.model.SceneContainerPlugin;
import com.android.systemui.model.SysUiState;
import com.android.systemui.motiontool.MotionToolModule;
import com.android.systemui.motiontool.MotionToolModule_Companion_ProvideDdmHandleMotionToolFactory;
import com.android.systemui.motiontool.MotionToolModule_Companion_ProvideMotionToolManagerFactory;
import com.android.systemui.motiontool.MotionToolStartable;
import com.android.systemui.navigationbar.NavBarButtonClickLogger;
import com.android.systemui.navigationbar.NavBarHelper;
import com.android.systemui.navigationbar.NavbarOrientationTrackingLogger;
import com.android.systemui.navigationbar.NavigationBar;
import com.android.systemui.navigationbar.NavigationBarComponent;
import com.android.systemui.navigationbar.NavigationBarController;
import com.android.systemui.navigationbar.NavigationBarControllerImpl;
import com.android.systemui.navigationbar.NavigationBarFrame;
import com.android.systemui.navigationbar.NavigationBarTransitions;
import com.android.systemui.navigationbar.NavigationBarView;
import com.android.systemui.navigationbar.NavigationModeController;
import com.android.systemui.navigationbar.SafeUINavigationBar;
import com.android.systemui.navigationbar.SecTaskBarManagerImpl;
import com.android.systemui.navigationbar.TaskbarDelegate;
import com.android.systemui.navigationbar.bandaid.BandAidPackFactory;
import com.android.systemui.navigationbar.bandaid.BandAidPackFactoryBase;
import com.android.systemui.navigationbar.buttons.DeadZone;
import com.android.systemui.navigationbar.gestural.BackGestureTfClassifierProvider;
import com.android.systemui.navigationbar.gestural.BackPanelController;
import com.android.systemui.navigationbar.gestural.CornerGestureHandler;
import com.android.systemui.navigationbar.gestural.EdgeBackGestureHandler;
import com.android.systemui.navigationbar.gestural.GestureHintAnimator;
import com.android.systemui.navigationbar.interactor.InteractorFactory;
import com.android.systemui.navigationbar.layout.LayoutProviderContainerImpl;
import com.android.systemui.navigationbar.remoteview.NavBarRemoteViewManager;
import com.android.systemui.navigationbar.store.NavBarStore;
import com.android.systemui.navigationbar.store.NavBarStoreImpl;
import com.android.systemui.navigationbar.util.StoreLogUtil;
import com.android.systemui.notetask.LaunchNotesRoleSettingsTrampolineActivity;
import com.android.systemui.notetask.NoteTaskBubblesController;
import com.android.systemui.notetask.NoteTaskController;
import com.android.systemui.notetask.NoteTaskControllerUpdateService;
import com.android.systemui.notetask.NoteTaskEventLogger;
import com.android.systemui.notetask.NoteTaskInfoResolver;
import com.android.systemui.notetask.NoteTaskInitializer;
import com.android.systemui.notetask.NoteTaskModule;
import com.android.systemui.notetask.quickaffordance.NoteTaskQuickAffordanceConfig;
import com.android.systemui.notetask.shortcut.CreateNoteTaskShortcutActivity;
import com.android.systemui.notetask.shortcut.LaunchNoteTaskActivity;
import com.android.systemui.notification.FullExpansionPanelNotiAlphaController;
import com.android.systemui.notification.NotificationBackupRestoreManager;
import com.android.systemui.notifications.ui.composable.NotificationsShadeScene;
import com.android.systemui.notifications.ui.composable.NotificationsShadeSessionModule;
import com.android.systemui.notifications.ui.viewmodel.NotificationsShadeSceneViewModel;
import com.android.systemui.people.PeopleProvider;
import com.android.systemui.people.PeopleSpaceActivity;
import com.android.systemui.people.data.repository.PeopleTileRepository;
import com.android.systemui.people.data.repository.PeopleTileRepositoryImpl;
import com.android.systemui.people.data.repository.PeopleWidgetRepository;
import com.android.systemui.people.data.repository.PeopleWidgetRepositoryImpl;
import com.android.systemui.people.ui.viewmodel.PeopleViewModel;
import com.android.systemui.people.widget.LaunchConversationActivity;
import com.android.systemui.people.widget.PeopleSpaceWidgetManager;
import com.android.systemui.people.widget.PeopleSpaceWidgetPinnedReceiver;
import com.android.systemui.people.widget.PeopleSpaceWidgetProvider;
import com.android.systemui.plank.ApiLogger;
import com.android.systemui.plank.command.PlankDispatcherFactory;
import com.android.systemui.plank.dagger.PlankComponent;
import com.android.systemui.plank.dagger.PlankModule;
import com.android.systemui.plank.monitor.TestInputMonitor;
import com.android.systemui.plank.protocol.Protocol;
import com.android.systemui.plank.protocol.ProtocolManagerImpl;
import com.android.systemui.plank.protocol.TestProtocolProvider;
import com.android.systemui.pluginlock.PluginLockData;
import com.android.systemui.pluginlock.PluginLockDataImpl;
import com.android.systemui.pluginlock.PluginLockDelegateApp;
import com.android.systemui.pluginlock.PluginLockDelegateSysUi;
import com.android.systemui.pluginlock.PluginLockInstancePolicy;
import com.android.systemui.pluginlock.PluginLockManager;
import com.android.systemui.pluginlock.PluginLockManagerImpl;
import com.android.systemui.pluginlock.PluginLockMediator;
import com.android.systemui.pluginlock.PluginLockMediatorImpl;
import com.android.systemui.pluginlock.PluginLockUtils;
import com.android.systemui.pluginlock.PluginWallpaperManager;
import com.android.systemui.pluginlock.PluginWallpaperManagerImpl;
import com.android.systemui.pluginlock.component.PluginLockShortcutTask;
import com.android.systemui.pluginlock.utils.DumpUtils;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.BcSmartspaceDataPlugin;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.FalsingManager;
import com.android.systemui.plugins.GlobalActions;
import com.android.systemui.plugins.PluginDependencyProvider;
import com.android.systemui.plugins.PluginEnablerImpl;
import com.android.systemui.plugins.PluginManager;
import com.android.systemui.plugins.PluginsModule_ProvidePluginInstanceManagerFactoryFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginDebugFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginExecutorFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginInstanceFactoryFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginManagerFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPluginPrefsFactory;
import com.android.systemui.plugins.PluginsModule_ProvidesPrivilegedPluginsFactory;
import com.android.systemui.plugins.VolumeDialog;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.clocks.ClockMessageBuffers;
import com.android.systemui.plugins.qs.QSFactory;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.plugins.subscreen.SubRoom;
import com.android.systemui.popup.PopupUI;
import com.android.systemui.popup.SamsungScreenPinningRequest;
import com.android.systemui.popup.util.KeyguardUpdateMonitorWrapper;
import com.android.systemui.popup.util.PopupUIIntentWrapper;
import com.android.systemui.popup.util.PopupUIToastWrapper;
import com.android.systemui.popup.util.PopupUIUtil;
import com.android.systemui.popup.view.PopupUIAlertDialogFactory;
import com.android.systemui.popup.viewmodel.DataConnectionViewModel;
import com.android.systemui.popup.viewmodel.MWOverheatWarningViewModel;
import com.android.systemui.popup.viewmodel.MobileDeviceWarningViewModel;
import com.android.systemui.popup.viewmodel.SimTrayProtectionViewModel;
import com.android.systemui.power.DozeChargingHelper;
import com.android.systemui.power.EnhancedEstimates;
import com.android.systemui.power.EnhancedEstimatesImpl;
import com.android.systemui.power.SecPowerNotificationWarnings;
import com.android.systemui.power.SecPowerUI;
import com.android.systemui.power.SecWarningsUI;
import com.android.systemui.power.data.repository.PowerRepository;
import com.android.systemui.power.data.repository.PowerRepositoryImpl;
import com.android.systemui.power.domain.interactor.PowerInteractor;
import com.android.systemui.privacy.AppOpsPrivacyItemMonitor;
import com.android.systemui.privacy.OngoingPrivacyChip;
import com.android.systemui.privacy.PrivacyConfig;
import com.android.systemui.privacy.PrivacyDialogController;
import com.android.systemui.privacy.PrivacyDialogControllerV2;
import com.android.systemui.privacy.PrivacyItemController;
import com.android.systemui.privacy.PrivacyItemMonitor;
import com.android.systemui.privacy.logging.PrivacyLogger;
import com.android.systemui.process.ProcessWrapper;
import com.android.systemui.process.condition.SystemProcessCondition;
import com.android.systemui.qp.SubroomQuickSettingsBaseView;
import com.android.systemui.qp.SubscreenQsPanelController;
import com.android.systemui.qp.qs.tiles.SBlueLightFilterSWTile;
import com.android.systemui.qp.util.SubscreenUtil;
import com.android.systemui.qrcodescanner.controller.QRCodeScannerController;
import com.android.systemui.qrcodescanner.dagger.QRCodeScannerModule;
import com.android.systemui.qrcodescanner.dagger.QRCodeScannerModule_Companion_ProvideQRCodeScannerTileConfigFactory;
import com.android.systemui.qs.AutoAddTracker;
import com.android.systemui.qs.FgsManagerController;
import com.android.systemui.qs.FgsManagerControllerImpl;
import com.android.systemui.qs.FooterActionsController;
import com.android.systemui.qs.HeaderPrivacyIconsController;
import com.android.systemui.qs.InjectionInflationController;
import com.android.systemui.qs.QSBackupRestoreManager;
import com.android.systemui.qs.QSContainerImpl;
import com.android.systemui.qs.QSContainerImplController;
import com.android.systemui.qs.QSDisableFlagsLogger;
import com.android.systemui.qs.QSFragmentLegacy;
import com.android.systemui.qs.QSFragmentStartable;
import com.android.systemui.qs.QSGuideDialog;
import com.android.systemui.qs.QSHost;
import com.android.systemui.qs.QSHostAdapter;
import com.android.systemui.qs.QSImpl;
import com.android.systemui.qs.QSPanelHost;
import com.android.systemui.qs.QSSecurityFooter;
import com.android.systemui.qs.QSSecurityFooterUtils;
import com.android.systemui.qs.QSSquishinessController;
import com.android.systemui.qs.QSTileHost;
import com.android.systemui.qs.QsEventLogger;
import com.android.systemui.qs.QsEventLoggerImpl;
import com.android.systemui.qs.ReduceBrightColorsController;
import com.android.systemui.qs.ReduceBrightColorsControllerImpl;
import com.android.systemui.qs.SecAutoTileManager;
import com.android.systemui.qs.SecQSCoverResourcePicker;
import com.android.systemui.qs.SecQSDetail;
import com.android.systemui.qs.SecQSDetailController;
import com.android.systemui.qs.SecQSGradationDrawableController;
import com.android.systemui.qs.SecQSGradationDrawableView;
import com.android.systemui.qs.SecQSPanel;
import com.android.systemui.qs.SecQSPanelController;
import com.android.systemui.qs.SecQSPanelResourcePicker;
import com.android.systemui.qs.SecQuickQSPanel;
import com.android.systemui.qs.SecQuickQSPanelController;
import com.android.systemui.qs.SecQuickStatusBarHeader;
import com.android.systemui.qs.SecQuickStatusBarHeaderController;
import com.android.systemui.qs.SecSTQuickControlRequestReceiver;
import com.android.systemui.qs.animator.ImmersiveScrollAnimator;
import com.android.systemui.qs.animator.PanelSplitOpenAnimator;
import com.android.systemui.qs.animator.PanelTransitionAnimator;
import com.android.systemui.qs.animator.QsDetailPopupAnimator;
import com.android.systemui.qs.animator.QsExpandAnimator;
import com.android.systemui.qs.animator.QsOpenAnimator;
import com.android.systemui.qs.animator.QsTransitionAnimator;
import com.android.systemui.qs.animator.SecQSImplAnimatorManager;
import com.android.systemui.qs.bar.BarController;
import com.android.systemui.qs.bar.BarFactory;
import com.android.systemui.qs.bar.BottomLargeTileBar;
import com.android.systemui.qs.bar.BrightnessBar;
import com.android.systemui.qs.bar.BrightnessMediaDevicesBar;
import com.android.systemui.qs.bar.BrightnessVolumeBar;
import com.android.systemui.qs.bar.ColoredBGHelper;
import com.android.systemui.qs.bar.MediaDevicesBar;
import com.android.systemui.qs.bar.MultiSIMPreferredSlotBar;
import com.android.systemui.qs.bar.QSMediaPlayerBar;
import com.android.systemui.qs.bar.QuickControlBar;
import com.android.systemui.qs.bar.SecurityFooterBar;
import com.android.systemui.qs.bar.SmartViewLargeTileBar;
import com.android.systemui.qs.bar.TileChunkLayoutBar;
import com.android.systemui.qs.bar.TopLargeTileBar;
import com.android.systemui.qs.bar.VideoCallMicModeBar;
import com.android.systemui.qs.bar.VolumeBar;
import com.android.systemui.qs.bar.VolumeSeekBar;
import com.android.systemui.qs.bar.domain.interactor.BarOrderInteractor;
import com.android.systemui.qs.bar.repository.BarOrderRepository;
import com.android.systemui.qs.buttons.QSButtonsContainer;
import com.android.systemui.qs.buttons.QSButtonsContainerController;
import com.android.systemui.qs.customize.QSCPopupButtonController;
import com.android.systemui.qs.customize.QSCustomizer;
import com.android.systemui.qs.customize.QSCustomizerController;
import com.android.systemui.qs.customize.SecQSSettingEditResources;
import com.android.systemui.qs.customize.TileAdapter;
import com.android.systemui.qs.customize.TileQueryHelper;
import com.android.systemui.qs.customize.view.QSCMainView;
import com.android.systemui.qs.customize.viewcontroller.QSCMainViewController;
import com.android.systemui.qs.dagger.QSFlagsModule;
import com.android.systemui.qs.dagger.QSFragmentComponent;
import com.android.systemui.qs.dagger.QSHostModule;
import com.android.systemui.qs.dagger.QSSceneComponent;
import com.android.systemui.qs.dagger.QSScopeModule;
import com.android.systemui.qs.dagger.QSScopeModule_Companion_ProvidesHeaderQSPanelHostFactory;
import com.android.systemui.qs.dagger.QSScopeModule_Companion_ProvidesPanelQSPanelHostFactory;
import com.android.systemui.qs.dagger.QSScopeModule_ProvideSecQSPanelFactory;
import com.android.systemui.qs.dagger.QSScopeModule_ProvideThemedContextFactory;
import com.android.systemui.qs.dagger.QSScopeModule_ProvidesQSButtonsContainerFactory;
import com.android.systemui.qs.dagger.QSScopeModule_ProvidesQSContainerImplFactory;
import com.android.systemui.qs.dagger.QSScopeModule_ProvidesQuickStatusBarHeaderFactory;
import com.android.systemui.qs.dagger.QSScopeModule_ProvidesSecQuickQSPanelFactory;
import com.android.systemui.qs.external.CustomTile;
import com.android.systemui.qs.external.CustomTileStatePersisterImpl;
import com.android.systemui.qs.external.PackageManagerAdapter;
import com.android.systemui.qs.external.TileLifecycleManager;
import com.android.systemui.qs.external.TileServiceRequestController;
import com.android.systemui.qs.external.TileServices;
import com.android.systemui.qs.footer.data.repository.ForegroundServicesRepository;
import com.android.systemui.qs.footer.data.repository.ForegroundServicesRepositoryImpl;
import com.android.systemui.qs.footer.domain.interactor.FooterActionsInteractor;
import com.android.systemui.qs.footer.domain.interactor.FooterActionsInteractorImpl;
import com.android.systemui.qs.footer.ui.viewmodel.FooterActionsViewModel;
import com.android.systemui.qs.logging.QSLogger;
import com.android.systemui.qs.panels.dagger.PanelsModule;
import com.android.systemui.qs.panels.data.repository.GridLayoutTypeRepository;
import com.android.systemui.qs.panels.data.repository.GridLayoutTypeRepositoryImpl;
import com.android.systemui.qs.panels.data.repository.IconAndNameCustomRepository;
import com.android.systemui.qs.panels.data.repository.IconTilesRepository;
import com.android.systemui.qs.panels.data.repository.IconTilesRepositoryImpl;
import com.android.systemui.qs.panels.data.repository.InfiniteGridSizeRepository;
import com.android.systemui.qs.panels.data.repository.QSPreferencesRepository;
import com.android.systemui.qs.panels.data.repository.StockTilesRepository;
import com.android.systemui.qs.panels.domain.interactor.EditTilesListInteractor;
import com.android.systemui.qs.panels.domain.interactor.GridConsistencyInteractor;
import com.android.systemui.qs.panels.domain.interactor.GridLayoutTypeInteractor;
import com.android.systemui.qs.panels.domain.interactor.GridTypeConsistencyInteractor;
import com.android.systemui.qs.panels.domain.interactor.IconLabelVisibilityInteractor;
import com.android.systemui.qs.panels.domain.interactor.IconTilesInteractor;
import com.android.systemui.qs.panels.domain.interactor.InfiniteGridConsistencyInteractor;
import com.android.systemui.qs.panels.domain.interactor.InfiniteGridSizeInteractor;
import com.android.systemui.qs.panels.domain.interactor.NewTilesAvailabilityInteractor;
import com.android.systemui.qs.panels.domain.interactor.NoopGridConsistencyInteractor;
import com.android.systemui.qs.panels.domain.interactor.QSPreferencesInteractor;
import com.android.systemui.qs.panels.domain.interactor.TilesAvailabilityInteractor;
import com.android.systemui.qs.panels.shared.model.GridLayoutType;
import com.android.systemui.qs.panels.shared.model.InfiniteGridLayoutType;
import com.android.systemui.qs.panels.shared.model.PartitionedGridLayoutType;
import com.android.systemui.qs.panels.shared.model.StretchedGridLayoutType;
import com.android.systemui.qs.panels.ui.compose.GridLayout;
import com.android.systemui.qs.panels.ui.compose.InfiniteGridLayout;
import com.android.systemui.qs.panels.ui.compose.PartitionedGridLayout;
import com.android.systemui.qs.panels.ui.compose.StretchedGridLayout;
import com.android.systemui.qs.panels.ui.viewmodel.EditModeViewModel;
import com.android.systemui.qs.panels.ui.viewmodel.IconLabelVisibilityViewModel;
import com.android.systemui.qs.panels.ui.viewmodel.IconLabelVisibilityViewModelImpl;
import com.android.systemui.qs.panels.ui.viewmodel.IconTilesViewModel;
import com.android.systemui.qs.panels.ui.viewmodel.IconTilesViewModelImpl;
import com.android.systemui.qs.panels.ui.viewmodel.InfiniteGridSizeViewModel;
import com.android.systemui.qs.panels.ui.viewmodel.InfiniteGridSizeViewModelImpl;
import com.android.systemui.qs.panels.ui.viewmodel.PartitionedGridViewModel;
import com.android.systemui.qs.panels.ui.viewmodel.TileGridViewModel;
import com.android.systemui.qs.pipeline.dagger.BaseAutoAddableModule_Companion_ProvidesA11yShortcutAutoAddableFactory;
import com.android.systemui.qs.pipeline.dagger.BaseAutoAddableModule_Companion_ProvidesAutoAddableSettingFactory;
import com.android.systemui.qs.pipeline.dagger.QSAutoAddModule;
import com.android.systemui.qs.pipeline.dagger.QSPipelineModule;
import com.android.systemui.qs.pipeline.data.model.RestoreProcessor;
import com.android.systemui.qs.pipeline.data.repository.AutoAddRepository;
import com.android.systemui.qs.pipeline.data.repository.AutoAddSettingRepository;
import com.android.systemui.qs.pipeline.data.repository.CustomTileAddedRepository;
import com.android.systemui.qs.pipeline.data.repository.CustomTileAddedSharedPrefsRepository;
import com.android.systemui.qs.pipeline.data.repository.DefaultTilesQSHostRepository;
import com.android.systemui.qs.pipeline.data.repository.DefaultTilesRepository;
import com.android.systemui.qs.pipeline.data.repository.InstalledTilesComponentRepository;
import com.android.systemui.qs.pipeline.data.repository.InstalledTilesComponentRepositoryImpl;
import com.android.systemui.qs.pipeline.data.repository.MinimumTilesRepository;
import com.android.systemui.qs.pipeline.data.repository.MinimumTilesResourceRepository;
import com.android.systemui.qs.pipeline.data.repository.QSSettingsRestoredBroadcastRepository;
import com.android.systemui.qs.pipeline.data.repository.QSSettingsRestoredRepository;
import com.android.systemui.qs.pipeline.data.repository.TileSpecRepository;
import com.android.systemui.qs.pipeline.data.repository.TileSpecSettingsRepository;
import com.android.systemui.qs.pipeline.data.repository.UserAutoAddRepository;
import com.android.systemui.qs.pipeline.data.repository.UserTileSpecRepository;
import com.android.systemui.qs.pipeline.data.restoreprocessors.WorkTileRestoreProcessor;
import com.android.systemui.qs.pipeline.domain.autoaddable.A11yShortcutAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.AutoAddableSetting;
import com.android.systemui.qs.pipeline.domain.autoaddable.CastAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.DataSaverAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.HotspotAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.NightDisplayAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.ReduceBrightColorsAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.WalletAutoAddable;
import com.android.systemui.qs.pipeline.domain.autoaddable.WorkTileAutoAddable;
import com.android.systemui.qs.pipeline.domain.interactor.AccessibilityTilesInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.AutoAddInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.CurrentTilesInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.CurrentTilesInteractorImpl;
import com.android.systemui.qs.pipeline.domain.interactor.MinimumTilesInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.PanelInteractor;
import com.android.systemui.qs.pipeline.domain.interactor.PanelInteractorImpl;
import com.android.systemui.qs.pipeline.domain.interactor.RestoreReconciliationInteractor;
import com.android.systemui.qs.pipeline.domain.model.AutoAddable;
import com.android.systemui.qs.pipeline.domain.startable.QSPipelineCoreStartable;
import com.android.systemui.qs.pipeline.shared.QSPipelineFlagsRepository;
import com.android.systemui.qs.pipeline.shared.TileSpec;
import com.android.systemui.qs.pipeline.shared.logging.QSPipelineLogger;
import com.android.systemui.qs.tileimpl.QSFactoryImpl;
import com.android.systemui.qs.tiles.AirplaneModeTile;
import com.android.systemui.qs.tiles.AlarmTile;
import com.android.systemui.qs.tiles.BatterySaverTile;
import com.android.systemui.qs.tiles.BlueLightFilterTile;
import com.android.systemui.qs.tiles.CameraToggleTile;
import com.android.systemui.qs.tiles.CastTile;
import com.android.systemui.qs.tiles.ColorAdjustmentTile;
import com.android.systemui.qs.tiles.ColorCorrectionTile;
import com.android.systemui.qs.tiles.ColorInversionTile;
import com.android.systemui.qs.tiles.ColorLensTile;
import com.android.systemui.qs.tiles.DataSaverTile;
import com.android.systemui.qs.tiles.DndTile;
import com.android.systemui.qs.tiles.DreamTile;
import com.android.systemui.qs.tiles.FlashlightTile;
import com.android.systemui.qs.tiles.FontScalingTile;
import com.android.systemui.qs.tiles.HearingDevicesTile;
import com.android.systemui.qs.tiles.HighContrastFontTile;
import com.android.systemui.qs.tiles.HotspotTile;
import com.android.systemui.qs.tiles.InternetTile;
import com.android.systemui.qs.tiles.InternetTileNewImpl;
import com.android.systemui.qs.tiles.LocationTile;
import com.android.systemui.qs.tiles.MediaOutputTile;
import com.android.systemui.qs.tiles.MicrophoneToggleTile;
import com.android.systemui.qs.tiles.MobileDataTile;
import com.android.systemui.qs.tiles.NfcTile;
import com.android.systemui.qs.tiles.NightDisplayTile;
import com.android.systemui.qs.tiles.OneHandedModeTile;
import com.android.systemui.qs.tiles.QRCodeScannerTile;
import com.android.systemui.qs.tiles.QuickAccessWalletTile;
import com.android.systemui.qs.tiles.RecordIssueTile;
import com.android.systemui.qs.tiles.ReduceBrightColorsTile;
import com.android.systemui.qs.tiles.SBluetoothTile;
import com.android.systemui.qs.tiles.SRotationLockTile;
import com.android.systemui.qs.tiles.SWorkModeTile;
import com.android.systemui.qs.tiles.ScreenCaptureTile;
import com.android.systemui.qs.tiles.ScreenRecordTile;
import com.android.systemui.qs.tiles.SecDeviceControlsTile;
import com.android.systemui.qs.tiles.SoundModeTile;
import com.android.systemui.qs.tiles.SyncTile;
import com.android.systemui.qs.tiles.TileJavaAdapter;
import com.android.systemui.qs.tiles.UiModeNightTile;
import com.android.systemui.qs.tiles.UserDetailView;
import com.android.systemui.qs.tiles.WifiTile;
import com.android.systemui.qs.tiles.base.actions.QSTileIntentUserInputHandler;
import com.android.systemui.qs.tiles.base.actions.QSTileIntentUserInputHandlerImpl;
import com.android.systemui.qs.tiles.base.analytics.QSTileAnalytics;
import com.android.systemui.qs.tiles.base.interactor.DisabledByPolicyInteractor;
import com.android.systemui.qs.tiles.base.interactor.DisabledByPolicyInteractorImpl;
import com.android.systemui.qs.tiles.base.interactor.QSTileAvailabilityInteractor;
import com.android.systemui.qs.tiles.base.interactor.QSTileDataInteractor;
import com.android.systemui.qs.tiles.base.interactor.QSTileDataToStateMapper;
import com.android.systemui.qs.tiles.base.interactor.QSTileUserActionInteractor;
import com.android.systemui.qs.tiles.base.interactor.RestrictedLockProxy;
import com.android.systemui.qs.tiles.base.logging.QSTileLogger;
import com.android.systemui.qs.tiles.base.viewmodel.QSTileCoroutineScopeFactory;
import com.android.systemui.qs.tiles.base.viewmodel.QSTileViewModelFactory$Component;
import com.android.systemui.qs.tiles.base.viewmodel.QSTileViewModelFactory$Static;
import com.android.systemui.qs.tiles.detail.MediaOutputDetailAdapter;
import com.android.systemui.qs.tiles.di.NewQSTileFactory;
import com.android.systemui.qs.tiles.di.QSTilesModule;
import com.android.systemui.qs.tiles.dialog.InternetDialogController;
import com.android.systemui.qs.tiles.dialog.InternetDialogDelegate;
import com.android.systemui.qs.tiles.dialog.InternetDialogManager;
import com.android.systemui.qs.tiles.dialog.WifiStateWorker;
import com.android.systemui.qs.tiles.impl.airplane.domain.AirplaneModeMapper;
import com.android.systemui.qs.tiles.impl.airplane.domain.interactor.AirplaneModeTileDataInteractor;
import com.android.systemui.qs.tiles.impl.airplane.domain.interactor.AirplaneModeTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.alarm.domain.AlarmTileMapper;
import com.android.systemui.qs.tiles.impl.alarm.domain.interactor.AlarmTileDataInteractor;
import com.android.systemui.qs.tiles.impl.alarm.domain.interactor.AlarmTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.battery.domain.interactor.BatterySaverTileDataInteractor;
import com.android.systemui.qs.tiles.impl.battery.domain.interactor.BatterySaverTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.battery.ui.BatterySaverTileMapper;
import com.android.systemui.qs.tiles.impl.colorcorrection.domain.ColorCorrectionTileMapper;
import com.android.systemui.qs.tiles.impl.colorcorrection.domain.interactor.ColorCorrectionTileDataInteractor;
import com.android.systemui.qs.tiles.impl.colorcorrection.domain.interactor.ColorCorrectionUserActionInteractor;
import com.android.systemui.qs.tiles.impl.custom.data.repository.CustomTileDefaultsRepository;
import com.android.systemui.qs.tiles.impl.custom.data.repository.CustomTileDefaultsRepositoryImpl;
import com.android.systemui.qs.tiles.impl.custom.data.repository.CustomTilePackageUpdatesRepository;
import com.android.systemui.qs.tiles.impl.custom.data.repository.CustomTilePackageUpdatesRepositoryImpl;
import com.android.systemui.qs.tiles.impl.custom.data.repository.CustomTileRepository;
import com.android.systemui.qs.tiles.impl.custom.data.repository.CustomTileRepositoryImpl;
import com.android.systemui.qs.tiles.impl.custom.di.CustomTileComponent;
import com.android.systemui.qs.tiles.impl.custom.di.CustomTileModule;
import com.android.systemui.qs.tiles.impl.custom.di.QSTileConfigModule;
import com.android.systemui.qs.tiles.impl.custom.di.QSTileConfigModule_ProvideCustomTileSpecFactory;
import com.android.systemui.qs.tiles.impl.custom.domain.CustomTileMapper;
import com.android.systemui.qs.tiles.impl.custom.domain.interactor.CustomTileDataInteractor;
import com.android.systemui.qs.tiles.impl.custom.domain.interactor.CustomTileInteractor;
import com.android.systemui.qs.tiles.impl.custom.domain.interactor.CustomTileServiceInteractor;
import com.android.systemui.qs.tiles.impl.custom.domain.interactor.CustomTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.flashlight.domain.FlashlightMapper;
import com.android.systemui.qs.tiles.impl.flashlight.domain.interactor.FlashlightTileDataInteractor;
import com.android.systemui.qs.tiles.impl.flashlight.domain.interactor.FlashlightTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.fontscaling.domain.FontScalingTileMapper;
import com.android.systemui.qs.tiles.impl.fontscaling.domain.interactor.FontScalingTileDataInteractor;
import com.android.systemui.qs.tiles.impl.fontscaling.domain.interactor.FontScalingTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.internet.domain.InternetTileMapper;
import com.android.systemui.qs.tiles.impl.internet.domain.interactor.InternetTileDataInteractor;
import com.android.systemui.qs.tiles.impl.internet.domain.interactor.InternetTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.inversion.domain.ColorInversionTileMapper;
import com.android.systemui.qs.tiles.impl.inversion.domain.interactor.ColorInversionTileDataInteractor;
import com.android.systemui.qs.tiles.impl.inversion.domain.interactor.ColorInversionUserActionInteractor;
import com.android.systemui.qs.tiles.impl.location.domain.LocationTileMapper;
import com.android.systemui.qs.tiles.impl.location.domain.interactor.LocationTileDataInteractor;
import com.android.systemui.qs.tiles.impl.location.domain.interactor.LocationTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.night.domain.interactor.NightDisplayTileDataInteractor;
import com.android.systemui.qs.tiles.impl.night.domain.interactor.NightDisplayTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.night.ui.NightDisplayTileMapper;
import com.android.systemui.qs.tiles.impl.onehanded.domain.OneHandedModeTileDataInteractor;
import com.android.systemui.qs.tiles.impl.onehanded.domain.OneHandedModeTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.onehanded.ui.OneHandedModeTileMapper;
import com.android.systemui.qs.tiles.impl.qr.domain.interactor.QRCodeScannerTileDataInteractor;
import com.android.systemui.qs.tiles.impl.qr.domain.interactor.QRCodeScannerTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.qr.ui.QRCodeScannerTileMapper;
import com.android.systemui.qs.tiles.impl.reducebrightness.domain.interactor.ReduceBrightColorsTileDataInteractor;
import com.android.systemui.qs.tiles.impl.reducebrightness.domain.interactor.ReduceBrightColorsTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.reducebrightness.ui.ReduceBrightColorsTileMapper;
import com.android.systemui.qs.tiles.impl.rotation.domain.interactor.RotationLockTileDataInteractor;
import com.android.systemui.qs.tiles.impl.rotation.domain.interactor.RotationLockTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.rotation.ui.mapper.RotationLockTileMapper;
import com.android.systemui.qs.tiles.impl.saver.domain.DataSaverTileMapper;
import com.android.systemui.qs.tiles.impl.saver.domain.interactor.DataSaverTileDataInteractor;
import com.android.systemui.qs.tiles.impl.saver.domain.interactor.DataSaverTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.screenrecord.domain.interactor.ScreenRecordTileDataInteractor;
import com.android.systemui.qs.tiles.impl.screenrecord.domain.interactor.ScreenRecordTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.screenrecord.domain.ui.ScreenRecordTileMapper;
import com.android.systemui.qs.tiles.impl.sensorprivacy.SensorPrivacyToggleTileDataInteractor;
import com.android.systemui.qs.tiles.impl.sensorprivacy.domain.SensorPrivacyToggleTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.sensorprivacy.ui.SensorPrivacyTileResources;
import com.android.systemui.qs.tiles.impl.sensorprivacy.ui.SensorPrivacyToggleTileMapper;
import com.android.systemui.qs.tiles.impl.uimodenight.domain.UiModeNightTileMapper;
import com.android.systemui.qs.tiles.impl.uimodenight.domain.interactor.UiModeNightTileDataInteractor;
import com.android.systemui.qs.tiles.impl.uimodenight.domain.interactor.UiModeNightTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.work.domain.interactor.WorkModeTileDataInteractor;
import com.android.systemui.qs.tiles.impl.work.domain.interactor.WorkModeTileUserActionInteractor;
import com.android.systemui.qs.tiles.impl.work.ui.WorkModeTileMapper;
import com.android.systemui.qs.tiles.viewmodel.QSTileConfig;
import com.android.systemui.qs.tiles.viewmodel.QSTileConfigProvider;
import com.android.systemui.qs.tiles.viewmodel.QSTileConfigProviderImpl;
import com.android.systemui.qs.tiles.viewmodel.QSTileViewModel;
import com.android.systemui.qs.tiles.viewmodel.QSTileViewModelAdapter;
import com.android.systemui.qs.tiles.viewmodel.StubQSTileViewModel;
import com.android.systemui.qs.ui.adapter.QSSceneAdapter;
import com.android.systemui.qs.ui.adapter.QSSceneAdapterImpl;
import com.android.systemui.qs.ui.composable.QuickSettingsScene;
import com.android.systemui.qs.ui.composable.QuickSettingsShadeScene;
import com.android.systemui.qs.ui.viewmodel.QuickSettingsSceneViewModel;
import com.android.systemui.qs.ui.viewmodel.QuickSettingsShadeSceneViewModel;
import com.android.systemui.qs.user.UserSwitchDialogController;
import com.android.systemui.reardisplay.RearDisplayDialogController;
import com.android.systemui.recents.OverviewProxyRecentsImpl;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.recents.Recents;
import com.android.systemui.recents.RecentsImplementation;
import com.android.systemui.recents.RecentsModule_ProvideRecentsImplFactory;
import com.android.systemui.recents.ScreenPinningRequest;
import com.android.systemui.recordissue.IssueRecordingService;
import com.android.systemui.recordissue.IssueRecordingState;
import com.android.systemui.recordissue.RecordIssueDialogDelegate;
import com.android.systemui.recordissue.RecordIssueModule_Companion_ProvideRecordIssueTileConfigFactory;
import com.android.systemui.recordissue.TraceurMessageSender;
import com.android.systemui.retail.data.repository.RetailModeRepository;
import com.android.systemui.retail.data.repository.RetailModeSettingsRepository;
import com.android.systemui.rotationlock.RotationLockNewModule;
import com.android.systemui.rotationlock.RotationLockNewModule_Companion_ProvideRotationTileConfigFactory;
import com.android.systemui.scene.EmptySceneModule;
import com.android.systemui.scene.LockscreenSceneModule;
import com.android.systemui.scene.SceneContainerFrameworkModule_Companion_ContainerConfigFactory;
import com.android.systemui.scene.data.repository.SceneContainerRepository;
import com.android.systemui.scene.data.repository.WindowRootViewVisibilityRepository;
import com.android.systemui.scene.domain.interactor.SceneBackInteractor;
import com.android.systemui.scene.domain.interactor.SceneContainerOcclusionInteractor;
import com.android.systemui.scene.domain.interactor.SceneInteractor;
import com.android.systemui.scene.domain.interactor.WindowRootViewVisibilityInteractor;
import com.android.systemui.scene.domain.resolver.HomeSceneFamilyResolver;
import com.android.systemui.scene.domain.resolver.NotifShadeSceneFamilyResolver;
import com.android.systemui.scene.domain.resolver.QuickSettingsSceneFamilyResolver;
import com.android.systemui.scene.domain.resolver.SceneResolver;
import com.android.systemui.scene.domain.resolver.SceneResolverModule_Companion_ProvideResolverMapFactory;
import com.android.systemui.scene.domain.startable.SceneContainerStartable;
import com.android.systemui.scene.domain.startable.ScrimStartable;
import com.android.systemui.scene.session.shared.SessionStorage;
import com.android.systemui.scene.session.ui.composable.SaveableSession;
import com.android.systemui.scene.session.ui.composable.SessionImpl;
import com.android.systemui.scene.shared.flag.SceneContainerFlag;
import com.android.systemui.scene.shared.logger.SceneLogger;
import com.android.systemui.scene.shared.model.SceneContainerConfig;
import com.android.systemui.scene.shared.model.SceneDataSource;
import com.android.systemui.scene.shared.model.SceneDataSourceDelegator;
import com.android.systemui.scene.ui.composable.ComposableScene;
import com.android.systemui.scene.ui.composable.GoneScene;
import com.android.systemui.scene.ui.view.WindowRootView;
import com.android.systemui.scene.ui.view.WindowRootViewComponent;
import com.android.systemui.scene.ui.viewmodel.GoneSceneViewModel;
import com.android.systemui.scene.ui.viewmodel.SceneContainerViewModel;
import com.android.systemui.screenrecord.RecordingController;
import com.android.systemui.screenrecord.RecordingService;
import com.android.systemui.screenrecord.ScreenRecordDialogDelegate;
import com.android.systemui.screenrecord.ScreenRecordModule;
import com.android.systemui.screenrecord.ScreenRecordModule_Companion_ProvideScreenRecordTileConfigFactory;
import com.android.systemui.screenrecord.ScreenRecordPermissionDialogDelegate;
import com.android.systemui.screenrecord.data.repository.ScreenRecordRepository;
import com.android.systemui.screenrecord.data.repository.ScreenRecordRepositoryImpl;
import com.android.systemui.screenshot.ActionExecutor;
import com.android.systemui.screenshot.ActionIntentExecutor;
import com.android.systemui.screenshot.AnnouncementResolver;
import com.android.systemui.screenshot.AssistContentRequester;
import com.android.systemui.screenshot.DefaultScreenshotActionsProvider;
import com.android.systemui.screenshot.HeadlessScreenshotHandler;
import com.android.systemui.screenshot.ImageCapture;
import com.android.systemui.screenshot.ImageCaptureImpl;
import com.android.systemui.screenshot.ImageExporter;
import com.android.systemui.screenshot.LegacyScreenshotViewProxy;
import com.android.systemui.screenshot.MessageContainerController;
import com.android.systemui.screenshot.RequestProcessor;
import com.android.systemui.screenshot.ScreenshotActionsController;
import com.android.systemui.screenshot.ScreenshotActionsProvider$Factory;
import com.android.systemui.screenshot.ScreenshotController;
import com.android.systemui.screenshot.ScreenshotData;
import com.android.systemui.screenshot.ScreenshotDetectionController;
import com.android.systemui.screenshot.ScreenshotNotificationSmartActionsProvider;
import com.android.systemui.screenshot.ScreenshotNotificationsController;
import com.android.systemui.screenshot.ScreenshotPolicy;
import com.android.systemui.screenshot.ScreenshotPolicyImpl;
import com.android.systemui.screenshot.ScreenshotProxyService;
import com.android.systemui.screenshot.ScreenshotRequestProcessor;
import com.android.systemui.screenshot.ScreenshotShelfViewProxy;
import com.android.systemui.screenshot.ScreenshotSmartActions;
import com.android.systemui.screenshot.ScreenshotSoundControllerImpl;
import com.android.systemui.screenshot.ScreenshotSoundProvider;
import com.android.systemui.screenshot.ScreenshotSoundProviderImpl;
import com.android.systemui.screenshot.ScreenshotViewProxy;
import com.android.systemui.screenshot.SmartActionsReceiver;
import com.android.systemui.screenshot.TakeScreenshotExecutor;
import com.android.systemui.screenshot.TakeScreenshotExecutorImpl;
import com.android.systemui.screenshot.TakeScreenshotService;
import com.android.systemui.screenshot.ThumbnailObserver;
import com.android.systemui.screenshot.TimeoutHandler;
import com.android.systemui.screenshot.WorkProfileMessageController;
import com.android.systemui.screenshot.appclips.AppClipsActivity;
import com.android.systemui.screenshot.appclips.AppClipsCrossProcessHelper;
import com.android.systemui.screenshot.appclips.AppClipsScreenshotHelperService;
import com.android.systemui.screenshot.appclips.AppClipsService;
import com.android.systemui.screenshot.appclips.AppClipsTrampolineActivity;
import com.android.systemui.screenshot.appclips.AppClipsViewModel;
import com.android.systemui.screenshot.data.repository.DisplayContentRepositoryImpl;
import com.android.systemui.screenshot.data.repository.ProfileTypeRepository;
import com.android.systemui.screenshot.data.repository.ProfileTypeRepositoryImpl;
import com.android.systemui.screenshot.message.PackageLabelIconProvider;
import com.android.systemui.screenshot.message.PackageLabelIconProviderImpl;
import com.android.systemui.screenshot.message.ProfileFirstRunFileResources;
import com.android.systemui.screenshot.message.ProfileFirstRunFileResourcesImpl;
import com.android.systemui.screenshot.message.ProfileFirstRunSettings;
import com.android.systemui.screenshot.message.ProfileFirstRunSettingsImpl;
import com.android.systemui.screenshot.message.ProfileMessageController;
import com.android.systemui.screenshot.policy.PrivateProfilePolicy;
import com.android.systemui.screenshot.policy.ScreenshotPolicyModule;
import com.android.systemui.screenshot.policy.WorkProfilePolicy;
import com.android.systemui.screenshot.proxy.SystemUiProxy;
import com.android.systemui.screenshot.proxy.SystemUiProxyClient;
import com.android.systemui.screenshot.resources.Messages;
import com.android.systemui.screenshot.scroll.ImageTileSet;
import com.android.systemui.screenshot.scroll.LongScreenshotActivity;
import com.android.systemui.screenshot.scroll.LongScreenshotData;
import com.android.systemui.screenshot.scroll.ScrollCaptureClient;
import com.android.systemui.screenshot.scroll.ScrollCaptureController;
import com.android.systemui.screenshot.scroll.ScrollCaptureExecutor;
import com.android.systemui.screenshot.sep.ScreenshotErrorController;
import com.android.systemui.screenshot.sep.SemImageCaptureImpl;
import com.android.systemui.screenshot.ui.binder.ActionButtonViewBinder;
import com.android.systemui.screenshot.ui.binder.ScreenshotShelfViewBinder;
import com.android.systemui.screenshot.ui.viewmodel.ScreenshotViewModel;
import com.android.systemui.scrim.ScrimView;
import com.android.systemui.searcle.SearcleManager;
import com.android.systemui.security.data.repository.SecurityRepository;
import com.android.systemui.security.data.repository.SecurityRepositoryImpl;
import com.android.systemui.sensor.PickupController;
import com.android.systemui.sensorprivacy.SensorUseStartedActivity;
import com.android.systemui.settings.DisplayTracker;
import com.android.systemui.settings.DisplayTrackerImpl;
import com.android.systemui.settings.MultiUserUtilsModule_ProvideUserTrackerFactory;
import com.android.systemui.settings.SecureSettingsRepositoryModule;
import com.android.systemui.settings.UserContextProvider;
import com.android.systemui.settings.UserFileManager;
import com.android.systemui.settings.UserFileManagerImpl;
import com.android.systemui.settings.UserTracker;
import com.android.systemui.settings.UserTrackerImpl;
import com.android.systemui.settings.brightness.BrightnessController;
import com.android.systemui.settings.brightness.BrightnessDialog;
import com.android.systemui.settings.brightness.BrightnessSliderController;
import com.android.systemui.settings.brightness.ToggleSlider;
import com.android.systemui.settings.brightness.data.repository.BrightnessMirrorShowingRepository;
import com.android.systemui.settings.brightness.domain.interactor.BrightnessMirrorShowingInteractor;
import com.android.systemui.settings.brightness.ui.viewModel.BrightnessMirrorViewModel;
import com.android.systemui.settings.multisim.MultiSIMController;
import com.android.systemui.settings.multisim.MultiSIMPreferredSlotView;
import com.android.systemui.shade.CameraLauncher;
import com.android.systemui.shade.CombinedShadeHeadersConstraintManager;
import com.android.systemui.shade.CombinedShadeHeadersConstraintManagerImpl;
import com.android.systemui.shade.GlanceableHubContainerController;
import com.android.systemui.shade.LargeScreenHeaderHelper;
import com.android.systemui.shade.LockscreenHostedDreamGestureListener;
import com.android.systemui.shade.NotificationPanelUnfoldAnimationController;
import com.android.systemui.shade.NotificationPanelView;
import com.android.systemui.shade.NotificationPanelViewController;
import com.android.systemui.shade.NotificationShadeWindowControllerImpl;
import com.android.systemui.shade.NotificationShadeWindowView;
import com.android.systemui.shade.NotificationShadeWindowViewController;
import com.android.systemui.shade.NotificationsQSContainerController;
import com.android.systemui.shade.NotificationsQuickSettingsContainer;
import com.android.systemui.shade.PulsingGestureListener;
import com.android.systemui.shade.QsBatteryModeController;
import com.android.systemui.shade.QuickSettingsController;
import com.android.systemui.shade.QuickSettingsControllerImpl;
import com.android.systemui.shade.QuickSettingsControllerSceneImpl;
import com.android.systemui.shade.SecNotificationShadeWindowControllerHelperImpl;
import com.android.systemui.shade.SecPanelSplitHelper;
import com.android.systemui.shade.SecPanelTouchBlockHelper;
import com.android.systemui.shade.ShadeController;
import com.android.systemui.shade.ShadeControllerImpl;
import com.android.systemui.shade.ShadeControllerSceneImpl;
import com.android.systemui.shade.ShadeExpansionStateManager;
import com.android.systemui.shade.ShadeHeaderColorPicker;
import com.android.systemui.shade.ShadeHeaderController;
import com.android.systemui.shade.ShadeLogger;
import com.android.systemui.shade.ShadeModule;
import com.android.systemui.shade.ShadeSurface;
import com.android.systemui.shade.ShadeSurfaceImpl;
import com.android.systemui.shade.ShadeViewController;
import com.android.systemui.shade.ShadeViewProviderModule;
import com.android.systemui.shade.ShadeViewStateProvider;
import com.android.systemui.shade.ShadeWindowLogger;
import com.android.systemui.shade.carrier.CarrierTextUtil;
import com.android.systemui.shade.carrier.LatinNetworkNameProviderImpl;
import com.android.systemui.shade.carrier.ShadeCarrierGroupController;
import com.android.systemui.shade.carrier.ShadeCarrierGroupControllerLogger;
import com.android.systemui.shade.data.repository.PrivacyChipRepository;
import com.android.systemui.shade.data.repository.PrivacyChipRepositoryImpl;
import com.android.systemui.shade.data.repository.ShadeAnimationRepository;
import com.android.systemui.shade.data.repository.ShadeHeaderClockRepository;
import com.android.systemui.shade.data.repository.ShadeRepository;
import com.android.systemui.shade.data.repository.ShadeRepositoryImpl;
import com.android.systemui.shade.domain.interactor.BaseShadeInteractor;
import com.android.systemui.shade.domain.interactor.PanelExpansionInteractor;
import com.android.systemui.shade.domain.interactor.PanelExpansionInteractorImpl;
import com.android.systemui.shade.domain.interactor.PrivacyChipInteractor;
import com.android.systemui.shade.domain.interactor.SecHideNotificationShadeInMirrorInteractor;
import com.android.systemui.shade.domain.interactor.SecNotificationShadeWindowStateInteractor;
import com.android.systemui.shade.domain.interactor.SecPanelExpansionStateInteractor;
import com.android.systemui.shade.domain.interactor.SecPanelSAStatusLogInteractor;
import com.android.systemui.shade.domain.interactor.SecPanelTouchProximityInteractor;
import com.android.systemui.shade.domain.interactor.SecQSExpansionStateInteractor;
import com.android.systemui.shade.domain.interactor.SecQuickSettingsAffordanceInteractor;
import com.android.systemui.shade.domain.interactor.ShadeAnimationInteractor;
import com.android.systemui.shade.domain.interactor.ShadeAnimationInteractorLegacyImpl;
import com.android.systemui.shade.domain.interactor.ShadeAnimationInteractorSceneContainerImpl;
import com.android.systemui.shade.domain.interactor.ShadeHeaderClockInteractor;
import com.android.systemui.shade.domain.interactor.ShadeInteractor;
import com.android.systemui.shade.domain.interactor.ShadeInteractorImpl;
import com.android.systemui.shade.domain.interactor.ShadeInteractorLegacyImpl;
import com.android.systemui.shade.domain.interactor.ShadeInteractorSceneContainerImpl;
import com.android.systemui.shade.domain.interactor.ShadeLockscreenInteractor;
import com.android.systemui.shade.domain.interactor.ShadeLockscreenInteractorImpl;
import com.android.systemui.shade.domain.startable.ShadeStartable;
import com.android.systemui.shade.transition.LargeScreenPortraitShadeInterpolator;
import com.android.systemui.shade.transition.LargeScreenShadeInterpolator;
import com.android.systemui.shade.transition.LargeScreenShadeInterpolatorImpl;
import com.android.systemui.shade.transition.ScrimShadeTransitionController;
import com.android.systemui.shade.transition.SplitShadeInterpolator;
import com.android.systemui.shade.ui.composable.ShadeScene;
import com.android.systemui.shade.ui.viewmodel.OverlayShadeViewModel;
import com.android.systemui.shade.ui.viewmodel.ShadeHeaderViewModel;
import com.android.systemui.shade.ui.viewmodel.ShadeSceneViewModel;
import com.android.systemui.shared.clocks.ClockRegistry;
import com.android.systemui.shared.condition.Monitor;
import com.android.systemui.shared.notifications.data.repository.NotificationSettingsRepository;
import com.android.systemui.shared.notifications.domain.interactor.NotificationSettingsInteractor;
import com.android.systemui.shared.plugins.PluginActionManager;
import com.android.systemui.shared.plugins.PluginEnabler;
import com.android.systemui.shared.plugins.PluginInstance;
import com.android.systemui.shared.plugins.PluginPrefs;
import com.android.systemui.shared.settings.data.repository.SecureSettingsRepository;
import com.android.systemui.shared.settings.data.repository.SecureSettingsRepositoryImpl;
import com.android.systemui.shared.system.ActivityManagerWrapper;
import com.android.systemui.shared.system.DevicePolicyManagerWrapper;
import com.android.systemui.shared.system.InputChannelCompat$InputEventListener;
import com.android.systemui.shared.system.InputMonitorCompat;
import com.android.systemui.shared.system.PackageManagerWrapper;
import com.android.systemui.shared.system.TaskStackChangeListeners;
import com.android.systemui.shared.system.UncaughtExceptionPreHandlerManager;
import com.android.systemui.shortcut.ShortcutKeyDispatcher;
import com.android.systemui.slimindicator.SlimIndicatorKeyguardCarrierTextHelper;
import com.android.systemui.slimindicator.SlimIndicatorViewMediator;
import com.android.systemui.slimindicator.SlimIndicatorViewMediatorImpl;
import com.android.systemui.smartspace.data.repository.SmartspaceRepository;
import com.android.systemui.smartspace.data.repository.SmartspaceRepositoryImpl;
import com.android.systemui.smartspace.preconditions.LockscreenPrecondition;
import com.android.systemui.smartspace.ui.viewmodel.SmartspaceViewModel;
import com.android.systemui.statusbar.ActionClickLogger;
import com.android.systemui.statusbar.BlurUtils;
import com.android.systemui.statusbar.CommandQueue;
import com.android.systemui.statusbar.HeadsUpStatusBarView;
import com.android.systemui.statusbar.ImmersiveModeConfirmation;
import com.android.systemui.statusbar.KeyboardShortcutsReceiver;
import com.android.systemui.statusbar.KeyguardIndicationController;
import com.android.systemui.statusbar.KeyguardSecAffordanceView;
import com.android.systemui.statusbar.KeyguardSecIndicationController;
import com.android.systemui.statusbar.KeyguardShortcutManager;
import com.android.systemui.statusbar.LightRevealScrim;
import com.android.systemui.statusbar.LockscreenNotificationManager;
import com.android.systemui.statusbar.LockscreenNotificationManagerLogger;
import com.android.systemui.statusbar.LockscreenShadeKeyguardTransitionController;
import com.android.systemui.statusbar.LockscreenShadeQsTransitionController;
import com.android.systemui.statusbar.LockscreenShadeScrimTransitionController;
import com.android.systemui.statusbar.LockscreenShadeTransitionController;
import com.android.systemui.statusbar.NotificationClickNotifier;
import com.android.systemui.statusbar.NotificationInsetsController;
import com.android.systemui.statusbar.NotificationInsetsImpl;
import com.android.systemui.statusbar.NotificationInteractionTracker;
import com.android.systemui.statusbar.NotificationListener;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationLockscreenUserManagerImpl;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationPresenter;
import com.android.systemui.statusbar.NotificationRemoteInputManager;
import com.android.systemui.statusbar.NotificationShadeDepthController;
import com.android.systemui.statusbar.NotificationShadeWindowController;
import com.android.systemui.statusbar.NotificationShelfManager;
import com.android.systemui.statusbar.OperatorNameViewController$Factory;
import com.android.systemui.statusbar.PulseExpansionHandler;
import com.android.systemui.statusbar.QsFrameTranslateController;
import com.android.systemui.statusbar.QsFrameTranslateImpl;
import com.android.systemui.statusbar.RemoteInputController;
import com.android.systemui.statusbar.RemoteInputNotificationRebuilder;
import com.android.systemui.statusbar.SecLightRevealScrimHelper;
import com.android.systemui.statusbar.SingleShadeLockScreenOverScroller;
import com.android.systemui.statusbar.SmartReplyController;
import com.android.systemui.statusbar.SplitShadeLockScreenOverScroller;
import com.android.systemui.statusbar.StatusBarStateControllerImpl;
import com.android.systemui.statusbar.StatusBarStateControllerImpl_MembersInjector;
import com.android.systemui.statusbar.SummarizeController;
import com.android.systemui.statusbar.SysuiStatusBarStateController;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.chips.call.domain.interactor.CallChipInteractor;
import com.android.systemui.statusbar.chips.call.ui.viewmodel.CallChipViewModel;
import com.android.systemui.statusbar.chips.casttootherdevice.ui.viewmodel.CastToOtherDeviceChipViewModel;
import com.android.systemui.statusbar.chips.mediaprojection.domain.interactor.MediaProjectionChipInteractor;
import com.android.systemui.statusbar.chips.mediaprojection.ui.view.EndMediaProjectionDialogHelper;
import com.android.systemui.statusbar.chips.screenrecord.domain.interactor.ScreenRecordChipInteractor;
import com.android.systemui.statusbar.chips.screenrecord.ui.viewmodel.ScreenRecordChipViewModel;
import com.android.systemui.statusbar.chips.sharetoapp.ui.viewmodel.ShareToAppChipViewModel;
import com.android.systemui.statusbar.chips.ui.viewmodel.OngoingActivityChipsViewModel;
import com.android.systemui.statusbar.commandline.CommandRegistry;
import com.android.systemui.statusbar.connectivity.AccessPointController;
import com.android.systemui.statusbar.connectivity.AccessPointControllerImpl;
import com.android.systemui.statusbar.connectivity.CallbackHandler;
import com.android.systemui.statusbar.connectivity.ConnectivityModule;
import com.android.systemui.statusbar.connectivity.ConnectivityModule_Companion_ProvideAirplaneModeTileConfigFactory;
import com.android.systemui.statusbar.connectivity.ConnectivityModule_Companion_ProvideBluetoothTileConfigFactory;
import com.android.systemui.statusbar.connectivity.ConnectivityModule_Companion_ProvideCastTileConfigFactory;
import com.android.systemui.statusbar.connectivity.ConnectivityModule_Companion_ProvideDataSaverTileConfigFactory;
import com.android.systemui.statusbar.connectivity.ConnectivityModule_Companion_ProvideHotspotTileConfigFactory;
import com.android.systemui.statusbar.connectivity.ConnectivityModule_Companion_ProvideInternetTileConfigFactory;
import com.android.systemui.statusbar.connectivity.MobileSignalControllerFactory;
import com.android.systemui.statusbar.connectivity.NetworkController;
import com.android.systemui.statusbar.connectivity.NetworkControllerImpl;
import com.android.systemui.statusbar.connectivity.WifiPickerTrackerFactory;
import com.android.systemui.statusbar.connectivity.WifiStatusTrackerFactory;
import com.android.systemui.statusbar.connectivity.ui.MobileContextProvider;
import com.android.systemui.statusbar.core.StatusBarInitializer;
import com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule$1;
import com.android.systemui.statusbar.data.repository.KeyguardStatusBarRepository;
import com.android.systemui.statusbar.data.repository.KeyguardStatusBarRepositoryImpl;
import com.android.systemui.statusbar.data.repository.NotificationListenerSettingsRepository;
import com.android.systemui.statusbar.data.repository.RemoteInputRepository;
import com.android.systemui.statusbar.data.repository.RemoteInputRepositoryImpl;
import com.android.systemui.statusbar.data.repository.StatusBarModePerDisplayRepositoryFactory;
import com.android.systemui.statusbar.data.repository.StatusBarModePerDisplayRepositoryImpl;
import com.android.systemui.statusbar.data.repository.StatusBarModeRepositoryImpl;
import com.android.systemui.statusbar.data.repository.StatusBarModeRepositoryStore;
import com.android.systemui.statusbar.disableflags.DisableFlagsLogger;
import com.android.systemui.statusbar.disableflags.data.repository.DisableFlagsRepository;
import com.android.systemui.statusbar.disableflags.data.repository.DisableFlagsRepositoryImpl;
import com.android.systemui.statusbar.domain.interactor.KeyguardStatusBarInteractor;
import com.android.systemui.statusbar.domain.interactor.RemoteInputInteractor;
import com.android.systemui.statusbar.domain.interactor.SilentNotificationStatusIconsVisibilityInteractor;
import com.android.systemui.statusbar.domain.interactor.StatusBarKeyguardViewManagerInteractor;
import com.android.systemui.statusbar.events.CoverPrivacyDotViewController;
import com.android.systemui.statusbar.events.HeaderBatteryStatusChipController;
import com.android.systemui.statusbar.events.PrivacyDotViewController;
import com.android.systemui.statusbar.events.StatusBarEventsModule;
import com.android.systemui.statusbar.events.SystemEventChipAnimationController;
import com.android.systemui.statusbar.events.SystemEventCoordinator;
import com.android.systemui.statusbar.events.SystemStatusAnimationScheduler;
import com.android.systemui.statusbar.events.SystemStatusAnimationSchedulerImpl;
import com.android.systemui.statusbar.events.SystemStatusAnimationSchedulerLogger;
import com.android.systemui.statusbar.gesture.GesturePointerEventDetector;
import com.android.systemui.statusbar.gesture.GesturePointerEventListener;
import com.android.systemui.statusbar.gesture.SwipeStatusBarAwayGestureHandler;
import com.android.systemui.statusbar.gesture.SwipeUpGestureLogger;
import com.android.systemui.statusbar.gesture.TapGestureDetector;
import com.android.systemui.statusbar.iconsOnly.LockscreenNotificationIconsOnlyController;
import com.android.systemui.statusbar.lockscreen.LockscreenSmartspaceController;
import com.android.systemui.statusbar.logging.IndicatorLogger;
import com.android.systemui.statusbar.notification.AnimatedImageNotificationManager;
import com.android.systemui.statusbar.notification.AssistantFeedbackController;
import com.android.systemui.statusbar.notification.ColorUpdateLogger;
import com.android.systemui.statusbar.notification.ConversationNotificationManager;
import com.android.systemui.statusbar.notification.ConversationNotificationProcessor;
import com.android.systemui.statusbar.notification.DynamicPrivacyController;
import com.android.systemui.statusbar.notification.InstantAppNotifier;
import com.android.systemui.statusbar.notification.NotifPipelineFlags;
import com.android.systemui.statusbar.notification.NotificationClicker;
import com.android.systemui.statusbar.notification.NotificationClickerLogger;
import com.android.systemui.statusbar.notification.NotificationLaunchAnimatorControllerProvider;
import com.android.systemui.statusbar.notification.NotificationSectionsFeatureManager;
import com.android.systemui.statusbar.notification.NotificationWakeUpCoordinator;
import com.android.systemui.statusbar.notification.NotificationWakeUpCoordinatorLogger;
import com.android.systemui.statusbar.notification.RemoteInputControllerLogger;
import com.android.systemui.statusbar.notification.SubscreenNotificationController;
import com.android.systemui.statusbar.notification.SubscreenNotificationIntelligenceStartActivity;
import com.android.systemui.statusbar.notification.SubscreenNotificationReplyActivity;
import com.android.systemui.statusbar.notification.VisibilityLocationProvider;
import com.android.systemui.statusbar.notification.collection.NotifCollection;
import com.android.systemui.statusbar.notification.collection.NotifInflaterImpl;
import com.android.systemui.statusbar.notification.collection.NotifInflaterLogger;
import com.android.systemui.statusbar.notification.collection.NotifLiveDataStore;
import com.android.systemui.statusbar.notification.collection.NotifLiveDataStoreImpl;
import com.android.systemui.statusbar.notification.collection.NotifPipeline;
import com.android.systemui.statusbar.notification.collection.NotifPipelineChoreographer;
import com.android.systemui.statusbar.notification.collection.NotifPipelineChoreographerImpl;
import com.android.systemui.statusbar.notification.collection.NotificationEntry;
import com.android.systemui.statusbar.notification.collection.ShadeListBuilder;
import com.android.systemui.statusbar.notification.collection.TargetSdkResolver;
import com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescer;
import com.android.systemui.statusbar.notification.collection.coalescer.GroupCoalescerLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.BubbleCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ColorizedFgsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ConversationCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DataStoreCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DebugModeCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DeviceProvisionedCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DismissibilityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.DreamCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.EdgeLightingCoordnator;
import com.android.systemui.statusbar.notification.collection.coordinator.FavoriteNotifCoordnator;
import com.android.systemui.statusbar.notification.collection.coordinator.GroupCountCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.GroupWhenCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.GutsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.GutsCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.HeadsUpCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.HideLocallyDismissedNotifsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.HideLocallyDismissedNotifsCoordinator_Factory;
import com.android.systemui.statusbar.notification.collection.coordinator.HideNotifsForOtherUsersCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.HighlightsCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.InsignificantCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.KeyguardCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.LockScreenNotiIconCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.LockScreenNotiIconCoordinator_Factory;
import com.android.systemui.statusbar.notification.collection.coordinator.MediaCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinators;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCoordinatorsImpl;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCounterCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifCounterCoordinator_Factory;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifHeaderCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotifTimeSortCoordnator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotificationControlActionCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotificationControlActionCoordinator_Factory;
import com.android.systemui.statusbar.notification.collection.coordinator.NotificationStatsLoggerCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.NotilusCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.OngoingActivityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.OnlyShowNewNotifCoordnator;
import com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.PreparationCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.RankingCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.RemoteInputCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.RowAlertTimeCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.RowAppearanceCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SemPriorityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SensitiveContentCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SensitiveContentCoordinatorImpl;
import com.android.systemui.statusbar.notification.collection.coordinator.SettingsChangedCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ShadeEventCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ShadeEventCoordinatorLogger;
import com.android.systemui.statusbar.notification.collection.coordinator.SmartspaceDedupingCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.StackCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SubscreenNotificationListCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SubscreenQuickReplyCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.SummarizeCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.ViewConfigCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.VisualStabilityCoordinator;
import com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsModule_NotifCoordinatorsFactory;
import com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsSubcomponent;
import com.android.systemui.statusbar.notification.collection.inflation.BindEventManager;
import com.android.systemui.statusbar.notification.collection.inflation.BindEventManagerImpl;
import com.android.systemui.statusbar.notification.collection.inflation.NotifInflater;
import com.android.systemui.statusbar.notification.collection.inflation.NotifUiAdjustmentProvider;
import com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderImpl;
import com.android.systemui.statusbar.notification.collection.inflation.NotificationRowBinderLogger;
import com.android.systemui.statusbar.notification.collection.inflation.OnUserInteractionCallbackImpl;
import com.android.systemui.statusbar.notification.collection.init.NotifPipelineInitializer;
import com.android.systemui.statusbar.notification.collection.listbuilder.ShadeListBuilderLogger;
import com.android.systemui.statusbar.notification.collection.notifcollection.CommonNotifCollection;
import com.android.systemui.statusbar.notification.collection.notifcollection.NotifCollectionLogger;
import com.android.systemui.statusbar.notification.collection.provider.DebugModeFilterProvider;
import com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider;
import com.android.systemui.statusbar.notification.collection.provider.LaunchFullScreenIntentProvider;
import com.android.systemui.statusbar.notification.collection.provider.NotificationDismissibilityProvider;
import com.android.systemui.statusbar.notification.collection.provider.NotificationDismissibilityProviderImpl;
import com.android.systemui.statusbar.notification.collection.provider.NotificationVisibilityProviderImpl;
import com.android.systemui.statusbar.notification.collection.provider.SectionHeaderVisibilityProvider;
import com.android.systemui.statusbar.notification.collection.provider.SectionStyleProvider;
import com.android.systemui.statusbar.notification.collection.provider.VisibilityLocationProviderDelegator;
import com.android.systemui.statusbar.notification.collection.provider.VisualStabilityProvider;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManager;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManagerImpl;
import com.android.systemui.statusbar.notification.collection.render.GroupMembershipManager;
import com.android.systemui.statusbar.notification.collection.render.GroupMembershipManagerImpl;
import com.android.systemui.statusbar.notification.collection.render.MediaContainerController;
import com.android.systemui.statusbar.notification.collection.render.NodeController;
import com.android.systemui.statusbar.notification.collection.render.NodeSpecBuilderLogger;
import com.android.systemui.statusbar.notification.collection.render.NotifGutsViewManager;
import com.android.systemui.statusbar.notification.collection.render.NotifShadeEventSource;
import com.android.systemui.statusbar.notification.collection.render.NotifStackController;
import com.android.systemui.statusbar.notification.collection.render.NotifViewBarn;
import com.android.systemui.statusbar.notification.collection.render.NotificationVisibilityProvider;
import com.android.systemui.statusbar.notification.collection.render.RenderStageManager;
import com.android.systemui.statusbar.notification.collection.render.SectionHeaderController;
import com.android.systemui.statusbar.notification.collection.render.SectionHeaderNodeControllerImpl;
import com.android.systemui.statusbar.notification.collection.render.ShadeViewDifferLogger;
import com.android.systemui.statusbar.notification.collection.render.ShadeViewManager;
import com.android.systemui.statusbar.notification.collection.render.ShadeViewManagerFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesAlertingHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesFavoriteHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesHighlightsHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesIncomingHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesOngoingActivityHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesPeopleHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationSectionHeadersModule_ProvidesSilentHeaderSubcomponentFactory;
import com.android.systemui.statusbar.notification.dagger.NotificationStatsLoggerModule;
import com.android.systemui.statusbar.notification.dagger.NotificationStatsLoggerModule_Companion_ProvideStatsLoggerFactory;
import com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent;
import com.android.systemui.statusbar.notification.data.NotificationSettingsRepositoryModule;
import com.android.systemui.statusbar.notification.data.repository.ActiveNotificationListRepository;
import com.android.systemui.statusbar.notification.data.repository.HeadsUpNotificationIconViewStateRepository;
import com.android.systemui.statusbar.notification.data.repository.HeadsUpRepository;
import com.android.systemui.statusbar.notification.data.repository.NotificationLaunchAnimationRepository;
import com.android.systemui.statusbar.notification.data.repository.NotificationsKeyguardViewStateRepository;
import com.android.systemui.statusbar.notification.domain.interactor.ActiveNotificationsInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.HeadsUpNotificationIconInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.HeadsUpNotificationInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.NotificationAlertsInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.NotificationLaunchAnimationInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.NotificationSettingsInteractorModule;
import com.android.systemui.statusbar.notification.domain.interactor.NotificationsKeyguardInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.RenderNotificationListInteractor;
import com.android.systemui.statusbar.notification.domain.interactor.SeenNotificationsInteractor;
import com.android.systemui.statusbar.notification.footer.ui.viewmodel.FooterViewModelModule;
import com.android.systemui.statusbar.notification.icon.ConversationIconManager;
import com.android.systemui.statusbar.notification.icon.IconBuilder;
import com.android.systemui.statusbar.notification.icon.IconManager;
import com.android.systemui.statusbar.notification.icon.domain.interactor.AlwaysOnDisplayNotificationIconsInteractor;
import com.android.systemui.statusbar.notification.icon.domain.interactor.NotificationIconsInteractor;
import com.android.systemui.statusbar.notification.icon.domain.interactor.StatusBarNotificationIconsInteractor;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.AlwaysOnDisplayNotificationIconViewStore;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.NotificationIconAreaControllerViewBinderWrapperImpl;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.NotificationIconContainerAlwaysOnDisplayViewBinder;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.NotificationIconContainerShelfViewBinder;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.NotificationIconContainerStatusBarViewBinder;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.ShelfNotificationIconViewStore;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.StatusBarIconViewBindingFailureTracker;
import com.android.systemui.statusbar.notification.icon.ui.viewbinder.StatusBarNotificationIconViewStore;
import com.android.systemui.statusbar.notification.icon.ui.viewmodel.NotificationIconContainerAlwaysOnDisplayViewModel;
import com.android.systemui.statusbar.notification.icon.ui.viewmodel.NotificationIconContainerShelfViewModel;
import com.android.systemui.statusbar.notification.icon.ui.viewmodel.NotificationIconContainerStatusBarViewModel;
import com.android.systemui.statusbar.notification.init.NotificationsController;
import com.android.systemui.statusbar.notification.init.NotificationsControllerImpl;
import com.android.systemui.statusbar.notification.init.NotificationsControllerStub;
import com.android.systemui.statusbar.notification.interruption.AvalancheProvider;
import com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinder;
import com.android.systemui.statusbar.notification.interruption.HeadsUpViewBinderLogger;
import com.android.systemui.statusbar.notification.interruption.KeyguardNotificationVisibilityProvider;
import com.android.systemui.statusbar.notification.interruption.KeyguardNotificationVisibilityProviderImpl;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptLogger;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProvider;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderImpl;
import com.android.systemui.statusbar.notification.interruption.NotificationInterruptStateProviderWrapper;
import com.android.systemui.statusbar.notification.interruption.VisualInterruptionDecisionLogger;
import com.android.systemui.statusbar.notification.interruption.VisualInterruptionDecisionProvider;
import com.android.systemui.statusbar.notification.interruption.VisualInterruptionDecisionProviderImpl;
import com.android.systemui.statusbar.notification.interruption.VisualInterruptionRefactor;
import com.android.systemui.statusbar.notification.logging.NotificationLogger;
import com.android.systemui.statusbar.notification.logging.NotificationMemoryDumper;
import com.android.systemui.statusbar.notification.logging.NotificationMemoryLogger;
import com.android.systemui.statusbar.notification.logging.NotificationMemoryMonitor;
import com.android.systemui.statusbar.notification.logging.NotificationPanelLogger;
import com.android.systemui.statusbar.notification.logging.NotificationPanelLoggerImpl;
import com.android.systemui.statusbar.notification.people.NotificationPersonExtractor;
import com.android.systemui.statusbar.notification.people.NotificationPersonExtractorPluginBoundary;
import com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifier;
import com.android.systemui.statusbar.notification.people.PeopleNotificationIdentifierImpl;
import com.android.systemui.statusbar.notification.row.ActivatableNotificationViewController;
import com.android.systemui.statusbar.notification.row.BigPictureIconManager;
import com.android.systemui.statusbar.notification.row.BigPictureLayoutInflaterFactory;
import com.android.systemui.statusbar.notification.row.BigPictureStatsManager;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialog;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialogController;
import com.android.systemui.statusbar.notification.row.ExpandableNotificationRow;
import com.android.systemui.statusbar.notification.row.ExpandableNotificationRowController;
import com.android.systemui.statusbar.notification.row.ExpandableNotificationRowDragController;
import com.android.systemui.statusbar.notification.row.ExpandableOutlineViewController;
import com.android.systemui.statusbar.notification.row.ExpandableViewController;
import com.android.systemui.statusbar.notification.row.HeadsUpStyleProvider;
import com.android.systemui.statusbar.notification.row.HeadsUpStyleProviderImpl;
import com.android.systemui.statusbar.notification.row.NotifBindPipeline;
import com.android.systemui.statusbar.notification.row.NotifBindPipelineInitializer;
import com.android.systemui.statusbar.notification.row.NotifBindPipelineLogger;
import com.android.systemui.statusbar.notification.row.NotifInflationErrorManager;
import com.android.systemui.statusbar.notification.row.NotifLayoutInflaterFactory;
import com.android.systemui.statusbar.notification.row.NotifRemoteViewCache;
import com.android.systemui.statusbar.notification.row.NotifRemoteViewCacheImpl;
import com.android.systemui.statusbar.notification.row.NotifRemoteViewsFactoryContainer;
import com.android.systemui.statusbar.notification.row.NotifRemoteViewsFactoryContainerImpl;
import com.android.systemui.statusbar.notification.row.NotificationContentInflater;
import com.android.systemui.statusbar.notification.row.NotificationEntryProcessorFactoryLooperImpl;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.notification.row.NotificationOptimizedLinearLayoutFactory;
import com.android.systemui.statusbar.notification.row.NotificationRowContentBinder;
import com.android.systemui.statusbar.notification.row.NotificationRowContentBinderImpl;
import com.android.systemui.statusbar.notification.row.NotificationRowContentBinderLogger;
import com.android.systemui.statusbar.notification.row.NotificationRowLogger;
import com.android.systemui.statusbar.notification.row.NotificationSettingsController;
import com.android.systemui.statusbar.notification.row.NotificationViewFlipperFactory;
import com.android.systemui.statusbar.notification.row.OnUserInteractionCallback;
import com.android.systemui.statusbar.notification.row.PrecomputedTextViewFactory;
import com.android.systemui.statusbar.notification.row.RowContentBindStage;
import com.android.systemui.statusbar.notification.row.RowContentBindStageLogger;
import com.android.systemui.statusbar.notification.row.RowInflaterTask;
import com.android.systemui.statusbar.notification.row.RowInflaterTaskLogger;
import com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent;
import com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent_ExpandableNotificationRowModule_ProvideAppNameFactory;
import com.android.systemui.statusbar.notification.row.shared.NotificationRowContentBinderRefactor;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.ActivatableNotificationViewModel;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.ActivatableNotificationViewModelImpl;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.ActivatableNotificationViewModelModule;
import com.android.systemui.statusbar.notification.row.ui.viewmodel.NotificationViewFlipperViewModel;
import com.android.systemui.statusbar.notification.shared.NotificationsLiveDataStoreRefactor;
import com.android.systemui.statusbar.notification.shelf.domain.interactor.NotificationShelfInteractor;
import com.android.systemui.statusbar.notification.shelf.ui.viewmodel.NotificationShelfViewModel;
import com.android.systemui.statusbar.notification.stack.AmbientState;
import com.android.systemui.statusbar.notification.stack.DisplaySwitchNotificationsHiderTracker;
import com.android.systemui.statusbar.notification.stack.NotificationChildrenContainerLogger;
import com.android.systemui.statusbar.notification.stack.NotificationListContainer;
import com.android.systemui.statusbar.notification.stack.NotificationRoundnessManager;
import com.android.systemui.statusbar.notification.stack.NotificationSectionsManager;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayout;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLayoutController;
import com.android.systemui.statusbar.notification.stack.NotificationStackScrollLogger;
import com.android.systemui.statusbar.notification.stack.NotificationStackSizeCalculator;
import com.android.systemui.statusbar.notification.stack.NotificationSwipeHelper;
import com.android.systemui.statusbar.notification.stack.NotificationTargetsHelper;
import com.android.systemui.statusbar.notification.stack.StackScrollAlgorithm;
import com.android.systemui.statusbar.notification.stack.StackStateLogger;
import com.android.systemui.statusbar.notification.stack.data.repository.NotificationPlaceholderRepository;
import com.android.systemui.statusbar.notification.stack.data.repository.NotificationViewHeightRepository;
import com.android.systemui.statusbar.notification.stack.domain.interactor.HideNotificationsInteractor;
import com.android.systemui.statusbar.notification.stack.domain.interactor.NotificationStackAppearanceInteractor;
import com.android.systemui.statusbar.notification.stack.domain.interactor.NotificationStackInteractor;
import com.android.systemui.statusbar.notification.stack.domain.interactor.SharedNotificationContainerInteractor;
import com.android.systemui.statusbar.notification.stack.ui.view.NotificationRowStatsLogger;
import com.android.systemui.statusbar.notification.stack.ui.view.NotificationScrollView;
import com.android.systemui.statusbar.notification.stack.ui.view.NotificationStatsLogger;
import com.android.systemui.statusbar.notification.stack.ui.view.NotificationStatsLoggerImpl;
import com.android.systemui.statusbar.notification.stack.ui.view.SharedNotificationContainer;
import com.android.systemui.statusbar.notification.stack.ui.viewbinder.NotificationListViewBinder;
import com.android.systemui.statusbar.notification.stack.ui.viewbinder.NotificationScrollViewBinder;
import com.android.systemui.statusbar.notification.stack.ui.viewbinder.SharedNotificationContainerBinder;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.HideListViewModel;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.NotificationListViewModel;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.NotificationLoggerViewModel;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.NotificationScrollViewModel;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.NotificationsPlaceholderViewModel;
import com.android.systemui.statusbar.notification.stack.ui.viewmodel.SharedNotificationContainerViewModel;
import com.android.systemui.statusbar.notification.ui.viewbinder.HeadsUpNotificationViewBinder;
import com.android.systemui.statusbar.phone.ActivityStarterImpl;
import com.android.systemui.statusbar.phone.AutoHideController;
import com.android.systemui.statusbar.phone.BiometricUnlockController;
import com.android.systemui.statusbar.phone.CapturedBlurContainer;
import com.android.systemui.statusbar.phone.CapturedBlurContainerController;
import com.android.systemui.statusbar.phone.CentralSurfaces;
import com.android.systemui.statusbar.phone.CentralSurfacesCommandQueueCallbacks;
import com.android.systemui.statusbar.phone.CentralSurfacesImpl;
import com.android.systemui.statusbar.phone.ConfigurationControllerImpl;
import com.android.systemui.statusbar.phone.ConfigurationControllerStartable;
import com.android.systemui.statusbar.phone.CoverHostImpl;
import com.android.systemui.statusbar.phone.CoverScreenIconController;
import com.android.systemui.statusbar.phone.DarkIconDispatcherImpl;
import com.android.systemui.statusbar.phone.DcmMascotViewContainer;
import com.android.systemui.statusbar.phone.DozeParameters;
import com.android.systemui.statusbar.phone.DozeScrimController;
import com.android.systemui.statusbar.phone.DozeServiceHost;
import com.android.systemui.statusbar.phone.HeadsUpAppearanceController;
import com.android.systemui.statusbar.phone.HeadsUpManagerPhone;
import com.android.systemui.statusbar.phone.IndicatorCutoutUtil;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmCenterCutout;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmFactory;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmNoCutout;
import com.android.systemui.statusbar.phone.IndicatorGardenAlgorithmSidelingCenterCutout;
import com.android.systemui.statusbar.phone.IndicatorGardenInputProperties;
import com.android.systemui.statusbar.phone.IndicatorGardenPresenter;
import com.android.systemui.statusbar.phone.IndicatorGardenViewTreeLogHelper;
import com.android.systemui.statusbar.phone.IndicatorMarqueeGardener;
import com.android.systemui.statusbar.phone.IndicatorScaleGardener;
import com.android.systemui.statusbar.phone.IndicatorTouchHandler;
import com.android.systemui.statusbar.phone.KeyguardBottomAreaView;
import com.android.systemui.statusbar.phone.KeyguardBypassController;
import com.android.systemui.statusbar.phone.KeyguardClockPositionAlgorithm;
import com.android.systemui.statusbar.phone.KeyguardDismissUtil;
import com.android.systemui.statusbar.phone.KeyguardSecBottomAreaViewController;
import com.android.systemui.statusbar.phone.KeyguardStatusBarView;
import com.android.systemui.statusbar.phone.KeyguardStatusBarViewController;
import com.android.systemui.statusbar.phone.KeyguardStatusBarWallpaperHelper;
import com.android.systemui.statusbar.phone.LSShadeTransitionLogger;
import com.android.systemui.statusbar.phone.LegacyActivityStarterInternalImpl;
import com.android.systemui.statusbar.phone.LegacyLightsOutNotifController;
import com.android.systemui.statusbar.phone.LegacyNotificationIconAreaControllerImpl;
import com.android.systemui.statusbar.phone.LetterboxAppearanceCalculator;
import com.android.systemui.statusbar.phone.LetterboxBackgroundProvider;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.LightBarTransitionsController;
import com.android.systemui.statusbar.phone.LockscreenGestureLogger;
import com.android.systemui.statusbar.phone.ManagedProfileController;
import com.android.systemui.statusbar.phone.ManagedProfileControllerImpl;
import com.android.systemui.statusbar.phone.NotificationIconAreaController;
import com.android.systemui.statusbar.phone.NotificationIconAreaControllerModule;
import com.android.systemui.statusbar.phone.NotificationListenerWithPlugins;
import com.android.systemui.statusbar.phone.PhoneStatusBarClockManager;
import com.android.systemui.statusbar.phone.PhoneStatusBarPolicy;
import com.android.systemui.statusbar.phone.PhoneStatusBarTransitions;
import com.android.systemui.statusbar.phone.PhoneStatusBarView;
import com.android.systemui.statusbar.phone.PhoneStatusBarViewController;
import com.android.systemui.statusbar.phone.QSScrimViewSwitch;
import com.android.systemui.statusbar.phone.SafeUIStatusBarKeyguardViewManager;
import com.android.systemui.statusbar.phone.SafeUIStatusBarWindowController;
import com.android.systemui.statusbar.phone.SamsungLightBarControlHelper;
import com.android.systemui.statusbar.phone.SamsungStatusBarGrayIconHelper;
import com.android.systemui.statusbar.phone.ScreenOffAnimationController;
import com.android.systemui.statusbar.phone.ScrimController;
import com.android.systemui.statusbar.phone.SecLsScrimControlHelper;
import com.android.systemui.statusbar.phone.SecPanelBackground;
import com.android.systemui.statusbar.phone.SecPanelBackgroundController;
import com.android.systemui.statusbar.phone.SecStatusBarKeyguardViewManager;
import com.android.systemui.statusbar.phone.SecUnlockedScreenOffAnimationHelper;
import com.android.systemui.statusbar.phone.StatusBarBoundsProvider;
import com.android.systemui.statusbar.phone.StatusBarContentInsetsProvider;
import com.android.systemui.statusbar.phone.StatusBarDemoMode;
import com.android.systemui.statusbar.phone.StatusBarHeadsUpChangeListener;
import com.android.systemui.statusbar.phone.StatusBarHideIconsForBouncerManager;
import com.android.systemui.statusbar.phone.StatusBarKeyguardViewManager;
import com.android.systemui.statusbar.phone.StatusBarLocation;
import com.android.systemui.statusbar.phone.StatusBarLocationPublisher;
import com.android.systemui.statusbar.phone.StatusBarMoveFromCenterAnimationController;
import com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarter;
import com.android.systemui.statusbar.phone.StatusBarNotificationActivityStarterLogger;
import com.android.systemui.statusbar.phone.StatusBarNotificationPresenter;
import com.android.systemui.statusbar.phone.StatusBarRemoteInputCallback;
import com.android.systemui.statusbar.phone.StatusBarSignalPolicy;
import com.android.systemui.statusbar.phone.StatusBarTouchableRegionManager;
import com.android.systemui.statusbar.phone.StatusIconContainer;
import com.android.systemui.statusbar.phone.StatusIconContainerController;
import com.android.systemui.statusbar.phone.StatusOverlayHoverListenerFactory;
import com.android.systemui.statusbar.phone.SubRoomNetworkInfo;
import com.android.systemui.statusbar.phone.SubScreenQuickPanelHeader;
import com.android.systemui.statusbar.phone.SubScreenQuickPanelHeaderController;
import com.android.systemui.statusbar.phone.SystemUIBottomSheetDialog$Factory;
import com.android.systemui.statusbar.phone.SystemUIDialog;
import com.android.systemui.statusbar.phone.SystemUIDialogFactory;
import com.android.systemui.statusbar.phone.SystemUIDialogManager;
import com.android.systemui.statusbar.phone.SysuiDarkIconDispatcher;
import com.android.systemui.statusbar.phone.TapAgainView;
import com.android.systemui.statusbar.phone.TapAgainViewController;
import com.android.systemui.statusbar.phone.TwoPhoneModeIconController;
import com.android.systemui.statusbar.phone.UnlockedScreenOffAnimationController;
import com.android.systemui.statusbar.phone.dagger.IndicatorPhoneModule;
import com.android.systemui.statusbar.phone.data.repository.DarkIconRepository;
import com.android.systemui.statusbar.phone.data.repository.DarkIconRepositoryImpl;
import com.android.systemui.statusbar.phone.datausage.DataUsageLabelManager;
import com.android.systemui.statusbar.phone.domain.interactor.DarkIconInteractor;
import com.android.systemui.statusbar.phone.domain.interactor.LightsOutInteractor;
import com.android.systemui.statusbar.phone.fragment.CollapsedStatusBarFragment;
import com.android.systemui.statusbar.phone.fragment.CollapsedStatusBarFragmentLogger;
import com.android.systemui.statusbar.phone.fragment.CollapsedStatusBarFragmentStartable;
import com.android.systemui.statusbar.phone.fragment.StatusBarVisibilityExt;
import com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent;
import com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentModule_ProvidePhoneStatusBarViewControllerFactory;
import com.android.systemui.statusbar.phone.knox.data.repository.KnoxStatusBarControlRepository;
import com.android.systemui.statusbar.phone.knox.data.repository.KnoxStatusBarControlRepositoryImpl;
import com.android.systemui.statusbar.phone.knox.domain.interactor.KnoxStatusBarControlInteractor;
import com.android.systemui.statusbar.phone.knox.ui.viewmodel.KnoxStatusBarControlViewModel;
import com.android.systemui.statusbar.phone.logo.CarrierHomeLogoViewController;
import com.android.systemui.statusbar.phone.ongoingactivity.OngoingActivityController;
import com.android.systemui.statusbar.phone.ongoingcall.KeyguardCallChipController;
import com.android.systemui.statusbar.phone.ongoingcall.OngoingCallController;
import com.android.systemui.statusbar.phone.ongoingcall.OngoingCallLogger;
import com.android.systemui.statusbar.phone.ongoingcall.data.repository.OngoingCallRepository;
import com.android.systemui.statusbar.phone.ui.DarkIconManager;
import com.android.systemui.statusbar.phone.ui.StatusBarIconController;
import com.android.systemui.statusbar.phone.ui.StatusBarIconControllerImpl;
import com.android.systemui.statusbar.phone.ui.StatusBarIconList;
import com.android.systemui.statusbar.phone.ui.TintedIconManager;
import com.android.systemui.statusbar.pipeline.StatusBarPipelineFlags;
import com.android.systemui.statusbar.pipeline.airplane.data.repository.AirplaneModeRepository;
import com.android.systemui.statusbar.pipeline.airplane.data.repository.AirplaneModeRepositoryImpl;
import com.android.systemui.statusbar.pipeline.airplane.domain.interactor.AirplaneModeInteractor;
import com.android.systemui.statusbar.pipeline.airplane.ui.viewmodel.AirplaneModeViewModel;
import com.android.systemui.statusbar.pipeline.airplane.ui.viewmodel.AirplaneModeViewModelImpl;
import com.android.systemui.statusbar.pipeline.carrier.CarrierInfoUtil;
import com.android.systemui.statusbar.pipeline.carrier.CarrierInfraMediator;
import com.android.systemui.statusbar.pipeline.carrier.CarrierInfraMediatorImpl;
import com.android.systemui.statusbar.pipeline.carrier.CommonUtil;
import com.android.systemui.statusbar.pipeline.carrier.FakeCarrierInfraMediatorImpl;
import com.android.systemui.statusbar.pipeline.carrier.MobileDataUtil;
import com.android.systemui.statusbar.pipeline.carrier.MobileRoamingUtil;
import com.android.systemui.statusbar.pipeline.carrier.MobileSignalUtil;
import com.android.systemui.statusbar.pipeline.carrier.SystemPropertiesWrapper;
import com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule;
import com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule_Companion_ProvideRealWifiRepositoryFactory;
import com.android.systemui.statusbar.pipeline.ethernet.domain.EthernetInteractor;
import com.android.systemui.statusbar.pipeline.icons.shared.BindableIconsRegistry;
import com.android.systemui.statusbar.pipeline.icons.shared.BindableIconsRegistryImpl;
import com.android.systemui.statusbar.pipeline.mobile.data.MobileInputLogger;
import com.android.systemui.statusbar.pipeline.mobile.data.model.SubscriptionsOrder;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.CarrierConfigCoreStartable;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.CarrierConfigRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.DummyMobileConnectionRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.MobileConnectionsRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.MobileRepositorySwitcher;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.demo.DemoMobileConnectionsRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.demo.DemoModeMobileConnectionDataSource;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.CarrierMergedConnectionRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.FullMobileConnectionRepository;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.MobileConnectionRepositoryImpl;
import com.android.systemui.statusbar.pipeline.mobile.data.repository.prod.MobileConnectionsRepositoryImpl;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileDataIconResource;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileDisabledDataIconResource;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileIconsInteractor;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileIconsInteractorImpl;
import com.android.systemui.statusbar.pipeline.mobile.domain.interactor.MobileRoamingIconResource;
import com.android.systemui.statusbar.pipeline.mobile.ui.MobileUiAdapter;
import com.android.systemui.statusbar.pipeline.mobile.ui.MobileViewLogger;
import com.android.systemui.statusbar.pipeline.mobile.ui.VerboseMobileViewLogger;
import com.android.systemui.statusbar.pipeline.mobile.ui.util.MobileSignalIconResource;
import com.android.systemui.statusbar.pipeline.mobile.ui.viewmodel.MobileIconsViewModel;
import com.android.systemui.statusbar.pipeline.mobile.util.MobileMappingsProxyImpl;
import com.android.systemui.statusbar.pipeline.mobile.util.SimCardInfoUtil;
import com.android.systemui.statusbar.pipeline.mobile.util.SubscriptionManagerProxyImpl;
import com.android.systemui.statusbar.pipeline.satellite.data.DeviceBasedSatelliteRepository;
import com.android.systemui.statusbar.pipeline.satellite.data.DeviceBasedSatelliteRepositorySwitcher;
import com.android.systemui.statusbar.pipeline.satellite.data.RealDeviceBasedSatelliteRepository;
import com.android.systemui.statusbar.pipeline.satellite.data.demo.DemoDeviceBasedSatelliteDataSource;
import com.android.systemui.statusbar.pipeline.satellite.data.demo.DemoDeviceBasedSatelliteRepository;
import com.android.systemui.statusbar.pipeline.satellite.data.prod.DeviceBasedSatelliteRepositoryImpl;
import com.android.systemui.statusbar.pipeline.satellite.domain.interactor.DeviceBasedSatelliteInteractor;
import com.android.systemui.statusbar.pipeline.satellite.ui.DeviceBasedSatelliteBindableIcon;
import com.android.systemui.statusbar.pipeline.satellite.ui.viewmodel.DeviceBasedSatelliteViewModel;
import com.android.systemui.statusbar.pipeline.satellite.ui.viewmodel.DeviceBasedSatelliteViewModelImpl;
import com.android.systemui.statusbar.pipeline.shared.ConnectivityConstants;
import com.android.systemui.statusbar.pipeline.shared.ConnectivityInputLogger;
import com.android.systemui.statusbar.pipeline.shared.data.model.ConnectivitySlots;
import com.android.systemui.statusbar.pipeline.shared.data.repository.ConnectivityRepository;
import com.android.systemui.statusbar.pipeline.shared.data.repository.ConnectivityRepositoryImpl;
import com.android.systemui.statusbar.pipeline.shared.data.repository.ImsRegStateUtil;
import com.android.systemui.statusbar.pipeline.shared.ui.BTTetherUiAdapter;
import com.android.systemui.statusbar.pipeline.shared.ui.binder.CollapsedStatusBarViewBinder;
import com.android.systemui.statusbar.pipeline.shared.ui.binder.CollapsedStatusBarViewBinderImpl;
import com.android.systemui.statusbar.pipeline.shared.ui.viewmodel.CollapsedStatusBarViewModel;
import com.android.systemui.statusbar.pipeline.shared.ui.viewmodel.CollapsedStatusBarViewModelImpl;
import com.android.systemui.statusbar.pipeline.shared.ui.viewmodel.InternetTileViewModel;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.RealWifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.WifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.WifiRepositorySwitcher;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.demo.DemoModeWifiDataSource;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.demo.DemoWifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.prod.DisabledWifiRepository;
import com.android.systemui.statusbar.pipeline.wifi.data.repository.prod.WifiRepositoryImpl;
import com.android.systemui.statusbar.pipeline.wifi.domain.interactor.WifiInteractor;
import com.android.systemui.statusbar.pipeline.wifi.domain.interactor.WifiInteractorImpl;
import com.android.systemui.statusbar.pipeline.wifi.shared.WifiConstants;
import com.android.systemui.statusbar.pipeline.wifi.ui.WifiUiAdapter;
import com.android.systemui.statusbar.pipeline.wifi.ui.util.WifiSignalIconResource;
import com.android.systemui.statusbar.pipeline.wifi.ui.viewmodel.WifiViewModel;
import com.android.systemui.statusbar.policy.AccessibilityManagerWrapper;
import com.android.systemui.statusbar.policy.AospPolicyModule_ProvideBatteryControllerFactory;
import com.android.systemui.statusbar.policy.AppLockNotificationController;
import com.android.systemui.statusbar.policy.AppLockNotificationControllerImpl;
import com.android.systemui.statusbar.policy.AvalancheController;
import com.android.systemui.statusbar.policy.BatteryController;
import com.android.systemui.statusbar.policy.BatteryControllerLogger;
import com.android.systemui.statusbar.policy.BatteryControllerStartable;
import com.android.systemui.statusbar.policy.BatteryStateNotifier;
import com.android.systemui.statusbar.policy.BluetoothController;
import com.android.systemui.statusbar.policy.BluetoothControllerImpl;
import com.android.systemui.statusbar.policy.CastController;
import com.android.systemui.statusbar.policy.CastControllerImpl;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DataSaverController;
import com.android.systemui.statusbar.policy.DevicePostureController;
import com.android.systemui.statusbar.policy.DevicePostureControllerImpl;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.policy.DeviceProvisionedControllerImpl;
import com.android.systemui.statusbar.policy.DeviceStateRotationLockSettingController;
import com.android.systemui.statusbar.policy.DeviceStateRotationLockSettingControllerLogger;
import com.android.systemui.statusbar.policy.ExtensionController;
import com.android.systemui.statusbar.policy.ExtensionControllerImpl;
import com.android.systemui.statusbar.policy.FlashlightController;
import com.android.systemui.statusbar.policy.FlashlightControllerImpl;
import com.android.systemui.statusbar.policy.HeadsUpManager;
import com.android.systemui.statusbar.policy.HeadsUpManagerLogger;
import com.android.systemui.statusbar.policy.HotspotController;
import com.android.systemui.statusbar.policy.HotspotControllerImpl;
import com.android.systemui.statusbar.policy.IndividualSensorPrivacyController;
import com.android.systemui.statusbar.policy.KeyguardQsUserSwitchController;
import com.android.systemui.statusbar.policy.KeyguardStateController;
import com.android.systemui.statusbar.policy.KeyguardStateControllerImpl;
import com.android.systemui.statusbar.policy.KeyguardUserSwitcherController;
import com.android.systemui.statusbar.policy.KeyguardUserSwitcherView;
import com.android.systemui.statusbar.policy.LocationController;
import com.android.systemui.statusbar.policy.LocationControllerImpl;
import com.android.systemui.statusbar.policy.NetspeedView;
import com.android.systemui.statusbar.policy.NetspeedViewController;
import com.android.systemui.statusbar.policy.NextAlarmController;
import com.android.systemui.statusbar.policy.NextAlarmControllerImpl;
import com.android.systemui.statusbar.policy.PolicyModule;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideAlarmTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideCameraToggleTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideDndTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideFlashlightTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideLocationTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideMicrophoneToggleTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideUiModeNightTileConfigFactory;
import com.android.systemui.statusbar.policy.PolicyModule_Companion_ProvideWorkModeTileConfigFactory;
import com.android.systemui.statusbar.policy.QSClockBellAlternateCalendarUtil;
import com.android.systemui.statusbar.policy.QSClockBellTower;
import com.android.systemui.statusbar.policy.QSClockIndicatorView;
import com.android.systemui.statusbar.policy.QSClockIndicatorViewController;
import com.android.systemui.statusbar.policy.RemoteInputQuickSettingsDisabler;
import com.android.systemui.statusbar.policy.RemoteInputUriController;
import com.android.systemui.statusbar.policy.RemoteInputView;
import com.android.systemui.statusbar.policy.RemoteInputViewController;
import com.android.systemui.statusbar.policy.RemoteInputViewControllerImpl;
import com.android.systemui.statusbar.policy.RotationLockController;
import com.android.systemui.statusbar.policy.RotationLockControllerImpl;
import com.android.systemui.statusbar.policy.SBluetoothController;
import com.android.systemui.statusbar.policy.SBluetoothControllerImpl;
import com.android.systemui.statusbar.policy.SatelliteModeObserverHelper;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.statusbar.policy.SecurityControllerImpl;
import com.android.systemui.statusbar.policy.SensitiveNotificationProtectionController;
import com.android.systemui.statusbar.policy.SensitiveNotificationProtectionControllerImpl;
import com.android.systemui.statusbar.policy.SensitiveNotificationProtectionControllerLogger;
import com.android.systemui.statusbar.policy.SensorPrivacyController;
import com.android.systemui.statusbar.policy.SensorPrivacyControllerImpl;
import com.android.systemui.statusbar.policy.SmartActionInflaterImpl;
import com.android.systemui.statusbar.policy.SmartReplyConstants;
import com.android.systemui.statusbar.policy.SmartReplyInflaterImpl;
import com.android.systemui.statusbar.policy.SmartReplyStateInflaterImpl;
import com.android.systemui.statusbar.policy.SplitShadeStateController;
import com.android.systemui.statusbar.policy.SplitShadeStateControllerImpl;
import com.android.systemui.statusbar.policy.UserInfoController;
import com.android.systemui.statusbar.policy.UserInfoControllerImpl;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.policy.VariableDateViewController$Factory;
import com.android.systemui.statusbar.policy.WalletController;
import com.android.systemui.statusbar.policy.WalletControllerImpl;
import com.android.systemui.statusbar.policy.ZenModeController;
import com.android.systemui.statusbar.policy.ZenModeControllerImpl;
import com.android.systemui.statusbar.policy.bluetooth.BluetoothRepository;
import com.android.systemui.statusbar.policy.bluetooth.BluetoothRepositoryImpl;
import com.android.systemui.statusbar.policy.dagger.RemoteInputViewSubcomponent;
import com.android.systemui.statusbar.policy.dagger.StatusBarPolicyModule_ProvideAutoRotateSettingsManagerFactory;
import com.android.systemui.statusbar.policy.data.repository.DeviceProvisioningRepositoryImpl;
import com.android.systemui.statusbar.policy.data.repository.UserSetupRepository;
import com.android.systemui.statusbar.policy.data.repository.UserSetupRepositoryImpl;
import com.android.systemui.statusbar.policy.data.repository.ZenModeRepositoryImpl;
import com.android.systemui.statusbar.policy.domain.interactor.DeviceProvisioningInteractor;
import com.android.systemui.statusbar.policy.domain.interactor.UserSetupInteractor;
import com.android.systemui.statusbar.policy.domain.interactor.ZenModeInteractor;
import com.android.systemui.statusbar.ui.SystemBarUtilsProxyImpl;
import com.android.systemui.statusbar.ui.SystemBarUtilsState;
import com.android.systemui.statusbar.ui.viewmodel.KeyguardStatusBarViewModel;
import com.android.systemui.statusbar.window.StatusBarWindowController;
import com.android.systemui.statusbar.window.StatusBarWindowControllerExt;
import com.android.systemui.statusbar.window.StatusBarWindowModule;
import com.android.systemui.statusbar.window.StatusBarWindowStateController;
import com.android.systemui.statusbar.window.StatusBarWindowView;
import com.android.systemui.stylus.StylusManager;
import com.android.systemui.stylus.StylusUsiPowerStartable;
import com.android.systemui.stylus.StylusUsiPowerUI;
import com.android.systemui.subscreen.ScreenRecordingStateProvider;
import com.android.systemui.subscreen.SubHomeActivity;
import com.android.systemui.subscreen.SubScreenFallback;
import com.android.systemui.subscreen.SubScreenManager;
import com.android.systemui.subscreen.SubScreenQuickPanelWindowController;
import com.android.systemui.subscreen.SubScreenQuickPanelWindowView;
import com.android.systemui.subscreen.dagger.SubScreenQuickPanelComponent;
import com.android.systemui.subscreen.dagger.SubScreenQuickPanelModule;
import com.android.systemui.subscreen.dagger.SubScreenQuickPanelModule_ProvideSubScreenQuickPanelHeaderFactory;
import com.android.systemui.telephony.TelephonyCallback;
import com.android.systemui.telephony.TelephonyListenerManager;
import com.android.systemui.telephony.data.repository.TelephonyRepository;
import com.android.systemui.telephony.data.repository.TelephonyRepositoryImpl;
import com.android.systemui.telephony.domain.interactor.TelephonyInteractor;
import com.android.systemui.telephony.ui.activity.SwitchToManagedProfileForCallActivity;
import com.android.systemui.temporarydisplay.TemporaryViewUiEventLogger;
import com.android.systemui.temporarydisplay.chipbar.ChipbarAnimator;
import com.android.systemui.temporarydisplay.chipbar.ChipbarCoordinator;
import com.android.systemui.temporarydisplay.chipbar.ChipbarLogger;
import com.android.systemui.temporarydisplay.chipbar.SwipeChipbarAwayGestureHandler;
import com.android.systemui.temporarydisplay.dagger.TemporaryDisplayModule;
import com.android.systemui.theme.ThemeOverlayApplier;
import com.android.systemui.theme.ThemeOverlayController;
import com.android.systemui.toast.ToastFactory;
import com.android.systemui.toast.ToastLogger;
import com.android.systemui.toast.ToastUI;
import com.android.systemui.touch.TouchInsetManager;
import com.android.systemui.touchpad.tutorial.ui.TouchpadTutorialViewModel;
import com.android.systemui.touchpad.tutorial.ui.view.TouchpadTutorialActivity;
import com.android.systemui.tuner.TunerActivity;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.tuner.TunerServiceImpl;
import com.android.systemui.uithreadmonitor.BinderCallMonitor;
import com.android.systemui.uithreadmonitor.BinderCallMonitorConstants;
import com.android.systemui.uithreadmonitor.BinderCallMonitorImpl;
import com.android.systemui.uithreadmonitor.LooperSlowLogController;
import com.android.systemui.uithreadmonitor.LooperSlowLogControllerImpl;
import com.android.systemui.uithreadmonitor.SecVendorServices;
import com.android.systemui.uithreadmonitor.UiThreadMonitor;
import com.android.systemui.unfold.DisplaySwitchLatencyLogger;
import com.android.systemui.unfold.DisplaySwitchLatencyTracker;
import com.android.systemui.unfold.FoldAodAnimationController;
import com.android.systemui.unfold.FoldLightRevealOverlayAnimation;
import com.android.systemui.unfold.FoldStateProviderModule;
import com.android.systemui.unfold.FullscreenLightRevealAnimation;
import com.android.systemui.unfold.FullscreenLightRevealAnimationController;
import com.android.systemui.unfold.HingeAngleProviderInternalModule;
import com.android.systemui.unfold.SysUIUnfoldComponent;
import com.android.systemui.unfold.SysUIUnfoldModule;
import com.android.systemui.unfold.SysUIUnfoldModule_ProvideSysUIUnfoldComponentFactory;
import com.android.systemui.unfold.UnfoldHapticsPlayer;
import com.android.systemui.unfold.UnfoldInitializationStartable;
import com.android.systemui.unfold.UnfoldLatencyTracker;
import com.android.systemui.unfold.UnfoldLightRevealOverlayAnimation;
import com.android.systemui.unfold.UnfoldRotationProviderInternalModule;
import com.android.systemui.unfold.UnfoldSharedInternalModule;
import com.android.systemui.unfold.UnfoldSharedInternalModule_UnfoldTransitionProgressProviderFactory;
import com.android.systemui.unfold.UnfoldSharedModule;
import com.android.systemui.unfold.UnfoldTraceLogger;
import com.android.systemui.unfold.UnfoldTransitionModule;
import com.android.systemui.unfold.UnfoldTransitionModule_ProvideShellProgressProviderFactory;
import com.android.systemui.unfold.UnfoldTransitionModule_ProvidesFoldStateLoggingProviderFactory;
import com.android.systemui.unfold.UnfoldTransitionProgressProvider;
import com.android.systemui.unfold.UnfoldTransitionWallpaperController;
import com.android.systemui.unfold.config.ResourceUnfoldTransitionConfig;
import com.android.systemui.unfold.config.UnfoldTransitionConfig;
import com.android.systemui.unfold.data.repository.FoldStateRepositoryImpl;
import com.android.systemui.unfold.data.repository.UnfoldTransitionRepositoryImpl;
import com.android.systemui.unfold.domain.interactor.UnfoldTransitionInteractor;
import com.android.systemui.unfold.progress.FixedTimingTransitionProgressProvider;
import com.android.systemui.unfold.progress.MainThreadUnfoldTransitionProgressProvider;
import com.android.systemui.unfold.progress.PhysicsBasedUnfoldTransitionProgressProvider;
import com.android.systemui.unfold.progress.UnfoldFrameCallbackScheduler;
import com.android.systemui.unfold.progress.UnfoldTransitionProgressForwarder;
import com.android.systemui.unfold.system.ActivityManagerActivityTypeProvider;
import com.android.systemui.unfold.system.DeviceStateManagerFoldProvider;
import com.android.systemui.unfold.system.DeviceStateRepository;
import com.android.systemui.unfold.system.DeviceStateRepositoryImpl;
import com.android.systemui.unfold.system.SystemUnfoldSharedModule;
import com.android.systemui.unfold.updates.DeviceFoldStateProvider;
import com.android.systemui.unfold.updates.FoldProvider;
import com.android.systemui.unfold.updates.FoldStateProvider;
import com.android.systemui.unfold.updates.RotationChangeProvider;
import com.android.systemui.unfold.updates.hinge.EmptyHingeAngleProvider;
import com.android.systemui.unfold.updates.hinge.HingeAngleProvider;
import com.android.systemui.unfold.updates.hinge.HingeSensorAngleProvider;
import com.android.systemui.unfold.updates.screen.ScreenStatusProvider;
import com.android.systemui.unfold.util.ATraceLoggerTransitionProgressListener;
import com.android.systemui.unfold.util.CurrentActivityTypeProvider;
import com.android.systemui.unfold.util.NaturalRotationUnfoldProgressProvider;
import com.android.systemui.unfold.util.ScaleAwareTransitionProgressProvider;
import com.android.systemui.unfold.util.ScopedUnfoldTransitionProgressProvider;
import com.android.systemui.unfold.util.UnfoldKeyguardVisibilityManager;
import com.android.systemui.unfold.util.UnfoldKeyguardVisibilityManagerImpl;
import com.android.systemui.unfold.util.UnfoldKeyguardVisibilityProvider;
import com.android.systemui.unfold.util.UnfoldOnlyProgressProvider;
import com.android.systemui.usb.StorageNotification;
import com.android.systemui.usb.UsbAccessoryUriActivity;
import com.android.systemui.usb.UsbAudioWarningDialogMessage;
import com.android.systemui.usb.UsbConfirmActivity;
import com.android.systemui.usb.UsbDebuggingActivity;
import com.android.systemui.usb.UsbDebuggingSecondaryUserActivity;
import com.android.systemui.usb.UsbPermissionActivity;
import com.android.systemui.user.CreateUserActivity;
import com.android.systemui.user.UserCreator;
import com.android.systemui.user.data.repository.UserRepository;
import com.android.systemui.user.data.repository.UserRepositoryImpl;
import com.android.systemui.user.data.repository.UserSwitcherRepository;
import com.android.systemui.user.data.repository.UserSwitcherRepositoryImpl;
import com.android.systemui.user.domain.interactor.GuestUserInteractor;
import com.android.systemui.user.domain.interactor.HeadlessSystemUserMode;
import com.android.systemui.user.domain.interactor.HeadlessSystemUserModeImpl;
import com.android.systemui.user.domain.interactor.RefreshUsersScheduler;
import com.android.systemui.user.domain.interactor.SelectedUserInteractor;
import com.android.systemui.user.domain.interactor.UserSwitcherInteractor;
import com.android.systemui.user.ui.dialog.UserSwitcherDialogCoordinator;
import com.android.systemui.user.ui.viewmodel.StatusBarUserChipViewModel;
import com.android.systemui.user.ui.viewmodel.UserSwitcherViewModel;
import com.android.systemui.user.utils.UserScopedService;
import com.android.systemui.user.utils.UserScopedServiceImpl;
import com.android.systemui.util.ActivityTaskManagerProxy;
import com.android.systemui.util.AsyncActivityLauncher;
import com.android.systemui.util.CarLifeManager;
import com.android.systemui.util.CarrierConfigTracker;
import com.android.systemui.util.CoverUtil;
import com.android.systemui.util.DesktopManager;
import com.android.systemui.util.DesktopManagerImpl;
import com.android.systemui.util.DeviceConfigProxy;
import com.android.systemui.util.DeviceState;
import com.android.systemui.util.DeviceTypeWrapper;
import com.android.systemui.util.EventLog;
import com.android.systemui.util.EventLogImpl;
import com.android.systemui.util.InitializationChecker;
import com.android.systemui.util.MemoryMonitor;
import com.android.systemui.util.NotificationChannels;
import com.android.systemui.util.QsResetSettingsManager;
import com.android.systemui.util.QsStatusEventLog;
import com.android.systemui.util.RingerModeTracker;
import com.android.systemui.util.RingerModeTrackerImpl;
import com.android.systemui.util.SafeUIState;
import com.android.systemui.util.SettingsHelper;
import com.android.systemui.util.ThreadAssert;
import com.android.systemui.util.WallpaperController;
import com.android.systemui.util.animation.data.repository.AnimationStatusRepositoryImpl;
import com.android.systemui.util.concurrency.DelayableExecutor;
import com.android.systemui.util.concurrency.Execution;
import com.android.systemui.util.concurrency.ExecutionImpl;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideHandlerFactory;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideMainDelayableExecutorFactory;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideMainExecutorFactory;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideMainHandlerFactory;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideMainLooperFactory;
import com.android.systemui.util.concurrency.GlobalConcurrencyModule_ProvideUiBackgroundExecutorFactory;
import com.android.systemui.util.concurrency.MessageRouter;
import com.android.systemui.util.concurrency.RepeatableExecutor;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBackPanelUiThreadContextFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBackgroundDelayableExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBackgroundExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBackgroundRepeatableExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBgHandlerFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBgLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBroadcastRunningExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideBroadcastRunningLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideLongRunningDelayableExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideLongRunningExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideLongRunningLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideNotifInflationExecutorFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideNotifInflationLooperFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvideTimeTickHandlerFactory;
import com.android.systemui.util.concurrency.SysUIConcurrencyModule_ProvidesMainMessageRouterFactory;
import com.android.systemui.util.concurrency.ThreadFactoryImpl;
import com.android.systemui.util.concurrency.ThreadFactoryImpl_Factory;
import com.android.systemui.util.concurrency.UiThreadContext;
import com.android.systemui.util.display.DisplayHelper;
import com.android.systemui.util.io.Files;
import com.android.systemui.util.kotlin.GlobalCoroutinesModule;
import com.android.systemui.util.kotlin.GlobalCoroutinesModule_ApplicationScopeFactory;
import com.android.systemui.util.kotlin.GlobalCoroutinesModule_MainCoroutineContextFactory;
import com.android.systemui.util.kotlin.GlobalCoroutinesModule_MainDispatcherFactory;
import com.android.systemui.util.kotlin.GlobalCoroutinesModule_TracingCoroutineContextFactory;
import com.android.systemui.util.kotlin.JavaAdapter;
import com.android.systemui.util.kotlin.SysUICoroutinesModule;
import com.android.systemui.util.kotlin.SysUICoroutinesModule_BgApplicationScopeFactory;
import com.android.systemui.util.kotlin.SysUICoroutinesModule_BgCoroutineContextFactory;
import com.android.systemui.util.kotlin.SysUICoroutinesModule_BgDispatcherFactory;
import com.android.systemui.util.leak.LeakDetector;
import com.android.systemui.util.leak.LeakModule;
import com.android.systemui.util.leak.LeakModule_ProvidesLeakDetectorFactory;
import com.android.systemui.util.leak.LeakReporter;
import com.android.systemui.util.leak.TrackedCollections_Factory;
import com.android.systemui.util.reference.WeakReferenceFactoryImpl;
import com.android.systemui.util.sensors.AsyncSensorManager;
import com.android.systemui.util.sensors.PostureDependentProximitySensor_Factory;
import com.android.systemui.util.sensors.ProximityCheck;
import com.android.systemui.util.sensors.ProximitySensor;
import com.android.systemui.util.sensors.ProximitySensorImpl_Factory;
import com.android.systemui.util.sensors.SensorModule_ProvidePostureToProximitySensorMappingFactory;
import com.android.systemui.util.sensors.SensorModule_ProvidePostureToSecondaryProximitySensorMappingFactory;
import com.android.systemui.util.sensors.SensorModule_ProvidePrimaryProximitySensorFactory;
import com.android.systemui.util.sensors.SensorModule_ProvideProximityCheckFactory;
import com.android.systemui.util.sensors.SensorModule_ProvideProximitySensorFactory;
import com.android.systemui.util.sensors.SensorModule_ProvideSecondaryProximitySensorFactory;
import com.android.systemui.util.sensors.ThresholdSensor;
import com.android.systemui.util.sensors.ThresholdSensorImpl;
import com.android.systemui.util.sensors.ThresholdSensorImpl_BuilderFactory_Factory;
import com.android.systemui.util.sensors.ThresholdSensorImpl_Builder_Factory;
import com.android.systemui.util.settings.GlobalSettings;
import com.android.systemui.util.settings.GlobalSettingsImpl_Factory;
import com.android.systemui.util.settings.SecureSettings;
import com.android.systemui.util.settings.SecureSettingsImpl_Factory;
import com.android.systemui.util.settings.SystemSettings;
import com.android.systemui.util.settings.SystemSettingsImpl_Factory;
import com.android.systemui.util.settings.repository.UserAwareSecureSettingsRepository;
import com.android.systemui.util.settings.repository.UserAwareSecureSettingsRepositoryImpl;
import com.android.systemui.util.time.DateFormatUtil;
import com.android.systemui.util.time.SystemClock;
import com.android.systemui.util.time.SystemClockImpl;
import com.android.systemui.util.view.ViewUtil;
import com.android.systemui.util.wakelock.DelayedWakeLock;
import com.android.systemui.util.wakelock.WakeLock;
import com.android.systemui.util.wakelock.WakeLockLogger;
import com.android.systemui.util.wrapper.DisplayUtilsWrapper;
import com.android.systemui.util.wrapper.RotationPolicyWrapper;
import com.android.systemui.util.wrapper.RotationPolicyWrapperImpl;
import com.android.systemui.utils.GlobalWindowManager;
import com.android.systemui.utils.UserRestrictionChecker;
import com.android.systemui.vibrate.VibrationUtil;
import com.android.systemui.volume.CsdWarningDialog;
import com.android.systemui.volume.SamsungVolumeDialogImpl;
import com.android.systemui.volume.VolumeComponent;
import com.android.systemui.volume.VolumeDependency;
import com.android.systemui.volume.VolumeDialogComponent;
import com.android.systemui.volume.VolumeDialogControllerImpl;
import com.android.systemui.volume.VolumePanelDialogReceiver;
import com.android.systemui.volume.VolumePanelFactory;
import com.android.systemui.volume.VolumeUI;
import com.android.systemui.volume.dagger.AncModule;
import com.android.systemui.volume.dagger.AudioModule;
import com.android.systemui.volume.dagger.CaptioningModule;
import com.android.systemui.volume.dagger.MediaDevicesModule;
import com.android.systemui.volume.dagger.SpatializerModule;
import com.android.systemui.volume.dagger.VolumeModule_ProvideVolumeDialogFactory;
import com.android.systemui.volume.data.repository.VolumeDialogRepository;
import com.android.systemui.volume.domain.interactor.AudioOutputInteractor;
import com.android.systemui.volume.domain.interactor.DeviceIconInteractor;
import com.android.systemui.volume.domain.interactor.VolumeDialogInteractor;
import com.android.systemui.volume.domain.interactor.VolumePanelNavigationInteractor;
import com.android.systemui.volume.domain.startable.AudioModeLoggerStartable;
import com.android.systemui.volume.panel.component.anc.data.repository.AncSliceRepository;
import com.android.systemui.volume.panel.component.anc.data.repository.AncSliceRepositoryImpl;
import com.android.systemui.volume.panel.component.anc.domain.AncAvailabilityCriteria;
import com.android.systemui.volume.panel.component.anc.domain.interactor.AncSliceInteractor;
import com.android.systemui.volume.panel.component.anc.ui.composable.AncButtonComponent;
import com.android.systemui.volume.panel.component.anc.ui.composable.AncPopup;
import com.android.systemui.volume.panel.component.anc.ui.viewmodel.AncViewModel;
import com.android.systemui.volume.panel.component.bottombar.ui.BottomBarComponent;
import com.android.systemui.volume.panel.component.bottombar.ui.viewmodel.BottomBarViewModel;
import com.android.systemui.volume.panel.component.captioning.CaptioningModule_Companion_ProvideVolumePanelUiComponentFactory;
import com.android.systemui.volume.panel.component.captioning.domain.CaptioningAvailabilityCriteria;
import com.android.systemui.volume.panel.component.captioning.ui.viewmodel.CaptioningViewModel;
import com.android.systemui.volume.panel.component.mediaoutput.data.repository.LocalMediaRepositoryFactory;
import com.android.systemui.volume.panel.component.mediaoutput.data.repository.LocalMediaRepositoryFactoryImpl;
import com.android.systemui.volume.panel.component.mediaoutput.domain.interactor.MediaControllerInteractor;
import com.android.systemui.volume.panel.component.mediaoutput.domain.interactor.MediaControllerInteractorImpl;
import com.android.systemui.volume.panel.component.mediaoutput.domain.interactor.MediaDeviceSessionInteractor;
import com.android.systemui.volume.panel.component.mediaoutput.domain.interactor.MediaOutputActionsInteractor;
import com.android.systemui.volume.panel.component.mediaoutput.domain.interactor.MediaOutputComponentInteractor;
import com.android.systemui.volume.panel.component.mediaoutput.domain.interactor.MediaOutputInteractor;
import com.android.systemui.volume.panel.component.mediaoutput.shared.model.MediaDeviceSession;
import com.android.systemui.volume.panel.component.mediaoutput.ui.composable.MediaOutputComponent;
import com.android.systemui.volume.panel.component.mediaoutput.ui.viewmodel.MediaOutputViewModel;
import com.android.systemui.volume.panel.component.popup.ui.composable.VolumePanelPopup;
import com.android.systemui.volume.panel.component.spatial.domain.SpatialAudioAvailabilityCriteria;
import com.android.systemui.volume.panel.component.spatial.domain.interactor.SpatialAudioComponentInteractor;
import com.android.systemui.volume.panel.component.spatialaudio.ui.composable.SpatialAudioComponent;
import com.android.systemui.volume.panel.component.spatialaudio.ui.composable.SpatialAudioPopup;
import com.android.systemui.volume.panel.component.volume.domain.interactor.AudioSlidersInteractor;
import com.android.systemui.volume.panel.component.volume.slider.ui.viewmodel.AudioStreamSliderViewModel;
import com.android.systemui.volume.panel.component.volume.slider.ui.viewmodel.CastVolumeSliderViewModel;
import com.android.systemui.volume.panel.component.volume.ui.composable.VolumeSlidersComponent;
import com.android.systemui.volume.panel.component.volume.ui.viewmodel.AudioVolumeComponentViewModel;
import com.android.systemui.volume.panel.dagger.VolumePanelComponent;
import com.android.systemui.volume.panel.data.repository.VolumePanelGlobalStateRepository;
import com.android.systemui.volume.panel.domain.AlwaysAvailableCriteria;
import com.android.systemui.volume.panel.domain.DomainModule_Companion_ProvideEnabledComponentsFactory;
import com.android.systemui.volume.panel.domain.interactor.ComponentsInteractor;
import com.android.systemui.volume.panel.domain.interactor.ComponentsInteractorImpl;
import com.android.systemui.volume.panel.domain.interactor.VolumePanelGlobalStateInteractor;
import com.android.systemui.volume.panel.shared.flag.VolumePanelFlag;
import com.android.systemui.volume.panel.ui.UiModule;
import com.android.systemui.volume.panel.ui.composable.ComponentsFactory;
import com.android.systemui.volume.panel.ui.layout.ComponentsLayoutManager;
import com.android.systemui.volume.panel.ui.layout.DefaultComponentsLayoutManager;
import com.android.systemui.volume.panel.ui.viewmodel.VolumePanelViewModel;
import com.android.systemui.volume.ui.navigation.VolumeNavigator;
import com.android.systemui.volume.util.BluetoothAdapterWrapper;
import com.android.systemui.volume.util.BroadcastReceiverManager;
import com.android.systemui.volume.util.DesktopManagerWrapper;
import com.android.systemui.volume.util.DeviceStateManagerWrapper;
import com.android.systemui.volume.util.DisplayManagerWrapper;
import com.android.systemui.volume.util.SALoggingWrapper;
import com.android.systemui.volume.util.SoundAssistantManagerWrapper;
import com.android.systemui.wallet.controller.QuickAccessWalletController;
import com.android.systemui.wallet.controller.WalletContextualLocationsService;
import com.android.systemui.wallet.controller.WalletContextualSuggestionsController;
import com.android.systemui.wallet.ui.WalletActivity;
import com.android.systemui.wallpaper.CoverWallpaper;
import com.android.systemui.wallpaper.CoverWallpaperController;
import com.android.systemui.wallpaper.KeyguardWallpaper;
import com.android.systemui.wallpaper.KeyguardWallpaperController;
import com.android.systemui.wallpaper.KeyguardWallpaperEventHandler;
import com.android.systemui.wallpaper.PluginWallpaper;
import com.android.systemui.wallpaper.PluginWallpaperController;
import com.android.systemui.wallpaper.WallpaperChangeNotifier;
import com.android.systemui.wallpaper.WallpaperEventNotifier;
import com.android.systemui.wallpaper.colors.SystemWallpaperColors;
import com.android.systemui.wallpaper.log.WallpaperLogger;
import com.android.systemui.wallpaper.log.WallpaperLoggerImpl;
import com.android.systemui.wallpapers.ImageWallpaper;
import com.android.systemui.wallpapers.data.repository.WallpaperRepository;
import com.android.systemui.wallpapers.data.repository.WallpaperRepositoryImpl;
import com.android.systemui.wmshell.BubblesManager;
import com.android.systemui.wmshell.WMShell;
import com.android.wm.shell.ProtoLogController;
import com.android.wm.shell.RootDisplayAreaOrganizer;
import com.android.wm.shell.RootTaskDisplayAreaOrganizer;
import com.android.wm.shell.ShellTaskOrganizer;
import com.android.wm.shell.WindowManagerShellWrapper;
import com.android.wm.shell.activityembedding.ActivityEmbeddingController;
import com.android.wm.shell.animation.FlingAnimationUtils;
import com.android.wm.shell.back.BackAnimationBackground;
import com.android.wm.shell.back.BackAnimationController;
import com.android.wm.shell.back.CrossTaskBackAnimation;
import com.android.wm.shell.back.CustomCrossActivityBackAnimation;
import com.android.wm.shell.back.DefaultCrossActivityBackAnimation;
import com.android.wm.shell.back.SamsungCrossActivityBackAnimation;
import com.android.wm.shell.back.ShellBackAnimationRegistry;
import com.android.wm.shell.bubbles.BubbleController;
import com.android.wm.shell.bubbles.BubbleData;
import com.android.wm.shell.bubbles.BubbleDataRepository;
import com.android.wm.shell.bubbles.BubbleEducationController;
import com.android.wm.shell.bubbles.BubbleLogger;
import com.android.wm.shell.bubbles.BubblePositioner;
import com.android.wm.shell.bubbles.Bubbles;
import com.android.wm.shell.bubbles.properties.ProdBubbleProperties;
import com.android.wm.shell.bubbles.storage.BubblePersistentRepository;
import com.android.wm.shell.common.DisplayController;
import com.android.wm.shell.common.DisplayImeController;
import com.android.wm.shell.common.DisplayInsetsController;
import com.android.wm.shell.common.DisplayLayout;
import com.android.wm.shell.common.DockStateReader;
import com.android.wm.shell.common.FloatingContentCoordinator;
import com.android.wm.shell.common.LaunchAdjacentController;
import com.android.wm.shell.common.MultiInstanceHelper;
import com.android.wm.shell.common.ShellExecutor;
import com.android.wm.shell.common.SyncTransactionQueue;
import com.android.wm.shell.common.SystemWindows;
import com.android.wm.shell.common.TabletopModeController;
import com.android.wm.shell.common.TaskStackListenerImpl;
import com.android.wm.shell.common.TransactionPool;
import com.android.wm.shell.common.pip.PhonePipKeepClearAlgorithm;
import com.android.wm.shell.common.pip.PhoneSizeSpecSource;
import com.android.wm.shell.common.pip.PipAppOpsListener;
import com.android.wm.shell.common.pip.PipBoundsAlgorithm;
import com.android.wm.shell.common.pip.PipBoundsState;
import com.android.wm.shell.common.pip.PipDisplayLayoutState;
import com.android.wm.shell.common.pip.PipMediaController;
import com.android.wm.shell.common.pip.PipSnapAlgorithm;
import com.android.wm.shell.common.pip.PipUiEventLogger;
import com.android.wm.shell.common.pip.PipUtils;
import com.android.wm.shell.common.pip.SizeSpecSource;
import com.android.wm.shell.compatui.CompatUIConfiguration;
import com.android.wm.shell.compatui.CompatUIShellCommandHandler;
import com.android.wm.shell.compatui.CompatUIStatusManager;
import com.android.wm.shell.compatui.api.CompatUIState;
import com.android.wm.shell.compatui.impl.DefaultCompatUIComponentFactory;
import com.android.wm.shell.compatui.impl.DefaultComponentIdGenerator;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideCompatUIControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideCompatUIRepositoryFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideHideDisplayCutoutControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvidePipPerfHintControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideShellTaskOrganizerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideUnfoldControllerFactory;
import com.android.wm.shell.dagger.WMShellBaseModule_ProvideUnfoldTransitionHandlerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideShellAnimationExecutorFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideShellMainChoreographerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideShellMainHandlerFactory;
import com.android.wm.shell.dagger.WMShellConcurrencyModule_ProvideSplashScreenExecutorFactory;
import com.android.wm.shell.dagger.WMShellModule_ProvideOneHandedControllerFactory;
import com.android.wm.shell.dagger.pip.Pip1Module_ProvidePip1Factory;
import com.android.wm.shell.desktopmode.DesktopMode;
import com.android.wm.shell.desktopmode.DesktopModeEventLogger;
import com.android.wm.shell.desktopmode.DesktopModeLoggerTransitionObserver;
import com.android.wm.shell.desktopmode.DesktopModeTaskRepository;
import com.android.wm.shell.desktopmode.DesktopTasksController;
import com.android.wm.shell.desktopmode.DesktopTasksTransitionObserver;
import com.android.wm.shell.desktopmode.DragToDesktopTransitionHandler;
import com.android.wm.shell.desktopmode.EnterDesktopTaskTransitionHandler;
import com.android.wm.shell.desktopmode.ExitDesktopTaskTransitionHandler;
import com.android.wm.shell.desktopmode.ToggleResizeDesktopTaskTransitionHandler;
import com.android.wm.shell.displayareahelper.DisplayAreaHelperController;
import com.android.wm.shell.draganddrop.DragAndDropController;
import com.android.wm.shell.draganddrop.GlobalDragListener;
import com.android.wm.shell.flexpanel.FlexPanelStartController;
import com.android.wm.shell.freeform.FreeformComponents;
import com.android.wm.shell.freeform.FreeformTaskListener;
import com.android.wm.shell.freeform.FreeformTaskTransitionHandler;
import com.android.wm.shell.freeform.FreeformTaskTransitionObserver;
import com.android.wm.shell.fullscreen.FullscreenTaskListener;
import com.android.wm.shell.keyguard.KeyguardTransitionHandler;
import com.android.wm.shell.keyguard.KeyguardTransitions;
import com.android.wm.shell.naturalswitching.NaturalSwitchingDropTargetController;
import com.android.wm.shell.onehanded.OneHanded;
import com.android.wm.shell.onehanded.OneHandedController;
import com.android.wm.shell.performance.PerfHintController;
import com.android.wm.shell.pip.Pip;
import com.android.wm.shell.pip.PipAnimationController;
import com.android.wm.shell.pip.PipParamsChangedForwarder;
import com.android.wm.shell.pip.PipSurfaceTransactionHelper;
import com.android.wm.shell.pip.PipTaskOrganizer;
import com.android.wm.shell.pip.PipTransition;
import com.android.wm.shell.pip.PipTransitionController;
import com.android.wm.shell.pip.PipTransitionState;
import com.android.wm.shell.pip.phone.PhonePipMenuController;
import com.android.wm.shell.pip2.phone.PipController;
import com.android.wm.shell.pip2.phone.PipMotionHelper;
import com.android.wm.shell.pip2.phone.PipScheduler;
import com.android.wm.shell.pip2.phone.PipTouchHandler;
import com.android.wm.shell.recents.RecentTasks;
import com.android.wm.shell.recents.RecentTasksController;
import com.android.wm.shell.recents.RecentsTransitionHandler;
import com.android.wm.shell.recents.TaskStackTransitionObserver;
import com.android.wm.shell.shared.DesktopModeStatus;
import com.android.wm.shell.shared.ShellTransitions;
import com.android.wm.shell.shortcut.DexCompatRestartDialogUtils;
import com.android.wm.shell.shortcut.ShortcutController;
import com.android.wm.shell.splitscreen.EnterSplitGestureHandler;
import com.android.wm.shell.splitscreen.SplitScreen;
import com.android.wm.shell.splitscreen.SplitScreenController;
import com.android.wm.shell.startingsurface.StartingWindowController;
import com.android.wm.shell.startingsurface.StartingWindowTypeAlgorithm;
import com.android.wm.shell.startingsurface.phone.PhoneStartingWindowTypeAlgorithm;
import com.android.wm.shell.sysui.ShellCommandHandler;
import com.android.wm.shell.sysui.ShellController;
import com.android.wm.shell.sysui.ShellInit;
import com.android.wm.shell.sysui.ShellInterface;
import com.android.wm.shell.taskview.TaskViewFactoryController;
import com.android.wm.shell.taskview.TaskViewTransitions;
import com.android.wm.shell.transition.DefaultMixedHandler;
import com.android.wm.shell.transition.HomeTransitionObserver;
import com.android.wm.shell.transition.MixedTransitionHandler;
import com.android.wm.shell.transition.Transitions;
import com.android.wm.shell.unfold.ShellUnfoldProgressProvider;
import com.android.wm.shell.unfold.UnfoldAnimationController;
import com.android.wm.shell.unfold.UnfoldBackgroundController;
import com.android.wm.shell.unfold.UnfoldTransitionHandler;
import com.android.wm.shell.unfold.animation.FullscreenUnfoldTaskAnimator;
import com.android.wm.shell.unfold.animation.SplitTaskUnfoldAnimator;
import com.android.wm.shell.windowdecor.CaptionWindowDecorViewModel;
import com.android.wm.shell.windowdecor.DesktopModeWindowDecorViewModel;
import com.android.wm.shell.windowdecor.DexWindowDecorViewModel;
import com.android.wm.shell.windowdecor.MultiTaskingWindowDecorViewModel;
import com.android.wm.shell.windowdecor.WindowDecorViewModel;
import com.samsung.android.desktopsystemui.sharedlib.common.DesktopSystemUiBinder;
import com.samsung.android.knox.EnterpriseContainerCallback;
import com.samsung.android.knox.custom.CustomDeviceManager;
import com.samsung.android.knox.custom.IKnoxCustomManager;
import com.samsung.android.knox.ex.peripheral.PeripheralConstants;
import com.samsung.android.knox.license.KnoxEnterpriseLicenseManager;
import com.samsung.android.knox.net.vpn.VpnErrorValues;
import com.samsung.android.rune.CoreRune;
import com.samsung.android.smartthingsmediasdk.mediasdk.SmartThingsMediaSdkManager;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.MediaSdkOperationManager;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.SupportServiceClientStateManager;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.mediasdkoperations.devicecontrol.DeviceControlOperationImpl;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.mediasdkoperations.devicestatus.DeviceStatusOperationImpl;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.mediasdkoperations.mediacontent.MediaContentOperationImpl;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.mediasdkoperations.mediaoutputselection.MediaOutputDeviceOperationImpl;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.mediasdkoperations.mediaoutputselection.MediaOutputSelectedOperationImpl;
import com.samsung.android.smartthingsmediasdk.mediasdk.manager.mediasdkoperations.mediapolicy.MediaPolicyOperationImpl;
import com.samsung.android.smartthingsmediasdk.mediasdk.service.MediaSdkSupportServiceClient;
import com.samsung.android.wifi.SemWifiManager;
import com.samsung.systemui.splugins.SPluginDependencyProvider;
import com.samsung.systemui.splugins.SPluginInitializerImpl;
import com.samsung.systemui.splugins.SPluginManager;
import com.samsung.systemui.splugins.SPluginManagerImpl;
import com.samsung.systemui.splugins.navigationbar.LayoutProviderContainer;
import com.sec.ims.extensions.WiFiManagerExt;
import com.sec.ims.presence.ServiceTuple;
import com.sec.ims.settings.ImsProfile;
import com.sec.ims.volte2.data.QuantumSecurityInfo;
import com.sec.ims.volte2.data.VolteConstants;
import dagger.Lazy;
import dagger.internal.DelegateFactory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.MapBuilder;
import dagger.internal.Preconditions;
import dagger.internal.Provider;
import dagger.internal.SetBuilder;
import dagger.internal.SingleCheck;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collection;
import java.util.Collections;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import java.util.Set;
import java.util.UUID;
import java.util.concurrent.Executor;
import java.util.function.Function;
import java.util.function.Supplier;
import kotlin.Pair;
import kotlin.collections.CollectionsKt__CollectionsKt;
import kotlin.collections.EmptySet;
import kotlin.collections.MapsKt__MapsKt;
import kotlin.collections.SetsKt__SetsKt;
import kotlin.coroutines.CoroutineContext;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import kotlin.text.StringsKt__StringsJVMKt;
import kotlinx.coroutines.CoroutineDispatcher;
import kotlinx.coroutines.CoroutineScope;
import kotlinx.coroutines.CoroutineScopeKt;
import kotlinx.coroutines.SupervisorKt;
import kotlinx.coroutines.android.HandlerContext;
import kotlinx.coroutines.android.HandlerDispatcherKt;
import noticolorpicker.NotificationColorPicker;
import notification.src.com.android.systemui.notification.NotificationHighlightDpPreference;

public final class DaggerReferenceGlobalRootComponent {

    public final class AmbientStatusBarComponentFactory implements AmbientStatusBarComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ AmbientStatusBarComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.ambient.statusbar.dagger.AmbientStatusBarComponent.Factory
        public final AmbientStatusBarComponent create(AmbientStatusBarView ambientStatusBarView) {
            ambientStatusBarView.getClass();
            return new AmbientStatusBarComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, ambientStatusBarView, 0);
        }

        private AmbientStatusBarComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class AmbientStatusBarComponentImpl implements AmbientStatusBarComponent {
        public final AmbientStatusBarComponentImpl ambientStatusBarComponentImpl;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final AmbientStatusBarView view;

        public /* synthetic */ AmbientStatusBarComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, AmbientStatusBarView ambientStatusBarView, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, ambientStatusBarView);
        }

        @Override // com.android.systemui.ambient.statusbar.dagger.AmbientStatusBarComponent
        public final AmbientStatusBarViewController getController() {
            return new AmbientStatusBarViewController(this.view, FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (NextAlarmController) this.referenceSysUIComponentImpl.nextAlarmControllerImplProvider.get(), this.referenceSysUIComponentImpl.dateFormatUtil(), (IndividualSensorPrivacyController) this.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (Optional) this.referenceSysUIComponentImpl.providesDreamOverlayNotificationCountProvider.get(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (DreamOverlayStatusBarItemsProvider) this.referenceSysUIComponentImpl.dreamOverlayStatusBarItemsProvider.get(), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (WifiInteractor) this.referenceSysUIComponentImpl.wifiInteractorImplProvider.get(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDreamLogBufferProvider.get());
        }

        private AmbientStatusBarComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, AmbientStatusBarView ambientStatusBarView) {
            this.ambientStatusBarComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.view = ambientStatusBarView;
        }
    }

    public final class AmbientTouchComponentFactory implements AmbientTouchComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ AmbientTouchComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.ambient.touch.dagger.AmbientTouchComponent.Factory
        public final AmbientTouchComponent create(LifecycleOwner lifecycleOwner, Set<TouchHandler> set) {
            lifecycleOwner.getClass();
            set.getClass();
            return new AmbientTouchComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, lifecycleOwner, set, 0);
        }

        private AmbientTouchComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class AmbientTouchComponentImpl implements AmbientTouchComponent {
        public final AmbientTouchComponentImpl ambientTouchComponentImpl;
        public final LifecycleOwner lifecycleOwner;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final Set<TouchHandler> touchHandlers;

        public /* synthetic */ AmbientTouchComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, LifecycleOwner lifecycleOwner, Set set, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, lifecycleOwner, set);
        }

        public final BouncerSwipeTouchHandler bouncerSwipeTouchHandler() {
            return new BouncerSwipeTouchHandler(this.referenceSysUIComponentImpl.scrimManager(), (Optional) this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), new BouncerSwipeModule$$ExternalSyntheticLambda0(), new BouncerSwipeModule$$ExternalSyntheticLambda0(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), namedFlingAnimationUtils(), namedFlingAnimationUtils2(), namedFloat(), namedFloat2(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
        }

        public final DisplayHelper displayHelper() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new DisplayHelper(referenceGlobalRootComponentImpl.context, (DisplayManager) referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get());
        }

        @Override // com.android.systemui.ambient.touch.dagger.AmbientTouchComponent
        public final TouchMonitor getTouchMonitor() {
            Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
            Executor executor2 = (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get();
            LifecycleOwner lifecycleOwner = this.lifecycleOwner;
            AmbientTouchModule.Companion.getClass();
            Lifecycle lifecycle = lifecycleOwner.getLifecycle();
            Preconditions.checkNotNullFromProvides(lifecycle);
            return new TouchMonitor(executor, executor2, lifecycle, new InputSessionComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0), displayHelper(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), setOfTouchHandler(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), this.referenceGlobalRootComponentImpl.context.getDisplayId());
        }

        public final Lifecycle lifecycle() {
            LifecycleOwner lifecycleOwner = this.lifecycleOwner;
            AmbientTouchModule.Companion.getClass();
            Lifecycle lifecycle = lifecycleOwner.getLifecycle();
            Preconditions.checkNotNullFromProvides(lifecycle);
            return lifecycle;
        }

        public final FlingAnimationUtils namedFlingAnimationUtils() {
            FlingAnimationUtils.Builder builder = (FlingAnimationUtils.Builder) this.referenceSysUIComponentImpl.builderProvider.get();
            builder.reset();
            builder.mMaxLengthSeconds = 0.6f;
            builder.mSpeedUpFactor = 0.6f;
            return builder.build();
        }

        public final FlingAnimationUtils namedFlingAnimationUtils2() {
            FlingAnimationUtils.Builder builder = (FlingAnimationUtils.Builder) this.referenceSysUIComponentImpl.builderProvider.get();
            builder.reset();
            builder.mMaxLengthSeconds = 0.6f;
            builder.mSpeedUpFactor = 0.6f;
            return builder.build();
        }

        public final float namedFloat() {
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            TypedValue typedValue = new TypedValue();
            provideResources.getValue(R.dimen.dream_overlay_bouncer_start_region_screen_percentage, typedValue, true);
            return typedValue.getFloat();
        }

        public final float namedFloat2() {
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            TypedValue typedValue = new TypedValue();
            provideResources.getValue(R.dimen.dream_overlay_bouncer_min_region_screen_percentage, typedValue, true);
            return typedValue.getFloat();
        }

        public final int namedInteger() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_status_bar_height);
        }

        public final TouchHandler providesBouncerSwipeTouchHandler() {
            BouncerSwipeTouchHandler bouncerSwipeTouchHandler = bouncerSwipeTouchHandler();
            Preconditions.checkNotNullFromProvides(bouncerSwipeTouchHandler);
            return bouncerSwipeTouchHandler;
        }

        public final Set<TouchHandler> providesDreamTouchHandlers() {
            Set<TouchHandler> set = this.touchHandlers;
            AmbientTouchModule.Companion.getClass();
            return set;
        }

        public final Set<TouchHandler> setOfTouchHandler() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.addAll(providesDreamTouchHandlers());
            newSetBuilder.add(providesBouncerSwipeTouchHandler());
            newSetBuilder.add(shadeTouchHandler());
            return newSetBuilder.build();
        }

        public final ShadeTouchHandler shadeTouchHandler() {
            return new ShadeTouchHandler((Optional) this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get(), this.referenceSysUIComponentImpl.dreamManager(), namedInteger());
        }

        private AmbientTouchComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, LifecycleOwner lifecycleOwner, Set<TouchHandler> set) {
            this.ambientTouchComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.lifecycleOwner = lifecycleOwner;
            this.touchHandlers = set;
        }
    }

    public final class Builder implements ReferenceGlobalRootComponent.Builder {
        public Context context;
        public Boolean instrumentationTest;

        private Builder() {
        }

        public final ReferenceGlobalRootComponent build() {
            Preconditions.checkBuilderRequirement(Context.class, this.context);
            Preconditions.checkBuilderRequirement(Boolean.class, this.instrumentationTest);
            return new ReferenceGlobalRootComponentImpl(new GlobalModule(), new AndroidInternalsModule(), new FrameworkServicesModule(), new GlobalCoroutinesModule(), new UnfoldTransitionModule(), new UnfoldSharedModule(), new UnfoldSharedInternalModule(), new UnfoldRotationProviderInternalModule(), new HingeAngleProviderInternalModule(), new FoldStateProviderModule(), this.context, this.instrumentationTest, 0);
        }

        public final Builder context(Context context) {
            context.getClass();
            this.context = context;
            return this;
        }

        public final Builder instrumentationTest(boolean z) {
            this.instrumentationTest = Boolean.valueOf(z);
            return this;
        }

        public /* synthetic */ Builder(int i) {
            this();
        }
    }

    public final class ComplicationViewModelComponentFactory implements ComplicationViewModelComponent.Factory {
        public final cascd_ComplicationComponentImpl _cascd_ComplicationComponentImpl;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ ComplicationViewModelComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, cascd_complicationcomponentimpl);
        }

        @Override // com.android.systemui.complication.dagger.ComplicationViewModelComponent.Factory
        public final ComplicationViewModelComponent create(Complication complication, ComplicationId complicationId) {
            complication.getClass();
            complicationId.getClass();
            return new ComplicationViewModelComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this._cascd_ComplicationComponentImpl, complication, complicationId, 0);
        }

        private ComplicationViewModelComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this._cascd_ComplicationComponentImpl = cascd_complicationcomponentimpl;
        }
    }

    public final class ComplicationViewModelComponentImpl implements ComplicationViewModelComponent {
        public final cascd_ComplicationComponentImpl _cascd_ComplicationComponentImpl;
        public final Complication complication;
        public final ComplicationViewModelComponentImpl complicationViewModelComponentImpl;
        public final ComplicationId id;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ ComplicationViewModelComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, Complication complication, ComplicationId complicationId, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, cascd_complicationcomponentimpl, complication, complicationId);
        }

        public final ComplicationViewModel complicationViewModel() {
            return new ComplicationViewModel(this.complication, this.id, this._cascd_ComplicationComponentImpl.host);
        }

        @Override // com.android.systemui.complication.dagger.ComplicationViewModelComponent
        public final ComplicationViewModelProvider getViewModelProvider() {
            return new ComplicationViewModelProvider(this._cascd_ComplicationComponentImpl.viewModelStore, complicationViewModel());
        }

        private ComplicationViewModelComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, Complication complication, ComplicationId complicationId) {
            this.complicationViewModelComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this._cascd_ComplicationComponentImpl = cascd_complicationcomponentimpl;
            this.complication = complication;
            this.id = complicationId;
        }
    }

    public final class CoordinatorsSubcomponentFactory implements CoordinatorsSubcomponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ CoordinatorsSubcomponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsSubcomponent.Factory
        public final CoordinatorsSubcomponent create() {
            return new CoordinatorsSubcomponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0);
        }

        private CoordinatorsSubcomponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class CoordinatorsSubcomponentImpl implements CoordinatorsSubcomponent {
        public Provider bubbleCoordinatorProvider;
        public Provider colorizedFgsCoordinatorProvider;
        public Provider conversationCoordinatorProvider;
        public final CoordinatorsSubcomponentImpl coordinatorsSubcomponentImpl;
        public Provider dataStoreCoordinatorProvider;
        public Provider debugModeCoordinatorProvider;
        public Provider deviceProvisionedCoordinatorProvider;
        public Provider dismissibilityCoordinatorProvider;
        public Provider dreamCoordinatorProvider;
        public Provider favoriteNotifCoordnatorProvider;
        public Provider groupCountCoordinatorProvider;
        public Provider groupWhenCoordinatorProvider;
        public Provider gutsCoordinatorProvider;
        public Provider headsUpCoordinatorProvider;
        public Provider hideLocallyDismissedNotifsCoordinatorProvider;
        public Provider hideNotifsForOtherUsersCoordinatorProvider;
        public Provider highlightsCoordinatorProvider;
        public Provider insignificantCoordinatorProvider;
        public Provider keyguardCoordinatorProvider;
        public Provider lockScreenNotiIconCoordinatorProvider;
        public Provider mediaCoordinatorProvider;
        public Provider notifCoordinatorsImplProvider;
        public Provider notifCounterCoordinatorProvider;
        public Provider notificationControlActionCoordinatorProvider;
        public Provider notificationStatsLoggerCoordinatorProvider;
        public Provider notilusCoordinatorProvider;
        public Provider ongoingActivityCoordinatorProvider;
        public Provider preparationCoordinatorProvider;
        public Provider rankingCoordinatorProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public Provider remoteInputCoordinatorProvider;
        public Provider rowAlertTimeCoordinatorProvider;
        public Provider rowAppearanceCoordinatorProvider;
        public Provider semPriorityCoordinatorProvider;
        public Provider sensitiveContentCoordinatorImplProvider;
        public Provider settingsChangedCoordinatorProvider;
        public Provider smartspaceDedupingCoordinatorProvider;
        public Provider stackCoordinatorProvider;
        public Provider subscreenNotificationListCoordinatorProvider;
        public Provider subscreenQuickReplyCoordinatorProvider;
        public Provider summarizeCoordinatorProvider;
        public Provider viewConfigCoordinatorProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final CoordinatorsSubcomponentImpl coordinatorsSubcomponentImpl;
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, CoordinatorsSubcomponentImpl coordinatorsSubcomponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.coordinatorsSubcomponentImpl = coordinatorsSubcomponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new NotifCoordinatorsImpl((SectionStyleProvider) this.referenceSysUIComponentImpl.sectionStyleProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (DataStoreCoordinator) this.coordinatorsSubcomponentImpl.dataStoreCoordinatorProvider.get(), (HideLocallyDismissedNotifsCoordinator) this.coordinatorsSubcomponentImpl.hideLocallyDismissedNotifsCoordinatorProvider.get(), (HideNotifsForOtherUsersCoordinator) this.coordinatorsSubcomponentImpl.hideNotifsForOtherUsersCoordinatorProvider.get(), (KeyguardCoordinator) this.coordinatorsSubcomponentImpl.keyguardCoordinatorProvider.get(), (RankingCoordinator) this.coordinatorsSubcomponentImpl.rankingCoordinatorProvider.get(), (ColorizedFgsCoordinator) this.coordinatorsSubcomponentImpl.colorizedFgsCoordinatorProvider.get(), (DeviceProvisionedCoordinator) this.coordinatorsSubcomponentImpl.deviceProvisionedCoordinatorProvider.get(), (BubbleCoordinator) this.coordinatorsSubcomponentImpl.bubbleCoordinatorProvider.get(), (HeadsUpCoordinator) this.coordinatorsSubcomponentImpl.headsUpCoordinatorProvider.get(), (GutsCoordinator) this.coordinatorsSubcomponentImpl.gutsCoordinatorProvider.get(), (ConversationCoordinator) this.coordinatorsSubcomponentImpl.conversationCoordinatorProvider.get(), (DebugModeCoordinator) this.coordinatorsSubcomponentImpl.debugModeCoordinatorProvider.get(), (GroupCountCoordinator) this.coordinatorsSubcomponentImpl.groupCountCoordinatorProvider.get(), (GroupWhenCoordinator) this.coordinatorsSubcomponentImpl.groupWhenCoordinatorProvider.get(), (MediaCoordinator) this.coordinatorsSubcomponentImpl.mediaCoordinatorProvider.get(), (PreparationCoordinator) this.coordinatorsSubcomponentImpl.preparationCoordinatorProvider.get(), (RemoteInputCoordinator) this.coordinatorsSubcomponentImpl.remoteInputCoordinatorProvider.get(), (RowAlertTimeCoordinator) this.coordinatorsSubcomponentImpl.rowAlertTimeCoordinatorProvider.get(), (RowAppearanceCoordinator) this.coordinatorsSubcomponentImpl.rowAppearanceCoordinatorProvider.get(), (StackCoordinator) this.coordinatorsSubcomponentImpl.stackCoordinatorProvider.get(), (ShadeEventCoordinator) this.referenceSysUIComponentImpl.shadeEventCoordinatorProvider.get(), (SmartspaceDedupingCoordinator) this.coordinatorsSubcomponentImpl.smartspaceDedupingCoordinatorProvider.get(), (ViewConfigCoordinator) this.coordinatorsSubcomponentImpl.viewConfigCoordinatorProvider.get(), (VisualStabilityCoordinator) this.referenceSysUIComponentImpl.visualStabilityCoordinatorProvider.get(), (SensitiveContentCoordinator) this.coordinatorsSubcomponentImpl.sensitiveContentCoordinatorImplProvider.get(), (DismissibilityCoordinator) this.coordinatorsSubcomponentImpl.dismissibilityCoordinatorProvider.get(), (DreamCoordinator) this.coordinatorsSubcomponentImpl.dreamCoordinatorProvider.get(), (NotificationStatsLoggerCoordinator) this.coordinatorsSubcomponentImpl.notificationStatsLoggerCoordinatorProvider.get(), (SemPriorityCoordinator) this.coordinatorsSubcomponentImpl.semPriorityCoordinatorProvider.get(), (LockScreenNotiIconCoordinator) this.coordinatorsSubcomponentImpl.lockScreenNotiIconCoordinatorProvider.get(), (OngoingActivityCoordinator) this.coordinatorsSubcomponentImpl.ongoingActivityCoordinatorProvider.get(), new EdgeLightingCoordnator(), this.coordinatorsSubcomponentImpl.notifTimeSortCoordnator(), (NotilusCoordinator) this.coordinatorsSubcomponentImpl.notilusCoordinatorProvider.get(), (NotifCounterCoordinator) this.coordinatorsSubcomponentImpl.notifCounterCoordinatorProvider.get(), (HighlightsCoordinator) this.coordinatorsSubcomponentImpl.highlightsCoordinatorProvider.get(), (SummarizeCoordinator) this.coordinatorsSubcomponentImpl.summarizeCoordinatorProvider.get(), (InsignificantCoordinator) this.coordinatorsSubcomponentImpl.insignificantCoordinatorProvider.get(), (FavoriteNotifCoordnator) this.coordinatorsSubcomponentImpl.favoriteNotifCoordnatorProvider.get(), (SettingsChangedCoordinator) this.coordinatorsSubcomponentImpl.settingsChangedCoordinatorProvider.get(), this.coordinatorsSubcomponentImpl.notifHeaderCoordinator(), this.coordinatorsSubcomponentImpl.onlyShowNewNotifCoordnator(), (SubscreenQuickReplyCoordinator) this.coordinatorsSubcomponentImpl.subscreenQuickReplyCoordinatorProvider.get(), (SubscreenNotificationListCoordinator) this.coordinatorsSubcomponentImpl.subscreenNotificationListCoordinatorProvider.get(), (NotificationControlActionCoordinator) this.coordinatorsSubcomponentImpl.notificationControlActionCoordinatorProvider.get());
                    case 1:
                        return (T) new DataStoreCoordinator((NotifLiveDataStoreImpl) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get());
                    case 2:
                        return (T) HideLocallyDismissedNotifsCoordinator_Factory.newInstance();
                    case 3:
                        return (T) new HideNotifsForOtherUsersCoordinator((NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get());
                    case 4:
                        return (T) new KeyguardCoordinator((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (KeyguardNotificationVisibilityProvider) this.referenceSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), this.coordinatorsSubcomponentImpl.keyguardCoordinatorLogger(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SectionHeaderVisibilityProvider) this.referenceSysUIComponentImpl.sectionHeaderVisibilityProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (SeenNotificationsInteractor) this.referenceSysUIComponentImpl.seenNotificationsInteractorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get());
                    case 5:
                        return (T) new RankingCoordinator((StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (HighPriorityProvider) this.referenceSysUIComponentImpl.highPriorityProvider.get(), this.referenceSysUIComponentImpl.alertingHeaderNodeController(), this.referenceSysUIComponentImpl.silentHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.silentHeaderNodeController());
                    case 6:
                        return (T) new ColorizedFgsCoordinator();
                    case 7:
                        return (T) new DeviceProvisionedCoordinator((DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (IPackageManager) this.referenceGlobalRootComponentImpl.provideIPackageManagerProvider.get());
                    case 8:
                        Optional optional = (Optional) this.referenceSysUIComponentImpl.provideBubblesManagerProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new BubbleCoordinator(optional, referenceSysUIComponentImpl.setBubbles, (NotifCollection) referenceSysUIComponentImpl.notifCollectionProvider.get());
                    case 9:
                        return (T) new HeadsUpCoordinator(this.coordinatorsSubcomponentImpl.headsUpCoordinatorLogger(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (HeadsUpViewBinder) this.referenceSysUIComponentImpl.headsUpViewBinderProvider.get(), (VisualInterruptionDecisionProvider) this.referenceSysUIComponentImpl.provideVisualInterruptionDecisionProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (LaunchFullScreenIntentProvider) this.referenceSysUIComponentImpl.launchFullScreenIntentProvider.get(), this.referenceSysUIComponentImpl.notifPipelineFlags(), this.referenceSysUIComponentImpl.incomingHeaderNodeController(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
                    case 10:
                        return (T) new GutsCoordinator((NotifGutsViewManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), this.coordinatorsSubcomponentImpl.gutsCoordinatorLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 11:
                        return (T) new ConversationCoordinator((PeopleNotificationIdentifier) this.referenceSysUIComponentImpl.peopleNotificationIdentifierImplProvider.get(), (ConversationIconManager) this.referenceSysUIComponentImpl.iconManagerProvider.get(), (HighPriorityProvider) this.referenceSysUIComponentImpl.highPriorityProvider.get(), this.referenceSysUIComponentImpl.peopleHeaderNodeController());
                    case 12:
                        return (T) new DebugModeCoordinator((DebugModeFilterProvider) this.referenceSysUIComponentImpl.debugModeFilterProvider.get());
                    case 13:
                        return (T) new GroupCountCoordinator();
                    case 14:
                        return (T) new GroupWhenCoordinator((DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case 15:
                        return (T) new MediaCoordinator(this.referenceSysUIComponentImpl.mediaFeatureFlag(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (IconManager) this.referenceSysUIComponentImpl.iconManagerProvider.get());
                    case 16:
                        return (T) new PreparationCoordinator(this.coordinatorsSubcomponentImpl.preparationCoordinatorLogger(), (NotifInflater) this.referenceSysUIComponentImpl.notifInflaterImplProvider.get(), (NotifInflationErrorManager) this.referenceSysUIComponentImpl.notifInflationErrorManagerProvider.get(), (NotifViewBarn) this.referenceSysUIComponentImpl.notifViewBarnProvider.get(), (NotifUiAdjustmentProvider) this.referenceSysUIComponentImpl.notifUiAdjustmentProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (BindEventManagerImpl) this.referenceSysUIComponentImpl.bindEventManagerImplProvider.get());
                    case 17:
                        return (T) new RemoteInputCoordinator((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (RemoteInputNotificationRebuilder) this.referenceSysUIComponentImpl.remoteInputNotificationRebuilderProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SmartReplyController) this.referenceSysUIComponentImpl.provideSmartReplyControllerProvider.get());
                    case 18:
                        return (T) new RowAlertTimeCoordinator();
                    case 19:
                        return (T) new RowAppearanceCoordinator(this.referenceGlobalRootComponentImpl.context, (AssistantFeedbackController) this.referenceSysUIComponentImpl.assistantFeedbackControllerProvider.get(), (SectionStyleProvider) this.referenceSysUIComponentImpl.sectionStyleProvider.get());
                    case 20:
                        return (T) new StackCoordinator((GroupExpansionManagerImpl) this.referenceSysUIComponentImpl.groupExpansionManagerImplProvider.get(), this.referenceSysUIComponentImpl.notificationIconAreaController(), this.coordinatorsSubcomponentImpl.renderNotificationListInteractor(), (ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), (SensitiveNotificationProtectionController) this.referenceSysUIComponentImpl.sensitiveNotificationProtectionControllerImplProvider.get());
                    case 21:
                        return (T) new SmartspaceDedupingCoordinator((SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockscreenSmartspaceController) this.referenceSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case 22:
                        return (T) new ViewConfigCoordinator((ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotificationGutsManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ColorUpdateLogger) this.referenceSysUIComponentImpl.colorUpdateLoggerProvider.get());
                    case 23:
                        return (T) new SensitiveContentCoordinatorImpl((DynamicPrivacyController) this.referenceSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (SensitiveNotificationProtectionController) this.referenceSysUIComponentImpl.sensitiveNotificationProtectionControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (AppLockNotificationController) this.referenceSysUIComponentImpl.appLockNotificationControllerImplProvider.get());
                    case 24:
                        return (T) new DismissibilityCoordinator((KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationDismissibilityProviderImpl) this.referenceSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get());
                    case 25:
                        return (T) new DreamCoordinator((SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get());
                    case 26:
                        Provider provider = this.referenceSysUIComponentImpl.notificationStatsLoggerImplProvider;
                        return (T) new NotificationStatsLoggerCoordinator(NotificationStatsLoggerModule_Companion_ProvideStatsLoggerFactory.provideStatsLogger());
                    case 27:
                        return (T) new SemPriorityCoordinator();
                    case 28:
                        return (T) LockScreenNotiIconCoordinator_Factory.newInstance((LockscreenNotificationManager) this.referenceSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 29:
                        return (T) new OngoingActivityCoordinator(this.referenceGlobalRootComponentImpl.context, this.coordinatorsSubcomponentImpl.notifTimeSortCoordnator(), this.referenceSysUIComponentImpl.ongoingActivityHeaderNodeController());
                    case 30:
                        return (T) new NotilusCoordinator();
                    case 31:
                        return (T) NotifCounterCoordinator_Factory.newInstance(this.referenceGlobalRootComponentImpl.context);
                    case 32:
                        return (T) new HighlightsCoordinator(this.referenceSysUIComponentImpl.highlightsHeaderNodeController(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), this.referenceGlobalRootComponentImpl.context, (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 33:
                        return (T) new SummarizeCoordinator(this.referenceGlobalRootComponentImpl.context, (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (SummarizeController) this.referenceSysUIComponentImpl.summarizeControllerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 34:
                        return (T) new InsignificantCoordinator(this.referenceSysUIComponentImpl.silentHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.silentHeaderNodeController(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), this.coordinatorsSubcomponentImpl.notifTimeSortCoordnator(), (NotifInflationErrorManager) this.referenceSysUIComponentImpl.notifInflationErrorManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotifLiveDataStoreImpl) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 35:
                        return (T) new FavoriteNotifCoordnator(this.referenceGlobalRootComponentImpl.context, (VisualStabilityCoordinator) this.referenceSysUIComponentImpl.visualStabilityCoordinatorProvider.get(), (NotifLiveDataStoreImpl) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), this.coordinatorsSubcomponentImpl.notifTimeSortCoordnator(), this.referenceSysUIComponentImpl.favoriteHeaderNodeController());
                    case 36:
                        return (T) new SettingsChangedCoordinator((NotifLiveDataStoreImpl) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get());
                    case 37:
                        return (T) new SubscreenQuickReplyCoordinator((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SubscreenNotificationController) this.referenceSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 38:
                        return (T) new SubscreenNotificationListCoordinator((SubscreenNotificationController) this.referenceSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), this.referenceSysUIComponentImpl.setBubbles);
                    case 39:
                        return (T) NotificationControlActionCoordinator_Factory.newInstance((NotificationController) this.referenceSysUIComponentImpl.notificationControllerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ CoordinatorsSubcomponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.notification.collection.coordinator.dagger.CoordinatorsSubcomponent
        public final NotifCoordinators getNotifCoordinators() {
            return (NotifCoordinators) this.notifCoordinatorsImplProvider.get();
        }

        public final GutsCoordinatorLogger gutsCoordinatorLogger() {
            return new GutsCoordinatorLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNotificationsLogBufferProvider.get());
        }

        public final HeadsUpCoordinatorLogger headsUpCoordinatorLogger() {
            return new HeadsUpCoordinatorLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final void initialize() {
            this.dataStoreCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 1));
            this.hideLocallyDismissedNotifsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 2));
            this.hideNotifsForOtherUsersCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 3));
            this.keyguardCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 4));
            this.rankingCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 5));
            this.colorizedFgsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 6));
            this.deviceProvisionedCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 7));
            this.bubbleCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 8));
            this.headsUpCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 9));
            this.gutsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 10));
            this.conversationCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 11));
            this.debugModeCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 12));
            this.groupCountCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 13));
            this.groupWhenCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 14));
            this.mediaCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 15));
            this.preparationCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 16));
            this.remoteInputCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 17));
            this.rowAlertTimeCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 18));
            this.rowAppearanceCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 19));
            this.stackCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 20));
            this.smartspaceDedupingCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 21));
            this.viewConfigCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 22));
            this.sensitiveContentCoordinatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 23));
            this.dismissibilityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 24));
            this.dreamCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 25));
            this.notificationStatsLoggerCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 26));
            this.semPriorityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 27));
            this.lockScreenNotiIconCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 28));
            this.ongoingActivityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 29));
            this.notilusCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 30));
            this.notifCounterCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 31));
            this.highlightsCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 32));
            this.summarizeCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 33));
            this.insignificantCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 34));
            this.favoriteNotifCoordnatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 35));
            this.settingsChangedCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 36));
            this.subscreenQuickReplyCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 37));
            this.subscreenNotificationListCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 38));
            this.notificationControlActionCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 39));
            this.notifCoordinatorsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.coordinatorsSubcomponentImpl, 0));
        }

        public final KeyguardCoordinatorLogger keyguardCoordinatorLogger() {
            return new KeyguardCoordinatorLogger((LogBuffer) this.referenceSysUIComponentImpl.provideUnseenNotificationLogBufferProvider.get());
        }

        public final NotifHeaderCoordinator notifHeaderCoordinator() {
            return new NotifHeaderCoordinator((NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get());
        }

        public final NotifTimeSortCoordnator notifTimeSortCoordnator() {
            return new NotifTimeSortCoordnator((SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get());
        }

        public final OnlyShowNewNotifCoordnator onlyShowNewNotifCoordnator() {
            return new OnlyShowNewNotifCoordnator((NotificationPanelViewController) this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider.get());
        }

        public final PreparationCoordinatorLogger preparationCoordinatorLogger() {
            return new PreparationCoordinatorLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNotificationsLogBufferProvider.get());
        }

        public final RenderNotificationListInteractor renderNotificationListInteractor() {
            return new RenderNotificationListInteractor((ActiveNotificationListRepository) this.referenceSysUIComponentImpl.activeNotificationListRepositoryProvider.get(), (SectionStyleProvider) this.referenceSysUIComponentImpl.sectionStyleProvider.get());
        }

        private CoordinatorsSubcomponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.coordinatorsSubcomponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            initialize();
        }
    }

    public final class CustomTileComponentBuilder implements CustomTileComponent.Builder {
        public QSTileConfigModule qSTileConfigModule;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ CustomTileComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        public final CustomTileComponent build() {
            Preconditions.checkBuilderRequirement(QSTileConfigModule.class, this.qSTileConfigModule);
            return new CustomTileComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSTileConfigModule, 0);
        }

        public final CustomTileComponentBuilder qsTileConfigModule(QSTileConfigModule qSTileConfigModule) {
            qSTileConfigModule.getClass();
            this.qSTileConfigModule = qSTileConfigModule;
            return this;
        }

        private CustomTileComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class CustomTileComponentImpl implements CustomTileComponent {
        public final CustomTileComponentImpl customTileComponentImpl;
        public Provider customTileDataInteractorProvider;
        public Provider customTileDefaultsRepositoryImplProvider;
        public Provider customTileInteractorProvider;
        public Provider customTilePackageUpdatesRepositoryImplProvider;
        public Provider customTileRepositoryImplProvider;
        public Provider customTileServiceInteractorProvider;
        public Provider customTileUserActionInteractorProvider;
        public Provider provideCustomTileCoroutineScopeProvider;
        public final QSTileConfigModule qSTileConfigModule;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final CustomTileComponentImpl customTileComponentImpl;
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, CustomTileComponentImpl customTileComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.customTileComponentImpl = customTileComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new CustomTileDataInteractor(QSTileConfigModule_ProvideCustomTileSpecFactory.provideCustomTileSpec(this.customTileComponentImpl.qSTileConfigModule), (CustomTileDefaultsRepository) this.customTileComponentImpl.customTileDefaultsRepositoryImplProvider.get(), (CustomTileServiceInteractor) this.customTileComponentImpl.customTileServiceInteractorProvider.get(), (CustomTileInteractor) this.customTileComponentImpl.customTileInteractorProvider.get(), (CustomTilePackageUpdatesRepository) this.customTileComponentImpl.customTilePackageUpdatesRepositoryImplProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (CoroutineScope) this.customTileComponentImpl.provideCustomTileCoroutineScopeProvider.get());
                    case 1:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        return (T) new CustomTileDefaultsRepositoryImpl(referenceGlobalRootComponentImpl.context, (CoroutineScope) referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 2:
                        return (T) new CustomTileServiceInteractor(QSTileConfigModule_ProvideCustomTileSpecFactory.provideCustomTileSpec(this.customTileComponentImpl.qSTileConfigModule), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), DoubleCheck.lazy(this.customTileComponentImpl.customTileUserActionInteractorProvider), (CustomTileInteractor) this.customTileComponentImpl.customTileInteractorProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (QSTileLogger) this.referenceSysUIComponentImpl.qSTileLoggerProvider.get(), (TileServices) this.referenceSysUIComponentImpl.tileServicesProvider.get(), (CoroutineScope) this.customTileComponentImpl.provideCustomTileCoroutineScopeProvider.get());
                    case 3:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        TileSpec tileSpec = this.customTileComponentImpl.qSTileConfigModule.config.tileSpec;
                        Preconditions.checkNotNullFromProvides(tileSpec);
                        return (T) new CustomTileUserActionInteractor(context, tileSpec, (QSTileLogger) this.referenceSysUIComponentImpl.qSTileLoggerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (QSTileIntentUserInputHandler) this.referenceSysUIComponentImpl.qSTileIntentUserInputHandlerImplProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CustomTileServiceInteractor) this.customTileComponentImpl.customTileServiceInteractorProvider.get());
                    case 4:
                        return (T) new CustomTileInteractor(QSTileConfigModule_ProvideCustomTileSpecFactory.provideCustomTileSpec(this.customTileComponentImpl.qSTileConfigModule), (CustomTileDefaultsRepository) this.customTileComponentImpl.customTileDefaultsRepositoryImplProvider.get(), (CustomTileRepository) this.customTileComponentImpl.customTileRepositoryImplProvider.get(), (CoroutineScope) this.customTileComponentImpl.provideCustomTileCoroutineScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case 5:
                        return (T) new CustomTileRepositoryImpl(QSTileConfigModule_ProvideCustomTileSpecFactory.provideCustomTileSpec(this.customTileComponentImpl.qSTileConfigModule), this.referenceSysUIComponentImpl.customTileStatePersisterImpl(), this.referenceSysUIComponentImpl.packageManagerAdapter(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case 6:
                        QSTileCoroutineScopeFactory qSTileCoroutineScopeFactory = this.referenceSysUIComponentImpl.qSTileCoroutineScopeFactory();
                        CustomTileModule.Companion.getClass();
                        return (T) CoroutineScopeKt.CoroutineScope(qSTileCoroutineScopeFactory.applicationScope.getCoroutineContext().plus(SupervisorKt.SupervisorJob$default()));
                    case 7:
                        return (T) new CustomTilePackageUpdatesRepositoryImpl(QSTileConfigModule_ProvideCustomTileSpecFactory.provideCustomTileSpec(this.customTileComponentImpl.qSTileConfigModule), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) this.customTileComponentImpl.provideCustomTileCoroutineScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ CustomTileComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, QSTileConfigModule qSTileConfigModule, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, qSTileConfigModule);
        }

        @Override // com.android.systemui.qs.tiles.impl.custom.di.CustomTileComponent
        public final CoroutineScope coroutineScope() {
            return (CoroutineScope) this.provideCustomTileCoroutineScopeProvider.get();
        }

        public final CustomTileInteractor customTileInteractor() {
            return (CustomTileInteractor) this.customTileInteractorProvider.get();
        }

        public final CustomTileServiceInteractor customTileInterfaceInteractor() {
            return (CustomTileServiceInteractor) this.customTileServiceInteractorProvider.get();
        }

        public final CustomTilePackageUpdatesRepository customTilePackageUpdatesRepository() {
            return (CustomTilePackageUpdatesRepository) this.customTilePackageUpdatesRepositoryImplProvider.get();
        }

        @Override // com.android.systemui.qs.tiles.impl.custom.di.CustomTileComponent
        public final QSTileDataInteractor dataInteractor() {
            return (QSTileDataInteractor) this.customTileDataInteractorProvider.get();
        }

        @Override // com.android.systemui.qs.tiles.impl.custom.di.CustomTileComponent
        public final QSTileDataToStateMapper dataToStateMapper() {
            return (QSTileDataToStateMapper) this.referenceSysUIComponentImpl.customTileMapperProvider.get();
        }

        public final void initialize(QSTileConfigModule qSTileConfigModule) {
            this.customTileDefaultsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 1));
            this.customTileServiceInteractorProvider = new DelegateFactory();
            this.customTileUserActionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 3));
            this.customTileRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 5));
            this.provideCustomTileCoroutineScopeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 6));
            this.customTileInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 4));
            DelegateFactory.setDelegate(this.customTileServiceInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 2)));
            this.customTilePackageUpdatesRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 7));
            this.customTileDataInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.customTileComponentImpl, 0));
        }

        @Override // com.android.systemui.qs.tiles.impl.custom.di.CustomTileComponent
        public final QSTileUserActionInteractor userActionInteractor() {
            return (QSTileUserActionInteractor) this.customTileUserActionInteractorProvider.get();
        }

        private CustomTileComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, QSTileConfigModule qSTileConfigModule) {
            this.customTileComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.qSTileConfigModule = qSTileConfigModule;
            initialize(qSTileConfigModule);
        }
    }

    public final class DozeComponentFactory implements DozeComponent.Builder {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ DozeComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.doze.dagger.DozeComponent.Builder
        public final DozeComponent build(DozeMachine.Service service) {
            service.getClass();
            return new DozeComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, service, 0);
        }

        private DozeComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class DozeComponentImpl implements DozeComponent {
        public Provider aODMachineProvider;
        public Provider aODScreenBrightnessProvider;
        public Provider aODUiProvider;
        public Provider dozeAuthRemoverProvider;
        public final DozeComponentImpl dozeComponentImpl;
        public Provider dozeDockHandlerProvider;
        public Provider dozeFalsingManagerAdapterProvider;
        public Provider dozeMachineProvider;
        public final DozeMachine.Service dozeMachineService;
        public Provider dozePauserProvider;
        public Provider dozeScreenBrightnessProvider;
        public Provider dozeScreenStateProvider;
        public Provider dozeSuppressorProvider;
        public Provider dozeTriggersProvider;
        public Provider dozeUiProvider;
        public Provider dozeWallpaperStateProvider;
        public Provider providesDozeWakeLockProvider;
        public Provider providesWrappedServiceProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final DozeComponentImpl dozeComponentImpl;
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, DozeComponentImpl dozeComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.dozeComponentImpl = dozeComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new DozeMachine((DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), this.dozeComponentImpl.partArray(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1:
                        return (T) DozeModule_ProvidesWrappedServiceFactory.providesWrappedService(this.dozeComponentImpl.dozeMachineService, (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get());
                    case 2:
                        T t = (T) ((DelayedWakeLock.Factory) this.referenceSysUIComponentImpl.factoryProvider20.get()).create("Doze");
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 3:
                        return (T) new DozePauser((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (AlwaysOnDisplayPolicy) this.referenceSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get());
                    case 4:
                        return (T) new DozeFalsingManagerAdapter((FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get());
                    case 5:
                        return (T) new DozeTriggers(this.referenceGlobalRootComponentImpl.context, (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (AsyncSensorManager) this.referenceSysUIComponentImpl.asyncSensorManagerProvider.get(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), this.referenceSysUIComponentImpl.proximitySensor(), this.referenceSysUIComponentImpl.proximityCheck(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 6:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        return (T) new DozeUi(referenceGlobalRootComponentImpl.context, (AlarmManager) referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get());
                    case 7:
                        DozeComponentImpl dozeComponentImpl = this.dozeComponentImpl;
                        DozeMachine.Service service = (DozeMachine.Service) dozeComponentImpl.providesWrappedServiceProvider.get();
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        DozeHost dozeHost = (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get();
                        DozeParameters dozeParameters = (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get();
                        WakeLock wakeLock = (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get();
                        AuthController authController = (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) dozeComponentImpl.injectDozeScreenState(new DozeScreenState(service, handler, dozeHost, dozeParameters, wakeLock, authController, referenceSysUIComponentImpl.udfpsControllerProvider, (DozeLog) referenceSysUIComponentImpl.dozeLogProvider.get(), (DozeScreenBrightness) this.dozeComponentImpl.dozeScreenBrightnessProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get()));
                    case 8:
                        return (T) new DozeScreenBrightness(this.referenceGlobalRootComponentImpl.context, (DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get(), (AsyncSensorManager) this.referenceSysUIComponentImpl.asyncSensorManagerProvider.get(), this.dozeComponentImpl.brightnessSensorOptionalOfSensorArray(), (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (AlwaysOnDisplayPolicy) this.referenceSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl());
                    case 9:
                        return (T) new DozeWallpaperState((IWallpaperManager) this.referenceGlobalRootComponentImpl.provideIWallPaperManagerProvider.get(), (BiometricUnlockController) this.referenceSysUIComponentImpl.biometricUnlockControllerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get());
                    case 10:
                        return (T) new DozeDockHandler(this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 11:
                        return (T) new DozeAuthRemover((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 12:
                        return (T) new DozeSuppressor((DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 13:
                        return (T) new AODMachine((DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), this.dozeComponentImpl.namedPartArray(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 14:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) new AODUi(referenceGlobalRootComponentImpl2.context, (AlarmManager) referenceGlobalRootComponentImpl2.provideAlarmManagerProvider.get(), (WakeLock) this.dozeComponentImpl.providesDozeWakeLockProvider.get(), (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration());
                    case 15:
                        return (T) new AODScreenBrightness(this.referenceGlobalRootComponentImpl.context, (DozeMachine.Service) this.dozeComponentImpl.providesWrappedServiceProvider.get(), (AsyncSensorManager) this.referenceSysUIComponentImpl.asyncSensorManagerProvider.get(), this.dozeComponentImpl.brightnessSensorOptionalOfSensorArray(), (DozeHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (AlwaysOnDisplayPolicy) this.referenceSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ DozeComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, DozeMachine.Service service, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, service);
        }

        public final Optional<Sensor>[] brightnessSensorOptionalOfSensorArray() {
            return DozeModule_ProvidesBrightnessSensorsFactory.providesBrightnessSensors((AsyncSensorManager) this.referenceSysUIComponentImpl.asyncSensorManagerProvider.get(), this.referenceGlobalRootComponentImpl.context, (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get());
        }

        @Override // com.android.systemui.doze.dagger.DozeComponent
        public final AODMachine getAODMachine() {
            return (AODMachine) this.aODMachineProvider.get();
        }

        public final DozeMachine getDozeMachine() {
            return (DozeMachine) this.dozeMachineProvider.get();
        }

        public final void initialize(DozeMachine.Service service) {
            this.providesWrappedServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 1));
            this.providesDozeWakeLockProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 2));
            this.dozePauserProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 3));
            this.dozeFalsingManagerAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 4));
            this.dozeTriggersProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 5));
            this.dozeUiProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 6));
            this.dozeScreenBrightnessProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 8));
            this.dozeScreenStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 7));
            this.dozeWallpaperStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 9));
            this.dozeDockHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 10));
            this.dozeAuthRemoverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 11));
            this.dozeSuppressorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 12));
            this.dozeMachineProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 0));
            this.aODUiProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 14));
            this.aODScreenBrightnessProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 15));
            this.aODMachineProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dozeComponentImpl, 13));
        }

        public final DozeScreenState injectDozeScreenState(DozeScreenState dozeScreenState) {
            dozeScreenState.mPluginAODManagerLazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider);
            dozeScreenState.mAODTouchModeManager = (AODTouchModeManager) this.referenceSysUIComponentImpl.aODTouchModeManagerProvider.get();
            dozeScreenState.mPowerManager = (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get();
            return dozeScreenState;
        }

        public final DozeMachine.Part[] namedPartArray() {
            return new DozeMachine.Part[]{(DozeFalsingManagerAdapter) this.dozeFalsingManagerAdapterProvider.get(), (AODUi) this.aODUiProvider.get(), (DozeScreenState) this.dozeScreenStateProvider.get(), (AODScreenBrightness) this.aODScreenBrightnessProvider.get(), (DozeWallpaperState) this.dozeWallpaperStateProvider.get(), (DozeAuthRemover) this.dozeAuthRemoverProvider.get(), (DozeSuppressor) this.dozeSuppressorProvider.get(), (DozeTransitionListener) this.referenceSysUIComponentImpl.dozeTransitionListenerProvider.get()};
        }

        public final DozeMachine.Part[] partArray() {
            return new DozeMachine.Part[]{(DozePauser) this.dozePauserProvider.get(), (DozeFalsingManagerAdapter) this.dozeFalsingManagerAdapterProvider.get(), (DozeTriggers) this.dozeTriggersProvider.get(), (DozeUi) this.dozeUiProvider.get(), (DozeScreenBrightness) this.dozeScreenBrightnessProvider.get(), (DozeScreenState) this.dozeScreenStateProvider.get(), (DozeWallpaperState) this.dozeWallpaperStateProvider.get(), (DozeDockHandler) this.dozeDockHandlerProvider.get(), (DozeAuthRemover) this.dozeAuthRemoverProvider.get(), (DozeSuppressor) this.dozeSuppressorProvider.get(), (DozeTransitionListener) this.referenceSysUIComponentImpl.dozeTransitionListenerProvider.get()};
        }

        private DozeComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, DozeMachine.Service service) {
            this.dozeComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.dozeMachineService = service;
            initialize(service);
        }
    }

    public final class DreamOverlayComponentFactory implements DreamOverlayComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ DreamOverlayComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.dreams.dagger.DreamOverlayComponent.Factory
        public final DreamOverlayComponent create(LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager) {
            lifecycleOwner.getClass();
            complicationHostViewController.getClass();
            touchInsetManager.getClass();
            return new DreamOverlayComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, lifecycleOwner, complicationHostViewController, touchInsetManager, 0);
        }

        private DreamOverlayComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class DreamOverlayComponentImpl implements DreamOverlayComponent {
        public final ComplicationHostViewController complicationHostViewController;
        public Provider dreamOverlayAnimationsControllerProvider;
        public final DreamOverlayComponentImpl dreamOverlayComponentImpl;
        public Provider dreamOverlayContainerViewControllerProvider;
        public final LifecycleOwner lifecycleOwner;
        public Provider providesDreamInComplicationsTranslationYDurationProvider;
        public Provider providesDreamInComplicationsTranslationYProvider;
        public Provider providesDreamOverlayContainerViewProvider;
        public Provider providesDreamOverlayContentViewProvider;
        public Provider providesDreamOverlayStatusBarViewProvider;
        public Provider providesHubGestureIndicatorViewProvider;
        public Provider providesLifecycleProvider;
        public Provider providesMaxBurnInOffsetProvider;
        public Provider providesStatusBarViewControllerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final TouchInsetManager touchInsetManager;

        public final class SwitchingProvider<T> implements Provider {
            public final DreamOverlayComponentImpl dreamOverlayComponentImpl;
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, DreamOverlayComponentImpl dreamOverlayComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.dreamOverlayComponentImpl = dreamOverlayComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        DreamOverlayContainerView dreamOverlayContainerView = (DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get();
                        DreamOverlayComponentImpl dreamOverlayComponentImpl = this.dreamOverlayComponentImpl;
                        return (T) new DreamOverlayContainerViewController(dreamOverlayContainerView, dreamOverlayComponentImpl.complicationHostViewController, (ViewGroup) dreamOverlayComponentImpl.providesDreamOverlayContentViewProvider.get(), (View) this.dreamOverlayComponentImpl.providesHubGestureIndicatorViewProvider.get(), (AmbientStatusBarViewController) this.dreamOverlayComponentImpl.providesStatusBarViewControllerProvider.get(), (LowLightTransitionCoordinator) this.referenceGlobalRootComponentImpl.lowLightTransitionCoordinatorProvider.get(), this.dreamOverlayComponentImpl.touchInsetManager.createSession(), (BlurUtils) this.referenceSysUIComponentImpl.blurUtilsProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), ((Integer) this.dreamOverlayComponentImpl.providesMaxBurnInOffsetProvider.get()).intValue(), this.dreamOverlayComponentImpl.namedLong(), this.dreamOverlayComponentImpl.namedLong2(), (PrimaryBouncerCallbackInteractor) this.referenceSysUIComponentImpl.primaryBouncerCallbackInteractorProvider.get(), (DreamOverlayAnimationsController) this.dreamOverlayComponentImpl.dreamOverlayAnimationsControllerProvider.get(), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (BouncerlessScrimController) this.referenceSysUIComponentImpl.bouncerlessScrimControllerProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), this.referenceSysUIComponentImpl.dreamManager());
                    case 1:
                        T t = (T) ((DreamOverlayContainerView) com.android.internal.util.Preconditions.checkNotNull((DreamOverlayContainerView) ((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get()).inflate(R.layout.dream_overlay_container, (ViewGroup) null), "R.layout.dream_layout_container could not be properly inflated"));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 2:
                        T t2 = (T) ((ViewGroup) com.android.internal.util.Preconditions.checkNotNull((ViewGroup) ((DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get()).findViewById(R.id.dream_overlay_content), "R.id.dream_overlay_content must not be null"));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 3:
                        T t3 = (T) ((View) com.android.internal.util.Preconditions.checkNotNull(((DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get()).findViewById(R.id.glanceable_hub_handle), "R.id.glanceable_hub_handle must not be null"));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 4:
                        T t4 = (T) new AmbientStatusBarComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0).create((AmbientStatusBarView) this.dreamOverlayComponentImpl.providesDreamOverlayStatusBarViewProvider.get()).getController();
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 5:
                        T t5 = (T) ((AmbientStatusBarView) com.android.internal.util.Preconditions.checkNotNull((AmbientStatusBarView) ((DreamOverlayContainerView) this.dreamOverlayComponentImpl.providesDreamOverlayContainerViewProvider.get()).findViewById(R.id.dream_overlay_status_bar), "R.id.status_bar must not be null"));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 6:
                        return (T) Integer.valueOf(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.default_burn_in_prevention_offset));
                    case 7:
                        BlurUtils blurUtils = (BlurUtils) this.referenceSysUIComponentImpl.blurUtilsProvider.get();
                        DreamOverlayComponentImpl dreamOverlayComponentImpl2 = this.dreamOverlayComponentImpl;
                        return (T) new DreamOverlayAnimationsController(blurUtils, dreamOverlayComponentImpl2.complicationHostViewController, (AmbientStatusBarViewController) dreamOverlayComponentImpl2.providesStatusBarViewControllerProvider.get(), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), this.dreamOverlayComponentImpl.namedInteger(), (DreamViewModel) this.referenceSysUIComponentImpl.dreamViewModelProvider.get(), this.dreamOverlayComponentImpl.namedLong3(), this.dreamOverlayComponentImpl.namedLong4(), ((Integer) this.dreamOverlayComponentImpl.providesDreamInComplicationsTranslationYProvider.get()).intValue(), ((Long) this.dreamOverlayComponentImpl.providesDreamInComplicationsTranslationYDurationProvider.get()).longValue(), (LogBuffer) this.referenceSysUIComponentImpl.provideDreamLogBufferProvider.get());
                    case 8:
                        return (T) Integer.valueOf(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_entry_y_offset));
                    case 9:
                        return (T) Long.valueOf(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.config_dreamOverlayInTranslationYDurationMs));
                    case 10:
                        T t6 = (T) this.dreamOverlayComponentImpl.lifecycleOwner.getLifecycle();
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ DreamOverlayComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, lifecycleOwner, complicationHostViewController, touchInsetManager);
        }

        @Override // com.android.systemui.dreams.dagger.DreamOverlayComponent
        public final CommunalTouchHandler getCommunalTouchHandler() {
            return new CommunalTouchHandler((Optional) this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), namedInteger2(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (Lifecycle) this.providesLifecycleProvider.get());
        }

        @Override // com.android.systemui.dreams.dagger.DreamOverlayComponent
        public final DreamOverlayContainerViewController getDreamOverlayContainerViewController() {
            return (DreamOverlayContainerViewController) this.dreamOverlayContainerViewControllerProvider.get();
        }

        public final void initialize(LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager) {
            this.providesDreamOverlayContainerViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 1));
            this.providesDreamOverlayContentViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 2));
            this.providesHubGestureIndicatorViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 3));
            this.providesDreamOverlayStatusBarViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 5));
            this.providesStatusBarViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 4));
            this.providesMaxBurnInOffsetProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 6));
            this.providesDreamInComplicationsTranslationYProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 8));
            this.providesDreamInComplicationsTranslationYDurationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 9));
            this.dreamOverlayAnimationsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 7));
            this.dreamOverlayContainerViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 0));
            this.providesLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.dreamOverlayComponentImpl, 10));
        }

        public final int namedInteger() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_anim_blur_radius);
        }

        public final int namedInteger2() {
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            CommunalTouchModule.Companion.getClass();
            return provideResources.getDimensionPixelSize(R.dimen.communal_gesture_initiation_width);
        }

        public final long namedLong() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.config_dreamOverlayBurnInProtectionUpdateIntervalMillis);
        }

        public final long namedLong2() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.config_dreamOverlayMillisUntilFullJitter);
        }

        public final long namedLong3() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.config_dreamOverlayInBlurDurationMs);
        }

        public final long namedLong4() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.config_dreamOverlayInComplicationsDurationMs);
        }

        public final TouchInsetManager.TouchInsetSession touchInsetSession() {
            return this.touchInsetManager.createSession();
        }

        private DreamOverlayComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, LifecycleOwner lifecycleOwner, ComplicationHostViewController complicationHostViewController, TouchInsetManager touchInsetManager) {
            this.dreamOverlayComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.complicationHostViewController = complicationHostViewController;
            this.touchInsetManager = touchInsetManager;
            this.lifecycleOwner = lifecycleOwner;
            initialize(lifecycleOwner, complicationHostViewController, touchInsetManager);
        }
    }

    public final class ExpandableNotificationRowComponentBuilder implements ExpandableNotificationRowComponent.Builder {
        public ExpandableNotificationRow expandableNotificationRow;
        public NotificationEntry notificationEntry;
        public ExpandableNotificationRow.OnExpandClickListener onExpandClickListener;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ ExpandableNotificationRowComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        public final ExpandableNotificationRowComponent build() {
            Preconditions.checkBuilderRequirement(ExpandableNotificationRow.class, this.expandableNotificationRow);
            Preconditions.checkBuilderRequirement(NotificationEntry.class, this.notificationEntry);
            Preconditions.checkBuilderRequirement(ExpandableNotificationRow.OnExpandClickListener.class, this.onExpandClickListener);
            return new ExpandableNotificationRowComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.expandableNotificationRow, this.notificationEntry, this.onExpandClickListener, 0);
        }

        public final ExpandableNotificationRowComponentBuilder expandableNotificationRow(ExpandableNotificationRow expandableNotificationRow) {
            expandableNotificationRow.getClass();
            this.expandableNotificationRow = expandableNotificationRow;
            return this;
        }

        public final ExpandableNotificationRowComponentBuilder notificationEntry(NotificationEntry notificationEntry) {
            notificationEntry.getClass();
            this.notificationEntry = notificationEntry;
            return this;
        }

        public final ExpandableNotificationRowComponentBuilder onExpandClickListener(ExpandableNotificationRow.OnExpandClickListener onExpandClickListener) {
            onExpandClickListener.getClass();
            this.onExpandClickListener = onExpandClickListener;
            return this;
        }

        private ExpandableNotificationRowComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class ExpandableNotificationRowComponentImpl implements ExpandableNotificationRowComponent {
        public final ExpandableNotificationRow expandableNotificationRow;
        public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
        public Provider expandableNotificationRowControllerProvider;
        public final NotificationEntry notificationEntry;
        public final ExpandableNotificationRow.OnExpandClickListener onExpandClickListener;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.expandableNotificationRowComponentImpl = expandableNotificationRowComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id != 0) {
                    throw new AssertionError(this.id);
                }
                ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl = this.expandableNotificationRowComponentImpl;
                return (T) new ExpandableNotificationRowController(expandableNotificationRowComponentImpl.expandableNotificationRow, expandableNotificationRowComponentImpl.activatableNotificationViewController(), new RemoteInputViewSubcomponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.expandableNotificationRowComponentImpl, 0), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (ColorUpdateLogger) this.referenceSysUIComponentImpl.colorUpdateLoggerProvider.get(), this.expandableNotificationRowComponentImpl.notificationRowLogger(), this.expandableNotificationRowComponentImpl.notificationChildrenContainerLogger(), (NotificationListContainer) this.referenceSysUIComponentImpl.provideListContainerProvider.get(), (SmartReplyConstants) this.referenceSysUIComponentImpl.smartReplyConstantsProvider.get(), (SmartReplyController) this.referenceSysUIComponentImpl.provideSmartReplyControllerProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), this.expandableNotificationRowComponentImpl.appNameString(), this.expandableNotificationRowComponentImpl.notificationKeyString(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get(), (GroupExpansionManager) this.referenceSysUIComponentImpl.groupExpansionManagerImplProvider.get(), (RowContentBindStage) this.referenceSysUIComponentImpl.rowContentBindStageProvider.get(), this.referenceSysUIComponentImpl.notificationRowStatsLogger(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), this.expandableNotificationRowComponentImpl.onExpandClickListener, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationGutsManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), ((Boolean) this.referenceSysUIComponentImpl.provideAllowNotificationLongPressProvider.get()).booleanValue(), (OnUserInteractionCallback) this.referenceSysUIComponentImpl.onUserInteractionCallbackImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (PeopleNotificationIdentifier) this.referenceSysUIComponentImpl.peopleNotificationIdentifierImplProvider.get(), (Optional) this.referenceSysUIComponentImpl.provideBubblesManagerProvider.get(), (NotificationSettingsController) this.referenceSysUIComponentImpl.notificationSettingsControllerProvider.get(), this.expandableNotificationRowComponentImpl.expandableNotificationRowDragController(), (NotificationDismissibilityProvider) this.referenceSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get());
            }
        }

        public /* synthetic */ ExpandableNotificationRowComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRow expandableNotificationRow, NotificationEntry notificationEntry, ExpandableNotificationRow.OnExpandClickListener onExpandClickListener, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, expandableNotificationRow, notificationEntry, onExpandClickListener);
        }

        public final ActivatableNotificationViewController activatableNotificationViewController() {
            return new ActivatableNotificationViewController(this.expandableNotificationRow, expandableOutlineViewController(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get());
        }

        public final String appNameString() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            StatusBarNotification statusBarNotification = this.notificationEntry.mSbn;
            Preconditions.checkNotNullFromProvides(statusBarNotification);
            return ExpandableNotificationRowComponent_ExpandableNotificationRowModule_ProvideAppNameFactory.provideAppName(context, statusBarNotification);
        }

        public final ExpandableNotificationRowDragController expandableNotificationRowDragController() {
            return new ExpandableNotificationRowDragController(this.referenceGlobalRootComponentImpl.context, (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (NotificationPanelLogger) this.referenceSysUIComponentImpl.provideNotificationPanelLoggerProvider.get());
        }

        public final ExpandableOutlineViewController expandableOutlineViewController() {
            return new ExpandableOutlineViewController(this.expandableNotificationRow, expandableViewController());
        }

        public final ExpandableViewController expandableViewController() {
            return new ExpandableViewController(this.expandableNotificationRow);
        }

        public final BigPictureIconManager getBigPictureIconManager() {
            return new BigPictureIconManager(this.referenceGlobalRootComponentImpl.context, (ImageLoader) this.referenceSysUIComponentImpl.imageLoaderProvider.get(), (BigPictureStatsManager) this.referenceSysUIComponentImpl.bigPictureStatsManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
        }

        @Override // com.android.systemui.statusbar.notification.row.dagger.ExpandableNotificationRowComponent
        public final ExpandableNotificationRowController getExpandableNotificationRowController() {
            return (ExpandableNotificationRowController) this.expandableNotificationRowControllerProvider.get();
        }

        public final void initialize(ExpandableNotificationRow expandableNotificationRow, NotificationEntry notificationEntry, ExpandableNotificationRow.OnExpandClickListener onExpandClickListener) {
            this.expandableNotificationRowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.expandableNotificationRowComponentImpl, 0));
        }

        public final NotificationChildrenContainerLogger notificationChildrenContainerLogger() {
            return new NotificationChildrenContainerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNotificationRenderLogBufferProvider.get());
        }

        public final String notificationKeyString() {
            StatusBarNotification statusBarNotification = this.notificationEntry.mSbn;
            Preconditions.checkNotNullFromProvides(statusBarNotification);
            String key = statusBarNotification.getKey();
            Preconditions.checkNotNullFromProvides(key);
            return key;
        }

        public final NotificationRowLogger notificationRowLogger() {
            return new NotificationRowLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNotificationsLogBufferProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideNotificationRenderLogBufferProvider.get());
        }

        public final StatusBarNotification statusBarNotification() {
            StatusBarNotification statusBarNotification = this.notificationEntry.mSbn;
            Preconditions.checkNotNullFromProvides(statusBarNotification);
            return statusBarNotification;
        }

        private ExpandableNotificationRowComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRow expandableNotificationRow, NotificationEntry notificationEntry, ExpandableNotificationRow.OnExpandClickListener onExpandClickListener) {
            this.expandableNotificationRowComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.expandableNotificationRow = expandableNotificationRow;
            this.notificationEntry = notificationEntry;
            this.onExpandClickListener = onExpandClickListener;
            initialize(expandableNotificationRow, notificationEntry, onExpandClickListener);
        }
    }

    public final class InputSessionComponentFactory implements InputSessionComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ InputSessionComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.ambient.touch.dagger.InputSessionComponent.Factory
        public final InputSessionComponent create(String str, InputChannelCompat$InputEventListener inputChannelCompat$InputEventListener, GestureDetector.OnGestureListener onGestureListener, boolean z) {
            str.getClass();
            inputChannelCompat$InputEventListener.getClass();
            onGestureListener.getClass();
            return new InputSessionComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, str, inputChannelCompat$InputEventListener, onGestureListener, Boolean.valueOf(z), 0);
        }

        private InputSessionComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class InputSessionComponentImpl implements InputSessionComponent {
        public final GestureDetector.OnGestureListener gestureListener;
        public final InputChannelCompat$InputEventListener inputEventListener;
        public final InputSessionComponentImpl inputSessionComponentImpl;
        public final String name;
        public final Boolean pilferOnGestureConsume;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ InputSessionComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, String str, InputChannelCompat$InputEventListener inputChannelCompat$InputEventListener, GestureDetector.OnGestureListener onGestureListener, Boolean bool, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, str, inputChannelCompat$InputEventListener, onGestureListener, bool);
        }

        public final GestureDetector gestureDetector() {
            return new GestureDetector(this.gestureListener);
        }

        @Override // com.android.systemui.ambient.touch.dagger.InputSessionComponent
        public final InputSession getInputSession() {
            return new InputSession(inputMonitorCompat(), gestureDetector(), this.inputEventListener, (Choreographer) this.referenceGlobalRootComponentImpl.providesChoreographerProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), this.pilferOnGestureConsume.booleanValue());
        }

        public final InputMonitorCompat inputMonitorCompat() {
            String str = this.name;
            ((DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get()).getClass();
            return new InputMonitorCompat(str, 0);
        }

        private InputSessionComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, String str, InputChannelCompat$InputEventListener inputChannelCompat$InputEventListener, GestureDetector.OnGestureListener onGestureListener, Boolean bool) {
            this.inputSessionComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.name = str;
            this.gestureListener = onGestureListener;
            this.inputEventListener = inputChannelCompat$InputEventListener;
            this.pilferOnGestureConsume = bool;
        }
    }

    public final class KeyguardBouncerComponentFactory implements KeyguardBouncerComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ KeyguardBouncerComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardBouncerComponent.Factory
        public final KeyguardBouncerComponent create(ViewGroup viewGroup) {
            viewGroup.getClass();
            return new KeyguardBouncerComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, viewGroup, 0);
        }

        private KeyguardBouncerComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class KeyguardBouncerComponentImpl implements KeyguardBouncerComponent {
        public final ViewGroup bouncerContainer;
        public Provider factoryProvider;
        public Provider factoryProvider2;
        public Provider keyguardBiometricViewControllerProvider;
        public final KeyguardBouncerComponentImpl keyguardBouncerComponentImpl;
        public Provider keyguardSecSecurityContainerControllerProvider;
        public Provider keyguardSecurityViewFlipperControllerProvider;
        public Provider providesCarrierTextProvider;
        public Provider providesKeyguardArrowViewProvider;
        public Provider providesKeyguardBiometricViewProvider;
        public Provider providesKeyguardCarrierTextViewProvider;
        public Provider providesKeyguardPunchHoleVIViewProvider;
        public Provider providesKeyguardSecSecurityContainerProvider;
        public Provider providesKeyguardSecurityContainerProvider;
        public Provider providesKeyguardSecurityViewFlipperProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardBouncerComponentImpl keyguardBouncerComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardBouncerComponentImpl keyguardBouncerComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.keyguardBouncerComponentImpl = keyguardBouncerComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        KeyguardSecSecurityContainer keyguardSecSecurityContainer = (KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get();
                        AlarmManager alarmManager = (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get();
                        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get();
                        DisplayLifecycle displayLifecycle = (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get();
                        DualDarInnerLockScreenController.Factory factory = (DualDarInnerLockScreenController.Factory) this.keyguardBouncerComponentImpl.factoryProvider.get();
                        InputMethodManager inputMethodManager = (InputMethodManager) this.referenceGlobalRootComponentImpl.provideInputMethodManagerProvider.get();
                        KeyguardCarrierTextViewController keyguardCarrierTextViewController = this.keyguardBouncerComponentImpl.keyguardCarrierTextViewController();
                        KeyguardPunchHoleVIViewController keyguardPunchHoleVIViewController = this.keyguardBouncerComponentImpl.keyguardPunchHoleVIViewController();
                        Object keyguardArrowViewControllerFactory = this.keyguardBouncerComponentImpl.keyguardArrowViewControllerFactory();
                        KeyguardBiometricViewController keyguardBiometricViewController = (KeyguardBiometricViewController) this.keyguardBouncerComponentImpl.keyguardBiometricViewControllerProvider.get();
                        KeyguardPluginControllerImpl.Factory keyguardPluginControllerImplFactory = this.keyguardBouncerComponentImpl.keyguardPluginControllerImplFactory();
                        SettingsHelper settingsHelper = (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get();
                        AdminSecondaryLockScreenController.Factory factory2 = (AdminSecondaryLockScreenController.Factory) this.keyguardBouncerComponentImpl.factoryProvider2.get();
                        LockPatternUtils lockPatternUtils = (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        KeyguardSecurityModel keyguardSecurityModel = (KeyguardSecurityModel) this.referenceSysUIComponentImpl.keyguardSecurityModelProvider.get();
                        MetricsLogger metricsLogger = (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get();
                        UiEventLogger uiEventLogger = (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        KeyguardSecurityViewFlipperController keyguardSecurityViewFlipperController = (KeyguardSecurityViewFlipperController) this.keyguardBouncerComponentImpl.keyguardSecurityViewFlipperControllerProvider.get();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        FalsingCollector falsingCollector = (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get();
                        FalsingManager falsingManager = (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get();
                        UserSwitcherController userSwitcherController = (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get();
                        FeatureFlags featureFlags = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        GlobalSettings globalSettings = (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl();
                        SessionTracker sessionTracker = (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get();
                        FalsingA11yDelegate falsingA11yDelegate = this.keyguardBouncerComponentImpl.falsingA11yDelegate();
                        TelephonyManager telephonyManager = (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get();
                        ViewMediatorCallback viewMediatorCallback = (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get();
                        AudioManager audioManager = (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get();
                        DeviceEntryFaceAuthInteractor deviceEntryFaceAuthInteractor = (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get();
                        BouncerMessageInteractor bouncerMessageInteractor = (BouncerMessageInteractor) this.referenceSysUIComponentImpl.bouncerMessageInteractorProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new KeyguardSecSecurityContainerController(keyguardSecSecurityContainer, alarmManager, devicePolicyManager, displayLifecycle, factory, inputMethodManager, keyguardCarrierTextViewController, keyguardPunchHoleVIViewController, (KeyguardArrowViewController.Factory) keyguardArrowViewControllerFactory, keyguardBiometricViewController, keyguardPluginControllerImplFactory, settingsHelper, factory2, lockPatternUtils, keyguardUpdateMonitor, keyguardSecurityModel, metricsLogger, uiEventLogger, keyguardStateController, keyguardSecurityViewFlipperController, configurationController, falsingCollector, falsingManager, userSwitcherController, featureFlags, globalSettings, sessionTracker, falsingA11yDelegate, telephonyManager, viewMediatorCallback, audioManager, deviceEntryFaceAuthInteractor, bouncerMessageInteractor, referenceSysUIComponentImpl.javaAdapterProvider, (SelectedUserInteractor) referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (FaceAuthAccessibilityDelegate) this.referenceSysUIComponentImpl.faceAuthAccessibilityDelegateProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider), this.referenceSysUIComponentImpl.deviceEntryInteractorProvider);
                    case 1:
                        ViewGroup viewGroup = this.keyguardBouncerComponentImpl.bouncerContainer;
                        ?? r0 = (T) ((KeyguardSecSecurityContainer) ((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get()).inflate(R.layout.keyguard_sec_security_container_view, viewGroup, false));
                        viewGroup.addView(r0);
                        Preconditions.checkNotNullFromProvides(r0);
                        return r0;
                    case 2:
                        return (T) new DualDarInnerLockScreenController.Factory(this.referenceGlobalRootComponentImpl.context, (KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), this.keyguardBouncerComponentImpl.keyguardInputViewControllerFactory(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 3:
                        T t = (T) ((KeyguardCarrierTextView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.bouncer_status_bar_area_root));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 4:
                        T t2 = (T) ((CarrierText) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.bouncer_carrier_text));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 5:
                        T t3 = (T) ((KeyguardPunchHoleVIView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.keyguard_punch_hole_vi_view));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 6:
                        T t4 = (T) ((KeyguardArrowView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.keyguard_arrow_view));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 7:
                        return (T) new KeyguardBiometricViewController((KeyguardBiometricView) this.keyguardBouncerComponentImpl.providesKeyguardBiometricViewProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (VibrationUtil) this.referenceGlobalRootComponentImpl.vibrationUtilProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get());
                    case 8:
                        T t5 = (T) ((KeyguardBiometricView) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.keyguard_biometric_view));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 9:
                        return (T) new AdminSecondaryLockScreenController.Factory(this.referenceGlobalRootComponentImpl.context, (KeyguardSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecurityContainerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 10:
                        T t6 = (T) ((KeyguardSecurityContainer) ((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get()).inflate(R.layout.keyguard_security_container_view, this.keyguardBouncerComponentImpl.bouncerContainer, false));
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 11:
                        return (T) new KeyguardSecurityViewFlipperController((KeyguardSecurityViewFlipper) this.keyguardBouncerComponentImpl.providesKeyguardSecurityViewFlipperProvider.get(), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (AsyncLayoutInflater) this.referenceGlobalRootComponentImpl.provideAsyncLayoutInflaterProvider.get(), this.keyguardBouncerComponentImpl.keyguardInputViewControllerFactory(), this.referenceSysUIComponentImpl.emergencyButtonControllerFactory(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 12:
                        T t7 = (T) ((KeyguardSecurityViewFlipper) ((KeyguardSecSecurityContainer) this.keyguardBouncerComponentImpl.providesKeyguardSecSecurityContainerProvider.get()).findViewById(R.id.view_flipper));
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ KeyguardBouncerComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ViewGroup viewGroup, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, viewGroup);
        }

        public final CarrierTextController carrierTextController() {
            return new CarrierTextController((CarrierText) this.providesCarrierTextProvider.get(), this.referenceSysUIComponentImpl.carrierTextManagerBuilder(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        public final FalsingA11yDelegate falsingA11yDelegate() {
            return new FalsingA11yDelegate((FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardBouncerComponent
        public final KeyguardSecSecurityContainerController getSecurityContainerController() {
            return (KeyguardSecSecurityContainerController) this.keyguardSecSecurityContainerControllerProvider.get();
        }

        public final void initialize(ViewGroup viewGroup) {
            this.providesKeyguardSecSecurityContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 1));
            this.factoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 2));
            this.providesKeyguardCarrierTextViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 3));
            this.providesCarrierTextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 4));
            this.providesKeyguardPunchHoleVIViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 5));
            this.providesKeyguardArrowViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 6));
            this.providesKeyguardBiometricViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 8));
            this.keyguardBiometricViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 7));
            this.providesKeyguardSecurityContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 10));
            this.factoryProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 9));
            this.providesKeyguardSecurityViewFlipperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 12));
            this.keyguardSecurityViewFlipperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 11));
            this.keyguardSecSecurityContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardBouncerComponentImpl, 0));
        }

        public final Object keyguardArrowViewControllerFactory() {
            return new KeyguardArrowViewController.Factory((KeyguardArrowView) this.providesKeyguardArrowViewProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get());
        }

        public final KeyguardCarrierTextViewController keyguardCarrierTextViewController() {
            return new KeyguardCarrierTextViewController((KeyguardCarrierTextView) this.providesKeyguardCarrierTextViewProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), carrierTextController(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get());
        }

        public final KeyguardInputViewController.Factory keyguardInputViewControllerFactory() {
            return new KeyguardInputViewController.Factory((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (VibrationUtil) this.referenceGlobalRootComponentImpl.vibrationUtilProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (WifiManager) this.referenceGlobalRootComponentImpl.provideWifiManagerProvider.get(), (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), keyguardTouchSwipeDetector(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), this.referenceSysUIComponentImpl.keyguardMessageAreaControllerFactory(), (InputMethodManager) this.referenceGlobalRootComponentImpl.provideInputMethodManagerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (LiftToActivateListener) liftToActivateListener(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), this.referenceSysUIComponentImpl.emergencyButtonControllerFactory(), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (KeyguardKeyboardInteractor) this.referenceSysUIComponentImpl.keyguardKeyboardInteractorProvider.get());
        }

        public final KeyguardPluginControllerImpl.Factory keyguardPluginControllerImplFactory() {
            return new KeyguardPluginControllerImpl.Factory(this.referenceGlobalRootComponentImpl.context, (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
        }

        public final KeyguardPunchHoleVIViewController keyguardPunchHoleVIViewController() {
            return new KeyguardPunchHoleVIViewController((KeyguardPunchHoleVIView) this.providesKeyguardPunchHoleVIViewProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get());
        }

        public final KeyguardTouchSwipeDetector keyguardTouchSwipeDetector() {
            return new KeyguardTouchSwipeDetector(this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardTouchDymLockInjector) this.referenceSysUIComponentImpl.keyguardTouchDymLockInjectorProvider.get(), (KeyguardTouchSecurityInjector) this.referenceSysUIComponentImpl.keyguardTouchSecurityInjectorProvider.get());
        }

        public final Object liftToActivateListener() {
            return new LiftToActivateListener((AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get());
        }

        private KeyguardBouncerComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ViewGroup viewGroup) {
            this.keyguardBouncerComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.bouncerContainer = viewGroup;
            initialize(viewGroup);
        }
    }

    public final class KeyguardQsUserSwitchComponentFactory implements KeyguardQsUserSwitchComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ KeyguardQsUserSwitchComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardQsUserSwitchComponent.Factory
        public final KeyguardQsUserSwitchComponent build(FrameLayout frameLayout) {
            frameLayout.getClass();
            return new KeyguardQsUserSwitchComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, frameLayout, 0);
        }

        private KeyguardQsUserSwitchComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class KeyguardQsUserSwitchComponentImpl implements KeyguardQsUserSwitchComponent {
        public final KeyguardQsUserSwitchComponentImpl keyguardQsUserSwitchComponentImpl;
        public Provider keyguardQsUserSwitchControllerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final FrameLayout userAvatarContainer;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardQsUserSwitchComponentImpl keyguardQsUserSwitchComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardQsUserSwitchComponentImpl keyguardQsUserSwitchComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.keyguardQsUserSwitchComponentImpl = keyguardQsUserSwitchComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id != 0) {
                    throw new AssertionError(this.id);
                }
                FrameLayout frameLayout = this.keyguardQsUserSwitchComponentImpl.userAvatarContainer;
                Context context = this.referenceGlobalRootComponentImpl.context;
                return (T) new KeyguardQsUserSwitchController(frameLayout, context, FrameworkServicesModule_ProvideResourcesFactory.provideResources(context), (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (UserSwitchDialogController) this.referenceSysUIComponentImpl.userSwitchDialogControllerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
            }
        }

        public /* synthetic */ KeyguardQsUserSwitchComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, FrameLayout frameLayout, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, frameLayout);
        }

        @Override // com.android.keyguard.dagger.KeyguardQsUserSwitchComponent
        public final KeyguardQsUserSwitchController getKeyguardQsUserSwitchController() {
            return (KeyguardQsUserSwitchController) this.keyguardQsUserSwitchControllerProvider.get();
        }

        public final void initialize(FrameLayout frameLayout) {
            this.keyguardQsUserSwitchControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardQsUserSwitchComponentImpl, 0));
        }

        private KeyguardQsUserSwitchComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, FrameLayout frameLayout) {
            this.keyguardQsUserSwitchComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.userAvatarContainer = frameLayout;
            initialize(frameLayout);
        }
    }

    public final class KeyguardStatusBarViewComponentFactory implements KeyguardStatusBarViewComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ KeyguardStatusBarViewComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusBarViewComponent.Factory
        public final KeyguardStatusBarViewComponent build(KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider) {
            keyguardStatusBarView.getClass();
            shadeViewStateProvider.getClass();
            return new KeyguardStatusBarViewComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, keyguardStatusBarView, shadeViewStateProvider, 0);
        }

        private KeyguardStatusBarViewComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class KeyguardStatusBarViewComponentImpl implements KeyguardStatusBarViewComponent {
        public Provider getBatteryMeterViewProvider;
        public Provider getCarrierTextProvider;
        public Provider getStatusBarLocationProvider;
        public Provider getStatusIconContainerProvider;
        public final KeyguardStatusBarViewComponentImpl keyguardStatusBarViewComponentImpl;
        public Provider provideNetspeedViewControllerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final ShadeViewStateProvider shadeViewStateProvider;
        public final KeyguardStatusBarView view;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardStatusBarViewComponentImpl keyguardStatusBarViewComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardStatusBarViewComponentImpl keyguardStatusBarViewComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.keyguardStatusBarViewComponentImpl = keyguardStatusBarViewComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id;
                if (i == 0) {
                    T t = (T) ((CarrierText) this.keyguardStatusBarViewComponentImpl.view.findViewById(R.id.keyguard_carrier_text));
                    Preconditions.checkNotNullFromProvides(t);
                    return t;
                }
                if (i == 1) {
                    T t2 = (T) ((BatteryMeterView) this.keyguardStatusBarViewComponentImpl.view.findViewById(R.id.battery));
                    Preconditions.checkNotNullFromProvides(t2);
                    return t2;
                }
                if (i == 2) {
                    T t3 = (T) StatusBarLocation.KEYGUARD;
                    Preconditions.checkNotNullFromProvides(t3);
                    return t3;
                }
                if (i == 3) {
                    T t4 = (T) ((StatusIconContainer) this.keyguardStatusBarViewComponentImpl.view.findViewById(R.id.statusIcons));
                    Preconditions.checkNotNullFromProvides(t4);
                    return t4;
                }
                if (i != 4) {
                    throw new AssertionError(this.id);
                }
                KeyguardStatusBarView keyguardStatusBarView = this.keyguardStatusBarViewComponentImpl.view;
                IndicatorScaleGardener indicatorScaleGardener = (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get();
                IndicatorCutoutUtil indicatorCutoutUtil = (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get();
                UserTracker userTracker = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                WakefulnessLifecycle wakefulnessLifecycle = (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get();
                if (BasicRune.STATUS_REAL_TIME_NETWORK_SPEED) {
                    return (T) new NetspeedViewController((NetspeedView) keyguardStatusBarView.findViewById(R.id.networkSpeed), indicatorScaleGardener, indicatorCutoutUtil, userTracker, wakefulnessLifecycle);
                }
                return null;
            }
        }

        public /* synthetic */ KeyguardStatusBarViewComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, keyguardStatusBarView, shadeViewStateProvider);
        }

        public final BatteryMeterViewController batteryMeterViewController() {
            return new BatteryMeterViewController((BatteryMeterView) this.getBatteryMeterViewProvider.get(), (StatusBarLocation) this.getStatusBarLocationProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
        }

        public final CarrierTextController carrierTextController() {
            return new CarrierTextController((CarrierText) this.getCarrierTextProvider.get(), this.referenceSysUIComponentImpl.carrierTextManagerBuilder(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusBarViewComponent
        public final KeyguardStatusBarViewController getKeyguardStatusBarViewController() {
            return new KeyguardStatusBarViewController(this.view, carrierTextController(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (SystemStatusAnimationScheduler) this.referenceSysUIComponentImpl.bindSystemStatusAnimationSchedulerProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (UserInfoController) this.referenceSysUIComponentImpl.userInfoControllerImplProvider.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), batteryMeterViewController(), this.shadeViewStateProvider, (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStatusBarViewModel) this.referenceSysUIComponentImpl.keyguardStatusBarViewModelProvider.get(), (BiometricUnlockController) this.referenceSysUIComponentImpl.biometricUnlockControllerProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarContentInsetsProvider) this.referenceSysUIComponentImpl.statusBarContentInsetsProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), statusBarUserChipViewModel(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.referenceSysUIComponentImpl.keyguardLogger(), this.referenceSysUIComponentImpl.statusOverlayHoverListenerFactory(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), statusIconContainerController(), (OngoingCallController) this.referenceSysUIComponentImpl.ongoingCallControllerProvider.get(), keyguardStatusBarWallpaperHelper(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get(), (TwoPhoneModeIconController) this.referenceSysUIComponentImpl.twoPhoneModeIconControllerProvider.get(), knoxStatusBarControlViewModel(), (NetspeedViewController) this.provideNetspeedViewControllerProvider.get(), slimIndicatorKeyguardCarrierTextHelper(), this.referenceSysUIComponentImpl.notificationIconAreaController(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get());
        }

        public final void initialize(KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider) {
            this.getCarrierTextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 0));
            this.getBatteryMeterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 1));
            this.getStatusBarLocationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 2));
            this.getStatusIconContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 3));
            this.provideNetspeedViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardStatusBarViewComponentImpl, 4));
        }

        public final KeyguardStatusBarWallpaperHelper keyguardStatusBarWallpaperHelper() {
            return new KeyguardStatusBarWallpaperHelper((WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (WallpaperEventNotifier) this.referenceSysUIComponentImpl.wallpaperEventNotifierProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get());
        }

        public final KnoxStatusBarControlViewModel knoxStatusBarControlViewModel() {
            return new KnoxStatusBarControlViewModel((KnoxStatusBarControlInteractor) this.referenceSysUIComponentImpl.knoxStatusBarControlInteractorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get());
        }

        public final SlimIndicatorKeyguardCarrierTextHelper slimIndicatorKeyguardCarrierTextHelper() {
            return new SlimIndicatorKeyguardCarrierTextHelper((SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
        }

        public final StatusBarUserChipViewModel statusBarUserChipViewModel() {
            return new StatusBarUserChipViewModel((UserSwitcherInteractor) this.referenceSysUIComponentImpl.userSwitcherInteractorProvider.get());
        }

        public final StatusIconContainerController statusIconContainerController() {
            return new StatusIconContainerController((StatusIconContainer) this.getStatusIconContainerProvider.get(), this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get());
        }

        private KeyguardStatusBarViewComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardStatusBarView keyguardStatusBarView, ShadeViewStateProvider shadeViewStateProvider) {
            this.keyguardStatusBarViewComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.view = keyguardStatusBarView;
            this.shadeViewStateProvider = shadeViewStateProvider;
            initialize(keyguardStatusBarView, shadeViewStateProvider);
        }
    }

    public final class KeyguardStatusViewComponentFactory implements KeyguardStatusViewComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ KeyguardStatusViewComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusViewComponent.Factory
        public final KeyguardStatusViewComponent build(KeyguardStatusView keyguardStatusView, Display display) {
            keyguardStatusView.getClass();
            display.getClass();
            return new KeyguardStatusViewComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, keyguardStatusView, display, 0);
        }

        private KeyguardStatusViewComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class KeyguardStatusViewComponentImpl implements KeyguardStatusViewComponent {
        public final Display display;
        public Provider keyguardSliceViewControllerProvider;
        public final KeyguardStatusViewComponentImpl keyguardStatusViewComponentImpl;
        public final KeyguardStatusView presentation;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardStatusViewComponentImpl keyguardStatusViewComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardStatusViewComponentImpl keyguardStatusViewComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.keyguardStatusViewComponentImpl = keyguardStatusViewComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    return (T) new KeyguardSliceViewController((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), this.keyguardStatusViewComponentImpl.keyguardSliceView(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ KeyguardStatusViewComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardStatusView keyguardStatusView, Display display, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, keyguardStatusView, display);
        }

        public final ClockEventController clockEventController() {
            KeyguardInteractor keyguardInteractor = (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get();
            KeyguardTransitionInteractor keyguardTransitionInteractor = (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get();
            BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get();
            BatteryController batteryController = (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get();
            KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
            ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
            Resources displaySpecificResources = displaySpecificResources();
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new ClockEventController(keyguardInteractor, keyguardTransitionInteractor, broadcastDispatcher, batteryController, keyguardUpdateMonitor, configurationController, displaySpecificResources, referenceGlobalRootComponentImpl.context, (DelayableExecutor) referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.referenceSysUIComponentImpl.clockMessageBuffers(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get());
        }

        public final Context displaySpecificContext() {
            return KeyguardDisplayModule_Companion_GetDisplayContextFactory.getDisplayContext(this.referenceGlobalRootComponentImpl.context, Optional.of(this.display));
        }

        public final Resources displaySpecificResources() {
            Context displaySpecificContext = displaySpecificContext();
            KeyguardDisplayModule.Companion.getClass();
            return displaySpecificContext.getResources();
        }

        public final KeyguardClockSwitchController getKeyguardClockSwitchController() {
            return new KeyguardClockSwitchController(KeyguardStatusViewModule_GetKeyguardClockSwitchFactory.getKeyguardClockSwitch(this.presentation), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ClockRegistry) this.referenceSysUIComponentImpl.getClockRegistryProvider.get(), (KeyguardSliceViewController) this.keyguardSliceViewControllerProvider.get(), this.referenceSysUIComponentImpl.notificationIconAreaController(), (LockscreenSmartspaceController) this.referenceSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), notificationIconContainerAlwaysOnDisplayViewBinder(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), clockEventController(), (LogBuffer) this.referenceSysUIComponentImpl.provideKeyguardClockLogProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (InWindowLauncherUnlockAnimationManager) this.referenceSysUIComponentImpl.inWindowLauncherUnlockAnimationManagerProvider.get());
        }

        @Override // com.android.keyguard.dagger.KeyguardStatusViewComponent
        public final KeyguardStatusViewController getKeyguardStatusViewController() {
            return injectKeyguardStatusViewController(new KeyguardStatusViewController((DcmMascotViewContainer) this.referenceSysUIComponentImpl.dcmMascotViewContainerProvider.get(), (KeyguardStatusViewAlphaChangeControllerWrapper) this.referenceSysUIComponentImpl.keyguardStatusViewAlphaChangeControllerWrapperProvider.get(), this.presentation, (KeyguardSliceViewController) this.keyguardSliceViewControllerProvider.get(), getKeyguardClockSwitchController(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), this.referenceSysUIComponentImpl.keyguardLogger(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get()));
        }

        public final void initialize(KeyguardStatusView keyguardStatusView, Display display) {
            this.keyguardSliceViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardStatusViewComponentImpl, 0));
        }

        public final KeyguardStatusViewController injectKeyguardStatusViewController(KeyguardStatusViewController keyguardStatusViewController) {
            keyguardStatusViewController.mPluginAODManagerLazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider);
            return keyguardStatusViewController;
        }

        public final KeyguardClockSwitch keyguardClockSwitch() {
            return KeyguardStatusViewModule_GetKeyguardClockSwitchFactory.getKeyguardClockSwitch(this.presentation);
        }

        public final KeyguardSliceView keyguardSliceView() {
            KeyguardSliceView keyguardSliceView = (KeyguardSliceView) KeyguardStatusViewModule_GetKeyguardClockSwitchFactory.getKeyguardClockSwitch(this.presentation).findViewById(R.id.keyguard_slice_view);
            Preconditions.checkNotNullFromProvides(keyguardSliceView);
            return keyguardSliceView;
        }

        public final NotificationIconContainerAlwaysOnDisplayViewBinder notificationIconContainerAlwaysOnDisplayViewBinder() {
            return new NotificationIconContainerAlwaysOnDisplayViewBinder((NotificationIconContainerAlwaysOnDisplayViewModel) this.referenceSysUIComponentImpl.notificationIconContainerAlwaysOnDisplayViewModelProvider.get(), (KeyguardRootViewModel) this.referenceSysUIComponentImpl.keyguardRootViewModelProvider.get(), this.referenceSysUIComponentImpl.configurationState(), (StatusBarIconViewBindingFailureTracker) this.referenceSysUIComponentImpl.statusBarIconViewBindingFailureTrackerProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), this.referenceSysUIComponentImpl.systemBarUtilsState(), this.referenceSysUIComponentImpl.alwaysOnDisplayNotificationIconViewStore());
        }

        private KeyguardStatusViewComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardStatusView keyguardStatusView, Display display) {
            this.keyguardStatusViewComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.presentation = keyguardStatusView;
            this.display = display;
            initialize(keyguardStatusView, display);
        }
    }

    public final class KeyguardUserSwitcherComponentFactory implements KeyguardUserSwitcherComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ KeyguardUserSwitcherComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.keyguard.dagger.KeyguardUserSwitcherComponent.Factory
        public final KeyguardUserSwitcherComponent build(KeyguardUserSwitcherView keyguardUserSwitcherView) {
            keyguardUserSwitcherView.getClass();
            return new KeyguardUserSwitcherComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, keyguardUserSwitcherView, 0);
        }

        private KeyguardUserSwitcherComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class KeyguardUserSwitcherComponentImpl implements KeyguardUserSwitcherComponent {
        public final KeyguardUserSwitcherComponentImpl keyguardUserSwitcherComponentImpl;
        public Provider keyguardUserSwitcherControllerProvider;
        public final KeyguardUserSwitcherView keyguardUserSwitcherView;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final KeyguardUserSwitcherComponentImpl keyguardUserSwitcherComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardUserSwitcherComponentImpl keyguardUserSwitcherComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.keyguardUserSwitcherComponentImpl = keyguardUserSwitcherComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id != 0) {
                    throw new AssertionError(this.id);
                }
                KeyguardUserSwitcherView keyguardUserSwitcherView = this.keyguardUserSwitcherComponentImpl.keyguardUserSwitcherView;
                Context context = this.referenceGlobalRootComponentImpl.context;
                return (T) new KeyguardUserSwitcherController(keyguardUserSwitcherView, context, FrameworkServicesModule_ProvideResourcesFactory.provideResources(context), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get());
            }
        }

        public /* synthetic */ KeyguardUserSwitcherComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardUserSwitcherView keyguardUserSwitcherView, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, keyguardUserSwitcherView);
        }

        @Override // com.android.keyguard.dagger.KeyguardUserSwitcherComponent
        public final KeyguardUserSwitcherController getKeyguardUserSwitcherController() {
            return (KeyguardUserSwitcherController) this.keyguardUserSwitcherControllerProvider.get();
        }

        public final void initialize(KeyguardUserSwitcherView keyguardUserSwitcherView) {
            this.keyguardUserSwitcherControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.keyguardUserSwitcherComponentImpl, 0));
        }

        private KeyguardUserSwitcherComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, KeyguardUserSwitcherView keyguardUserSwitcherView) {
            this.keyguardUserSwitcherComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.keyguardUserSwitcherView = keyguardUserSwitcherView;
            initialize(keyguardUserSwitcherView);
        }
    }

    public final class MediaProjectionAppSelectorComponentFactory implements MediaProjectionAppSelectorComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ MediaProjectionAppSelectorComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent.Factory
        public final MediaProjectionAppSelectorComponent create(UserHandle userHandle, int i, String str, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler, boolean z) {
            userHandle.getClass();
            mediaProjectionAppSelectorView.getClass();
            mediaProjectionAppSelectorResultHandler.getClass();
            return new MediaProjectionAppSelectorComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, userHandle, Integer.valueOf(i), str, mediaProjectionAppSelectorView, mediaProjectionAppSelectorResultHandler, Boolean.valueOf(z), 0);
        }

        private MediaProjectionAppSelectorComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class MediaProjectionAppSelectorComponentImpl implements MediaProjectionAppSelectorComponent {
        public Provider activityTaskManagerLabelLoaderProvider;
        public Provider activityTaskManagerThumbnailLoaderProvider;
        public Provider basicPackageManagerAppIconLoaderProvider;
        public Provider bindAppIconLoaderProvider;
        public Provider bindIconFactoryProvider;
        public Provider bindRecentTaskLabelLoaderProvider;
        public Provider bindRecentTaskListProvider;
        public Provider bindRecentTaskThumbnailLoaderProvider;
        public final String callingPackage;
        public Provider factoryProvider;
        public Provider factoryProvider2;
        public final Integer hostUid;
        public final UserHandle hostUserHandle;
        public final Boolean isFirstStart;
        public final MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl;
        public Provider mediaProjectionAppSelectorControllerProvider;
        public Provider mediaProjectionBlockerEmptyStateProvider;
        public Provider mediaProjectionRecentsViewControllerProvider;
        public Provider provideAppSelectorComponentNameProvider;
        public Provider provideCoroutineScopeProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final MediaProjectionAppSelectorResultHandler resultHandler;
        public Provider shellRecentTaskListProvider;
        public Provider taskPreviewSizeProvider;
        public final MediaProjectionAppSelectorView view;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.mediaProjectionAppSelectorComponentImpl = mediaProjectionAppSelectorComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        RecentTaskListProvider recentTaskListProvider = (RecentTaskListProvider) this.mediaProjectionAppSelectorComponentImpl.bindRecentTaskListProvider.get();
                        MediaProjectionAppSelectorView mediaProjectionAppSelectorView = this.mediaProjectionAppSelectorComponentImpl.view;
                        ScreenCaptureDevicePolicyResolver screenCaptureDevicePolicyResolver = (ScreenCaptureDevicePolicyResolver) this.referenceSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider.get();
                        MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl = this.mediaProjectionAppSelectorComponentImpl;
                        UserHandle userHandle = mediaProjectionAppSelectorComponentImpl.hostUserHandle;
                        CoroutineScope coroutineScope = (CoroutineScope) mediaProjectionAppSelectorComponentImpl.provideCoroutineScopeProvider.get();
                        ComponentName componentName = (ComponentName) this.mediaProjectionAppSelectorComponentImpl.provideAppSelectorComponentNameProvider.get();
                        MediaProjectionAppSelectorComponentImpl mediaProjectionAppSelectorComponentImpl2 = this.mediaProjectionAppSelectorComponentImpl;
                        return (T) new MediaProjectionAppSelectorController(recentTaskListProvider, mediaProjectionAppSelectorView, screenCaptureDevicePolicyResolver, userHandle, coroutineScope, componentName, mediaProjectionAppSelectorComponentImpl2.callingPackage, (RecentTaskThumbnailLoader) mediaProjectionAppSelectorComponentImpl2.bindRecentTaskThumbnailLoaderProvider.get(), this.mediaProjectionAppSelectorComponentImpl.isFirstStart.booleanValue(), (MediaProjectionMetricsLogger) this.referenceSysUIComponentImpl.mediaProjectionMetricsLoggerProvider.get(), this.mediaProjectionAppSelectorComponentImpl.hostUid.intValue());
                    case 1:
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get();
                        Executor executor = (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new ShellRecentTaskListProvider(coroutineDispatcher, executor, referenceSysUIComponentImpl.setRecentTasks, (UserTracker) referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get());
                    case 2:
                        CoroutineScope coroutineScope2 = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        MediaProjectionAppSelectorModule.Companion.getClass();
                        return (T) CoroutineScopeKt.CoroutineScope(coroutineScope2.getCoroutineContext().plus(SupervisorKt.SupervisorJob$default()));
                    case 3:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        MediaProjectionAppSelectorModule.Companion.getClass();
                        return (T) new ComponentName(context, (Class<?>) MediaProjectionAppSelectorActivity.class);
                    case 4:
                        return (T) new ActivityTaskManagerThumbnailLoader((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (ActivityManagerWrapper) this.referenceSysUIComponentImpl.provideActivityManagerWrapperProvider.get());
                    case 5:
                        return (T) new MediaProjectionRecentsViewController((RecentTasksAdapter.Factory) this.mediaProjectionAppSelectorComponentImpl.factoryProvider2.get(), (TaskPreviewSizeProvider) this.mediaProjectionAppSelectorComponentImpl.taskPreviewSizeProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), this.mediaProjectionAppSelectorComponentImpl.resultHandler, this.referenceSysUIComponentImpl.setSplitScreen);
                    case 6:
                        return (T) new RecentTasksAdapter.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.MediaProjectionAppSelectorComponentImpl.SwitchingProvider.1
                            @Override // com.android.systemui.mediaprojection.appselector.view.RecentTasksAdapter.Factory
                            public final RecentTasksAdapter create(List<RecentTask> list, RecentTasksAdapter.RecentTaskClickListener recentTaskClickListener) {
                                return new RecentTasksAdapter(list, recentTaskClickListener, (RecentTaskViewHolder.Factory) SwitchingProvider.this.mediaProjectionAppSelectorComponentImpl.factoryProvider.get());
                            }
                        };
                    case 7:
                        return (T) new RecentTaskViewHolder.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.MediaProjectionAppSelectorComponentImpl.SwitchingProvider.2
                            @Override // com.android.systemui.mediaprojection.appselector.view.RecentTaskViewHolder.Factory
                            public final RecentTaskViewHolder create(ViewGroup viewGroup) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new RecentTaskViewHolder(viewGroup, switchingProvider.mediaProjectionAppSelectorComponentImpl.badgedAppIconLoader(), (RecentTaskThumbnailLoader) switchingProvider.mediaProjectionAppSelectorComponentImpl.bindRecentTaskThumbnailLoaderProvider.get(), (RecentTaskLabelLoader) switchingProvider.mediaProjectionAppSelectorComponentImpl.bindRecentTaskLabelLoaderProvider.get(), (TaskPreviewSizeProvider) switchingProvider.mediaProjectionAppSelectorComponentImpl.taskPreviewSizeProvider.get(), (CoroutineScope) switchingProvider.mediaProjectionAppSelectorComponentImpl.provideCoroutineScopeProvider.get());
                            }
                        };
                    case 8:
                        return (T) new BasicPackageManagerAppIconLoader((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (PackageManagerWrapper) this.referenceGlobalRootComponentImpl.providePackageManagerWrapperProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 9:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        MediaProjectionAppSelectorModule.Companion.getClass();
                        return (T) IconFactory.obtain(context2);
                    case 10:
                        return (T) new ActivityTaskManagerLabelLoader((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 11:
                        return (T) new TaskPreviewSizeProvider(this.referenceGlobalRootComponentImpl.context, this.mediaProjectionAppSelectorComponentImpl.windowMetricsProviderImpl(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 12:
                        return (T) new MediaProjectionBlockerEmptyStateProvider(this.mediaProjectionAppSelectorComponentImpl.hostUserHandle, this.referenceSysUIComponentImpl.personalProfileUserHandle(), (ScreenCaptureDevicePolicyResolver) this.referenceSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ MediaProjectionAppSelectorComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, UserHandle userHandle, Integer num, String str, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler, Boolean bool, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, userHandle, num, str, mediaProjectionAppSelectorView, mediaProjectionAppSelectorResultHandler, bool);
        }

        public final BadgedAppIconLoader badgedAppIconLoader() {
            return new BadgedAppIconLoader((BasicAppIconLoader) this.bindAppIconLoaderProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), this.referenceGlobalRootComponentImpl.context, this.bindIconFactoryProvider);
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final ConfigurationController getConfigurationController() {
            return (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final MediaProjectionAppSelectorController getController() {
            return (MediaProjectionAppSelectorController) this.mediaProjectionAppSelectorControllerProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final MediaProjectionBlockerEmptyStateProvider getEmptyStateProvider() {
            return (MediaProjectionBlockerEmptyStateProvider) this.mediaProjectionBlockerEmptyStateProvider.get();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final UserHandle getHostUserHandle() {
            return this.hostUserHandle;
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final Set<DefaultLifecycleObserver> getLifecycleObservers() {
            return Collections.singleton((DefaultLifecycleObserver) this.taskPreviewSizeProvider.get());
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final UserHandle getPersonalProfileUserHandle() {
            return this.referenceSysUIComponentImpl.personalProfileUserHandle();
        }

        @Override // com.android.systemui.mediaprojection.appselector.MediaProjectionAppSelectorComponent
        public final MediaProjectionRecentsViewController getRecentsViewController() {
            return (MediaProjectionRecentsViewController) this.mediaProjectionRecentsViewControllerProvider.get();
        }

        public final void initialize(UserHandle userHandle, Integer num, String str, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler, Boolean bool) {
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 1);
            this.shellRecentTaskListProvider = switchingProvider;
            this.bindRecentTaskListProvider = DoubleCheck.provider(switchingProvider);
            this.provideCoroutineScopeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 2));
            this.provideAppSelectorComponentNameProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 3));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 4);
            this.activityTaskManagerThumbnailLoaderProvider = switchingProvider2;
            this.bindRecentTaskThumbnailLoaderProvider = DoubleCheck.provider(switchingProvider2);
            this.mediaProjectionAppSelectorControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 0));
            SwitchingProvider switchingProvider3 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 8);
            this.basicPackageManagerAppIconLoaderProvider = switchingProvider3;
            this.bindAppIconLoaderProvider = DoubleCheck.provider(switchingProvider3);
            this.bindIconFactoryProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 9);
            SwitchingProvider switchingProvider4 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 10);
            this.activityTaskManagerLabelLoaderProvider = switchingProvider4;
            this.bindRecentTaskLabelLoaderProvider = DoubleCheck.provider(switchingProvider4);
            this.taskPreviewSizeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 11));
            this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 7));
            this.factoryProvider2 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 6));
            this.mediaProjectionRecentsViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 5));
            this.mediaProjectionBlockerEmptyStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.mediaProjectionAppSelectorComponentImpl, 12));
        }

        public final WindowMetricsProviderImpl windowMetricsProviderImpl() {
            return new WindowMetricsProviderImpl((WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
        }

        private MediaProjectionAppSelectorComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, UserHandle userHandle, Integer num, String str, MediaProjectionAppSelectorView mediaProjectionAppSelectorView, MediaProjectionAppSelectorResultHandler mediaProjectionAppSelectorResultHandler, Boolean bool) {
            this.mediaProjectionAppSelectorComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.view = mediaProjectionAppSelectorView;
            this.hostUserHandle = userHandle;
            this.callingPackage = str;
            this.isFirstStart = bool;
            this.hostUid = num;
            this.resultHandler = mediaProjectionAppSelectorResultHandler;
            initialize(userHandle, num, str, mediaProjectionAppSelectorView, mediaProjectionAppSelectorResultHandler, bool);
        }
    }

    public final class NavigationBarComponentFactory implements NavigationBarComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ NavigationBarComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.navigationbar.NavigationBarComponent.Factory
        public final NavigationBarComponent create(Context context, Bundle bundle) {
            context.getClass();
            return new NavigationBarComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, context, bundle, 0);
        }

        private NavigationBarComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class NavigationBarComponentImpl implements NavigationBarComponent {
        public final Context context;
        public final NavigationBarComponentImpl navigationBarComponentImpl;
        public Provider navigationBarProvider;
        public Provider navigationBarTransitionsProvider;
        public Provider provideLayoutInflaterProvider;
        public Provider provideNavigationBarFrameProvider;
        public Provider provideNavigationBarviewProvider;
        public Provider provideWindowManagerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final Bundle savedState;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final NavigationBarComponentImpl navigationBarComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, NavigationBarComponentImpl navigationBarComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.navigationBarComponentImpl = navigationBarComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id;
                if (i != 0) {
                    if (i == 1) {
                        T t = (T) ((NavigationBarView) ((LayoutInflater) this.navigationBarComponentImpl.provideLayoutInflaterProvider.get()).inflate(BasicRune.NAVBAR_ENABLED ? R.layout.samsung_navigation_bar : R.layout.navigation_bar, (NavigationBarFrame) this.navigationBarComponentImpl.provideNavigationBarFrameProvider.get()).findViewById(R.id.navigation_bar_view));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    }
                    if (i == 2) {
                        T t2 = (T) LayoutInflater.from(this.navigationBarComponentImpl.context);
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    }
                    if (i == 3) {
                        T t3 = (T) ((NavigationBarFrame) ((LayoutInflater) this.navigationBarComponentImpl.provideLayoutInflaterProvider.get()).inflate(R.layout.navigation_bar_window, (ViewGroup) null));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    }
                    if (i != 4) {
                        if (i == 5) {
                            return (T) new NavigationBarTransitions((NavigationBarView) this.navigationBarComponentImpl.provideNavigationBarviewProvider.get(), (LightBarTransitionsController.Factory) this.referenceSysUIComponentImpl.factoryProvider19.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                        }
                        throw new AssertionError(this.id);
                    }
                    T t4 = (T) ((WindowManager) this.navigationBarComponentImpl.context.getSystemService(WindowManager.class));
                    Preconditions.checkNotNullFromProvides(t4);
                    return t4;
                }
                NavigationBarView navigationBarView = (NavigationBarView) this.navigationBarComponentImpl.provideNavigationBarviewProvider.get();
                NavigationBarFrame navigationBarFrame = (NavigationBarFrame) this.navigationBarComponentImpl.provideNavigationBarFrameProvider.get();
                NavigationBarComponentImpl navigationBarComponentImpl = this.navigationBarComponentImpl;
                Bundle bundle = navigationBarComponentImpl.savedState;
                Context context = navigationBarComponentImpl.context;
                WindowManager windowManager = (WindowManager) navigationBarComponentImpl.provideWindowManagerProvider.get();
                Lazy lazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider);
                AccessibilityManager accessibilityManager = (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get();
                DeviceProvisionedController deviceProvisionedController = (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get();
                MetricsLogger metricsLogger = (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get();
                OverviewProxyService overviewProxyService = (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get();
                NavigationModeController navigationModeController = (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get();
                StatusBarStateController statusBarStateController = (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                StatusBarKeyguardViewManager statusBarKeyguardViewManager = (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get();
                SysUiState sysUiState = (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get();
                UserTracker userTracker = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                CommandQueue commandQueue = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                Optional<Pip> optional = referenceSysUIComponentImpl.setPip;
                Optional of = Optional.of((Recents) referenceSysUIComponentImpl.provideRecentsProvider.get());
                Lazy lazy2 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider);
                KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                ShadeViewController shadeViewController = (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get();
                PanelExpansionInteractor panelExpansionInteractor = (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get();
                NotificationRemoteInputManager notificationRemoteInputManager = (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get();
                NotificationShadeDepthController notificationShadeDepthController = (NotificationShadeDepthController) this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider.get();
                Handler handler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                Executor executor2 = (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                UiEventLogger uiEventLogger = (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get();
                NavBarHelper navBarHelper = (NavBarHelper) this.referenceSysUIComponentImpl.navBarHelperProvider.get();
                LightBarController lightBarController = (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get();
                LightBarController.Factory lightBarControllerFactory = this.navigationBarComponentImpl.lightBarControllerFactory();
                AutoHideController autoHideController = (AutoHideController) this.referenceSysUIComponentImpl.autoHideControllerProvider.get();
                AutoHideController.Factory autoHideControllerFactory = this.navigationBarComponentImpl.autoHideControllerFactory();
                Optional optional2 = (Optional) this.referenceGlobalRootComponentImpl.provideOptionalTelecomManagerProvider.get();
                InputMethodManager inputMethodManager = (InputMethodManager) this.referenceGlobalRootComponentImpl.provideInputMethodManagerProvider.get();
                DeadZone deadZone = this.navigationBarComponentImpl.deadZone();
                DeviceConfigProxy deviceConfigProxy = (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get();
                NavigationBarTransitions navigationBarTransitions = (NavigationBarTransitions) this.navigationBarComponentImpl.navigationBarTransitionsProvider.get();
                ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                return (T) new NavigationBar(navigationBarView, navigationBarFrame, bundle, context, windowManager, lazy, accessibilityManager, deviceProvisionedController, metricsLogger, overviewProxyService, navigationModeController, statusBarStateController, statusBarKeyguardViewManager, sysUiState, userTracker, commandQueue, optional, of, lazy2, keyguardStateController, shadeViewController, panelExpansionInteractor, notificationRemoteInputManager, notificationShadeDepthController, handler, executor, executor2, uiEventLogger, navBarHelper, lightBarController, lightBarControllerFactory, autoHideController, autoHideControllerFactory, optional2, inputMethodManager, deadZone, deviceConfigProxy, navigationBarTransitions, referenceSysUIComponentImpl2.setBackAnimation, (UserContextProvider) referenceSysUIComponentImpl2.provideUserTrackerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (TaskStackChangeListeners) this.referenceSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.navigationBarComponentImpl.navBarButtonClickLogger(), this.navigationBarComponentImpl.navbarOrientationTrackingLogger(), (LogWrapper) this.referenceSysUIComponentImpl.providesNavBarLoggerProvider.get());
            }
        }

        public /* synthetic */ NavigationBarComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Context context, Bundle bundle, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, context, bundle);
        }

        public final AutoHideController.Factory autoHideControllerFactory() {
            return new AutoHideController.Factory((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get());
        }

        public final DeadZone deadZone() {
            return new DeadZone((NavigationBarView) this.provideNavigationBarviewProvider.get());
        }

        @Override // com.android.systemui.navigationbar.NavigationBarComponent
        public final NavigationBar getNavigationBar() {
            return (NavigationBar) this.navigationBarProvider.get();
        }

        public final void initialize(Context context, Bundle bundle) {
            this.provideLayoutInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.navigationBarComponentImpl, 2));
            this.provideNavigationBarFrameProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.navigationBarComponentImpl, 3));
            this.provideNavigationBarviewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.navigationBarComponentImpl, 1));
            this.provideWindowManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.navigationBarComponentImpl, 4));
            this.navigationBarTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.navigationBarComponentImpl, 5));
            this.navigationBarProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.navigationBarComponentImpl, 0));
        }

        public final LightBarController.Factory lightBarControllerFactory() {
            return new LightBarController.Factory((JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), (StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.referenceSysUIComponentImpl.samsungLightBarControlHelper(), (SamsungStatusBarGrayIconHelper) this.referenceSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get());
        }

        public final NavBarButtonClickLogger navBarButtonClickLogger() {
            return new NavBarButtonClickLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNavBarButtonClickLogBufferProvider.get());
        }

        public final NavbarOrientationTrackingLogger navbarOrientationTrackingLogger() {
            return new NavbarOrientationTrackingLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNavbarOrientationTrackingLogBufferProvider.get());
        }

        private NavigationBarComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Context context, Bundle bundle) {
            this.navigationBarComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.context = context;
            this.savedState = bundle;
            initialize(context, bundle);
        }
    }

    public final class QSFragmentComponentFactory implements QSFragmentComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ QSFragmentComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.qs.dagger.QSFragmentComponent.Factory
        public final QSFragmentComponent create(View view) {
            view.getClass();
            return new QSFragmentComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, view, 0);
        }

        private QSFragmentComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class QSFragmentComponentImpl implements QSFragmentComponent {
        public Provider barControllerProvider;
        public Provider barFactoryProvider;
        public Provider bottomLargeTileBarProvider;
        public Provider brightnessBarProvider;
        public Provider brightnessMediaDevicesBarProvider;
        public Provider brightnessVolumeBarProvider;
        public Provider immersiveScrollAnimatorProvider;
        public Provider mediaDevicesBarProvider;
        public Provider multiSIMPreferredSlotBarProvider;
        public Provider panelSplitOpenAnimatorProvider;
        public Provider panelTransitionAnimatorProvider;
        public Provider providesHeaderQSPanelHostProvider;
        public Provider providesPanelQSPanelHostProvider;
        public Provider providesQSCutomizerProvider;
        public Provider providesQSSecurityFooterViewProvider;
        public Provider qSButtonsContainerControllerProvider;
        public Provider qSContainerImplControllerProvider;
        public Provider qSCustomizerControllerProvider;
        public final QSFragmentComponentImpl qSFragmentComponentImpl;
        public Provider qSMediaPlayerBarProvider;
        public Provider qSSecurityFooterProvider;
        public Provider qSSquishinessControllerProvider;
        public Provider qsDetailPopupAnimatorProvider;
        public Provider qsExpandAnimatorProvider;
        public Provider qsOpenAnimatorProvider;
        public Provider qsTransitionAnimatorProvider;
        public Provider quickControlBarProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public Provider secQSImplAnimatorManagerProvider;
        public Provider secQSPanelControllerProvider;
        public Provider secQuickQSPanelControllerProvider;
        public Provider secQuickStatusBarHeaderControllerProvider;
        public Provider securityFooterBarProvider;
        public Provider smartViewLargeTileBarProvider;
        public Provider tileAdapterProvider;
        public Provider tileChunkLayoutBarProvider;
        public Provider tileQueryHelperProvider;
        public Provider topLargeTileBarProvider;
        public Provider videoCallMicModeBarProvider;
        public final View view;
        public Provider volumeBarProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final QSFragmentComponentImpl qSFragmentComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, QSFragmentComponentImpl qSFragmentComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.qSFragmentComponentImpl = qSFragmentComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new SecQSPanelController(QSScopeModule_ProvideSecQSPanelFactory.provideSecQSPanel(this.qSFragmentComponentImpl.view), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (QSPanelHost) this.qSFragmentComponentImpl.providesPanelQSPanelHostProvider.get(), this.qSFragmentComponentImpl.barControllerProvider, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (QSCMainViewController) this.referenceSysUIComponentImpl.qSCMainViewControllerProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQSMediaHostProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 1:
                        return (T) QSScopeModule_Companion_ProvidesPanelQSPanelHostFactory.providesPanelQSPanelHost(this.qSFragmentComponentImpl.view, (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 2:
                        return (T) new BarController(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BarFactory) this.qSFragmentComponentImpl.barFactoryProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get());
                    case 3:
                        QSFragmentComponentImpl qSFragmentComponentImpl = this.qSFragmentComponentImpl;
                        return (T) new BarFactory(qSFragmentComponentImpl.brightnessBarProvider, qSFragmentComponentImpl.volumeBarProvider, qSFragmentComponentImpl.brightnessMediaDevicesBarProvider, qSFragmentComponentImpl.mediaDevicesBarProvider, qSFragmentComponentImpl.brightnessVolumeBarProvider, qSFragmentComponentImpl.multiSIMPreferredSlotBarProvider, qSFragmentComponentImpl.qSMediaPlayerBarProvider, qSFragmentComponentImpl.quickControlBarProvider, qSFragmentComponentImpl.topLargeTileBarProvider, qSFragmentComponentImpl.tileChunkLayoutBarProvider, qSFragmentComponentImpl.bottomLargeTileBarProvider, qSFragmentComponentImpl.smartViewLargeTileBarProvider, qSFragmentComponentImpl.securityFooterBarProvider, qSFragmentComponentImpl.videoCallMicModeBarProvider);
                    case 4:
                        return (T) new BrightnessBar(this.referenceGlobalRootComponentImpl.context, (BrightnessController.Factory) this.referenceSysUIComponentImpl.factoryProvider36.get(), this.referenceSysUIComponentImpl.brightnessSliderControllerFactory(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (QSBackupRestoreManager) this.referenceSysUIComponentImpl.qSBackupRestoreManagerProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 5:
                        return (T) this.qSFragmentComponentImpl.injectVolumeBar(new VolumeBar(this.referenceGlobalRootComponentImpl.context));
                    case 6:
                        return (T) new BrightnessMediaDevicesBar(this.referenceGlobalRootComponentImpl.context, (BarFactory) this.qSFragmentComponentImpl.barFactoryProvider.get());
                    case 7:
                        return (T) new MediaDevicesBar(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (SecDeviceControlsController) this.referenceSysUIComponentImpl.secDeviceControlsControllerImplProvider.get(), (MediaOutputHelper) this.referenceSysUIComponentImpl.mediaOutputHelperProvider.get(), (QSBackupRestoreManager) this.referenceSysUIComponentImpl.qSBackupRestoreManagerProvider.get());
                    case 8:
                        return (T) new BrightnessVolumeBar(this.referenceGlobalRootComponentImpl.context, (BarFactory) this.qSFragmentComponentImpl.barFactoryProvider.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get());
                    case 9:
                        return (T) new MultiSIMPreferredSlotBar(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 10:
                        return (T) new QSMediaPlayerBar(this.referenceGlobalRootComponentImpl.context, (SecMediaHost) this.referenceSysUIComponentImpl.secMediaHostProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider), (MediaOutputHelper) this.referenceSysUIComponentImpl.mediaOutputHelperProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 11:
                        return (T) new QuickControlBar(this.referenceGlobalRootComponentImpl.context);
                    case 12:
                        return (T) new TopLargeTileBar(this.referenceGlobalRootComponentImpl.context, (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get());
                    case 13:
                        return (T) new TileChunkLayoutBar(this.referenceGlobalRootComponentImpl.context, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 14:
                        return (T) new BottomLargeTileBar(this.referenceGlobalRootComponentImpl.context, (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get());
                    case 15:
                        return (T) new SmartViewLargeTileBar(this.referenceGlobalRootComponentImpl.context, (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get());
                    case 16:
                        return (T) new SecurityFooterBar(this.referenceGlobalRootComponentImpl.context, (QSSecurityFooter) this.qSFragmentComponentImpl.qSSecurityFooterProvider.get());
                    case 17:
                        return (T) new QSSecurityFooter((View) this.qSFragmentComponentImpl.providesQSSecurityFooterViewProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SecurityController) this.referenceSysUIComponentImpl.securityControllerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 18:
                        LayoutInflater qSThemedContextLayoutInflater = this.qSFragmentComponentImpl.qSThemedContextLayoutInflater();
                        QSScopeModule.Companion.getClass();
                        return (T) qSThemedContextLayoutInflater.inflate(R.layout.sec_quick_settings_security_footer, (ViewGroup) null, false);
                    case 19:
                        return (T) new VideoCallMicModeBar(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 20:
                        return (T) new SecQuickQSPanelController(QSScopeModule_ProvidesSecQuickQSPanelFactory.providesSecQuickQSPanel(this.qSFragmentComponentImpl.view), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (QSPanelHost) this.qSFragmentComponentImpl.providesHeaderQSPanelHostProvider.get(), this.qSFragmentComponentImpl.barControllerProvider, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQuickQSMediaHostProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), (SecPanelSplitHelper) this.referenceSysUIComponentImpl.secPanelSplitHelperProvider.get());
                    case 21:
                        return (T) QSScopeModule_Companion_ProvidesHeaderQSPanelHostFactory.providesHeaderQSPanelHost(this.qSFragmentComponentImpl.view, (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 22:
                        return (T) new QSContainerImplController(QSScopeModule_ProvidesQSContainerImplFactory.providesQSContainerImpl(this.qSFragmentComponentImpl.view), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (SecQuickStatusBarHeaderController) this.qSFragmentComponentImpl.secQuickStatusBarHeaderControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 23:
                        return (T) new SecQuickStatusBarHeaderController(QSScopeModule_ProvidesQuickStatusBarHeaderFactory.providesQuickStatusBarHeader(this.qSFragmentComponentImpl.view), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (SecQuickQSPanelController) this.qSFragmentComponentImpl.secQuickQSPanelControllerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 24:
                        return (T) new QSCustomizerController((QSCustomizer) this.qSFragmentComponentImpl.providesQSCutomizerProvider.get(), (TileQueryHelper) this.qSFragmentComponentImpl.tileQueryHelperProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (TileAdapter) this.qSFragmentComponentImpl.tileAdapterProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 25:
                        View view = this.qSFragmentComponentImpl.view;
                        QSScopeModule.Companion.getClass();
                        return (T) ((QSCustomizer) view.requireViewById(R.id.qs_customize));
                    case 26:
                        return (T) new TileQueryHelper(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 27:
                        return (T) new TileAdapter(QSScopeModule_ProvideThemedContextFactory.provideThemedContext(this.qSFragmentComponentImpl.view), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 28:
                        return (T) new QSSquishinessController();
                    case 29:
                        return (T) new SecQSImplAnimatorManager((QsExpandAnimator) this.qSFragmentComponentImpl.qsExpandAnimatorProvider.get(), (QsOpenAnimator) this.qSFragmentComponentImpl.qsOpenAnimatorProvider.get(), (QsTransitionAnimator) this.qSFragmentComponentImpl.qsTransitionAnimatorProvider.get(), (PanelTransitionAnimator) this.qSFragmentComponentImpl.panelTransitionAnimatorProvider.get(), (PanelSplitOpenAnimator) this.qSFragmentComponentImpl.panelSplitOpenAnimatorProvider.get(), (ImmersiveScrollAnimator) this.qSFragmentComponentImpl.immersiveScrollAnimatorProvider.get(), (QsDetailPopupAnimator) this.qSFragmentComponentImpl.qsDetailPopupAnimatorProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), (SecPanelSplitHelper) this.referenceSysUIComponentImpl.secPanelSplitHelperProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 30:
                        return (T) new QsExpandAnimator(this.referenceGlobalRootComponentImpl.context, (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (BarController) this.qSFragmentComponentImpl.barControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get());
                    case 31:
                        return (T) new QsOpenAnimator(this.referenceGlobalRootComponentImpl.context, (BarController) this.qSFragmentComponentImpl.barControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SecQuickQSPanelController) this.qSFragmentComponentImpl.secQuickQSPanelControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 32:
                        return (T) new QsTransitionAnimator(DoubleCheck.lazy(this.qSFragmentComponentImpl.qsExpandAnimatorProvider), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (QSCMainViewController) this.referenceSysUIComponentImpl.qSCMainViewControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 33:
                        return (T) new PanelTransitionAnimator(this.referenceGlobalRootComponentImpl.context, (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get());
                    case 34:
                        return (T) new PanelSplitOpenAnimator(this.referenceGlobalRootComponentImpl.context, (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (BarController) this.qSFragmentComponentImpl.barControllerProvider.get());
                    case 35:
                        return (T) new ImmersiveScrollAnimator(this.referenceGlobalRootComponentImpl.context, (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 36:
                        return (T) new QsDetailPopupAnimator(this.referenceGlobalRootComponentImpl.context, (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), (BarController) this.qSFragmentComponentImpl.barControllerProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (QsTransitionAnimator) this.qSFragmentComponentImpl.qsTransitionAnimatorProvider.get());
                    case 37:
                        return (T) new QSButtonsContainerController(QSScopeModule_ProvidesQSButtonsContainerFactory.providesQSButtonsContainer(this.qSFragmentComponentImpl.view), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SecQSPanelController) this.qSFragmentComponentImpl.secQSPanelControllerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ QSFragmentComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, View view, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, view);
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final BarController getBarController() {
            return (BarController) this.barControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSContainerImplController getQSContainerImplController() {
            return (QSContainerImplController) this.qSContainerImplControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSCustomizerController getQSCustomizerController() {
            return (QSCustomizerController) this.qSCustomizerControllerProvider.get();
        }

        public final FooterActionsController getQSFooterActionController() {
            return (FooterActionsController) this.referenceSysUIComponentImpl.footerActionsControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQSPanelController getQSPanelController() {
            return (SecQSPanelController) this.secQSPanelControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSSquishinessController getQSSquishinessController() {
            return (QSSquishinessController) this.qSSquishinessControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSButtonsContainerController getQsButtonsContainerController() {
            return (QSButtonsContainerController) this.qSButtonsContainerControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQSGradationDrawableController getQsGradationDrawableController() {
            return (SecQSGradationDrawableController) this.referenceSysUIComponentImpl.secQSGradationDrawableControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSCMainViewController getQscMainViewController() {
            return (QSCMainViewController) this.referenceSysUIComponentImpl.qSCMainViewControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQuickQSPanelController getQuickQSPanelController() {
            return (SecQuickQSPanelController) this.secQuickQSPanelControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final View getRootView() {
            return this.view;
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQSImplAnimatorManager getSecQSImplAnimatorManager() {
            return (SecQSImplAnimatorManager) this.secQSImplAnimatorManagerProvider.get();
        }

        public final void initialize(View view) {
            this.providesPanelQSPanelHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 1));
            this.brightnessBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 4);
            this.volumeBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 5);
            this.barFactoryProvider = new DelegateFactory();
            this.brightnessMediaDevicesBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 6);
            this.mediaDevicesBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 7);
            this.brightnessVolumeBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 8);
            this.multiSIMPreferredSlotBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 9);
            this.qSMediaPlayerBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 10);
            this.quickControlBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 11);
            this.topLargeTileBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 12);
            this.tileChunkLayoutBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 13);
            this.bottomLargeTileBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 14);
            this.smartViewLargeTileBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 15);
            this.providesQSSecurityFooterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 18));
            this.qSSecurityFooterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 17));
            this.securityFooterBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 16);
            this.videoCallMicModeBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 19);
            DelegateFactory.setDelegate(this.barFactoryProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 3)));
            this.barControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 2));
            this.secQSPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 0));
            this.providesHeaderQSPanelHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 21));
            this.secQuickQSPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 20));
            this.secQuickStatusBarHeaderControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 23));
            this.qSContainerImplControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 22));
            this.providesQSCutomizerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 25));
            this.tileQueryHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 26));
            this.tileAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 27));
            this.qSCustomizerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 24));
            this.qSSquishinessControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 28));
            this.qsExpandAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 30));
            this.qsOpenAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 31));
            this.qsTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 32));
            this.panelTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 33));
            this.panelSplitOpenAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 34));
            this.immersiveScrollAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 35));
            this.qsDetailPopupAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 36));
            this.secQSImplAnimatorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 29));
            this.qSButtonsContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSFragmentComponentImpl, 37));
        }

        public final VolumeBar injectVolumeBar(VolumeBar volumeBar) {
            volumeBar.mVolumeSeekBar = volumeSeekBar();
            volumeBar.mVolumeSeekBarForEditMode = volumeSeekBar();
            volumeBar.mSecQSDetailController = (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get();
            volumeBar.mSoundCraftQpDetailAdapter = (SoundCraftQpDetailAdapter) this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider.get();
            return volumeBar;
        }

        public final QSButtonsContainer qSButtonsContainer() {
            return QSScopeModule_ProvidesQSButtonsContainerFactory.providesQSButtonsContainer(this.view);
        }

        public final QSContainerImpl qSContainerImpl() {
            return QSScopeModule_ProvidesQSContainerImplFactory.providesQSContainerImpl(this.view);
        }

        public final Context qSThemedContextContext() {
            return QSScopeModule_ProvideThemedContextFactory.provideThemedContext(this.view);
        }

        public final LayoutInflater qSThemedContextLayoutInflater() {
            Context provideThemedContext = QSScopeModule_ProvideThemedContextFactory.provideThemedContext(this.view);
            QSScopeModule.Companion.getClass();
            return LayoutInflater.from(provideThemedContext);
        }

        public final SecQSPanel secQSPanel() {
            return QSScopeModule_ProvideSecQSPanelFactory.provideSecQSPanel(this.view);
        }

        public final SecQuickQSPanel secQuickQSPanel() {
            return QSScopeModule_ProvidesSecQuickQSPanelFactory.providesSecQuickQSPanel(this.view);
        }

        public final SecQuickStatusBarHeader secQuickStatusBarHeader() {
            return QSScopeModule_ProvidesQuickStatusBarHeaderFactory.providesQuickStatusBarHeader(this.view);
        }

        public final VolumeSeekBar volumeSeekBar() {
            return new VolumeSeekBar(this.referenceGlobalRootComponentImpl.context, (VolumeManager) this.referenceSysUIComponentImpl.volumeManagerProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), (SecQSExpansionStateInteractor) this.referenceSysUIComponentImpl.secQSExpansionStateInteractorProvider.get(), (VolumeDependency) this.referenceSysUIComponentImpl.volumeDependencyProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secQSDetailControllerProvider));
        }

        private QSFragmentComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, View view) {
            this.qSFragmentComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.view = view;
            initialize(view);
        }
    }

    public final class QSSceneComponentFactory implements QSSceneComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ QSSceneComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.qs.dagger.QSSceneComponent.Factory
        public final QSSceneComponent create(View view) {
            view.getClass();
            return new QSSceneComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, view, 0);
        }

        private QSSceneComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class QSSceneComponentImpl implements QSSceneComponent {
        public Provider barControllerProvider;
        public Provider barFactoryProvider;
        public Provider bottomLargeTileBarProvider;
        public Provider brightnessBarProvider;
        public Provider brightnessMediaDevicesBarProvider;
        public Provider brightnessVolumeBarProvider;
        public Provider immersiveScrollAnimatorProvider;
        public Provider mediaDevicesBarProvider;
        public Provider multiSIMPreferredSlotBarProvider;
        public Provider panelSplitOpenAnimatorProvider;
        public Provider panelTransitionAnimatorProvider;
        public Provider providesHeaderQSPanelHostProvider;
        public Provider providesPanelQSPanelHostProvider;
        public Provider providesQSCutomizerProvider;
        public Provider providesQSSecurityFooterViewProvider;
        public Provider qSButtonsContainerControllerProvider;
        public Provider qSContainerImplControllerProvider;
        public Provider qSCustomizerControllerProvider;
        public Provider qSMediaPlayerBarProvider;
        public final QSSceneComponentImpl qSSceneComponentImpl;
        public Provider qSSecurityFooterProvider;
        public Provider qSSquishinessControllerProvider;
        public Provider qsDetailPopupAnimatorProvider;
        public Provider qsExpandAnimatorProvider;
        public Provider qsOpenAnimatorProvider;
        public Provider qsTransitionAnimatorProvider;
        public Provider quickControlBarProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final View rootView;
        public Provider secQSImplAnimatorManagerProvider;
        public Provider secQSPanelControllerProvider;
        public Provider secQuickQSPanelControllerProvider;
        public Provider secQuickStatusBarHeaderControllerProvider;
        public Provider securityFooterBarProvider;
        public Provider smartViewLargeTileBarProvider;
        public Provider tileAdapterProvider;
        public Provider tileChunkLayoutBarProvider;
        public Provider tileQueryHelperProvider;
        public Provider topLargeTileBarProvider;
        public Provider videoCallMicModeBarProvider;
        public Provider volumeBarProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final QSSceneComponentImpl qSSceneComponentImpl;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, QSSceneComponentImpl qSSceneComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.qSSceneComponentImpl = qSSceneComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new SecQSPanelController(QSScopeModule_ProvideSecQSPanelFactory.provideSecQSPanel(this.qSSceneComponentImpl.rootView), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (QSPanelHost) this.qSSceneComponentImpl.providesPanelQSPanelHostProvider.get(), this.qSSceneComponentImpl.barControllerProvider, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (QSCMainViewController) this.referenceSysUIComponentImpl.qSCMainViewControllerProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQSMediaHostProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 1:
                        return (T) QSScopeModule_Companion_ProvidesPanelQSPanelHostFactory.providesPanelQSPanelHost(this.qSSceneComponentImpl.rootView, (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 2:
                        return (T) new BarController(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BarFactory) this.qSSceneComponentImpl.barFactoryProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get());
                    case 3:
                        QSSceneComponentImpl qSSceneComponentImpl = this.qSSceneComponentImpl;
                        return (T) new BarFactory(qSSceneComponentImpl.brightnessBarProvider, qSSceneComponentImpl.volumeBarProvider, qSSceneComponentImpl.brightnessMediaDevicesBarProvider, qSSceneComponentImpl.mediaDevicesBarProvider, qSSceneComponentImpl.brightnessVolumeBarProvider, qSSceneComponentImpl.multiSIMPreferredSlotBarProvider, qSSceneComponentImpl.qSMediaPlayerBarProvider, qSSceneComponentImpl.quickControlBarProvider, qSSceneComponentImpl.topLargeTileBarProvider, qSSceneComponentImpl.tileChunkLayoutBarProvider, qSSceneComponentImpl.bottomLargeTileBarProvider, qSSceneComponentImpl.smartViewLargeTileBarProvider, qSSceneComponentImpl.securityFooterBarProvider, qSSceneComponentImpl.videoCallMicModeBarProvider);
                    case 4:
                        return (T) new BrightnessBar(this.referenceGlobalRootComponentImpl.context, (BrightnessController.Factory) this.referenceSysUIComponentImpl.factoryProvider36.get(), this.referenceSysUIComponentImpl.brightnessSliderControllerFactory(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (QSBackupRestoreManager) this.referenceSysUIComponentImpl.qSBackupRestoreManagerProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 5:
                        return (T) this.qSSceneComponentImpl.injectVolumeBar(new VolumeBar(this.referenceGlobalRootComponentImpl.context));
                    case 6:
                        return (T) new BrightnessMediaDevicesBar(this.referenceGlobalRootComponentImpl.context, (BarFactory) this.qSSceneComponentImpl.barFactoryProvider.get());
                    case 7:
                        return (T) new MediaDevicesBar(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (SecDeviceControlsController) this.referenceSysUIComponentImpl.secDeviceControlsControllerImplProvider.get(), (MediaOutputHelper) this.referenceSysUIComponentImpl.mediaOutputHelperProvider.get(), (QSBackupRestoreManager) this.referenceSysUIComponentImpl.qSBackupRestoreManagerProvider.get());
                    case 8:
                        return (T) new BrightnessVolumeBar(this.referenceGlobalRootComponentImpl.context, (BarFactory) this.qSSceneComponentImpl.barFactoryProvider.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get());
                    case 9:
                        return (T) new MultiSIMPreferredSlotBar(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 10:
                        return (T) new QSMediaPlayerBar(this.referenceGlobalRootComponentImpl.context, (SecMediaHost) this.referenceSysUIComponentImpl.secMediaHostProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider), (MediaOutputHelper) this.referenceSysUIComponentImpl.mediaOutputHelperProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 11:
                        return (T) new QuickControlBar(this.referenceGlobalRootComponentImpl.context);
                    case 12:
                        return (T) new TopLargeTileBar(this.referenceGlobalRootComponentImpl.context, (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get());
                    case 13:
                        return (T) new TileChunkLayoutBar(this.referenceGlobalRootComponentImpl.context, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 14:
                        return (T) new BottomLargeTileBar(this.referenceGlobalRootComponentImpl.context, (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get());
                    case 15:
                        return (T) new SmartViewLargeTileBar(this.referenceGlobalRootComponentImpl.context, (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get());
                    case 16:
                        return (T) new SecurityFooterBar(this.referenceGlobalRootComponentImpl.context, (QSSecurityFooter) this.qSSceneComponentImpl.qSSecurityFooterProvider.get());
                    case 17:
                        return (T) new QSSecurityFooter((View) this.qSSceneComponentImpl.providesQSSecurityFooterViewProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SecurityController) this.referenceSysUIComponentImpl.securityControllerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 18:
                        LayoutInflater qSThemedContextLayoutInflater = this.qSSceneComponentImpl.qSThemedContextLayoutInflater();
                        QSScopeModule.Companion.getClass();
                        return (T) qSThemedContextLayoutInflater.inflate(R.layout.sec_quick_settings_security_footer, (ViewGroup) null, false);
                    case 19:
                        return (T) new VideoCallMicModeBar(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 20:
                        return (T) new SecQuickQSPanelController(QSScopeModule_ProvidesSecQuickQSPanelFactory.providesSecQuickQSPanel(this.qSSceneComponentImpl.rootView), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (QSPanelHost) this.qSSceneComponentImpl.providesHeaderQSPanelHostProvider.get(), this.qSSceneComponentImpl.barControllerProvider, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQuickQSMediaHostProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), (SecPanelSplitHelper) this.referenceSysUIComponentImpl.secPanelSplitHelperProvider.get());
                    case 21:
                        return (T) QSScopeModule_Companion_ProvidesHeaderQSPanelHostFactory.providesHeaderQSPanelHost(this.qSSceneComponentImpl.rootView, (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 22:
                        return (T) new QSContainerImplController(QSScopeModule_ProvidesQSContainerImplFactory.providesQSContainerImpl(this.qSSceneComponentImpl.rootView), (SecQSPanelController) this.qSSceneComponentImpl.secQSPanelControllerProvider.get(), (SecQuickStatusBarHeaderController) this.qSSceneComponentImpl.secQuickStatusBarHeaderControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 23:
                        return (T) new SecQuickStatusBarHeaderController(QSScopeModule_ProvidesQuickStatusBarHeaderFactory.providesQuickStatusBarHeader(this.qSSceneComponentImpl.rootView), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (SecQuickQSPanelController) this.qSSceneComponentImpl.secQuickQSPanelControllerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 24:
                        return (T) new QSCustomizerController((QSCustomizer) this.qSSceneComponentImpl.providesQSCutomizerProvider.get(), (TileQueryHelper) this.qSSceneComponentImpl.tileQueryHelperProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (TileAdapter) this.qSSceneComponentImpl.tileAdapterProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 25:
                        View view = this.qSSceneComponentImpl.rootView;
                        QSScopeModule.Companion.getClass();
                        return (T) ((QSCustomizer) view.requireViewById(R.id.qs_customize));
                    case 26:
                        return (T) new TileQueryHelper(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 27:
                        return (T) new TileAdapter(QSScopeModule_ProvideThemedContextFactory.provideThemedContext(this.qSSceneComponentImpl.rootView), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 28:
                        return (T) new QSSquishinessController();
                    case 29:
                        return (T) new SecQSImplAnimatorManager((QsExpandAnimator) this.qSSceneComponentImpl.qsExpandAnimatorProvider.get(), (QsOpenAnimator) this.qSSceneComponentImpl.qsOpenAnimatorProvider.get(), (QsTransitionAnimator) this.qSSceneComponentImpl.qsTransitionAnimatorProvider.get(), (PanelTransitionAnimator) this.qSSceneComponentImpl.panelTransitionAnimatorProvider.get(), (PanelSplitOpenAnimator) this.qSSceneComponentImpl.panelSplitOpenAnimatorProvider.get(), (ImmersiveScrollAnimator) this.qSSceneComponentImpl.immersiveScrollAnimatorProvider.get(), (QsDetailPopupAnimator) this.qSSceneComponentImpl.qsDetailPopupAnimatorProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), (SecPanelSplitHelper) this.referenceSysUIComponentImpl.secPanelSplitHelperProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 30:
                        return (T) new QsExpandAnimator(this.referenceGlobalRootComponentImpl.context, (SecQSPanelController) this.qSSceneComponentImpl.secQSPanelControllerProvider.get(), (BarController) this.qSSceneComponentImpl.barControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get());
                    case 31:
                        return (T) new QsOpenAnimator(this.referenceGlobalRootComponentImpl.context, (BarController) this.qSSceneComponentImpl.barControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SecQuickQSPanelController) this.qSSceneComponentImpl.secQuickQSPanelControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 32:
                        return (T) new QsTransitionAnimator(DoubleCheck.lazy(this.qSSceneComponentImpl.qsExpandAnimatorProvider), (SecQSPanelController) this.qSSceneComponentImpl.secQSPanelControllerProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (QSCMainViewController) this.referenceSysUIComponentImpl.qSCMainViewControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get());
                    case 33:
                        return (T) new PanelTransitionAnimator(this.referenceGlobalRootComponentImpl.context, (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get());
                    case 34:
                        return (T) new PanelSplitOpenAnimator(this.referenceGlobalRootComponentImpl.context, (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (BarController) this.qSSceneComponentImpl.barControllerProvider.get());
                    case 35:
                        return (T) new ImmersiveScrollAnimator(this.referenceGlobalRootComponentImpl.context, (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get());
                    case 36:
                        return (T) new QsDetailPopupAnimator(this.referenceGlobalRootComponentImpl.context, (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), (BarController) this.qSSceneComponentImpl.barControllerProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (QsTransitionAnimator) this.qSSceneComponentImpl.qsTransitionAnimatorProvider.get());
                    case 37:
                        return (T) new QSButtonsContainerController(QSScopeModule_ProvidesQSButtonsContainerFactory.providesQSButtonsContainer(this.qSSceneComponentImpl.rootView), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SecQSPanelController) this.qSSceneComponentImpl.secQSPanelControllerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ QSSceneComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, View view, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, view);
        }

        private void initialize(View view) {
            this.providesPanelQSPanelHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 1));
            this.brightnessBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 4);
            this.volumeBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 5);
            this.barFactoryProvider = new DelegateFactory();
            this.brightnessMediaDevicesBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 6);
            this.mediaDevicesBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 7);
            this.brightnessVolumeBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 8);
            this.multiSIMPreferredSlotBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 9);
            this.qSMediaPlayerBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 10);
            this.quickControlBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 11);
            this.topLargeTileBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 12);
            this.tileChunkLayoutBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 13);
            this.bottomLargeTileBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 14);
            this.smartViewLargeTileBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 15);
            this.providesQSSecurityFooterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 18));
            this.qSSecurityFooterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 17));
            this.securityFooterBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 16);
            this.videoCallMicModeBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 19);
            DelegateFactory.setDelegate(this.barFactoryProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 3)));
            this.barControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 2));
            this.secQSPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 0));
            this.providesHeaderQSPanelHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 21));
            this.secQuickQSPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 20));
            this.secQuickStatusBarHeaderControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 23));
            this.qSContainerImplControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 22));
            this.providesQSCutomizerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 25));
            this.tileQueryHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 26));
            this.tileAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 27));
            this.qSCustomizerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 24));
            this.qSSquishinessControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 28));
            this.qsExpandAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 30));
            this.qsOpenAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 31));
            this.qsTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 32));
            this.panelTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 33));
            this.panelSplitOpenAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 34));
            this.immersiveScrollAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 35));
            this.qsDetailPopupAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 36));
            this.secQSImplAnimatorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 29));
            this.qSButtonsContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.qSSceneComponentImpl, 37));
        }

        public VolumeBar injectVolumeBar(VolumeBar volumeBar) {
            volumeBar.mVolumeSeekBar = volumeSeekBar();
            volumeBar.mVolumeSeekBarForEditMode = volumeSeekBar();
            volumeBar.mSecQSDetailController = (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get();
            volumeBar.mSoundCraftQpDetailAdapter = (SoundCraftQpDetailAdapter) this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider.get();
            return volumeBar;
        }

        private QSButtonsContainer qSButtonsContainer() {
            return QSScopeModule_ProvidesQSButtonsContainerFactory.providesQSButtonsContainer(this.rootView);
        }

        private QSContainerImpl qSContainerImpl() {
            return QSScopeModule_ProvidesQSContainerImplFactory.providesQSContainerImpl(this.rootView);
        }

        private Context qSThemedContextContext() {
            return QSScopeModule_ProvideThemedContextFactory.provideThemedContext(this.rootView);
        }

        public LayoutInflater qSThemedContextLayoutInflater() {
            Context provideThemedContext = QSScopeModule_ProvideThemedContextFactory.provideThemedContext(this.rootView);
            QSScopeModule.Companion.getClass();
            return LayoutInflater.from(provideThemedContext);
        }

        private SecQSPanel secQSPanel() {
            return QSScopeModule_ProvideSecQSPanelFactory.provideSecQSPanel(this.rootView);
        }

        private SecQuickQSPanel secQuickQSPanel() {
            return QSScopeModule_ProvidesSecQuickQSPanelFactory.providesSecQuickQSPanel(this.rootView);
        }

        private SecQuickStatusBarHeader secQuickStatusBarHeader() {
            return QSScopeModule_ProvidesQuickStatusBarHeaderFactory.providesQuickStatusBarHeader(this.rootView);
        }

        private VolumeSeekBar volumeSeekBar() {
            return new VolumeSeekBar(this.referenceGlobalRootComponentImpl.context, (VolumeManager) this.referenceSysUIComponentImpl.volumeManagerProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), (SecQSExpansionStateInteractor) this.referenceSysUIComponentImpl.secQSExpansionStateInteractorProvider.get(), (VolumeDependency) this.referenceSysUIComponentImpl.volumeDependencyProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secQSDetailControllerProvider));
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final BarController getBarController() {
            return (BarController) this.barControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSContainerImplController getQSContainerImplController() {
            return (QSContainerImplController) this.qSContainerImplControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSCustomizerController getQSCustomizerController() {
            return (QSCustomizerController) this.qSCustomizerControllerProvider.get();
        }

        public final FooterActionsController getQSFooterActionController() {
            return (FooterActionsController) this.referenceSysUIComponentImpl.footerActionsControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQSPanelController getQSPanelController() {
            return (SecQSPanelController) this.secQSPanelControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSSquishinessController getQSSquishinessController() {
            return (QSSquishinessController) this.qSSquishinessControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSButtonsContainerController getQsButtonsContainerController() {
            return (QSButtonsContainerController) this.qSButtonsContainerControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQSGradationDrawableController getQsGradationDrawableController() {
            return (SecQSGradationDrawableController) this.referenceSysUIComponentImpl.secQSGradationDrawableControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final QSCMainViewController getQscMainViewController() {
            return (QSCMainViewController) this.referenceSysUIComponentImpl.qSCMainViewControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQuickQSPanelController getQuickQSPanelController() {
            return (SecQuickQSPanelController) this.secQuickQSPanelControllerProvider.get();
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final View getRootView() {
            return this.rootView;
        }

        @Override // com.android.systemui.qs.dagger.QSComponent
        public final SecQSImplAnimatorManager getSecQSImplAnimatorManager() {
            return (SecQSImplAnimatorManager) this.secQSImplAnimatorManagerProvider.get();
        }

        private QSSceneComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, View view) {
            this.qSSceneComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.rootView = view;
            initialize(view);
        }
    }

    public final class ReferenceGlobalRootComponentImpl implements ReferenceGlobalRootComponent {
        public Provider activityManagerActivityTypeProvider;
        public final AndroidInternalsModule androidInternalsModule;
        public Provider applicationScopeProvider;
        public final Context context;
        public Provider coverUtilProvider;
        public Provider coverUtilWrapperProvider;
        public Provider deviceControlOperationImplProvider;
        public Provider deviceStateManagerFoldProvider;
        public Provider deviceStateRepositoryImplProvider;
        public Provider deviceStatusOperationImplProvider;
        public Provider dumpManagerProvider;
        public Provider executionImplProvider;
        public Provider externalClockProvider;
        public Provider factoryProvider;
        public Provider factoryProvider2;
        public Provider factoryProvider3;
        public Provider factoryProvider4;
        public Provider factoryProvider5;
        public Provider factoryProvider6;
        public Provider factoryProvider7;
        public Provider factoryProvider8;
        public Provider fixedTimingTransitionProgressProvider;
        public final FoldStateProviderModule foldStateProviderModule;
        public final FrameworkServicesModule frameworkServicesModule;
        public final GlobalCoroutinesModule globalCoroutinesModule;
        public final GlobalModule globalModule;
        public final HingeAngleProviderInternalModule hingeAngleProviderInternalModule;
        public final Boolean instrumentationTest;
        public Provider lifecycleScreenStatusProvider;
        public Provider lowLightTransitionCoordinatorProvider;
        public Provider mainCoroutineContextProvider;
        public Provider mainDispatcherProvider;
        public Provider mediaContentOperationImplProvider;
        public Provider mediaOutputSelectedOperationImplProvider;
        public Provider mediaPolicyOperationImplProvider;
        public Provider mediaSdkSupportServiceClientProvider;
        public Provider noLogcatEchoTrackerProvider;
        public Provider pluginDependencyProvider;
        public Provider pluginEnablerImplProvider;
        public Provider provideAccessibilityManagerProvider;
        public Provider provideActivityManagerProvider;
        public Provider provideActivityTaskManagerProvider;
        public Provider provideAlarmManagerProvider;
        public Provider provideApplicationContextProvider;
        public Provider provideAsyncLayoutInflaterProvider;
        public Provider provideAudioManagerProvider;
        public Provider provideBgFoldStateProvider;
        public Provider provideBgLooperProvider;
        public Provider provideBgRotationChangeProvider;
        public Provider provideBluetoothAdapterProvider;
        public Provider provideBluetoothManagerProvider;
        public Provider provideCameraManagerProvider;
        public Provider provideCaptioningManagerProvider;
        public Provider provideCarrierConfigManagerProvider;
        public Provider provideClipboardManagerProvider;
        public Provider provideColorDisplayManagerProvider;
        public Provider provideConnectivityManagagerProvider;
        public Provider provideContentResolverProvider;
        public Provider provideCrossWindowBlurListenersProvider;
        public Provider provideDeviceIdleControllerProvider;
        public Provider provideDevicePolicyManagerProvider;
        public Provider provideDeviceStateManagerProvider;
        public Provider provideDisplayManagerProvider;
        public Provider provideDisplaySwitchLatencyLoggerProvider;
        public Provider provideExecutionProvider;
        public Provider provideFaceManagerProvider;
        public Provider provideFoldLockSettingAvailabilityProvider;
        public Provider provideFoldStateProvider;
        public Provider provideIActivityManagerProvider;
        public Provider provideIActivityTaskManagerProvider;
        public Provider provideIAudioServiceProvider;
        public Provider provideIBatteryStatsProvider;
        public Provider provideIDreamManagerProvider;
        public Provider provideIMediaProjectionManagerProvider;
        public Provider provideINotificationManagerProvider;
        public Provider provideIPackageManagerProvider;
        public Provider provideIStatusBarServiceProvider;
        public Provider provideIUriGrantsManagerProvider;
        public Provider provideIVrManagerProvider;
        public Provider provideIWallPaperManagerProvider;
        public Provider provideIWindowManagerProvider;
        public Provider provideInputManagerProvider;
        public Provider provideInputMethodManagerProvider;
        public Provider provideInteractionJankMonitorProvider;
        public Provider provideIsTestHarnessProvider;
        public Provider provideJobSchedulerProvider;
        public Provider provideKeyguardManagerProvider;
        public Provider provideLatencyTrackerProvider;
        public Provider provideLauncherAppsProvider;
        public Provider provideLocationManagerProvider;
        public Provider provideLockPatternUtilsProvider;
        public Provider provideMainDelayableExecutorProvider;
        public Provider provideMainExecutorProvider;
        public Provider provideMainHandlerProvider;
        public Provider provideMediaRouter2ManagerProvider;
        public Provider provideMetricsLoggerProvider;
        public Provider provideNaturalRotationProgressProvider;
        public Provider provideNearbyManagerProvider;
        public Provider provideNetworkScoreManagerProvider;
        public Provider provideNotificationManagerCompatProvider;
        public Provider provideNotificationManagerProvider;
        public Provider provideOptionalTelecomManagerProvider;
        public Provider provideOptionalVibratorProvider;
        public Provider provideOverlayManagerProvider;
        public Provider providePackageInstallerProvider;
        public Provider providePackageManagerProvider;
        public Provider providePackageManagerWrapperProvider;
        public Provider providePermissionManagerProvider;
        public Provider providePluginInstanceManagerFactoryProvider;
        public Provider providePowerExemptionManagerProvider;
        public Provider providePowerManagerProvider;
        public Provider provideProgressForwarderProvider;
        public Provider provideRoleManagerProvider;
        public Provider provideRotationChangeProvider;
        public Provider provideSafetyCenterManagerProvider;
        public Provider provideSatelliteManagerProvider;
        public Provider provideScopedColorDisplayManagerProvider;
        public Provider provideSensorPrivacyManagerProvider;
        public Provider provideShellProgressProvider;
        public Provider provideShortcutManagerProvider;
        public Provider provideSmartspaceManagerProvider;
        public Provider provideStatsManagerProvider;
        public Provider provideStatusBarManagerProvider;
        public Provider provideStatusBarScopedTransitionProvider;
        public Provider provideStorageManagerProvider;
        public Provider provideSubscriptionManagerProvider;
        public Provider provideTelecomManagerProvider;
        public Provider provideTelephonyManagerProvider;
        public Provider provideTextClassificationManagerProvider;
        public Provider provideTrustManagerProvider;
        public Provider provideUiBackgroundExecutorProvider;
        public Provider provideUiEventLoggerProvider;
        public Provider provideUiModeManagerProvider;
        public Provider provideUnfoldOnlyProvider;
        public Provider provideUserManagerProvider;
        public Provider provideVibratorProvider;
        public Provider provideViewConfigurationProvider;
        public Provider provideVirtualDeviceManagerProvider;
        public Provider provideWifiManagerProvider;
        public Provider provideWindowManagerProvider;
        public Provider providerLayoutInflaterProvider;
        public Provider providesBiometricManagerProvider;
        public Provider providesChoreographerProvider;
        public Provider providesFingerprintManagerProvider;
        public Provider providesFoldStateListenerProvider;
        public Provider providesFoldStateLoggerProvider;
        public Provider providesFoldStateLoggingProvider;
        public Provider providesPluginExecutorProvider;
        public Provider providesPluginInstanceFactoryProvider;
        public Provider providesPluginManagerProvider;
        public Provider providesSensorManagerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public Provider resourceUnfoldTransitionConfigProvider;
        public Provider screenLifecycleProvider;
        public Provider systemPropertiesHelperProvider;
        public Provider tracingCoroutineContextProvider;
        public Provider uncaughtExceptionPreHandlerManagerProvider;
        public Provider unfoldBgDispatcherProvider;
        public Provider unfoldBgProgressFlagProvider;
        public Provider unfoldBgProgressHandlerProvider;
        public Provider unfoldBgTransitionProgressProvider;
        public Provider unfoldKeyguardVisibilityManagerImplProvider;
        public Provider unfoldKeyguardVisibilityManagerProvider;
        public Provider unfoldKeyguardVisibilityProvider;
        public final UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule;
        public final UnfoldSharedInternalModule unfoldSharedInternalModule;
        public final UnfoldSharedModule unfoldSharedModule;
        public final UnfoldTransitionModule unfoldTransitionModule;
        public Provider unfoldTransitionProgressForwarderProvider;
        public Provider unfoldTransitionProgressProvider;
        public Provider vibrationUtilProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceGlobalRootComponentImpl$SwitchingProvider$1, reason: invalid class name */
            public final class AnonymousClass1 {
                public AnonymousClass1() {
                }

                public final ScaleAwareTransitionProgressProvider wrap(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider) {
                    return new ScaleAwareTransitionProgressProvider(unfoldTransitionProgressProvider, (ContentResolver) SwitchingProvider.this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get());
                }
            }

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceGlobalRootComponentImpl$SwitchingProvider$3, reason: invalid class name */
            public final class AnonymousClass3 {
                public AnonymousClass3() {
                }

                public final PhysicsBasedUnfoldTransitionProgressProvider create(FoldStateProvider foldStateProvider, Handler handler) {
                    ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = SwitchingProvider.this.referenceGlobalRootComponentImpl;
                    return new PhysicsBasedUnfoldTransitionProgressProvider(referenceGlobalRootComponentImpl.context, (UnfoldFrameCallbackScheduler.Factory) referenceGlobalRootComponentImpl.factoryProvider3.get(), foldStateProvider, handler);
                }
            }

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceGlobalRootComponentImpl$SwitchingProvider$6, reason: invalid class name */
            public final class AnonymousClass6 {
                public AnonymousClass6() {
                }

                public final HingeSensorAngleProvider create(Handler handler) {
                    SwitchingProvider switchingProvider = SwitchingProvider.this;
                    return new HingeSensorAngleProvider((SensorManager) switchingProvider.referenceGlobalRootComponentImpl.providesSensorManagerProvider.get(), (Executor) switchingProvider.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), handler);
                }
            }

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id / 100;
                if (i == 0) {
                    return get0();
                }
                if (i == 1) {
                    return get1();
                }
                throw new AssertionError(this.id);
            }

            public final T get0() {
                switch (this.id) {
                    case 0:
                        return (T) new SystemPropertiesHelper();
                    case 1:
                        T t = (T) WindowManagerGlobal.getWindowManagerService();
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 2:
                        T t2 = (T) ((AccessibilityManager) this.referenceGlobalRootComponentImpl.context.getSystemService(AccessibilityManager.class));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 3:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule = referenceGlobalRootComponentImpl.unfoldTransitionModule;
                        UnfoldTransitionConfig unfoldTransitionConfig = (UnfoldTransitionConfig) referenceGlobalRootComponentImpl.resourceUnfoldTransitionConfigProvider.get();
                        FoldProvider foldProvider = (FoldProvider) this.referenceGlobalRootComponentImpl.deviceStateManagerFoldProvider.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) UnfoldTransitionModule_ProvideShellProgressProviderFactory.provideShellProgressProvider(unfoldTransitionModule, unfoldTransitionConfig, foldProvider, referenceGlobalRootComponentImpl2.unfoldTransitionProgressProvider, referenceGlobalRootComponentImpl2.provideUnfoldOnlyProvider);
                    case 4:
                        return (T) new ResourceUnfoldTransitionConfig();
                    case 5:
                        return (T) new DeviceStateManagerFoldProvider((DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 6:
                        T t3 = (T) ((DeviceStateManager) this.referenceGlobalRootComponentImpl.context.getSystemService(DeviceStateManager.class));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 7:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl3 = this.referenceGlobalRootComponentImpl;
                        UnfoldSharedInternalModule unfoldSharedInternalModule = referenceGlobalRootComponentImpl3.unfoldSharedInternalModule;
                        UnfoldTransitionConfig unfoldTransitionConfig2 = (UnfoldTransitionConfig) referenceGlobalRootComponentImpl3.resourceUnfoldTransitionConfigProvider.get();
                        AnonymousClass1 anonymousClass1 = (AnonymousClass1) this.referenceGlobalRootComponentImpl.factoryProvider.get();
                        ATraceLoggerTransitionProgressListener.Factory factory = (ATraceLoggerTransitionProgressListener.Factory) this.referenceGlobalRootComponentImpl.factoryProvider2.get();
                        AnonymousClass3 anonymousClass3 = (AnonymousClass3) this.referenceGlobalRootComponentImpl.factoryProvider4.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl4 = this.referenceGlobalRootComponentImpl;
                        Provider provider = referenceGlobalRootComponentImpl4.fixedTimingTransitionProgressProvider;
                        FoldStateProvider foldStateProvider = (FoldStateProvider) referenceGlobalRootComponentImpl4.provideFoldStateProvider.get();
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        MainThreadUnfoldTransitionProgressProvider.Factory factory2 = (MainThreadUnfoldTransitionProgressProvider.Factory) this.referenceGlobalRootComponentImpl.factoryProvider8.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl5 = this.referenceGlobalRootComponentImpl;
                        return (T) UnfoldSharedInternalModule_UnfoldTransitionProgressProviderFactory.unfoldTransitionProgressProvider(unfoldSharedInternalModule, unfoldTransitionConfig2, anonymousClass1, factory, anonymousClass3, provider, foldStateProvider, handler, factory2, referenceGlobalRootComponentImpl5.unfoldBgTransitionProgressProvider, Optional.of((Boolean) referenceGlobalRootComponentImpl5.unfoldBgProgressFlagProvider.get()));
                    case 8:
                        return (T) new AnonymousClass1();
                    case 9:
                        T t4 = (T) this.referenceGlobalRootComponentImpl.context.getContentResolver();
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 10:
                        return (T) new ATraceLoggerTransitionProgressListener.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceGlobalRootComponentImpl.SwitchingProvider.2
                            @Override // com.android.systemui.unfold.util.ATraceLoggerTransitionProgressListener.Factory
                            public final ATraceLoggerTransitionProgressListener create(String str) {
                                SwitchingProvider.this.referenceGlobalRootComponentImpl.unfoldTransitionModule.getClass();
                                return new ATraceLoggerTransitionProgressListener("systemui", str);
                            }
                        };
                    case 11:
                        return (T) new AnonymousClass3();
                    case 12:
                        return (T) new UnfoldFrameCallbackScheduler.Factory(this) { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceGlobalRootComponentImpl.SwitchingProvider.4
                            @Override // com.android.systemui.unfold.progress.UnfoldFrameCallbackScheduler.Factory
                            public final UnfoldFrameCallbackScheduler create() {
                                return new UnfoldFrameCallbackScheduler();
                            }
                        };
                    case 13:
                        return (T) new FixedTimingTransitionProgressProvider((FoldStateProvider) this.referenceGlobalRootComponentImpl.provideFoldStateProvider.get());
                    case 14:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl6 = this.referenceGlobalRootComponentImpl;
                        FoldStateProviderModule foldStateProviderModule = referenceGlobalRootComponentImpl6.foldStateProviderModule;
                        AnonymousClass5 anonymousClass5 = (AnonymousClass5) referenceGlobalRootComponentImpl6.factoryProvider5.get();
                        HingeAngleProvider unfoldMainHingeAngleProvider = this.referenceGlobalRootComponentImpl.unfoldMainHingeAngleProvider();
                        RotationChangeProvider rotationChangeProvider = (RotationChangeProvider) this.referenceGlobalRootComponentImpl.provideRotationChangeProvider.get();
                        Handler handler2 = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        foldStateProviderModule.getClass();
                        T t5 = (T) anonymousClass5.create(unfoldMainHingeAngleProvider, rotationChangeProvider, handler2);
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 15:
                        return (T) new Object() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceGlobalRootComponentImpl.SwitchingProvider.5
                            public final DeviceFoldStateProvider create(HingeAngleProvider hingeAngleProvider, RotationChangeProvider rotationChangeProvider2, Handler handler3) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                UnfoldTransitionConfig unfoldTransitionConfig3 = (UnfoldTransitionConfig) switchingProvider.referenceGlobalRootComponentImpl.resourceUnfoldTransitionConfigProvider.get();
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl7 = switchingProvider.referenceGlobalRootComponentImpl;
                                return new DeviceFoldStateProvider(unfoldTransitionConfig3, referenceGlobalRootComponentImpl7.context, referenceGlobalRootComponentImpl7.screenStatusProvider(), (CurrentActivityTypeProvider) switchingProvider.referenceGlobalRootComponentImpl.activityManagerActivityTypeProvider.get(), (UnfoldKeyguardVisibilityProvider) switchingProvider.referenceGlobalRootComponentImpl.unfoldKeyguardVisibilityProvider.get(), (FoldProvider) switchingProvider.referenceGlobalRootComponentImpl.deviceStateManagerFoldProvider.get(), hingeAngleProvider, rotationChangeProvider2, handler3);
                            }
                        };
                    case 16:
                        return (T) new LifecycleScreenStatusProvider((ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get());
                    case 17:
                        return (T) new ScreenLifecycle((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 18:
                        return (T) new DumpManager();
                    case 19:
                        return (T) new ActivityManagerActivityTypeProvider((ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get());
                    case 20:
                        T t6 = (T) ((ActivityManager) this.referenceGlobalRootComponentImpl.context.getSystemService(ActivityManager.class));
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 21:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl7 = this.referenceGlobalRootComponentImpl;
                        UnfoldSharedModule unfoldSharedModule = referenceGlobalRootComponentImpl7.unfoldSharedModule;
                        T t7 = (T) ((UnfoldKeyguardVisibilityManagerImpl) referenceGlobalRootComponentImpl7.unfoldKeyguardVisibilityManagerImplProvider.get());
                        unfoldSharedModule.getClass();
                        return t7;
                    case 22:
                        return (T) new UnfoldKeyguardVisibilityManagerImpl();
                    case 23:
                        return (T) GlobalConcurrencyModule_ProvideMainHandlerFactory.provideMainHandler(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper());
                    case 24:
                        return (T) new AnonymousClass6();
                    case 25:
                        T t8 = (T) ((SensorManager) this.referenceGlobalRootComponentImpl.context.getSystemService(SensorManager.class));
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    case 26:
                        return (T) GlobalConcurrencyModule_ProvideUiBackgroundExecutorFactory.provideUiBackgroundExecutor();
                    case 27:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl8 = this.referenceGlobalRootComponentImpl;
                        UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule = referenceGlobalRootComponentImpl8.unfoldRotationProviderInternalModule;
                        AnonymousClass7 anonymousClass7 = (AnonymousClass7) referenceGlobalRootComponentImpl8.factoryProvider7.get();
                        Handler handler3 = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        unfoldRotationProviderInternalModule.getClass();
                        T t9 = (T) anonymousClass7.create(handler3);
                        Preconditions.checkNotNullFromProvides(t9);
                        return t9;
                    case 28:
                        return (T) new Object() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceGlobalRootComponentImpl.SwitchingProvider.7
                            public final RotationChangeProvider create(Handler handler4) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                DisplayManager displayManager = (DisplayManager) switchingProvider.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get();
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl9 = switchingProvider.referenceGlobalRootComponentImpl;
                                return new RotationChangeProvider(displayManager, referenceGlobalRootComponentImpl9.context, (Handler) referenceGlobalRootComponentImpl9.unfoldBgProgressHandlerProvider.get(), handler4);
                            }
                        };
                    case 29:
                        T t10 = (T) ((DisplayManager) this.referenceGlobalRootComponentImpl.context.getSystemService(DisplayManager.class));
                        Preconditions.checkNotNullFromProvides(t10);
                        return t10;
                    case 30:
                        Looper looper = (Looper) this.referenceGlobalRootComponentImpl.provideBgLooperProvider.get();
                        SystemUnfoldSharedModule.Companion.getClass();
                        return (T) new Handler(looper);
                    case 31:
                        SystemUnfoldSharedModule.Companion.getClass();
                        HandlerThread handlerThread = new HandlerThread("UnfoldBg", -2);
                        handlerThread.start();
                        return (T) handlerThread.getLooper();
                    case 32:
                        return (T) new MainThreadUnfoldTransitionProgressProvider.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceGlobalRootComponentImpl.SwitchingProvider.8
                            @Override // com.android.systemui.unfold.progress.MainThreadUnfoldTransitionProgressProvider.Factory
                            public final MainThreadUnfoldTransitionProgressProvider create(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider) {
                                return new MainThreadUnfoldTransitionProgressProvider((Handler) SwitchingProvider.this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), unfoldTransitionProgressProvider);
                            }
                        };
                    case 33:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl9 = this.referenceGlobalRootComponentImpl;
                        UnfoldSharedInternalModule unfoldSharedInternalModule2 = referenceGlobalRootComponentImpl9.unfoldSharedInternalModule;
                        UnfoldTransitionConfig unfoldTransitionConfig3 = (UnfoldTransitionConfig) referenceGlobalRootComponentImpl9.resourceUnfoldTransitionConfigProvider.get();
                        AnonymousClass1 anonymousClass12 = (AnonymousClass1) this.referenceGlobalRootComponentImpl.factoryProvider.get();
                        ATraceLoggerTransitionProgressListener.Factory factory3 = (ATraceLoggerTransitionProgressListener.Factory) this.referenceGlobalRootComponentImpl.factoryProvider2.get();
                        AnonymousClass3 anonymousClass32 = (AnonymousClass3) this.referenceGlobalRootComponentImpl.factoryProvider4.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl10 = this.referenceGlobalRootComponentImpl;
                        Provider provider2 = referenceGlobalRootComponentImpl10.fixedTimingTransitionProgressProvider;
                        FoldStateProvider foldStateProvider2 = (FoldStateProvider) referenceGlobalRootComponentImpl10.provideBgFoldStateProvider.get();
                        Handler handler4 = (Handler) this.referenceGlobalRootComponentImpl.unfoldBgProgressHandlerProvider.get();
                        unfoldSharedInternalModule2.getClass();
                        return (T) UnfoldSharedInternalModule.createOptionalUnfoldTransitionProgressProvider(unfoldTransitionConfig3, anonymousClass12, factory3.create("BgThread"), anonymousClass32, provider2, foldStateProvider2, handler4);
                    case 34:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl11 = this.referenceGlobalRootComponentImpl;
                        FoldStateProviderModule foldStateProviderModule2 = referenceGlobalRootComponentImpl11.foldStateProviderModule;
                        AnonymousClass5 anonymousClass52 = (AnonymousClass5) referenceGlobalRootComponentImpl11.factoryProvider5.get();
                        HingeAngleProvider unfoldBgHingeAngleProvider = this.referenceGlobalRootComponentImpl.unfoldBgHingeAngleProvider();
                        RotationChangeProvider rotationChangeProvider2 = (RotationChangeProvider) this.referenceGlobalRootComponentImpl.provideBgRotationChangeProvider.get();
                        Handler handler5 = (Handler) this.referenceGlobalRootComponentImpl.unfoldBgProgressHandlerProvider.get();
                        foldStateProviderModule2.getClass();
                        T t11 = (T) anonymousClass52.create(unfoldBgHingeAngleProvider, rotationChangeProvider2, handler5);
                        Preconditions.checkNotNullFromProvides(t11);
                        return t11;
                    case 35:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl12 = this.referenceGlobalRootComponentImpl;
                        UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule2 = referenceGlobalRootComponentImpl12.unfoldRotationProviderInternalModule;
                        AnonymousClass7 anonymousClass72 = (AnonymousClass7) referenceGlobalRootComponentImpl12.factoryProvider7.get();
                        Handler handler6 = (Handler) this.referenceGlobalRootComponentImpl.unfoldBgProgressHandlerProvider.get();
                        unfoldRotationProviderInternalModule2.getClass();
                        T t12 = (T) anonymousClass72.create(handler6);
                        Preconditions.checkNotNullFromProvides(t12);
                        return t12;
                    case 36:
                        this.referenceGlobalRootComponentImpl.unfoldTransitionModule.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        return (T) Boolean.TRUE;
                    case 37:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl13 = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule2 = referenceGlobalRootComponentImpl13.unfoldTransitionModule;
                        final FoldProvider foldProvider2 = (FoldProvider) referenceGlobalRootComponentImpl13.deviceStateManagerFoldProvider.get();
                        final Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                        Optional optional = (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get();
                        unfoldTransitionModule2.getClass();
                        return (T) optional.map(new Function() { // from class: com.android.systemui.unfold.UnfoldTransitionModule$provideUnfoldOnlyProvider$1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                UnfoldTransitionProgressProvider unfoldTransitionProgressProvider = (UnfoldTransitionProgressProvider) obj;
                                FoldProvider foldProvider3 = FoldProvider.this;
                                Executor executor2 = executor;
                                Intrinsics.checkNotNull(unfoldTransitionProgressProvider);
                                return new UnfoldOnlyProgressProvider(foldProvider3, executor2, unfoldTransitionProgressProvider, null, 8, null);
                            }
                        });
                    case 38:
                        return (T) GlobalConcurrencyModule_ProvideMainExecutorFactory.provideMainExecutor(this.referenceGlobalRootComponentImpl.context);
                    case 39:
                        return (T) new UiEventLoggerImpl();
                    case 40:
                        T t13 = (T) ActivityTaskManager.getInstance();
                        Preconditions.checkNotNullFromProvides(t13);
                        return t13;
                    case 41:
                        T t14 = (T) ((WindowManager) this.referenceGlobalRootComponentImpl.context.getSystemService(WindowManager.class));
                        Preconditions.checkNotNullFromProvides(t14);
                        return t14;
                    case 42:
                        T t15 = (T) IStatusBarService.Stub.asInterface(ServiceManager.getService("statusbar"));
                        Preconditions.checkNotNullFromProvides(t15);
                        return t15;
                    case 43:
                        T t16 = (T) ((UserManager) this.referenceGlobalRootComponentImpl.context.getSystemService(UserManager.class));
                        Preconditions.checkNotNullFromProvides(t16);
                        return t16;
                    case 44:
                        T t17 = (T) ((LauncherApps) this.referenceGlobalRootComponentImpl.context.getSystemService(LauncherApps.class));
                        Preconditions.checkNotNullFromProvides(t17);
                        return t17;
                    case 45:
                        ?? r12 = (T) InteractionJankMonitor.getInstance();
                        r12.configDebugOverlay(-256, 0.75d);
                        return r12;
                    case 46:
                        T t18 = (T) this.referenceGlobalRootComponentImpl.context.getPackageManager();
                        Preconditions.checkNotNullFromProvides(t18);
                        return t18;
                    case 47:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl14 = this.referenceGlobalRootComponentImpl;
                        GlobalModule globalModule = referenceGlobalRootComponentImpl14.globalModule;
                        Context context = referenceGlobalRootComponentImpl14.context;
                        globalModule.getClass();
                        T t19 = (T) context.getApplicationContext();
                        Preconditions.checkNotNullFromProvides(t19);
                        return t19;
                    case 48:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl15 = this.referenceGlobalRootComponentImpl;
                        return (T) GlobalCoroutinesModule_ApplicationScopeFactory.applicationScope(referenceGlobalRootComponentImpl15.globalCoroutinesModule, (CoroutineContext) referenceGlobalRootComponentImpl15.mainCoroutineContextProvider.get());
                    case 49:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl16 = this.referenceGlobalRootComponentImpl;
                        return (T) GlobalCoroutinesModule_MainCoroutineContextFactory.mainCoroutineContext(referenceGlobalRootComponentImpl16.globalCoroutinesModule, (CoroutineContext) referenceGlobalRootComponentImpl16.tracingCoroutineContextProvider.get());
                    case 50:
                        return (T) GlobalCoroutinesModule_TracingCoroutineContextFactory.tracingCoroutineContext(this.referenceGlobalRootComponentImpl.globalCoroutinesModule);
                    case 51:
                        return (T) Boolean.valueOf(ActivityManager.isRunningInUserTestHarness());
                    case 52:
                        T t20 = (T) ((PowerManager) this.referenceGlobalRootComponentImpl.context.getSystemService(PowerManager.class));
                        Preconditions.checkNotNullFromProvides(t20);
                        return t20;
                    case 53:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl17 = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule3 = referenceGlobalRootComponentImpl17.unfoldTransitionModule;
                        DeviceStateManager deviceStateManager = (DeviceStateManager) referenceGlobalRootComponentImpl17.provideDeviceStateManagerProvider.get();
                        Context context2 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        Executor executor2 = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                        unfoldTransitionModule3.getClass();
                        ?? r1 = (T) new DeviceStateManager.FoldStateListener(context2);
                        deviceStateManager.registerCallback(executor2, (DeviceStateManager.DeviceStateCallback) r1);
                        return r1;
                    case 54:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl18 = this.referenceGlobalRootComponentImpl;
                        return (T) PluginsModule_ProvidesPluginManagerFactory.providesPluginManager(referenceGlobalRootComponentImpl18.context, (PluginActionManager.Factory) referenceGlobalRootComponentImpl18.providePluginInstanceManagerFactoryProvider.get(), PluginsModule_ProvidesPluginDebugFactory.providesPluginDebug(), (UncaughtExceptionPreHandlerManager) this.referenceGlobalRootComponentImpl.uncaughtExceptionPreHandlerManagerProvider.get(), (PluginEnabler) this.referenceGlobalRootComponentImpl.pluginEnablerImplProvider.get(), PluginsModule_ProvidesPluginPrefsFactory.providesPluginPrefs(this.referenceGlobalRootComponentImpl.context), PluginsModule_ProvidesPrivilegedPluginsFactory.providesPrivilegedPlugins(this.referenceGlobalRootComponentImpl.context), (PluginInstance.Factory) this.referenceGlobalRootComponentImpl.providesPluginInstanceFactoryProvider.get());
                    case 55:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl19 = this.referenceGlobalRootComponentImpl;
                        return (T) PluginsModule_ProvidePluginInstanceManagerFactoryFactory.providePluginInstanceManagerFactory(referenceGlobalRootComponentImpl19.context, (PackageManager) referenceGlobalRootComponentImpl19.providePackageManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.providesPluginExecutorProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (PluginEnabler) this.referenceGlobalRootComponentImpl.pluginEnablerImplProvider.get(), PluginsModule_ProvidesPrivilegedPluginsFactory.providesPrivilegedPlugins(this.referenceGlobalRootComponentImpl.context), (PluginInstance.Factory) this.referenceGlobalRootComponentImpl.providesPluginInstanceFactoryProvider.get());
                    case 56:
                        return (T) PluginsModule_ProvidesPluginExecutorFactory.providesPluginExecutor(ThreadFactoryImpl_Factory.newInstance());
                    case 57:
                        T t21 = (T) ((NotificationManager) this.referenceGlobalRootComponentImpl.context.getSystemService(NotificationManager.class));
                        Preconditions.checkNotNullFromProvides(t21);
                        return t21;
                    case 58:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl20 = this.referenceGlobalRootComponentImpl;
                        return (T) new PluginEnablerImpl(referenceGlobalRootComponentImpl20.context, (PackageManager) referenceGlobalRootComponentImpl20.providePackageManagerProvider.get());
                    case 59:
                        return (T) PluginsModule_ProvidesPluginInstanceFactoryFactory.providesPluginInstanceFactory(PluginsModule_ProvidesPrivilegedPluginsFactory.providesPrivilegedPlugins(this.referenceGlobalRootComponentImpl.context), PluginsModule_ProvidesPluginDebugFactory.providesPluginDebug());
                    case 60:
                        return (T) new UncaughtExceptionPreHandlerManager();
                    case 61:
                        this.referenceGlobalRootComponentImpl.androidInternalsModule.getClass();
                        return (T) new MetricsLogger();
                    case 62:
                        T t22 = (T) ViewConfiguration.get(this.referenceGlobalRootComponentImpl.context);
                        Preconditions.checkNotNullFromProvides(t22);
                        return t22;
                    case 63:
                        T t23 = (T) IBatteryStats.Stub.asInterface(ServiceManager.getService("batterystats"));
                        Preconditions.checkNotNullFromProvides(t23);
                        return t23;
                    case 64:
                        return (T) new NoLogcatEchoTracker();
                    case 65:
                        return (T) new ExecutionImpl();
                    case 66:
                        Context context3 = this.referenceGlobalRootComponentImpl.context;
                        if (context3.getPackageManager().hasSystemFeature("android.hardware.fingerprint")) {
                            return (T) ((FingerprintManager) context3.getSystemService(FingerprintManager.class));
                        }
                        return null;
                    case 67:
                        Context context4 = this.referenceGlobalRootComponentImpl.context;
                        if (context4.getPackageManager().hasSystemFeature("android.hardware.biometrics.face")) {
                            return (T) ((FaceManager) context4.getSystemService(FaceManager.class));
                        }
                        return null;
                    case 68:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl21 = this.referenceGlobalRootComponentImpl;
                        FrameworkServicesModule frameworkServicesModule = referenceGlobalRootComponentImpl21.frameworkServicesModule;
                        Context context5 = referenceGlobalRootComponentImpl21.context;
                        frameworkServicesModule.getClass();
                        T t24 = (T) LayoutInflater.from(context5);
                        Preconditions.checkNotNullFromProvides(t24);
                        return t24;
                    case 69:
                        return (T) GlobalConcurrencyModule_ProvideMainDelayableExecutorFactory.provideMainDelayableExecutor(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper());
                    case 70:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl22 = this.referenceGlobalRootComponentImpl;
                        AndroidInternalsModule androidInternalsModule = referenceGlobalRootComponentImpl22.androidInternalsModule;
                        Context context6 = referenceGlobalRootComponentImpl22.context;
                        androidInternalsModule.getClass();
                        return (T) new LockPatternUtils(context6);
                    case 71:
                        return (T) GlobalCoroutinesModule_MainDispatcherFactory.mainDispatcher(this.referenceGlobalRootComponentImpl.globalCoroutinesModule);
                    case 72:
                        T t25 = (T) ((TrustManager) this.referenceGlobalRootComponentImpl.context.getSystemService(TrustManager.class));
                        Preconditions.checkNotNullFromProvides(t25);
                        return t25;
                    case 73:
                        T t26 = (T) ((DevicePolicyManager) this.referenceGlobalRootComponentImpl.context.getSystemService(DevicePolicyManager.class));
                        Preconditions.checkNotNullFromProvides(t26);
                        return t26;
                    case 74:
                        T t27 = (T) ((ConnectivityManager) this.referenceGlobalRootComponentImpl.context.getSystemService(ConnectivityManager.class));
                        Preconditions.checkNotNullFromProvides(t27);
                        return t27;
                    case 75:
                        T t28 = (T) ((SubscriptionManager) this.referenceGlobalRootComponentImpl.context.getSystemService(SubscriptionManager.class)).createForAllUserProfiles();
                        Preconditions.checkNotNullFromProvides(t28);
                        return t28;
                    case 76:
                        T t29 = (T) ((TelephonyManager) this.referenceGlobalRootComponentImpl.context.getSystemService(TelephonyManager.class));
                        Preconditions.checkNotNullFromProvides(t29);
                        return t29;
                    case 77:
                        return (T) ((WifiManager) this.referenceGlobalRootComponentImpl.context.getSystemService(WifiManager.class));
                    case 78:
                        return (T) ((CarrierConfigManager) this.referenceGlobalRootComponentImpl.context.getSystemService(CarrierConfigManager.class));
                    case 79:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl23 = this.referenceGlobalRootComponentImpl;
                        Context context7 = referenceGlobalRootComponentImpl23.context;
                        FaceManager faceManager = (FaceManager) referenceGlobalRootComponentImpl23.provideFaceManagerProvider.get();
                        FingerprintManager fingerprintManager = (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get();
                        if (faceManager == null && fingerprintManager == null) {
                            return null;
                        }
                        return (T) ((BiometricManager) context7.getSystemService(BiometricManager.class));
                    case 80:
                        T t30 = (T) ((CameraManager) this.referenceGlobalRootComponentImpl.context.getSystemService(CameraManager.class));
                        Preconditions.checkNotNullFromProvides(t30);
                        return t30;
                    case 81:
                        return (T) IWallpaperManager.Stub.asInterface(ServiceManager.getService("wallpaper"));
                    case 82:
                        this.referenceGlobalRootComponentImpl.frameworkServicesModule.getClass();
                        T t31 = (T) Choreographer.getInstance();
                        Preconditions.checkNotNullFromProvides(t31);
                        return t31;
                    case 83:
                        T t32 = (T) ActivityManager.getService();
                        Preconditions.checkNotNullFromProvides(t32);
                        return t32;
                    case 84:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl24 = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule4 = referenceGlobalRootComponentImpl24.unfoldTransitionModule;
                        final Context context8 = referenceGlobalRootComponentImpl24.context;
                        final RotationChangeProvider rotationChangeProvider3 = (RotationChangeProvider) referenceGlobalRootComponentImpl24.provideRotationChangeProvider.get();
                        Optional optional2 = (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get();
                        unfoldTransitionModule4.getClass();
                        return (T) optional2.map(new Function() { // from class: com.android.systemui.unfold.UnfoldTransitionModule$provideNaturalRotationProgressProvider$1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                UnfoldTransitionProgressProvider unfoldTransitionProgressProvider = (UnfoldTransitionProgressProvider) obj;
                                Context context9 = context8;
                                RotationChangeProvider rotationChangeProvider4 = rotationChangeProvider3;
                                Intrinsics.checkNotNull(unfoldTransitionProgressProvider);
                                return new NaturalRotationUnfoldProgressProvider(context9, rotationChangeProvider4, unfoldTransitionProgressProvider);
                            }
                        });
                    case 85:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl25 = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule5 = referenceGlobalRootComponentImpl25.unfoldTransitionModule;
                        Optional optional3 = (Optional) referenceGlobalRootComponentImpl25.provideNaturalRotationProgressProvider.get();
                        unfoldTransitionModule5.getClass();
                        return (T) optional3.map(new Function() { // from class: com.android.systemui.unfold.UnfoldTransitionModule$provideStatusBarScopedTransitionProvider$1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                return new ScopedUnfoldTransitionProgressProvider((NaturalRotationUnfoldProgressProvider) obj);
                            }
                        });
                    case 86:
                        return (T) ((Vibrator) this.referenceGlobalRootComponentImpl.context.getSystemService(Vibrator.class));
                    case 87:
                        T t33 = (T) ((AudioManager) this.referenceGlobalRootComponentImpl.context.getSystemService(AudioManager.class));
                        Preconditions.checkNotNullFromProvides(t33);
                        return t33;
                    case 88:
                        T t34 = (T) ((PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get()).getPackageInstaller();
                        Preconditions.checkNotNullFromProvides(t34);
                        return t34;
                    case 89:
                        T t35 = (T) Optional.ofNullable((SatelliteManager) this.referenceGlobalRootComponentImpl.context.getSystemService(SatelliteManager.class));
                        Preconditions.checkNotNullFromProvides(t35);
                        return t35;
                    case 90:
                        T t36 = (T) IDeviceIdleController.Stub.asInterface(ServiceManager.getService("deviceidle"));
                        Preconditions.checkNotNullFromProvides(t36);
                        return t36;
                    case 91:
                        T t37 = (T) IUriGrantsManager.Stub.asInterface(ServiceManager.getService("uri_grants"));
                        Preconditions.checkNotNullFromProvides(t37);
                        return t37;
                    case 92:
                        T t38 = (T) ((NetworkScoreManager) this.referenceGlobalRootComponentImpl.context.getSystemService(NetworkScoreManager.class));
                        Preconditions.checkNotNullFromProvides(t38);
                        return t38;
                    case 93:
                        T t39 = (T) IDreamManager.Stub.asInterface(ServiceManager.getService("dreams"));
                        Preconditions.checkNotNullFromProvides(t39);
                        return t39;
                    case 94:
                        T t40 = (T) ((SensorPrivacyManager) this.referenceGlobalRootComponentImpl.context.getSystemService(SensorPrivacyManager.class));
                        Preconditions.checkNotNullFromProvides(t40);
                        return t40;
                    case 95:
                        T t41 = (T) ((ColorDisplayManager) this.referenceGlobalRootComponentImpl.context.getSystemService(ColorDisplayManager.class));
                        Preconditions.checkNotNullFromProvides(t41);
                        return t41;
                    case 96:
                        return (T) ((BluetoothManager) this.referenceGlobalRootComponentImpl.provideBluetoothManagerProvider.get()).getAdapter();
                    case 97:
                        T t42 = (T) ((BluetoothManager) this.referenceGlobalRootComponentImpl.context.getSystemService(BluetoothManager.class));
                        Preconditions.checkNotNullFromProvides(t42);
                        return t42;
                    case 98:
                        T t43 = (T) ((SafetyCenterManager) this.referenceGlobalRootComponentImpl.context.getSystemService(SafetyCenterManager.class));
                        Preconditions.checkNotNullFromProvides(t43);
                        return t43;
                    case 99:
                        T t44 = (T) ((AlarmManager) this.referenceGlobalRootComponentImpl.context.getSystemService(AlarmManager.class));
                        Preconditions.checkNotNullFromProvides(t44);
                        return t44;
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get1() {
                switch (this.id) {
                    case 100:
                        T t = (T) IMediaProjectionManager.Stub.asInterface(ServiceManager.getService("media_projection"));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 101:
                        T t2 = (T) ((RoleManager) this.referenceGlobalRootComponentImpl.context.getSystemService(RoleManager.class));
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 102:
                        T t3 = (T) MediaRouter2Manager.getInstance(this.referenceGlobalRootComponentImpl.context);
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 103:
                        return (T) ((TelecomManager) this.referenceGlobalRootComponentImpl.context.getSystemService(TelecomManager.class));
                    case 104:
                        T t4 = (T) ((InputMethodManager) this.referenceGlobalRootComponentImpl.context.getSystemService(InputMethodManager.class));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 105:
                        T t5 = (T) ((PowerExemptionManager) this.referenceGlobalRootComponentImpl.context.getSystemService(PowerExemptionManager.class));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 106:
                        T t6 = (T) ((KeyguardManager) this.referenceGlobalRootComponentImpl.context.getSystemService(KeyguardManager.class));
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 107:
                        return (T) ((SmartspaceManager) this.referenceGlobalRootComponentImpl.context.getSystemService(SmartspaceManager.class));
                    case 108:
                        T t7 = (T) ActivityTaskManager.getService();
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 109:
                        T t8 = (T) ((ShortcutManager) this.referenceGlobalRootComponentImpl.context.getSystemService(ShortcutManager.class));
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    case 110:
                        T t9 = (T) ((InputManager) this.referenceGlobalRootComponentImpl.context.getSystemService(InputManager.class));
                        Preconditions.checkNotNullFromProvides(t9);
                        return t9;
                    case 111:
                        T t10 = (T) LatencyTracker.getInstance(this.referenceGlobalRootComponentImpl.context);
                        Preconditions.checkNotNullFromProvides(t10);
                        return t10;
                    case 112:
                        return (T) new VibrationUtil(this.referenceGlobalRootComponentImpl.context);
                    case 113:
                        this.referenceGlobalRootComponentImpl.frameworkServicesModule.getClass();
                        T t11 = (T) INotificationManager.Stub.asInterface(ServiceManager.getService(SubRoom.EXTRA_VALUE_NOTIFICATION));
                        Preconditions.checkNotNullFromProvides(t11);
                        return t11;
                    case 114:
                        T t12 = (T) CrossWindowBlurListeners.getInstance();
                        Preconditions.checkNotNullFromProvides(t12);
                        return t12;
                    case 115:
                        T t13 = (T) ((JobScheduler) this.referenceGlobalRootComponentImpl.context.getSystemService(JobScheduler.class));
                        Preconditions.checkNotNullFromProvides(t13);
                        return t13;
                    case 116:
                        T t14 = (T) ((NearbyManager) this.referenceGlobalRootComponentImpl.context.getSystemService(NearbyManager.class));
                        Preconditions.checkNotNullFromProvides(t14);
                        return t14;
                    case 117:
                        ?? r2 = (T) ((PermissionManager) this.referenceGlobalRootComponentImpl.context.getSystemService(PermissionManager.class));
                        if (r2 != 0) {
                            r2.initializeUsageHelper();
                        }
                        Preconditions.checkNotNullFromProvides(r2);
                        return r2;
                    case 118:
                        T t15 = (T) ((LocationManager) this.referenceGlobalRootComponentImpl.context.getSystemService(LocationManager.class));
                        Preconditions.checkNotNullFromProvides(t15);
                        return t15;
                    case 119:
                        T t16 = (T) PackageManagerWrapper.sInstance;
                        Preconditions.checkNotNullFromProvides(t16);
                        return t16;
                    case 120:
                        return (T) new UserScopedServiceImpl(this.referenceGlobalRootComponentImpl.context, ColorDisplayManager.class);
                    case 121:
                        T t17 = (T) ((UiModeManager) this.referenceGlobalRootComponentImpl.context.getSystemService(UiModeManager.class));
                        Preconditions.checkNotNullFromProvides(t17);
                        return t17;
                    case 122:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        UnfoldSharedInternalModule unfoldSharedInternalModule = referenceGlobalRootComponentImpl.unfoldSharedInternalModule;
                        UnfoldTransitionConfig unfoldTransitionConfig = (UnfoldTransitionConfig) referenceGlobalRootComponentImpl.resourceUnfoldTransitionConfigProvider.get();
                        Provider provider = this.referenceGlobalRootComponentImpl.unfoldTransitionProgressForwarderProvider;
                        unfoldSharedInternalModule.getClass();
                        return !((Boolean) ((ResourceUnfoldTransitionConfig) unfoldTransitionConfig).isEnabled$delegate.getValue()).booleanValue() ? (T) Optional.empty() : (T) Optional.of(provider.get());
                    case 123:
                        return (T) new UnfoldTransitionProgressForwarder();
                    case 124:
                        return (T) new MediaSdkSupportServiceClient(this.referenceGlobalRootComponentImpl.context);
                    case 125:
                        return (T) new DeviceControlOperationImpl((MediaSdkSupportServiceClient) this.referenceGlobalRootComponentImpl.mediaSdkSupportServiceClientProvider.get());
                    case 126:
                        return (T) new DeviceStatusOperationImpl((MediaSdkSupportServiceClient) this.referenceGlobalRootComponentImpl.mediaSdkSupportServiceClientProvider.get());
                    case 127:
                        return (T) new MediaContentOperationImpl((MediaSdkSupportServiceClient) this.referenceGlobalRootComponentImpl.mediaSdkSupportServiceClientProvider.get());
                    case 128:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) new MediaOutputSelectedOperationImpl(referenceGlobalRootComponentImpl2.context, (MediaSdkSupportServiceClient) referenceGlobalRootComponentImpl2.mediaSdkSupportServiceClientProvider.get());
                    case 129:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl3 = this.referenceGlobalRootComponentImpl;
                        return (T) new MediaPolicyOperationImpl(referenceGlobalRootComponentImpl3.context, (MediaSdkSupportServiceClient) referenceGlobalRootComponentImpl3.mediaSdkSupportServiceClientProvider.get());
                    case 130:
                        return (T) new ExternalClockProvider();
                    case 131:
                        return (T) new CoverUtil();
                    case 132:
                        T t18 = (T) ((VirtualDeviceManager) this.referenceGlobalRootComponentImpl.context.getSystemService(VirtualDeviceManager.class));
                        Preconditions.checkNotNullFromProvides(t18);
                        return t18;
                    case 133:
                        T t19 = (T) IAudioService.Stub.asInterface(ServiceManager.getService(ServiceTuple.MEDIA_CAP_AUDIO));
                        Preconditions.checkNotNullFromProvides(t19);
                        return t19;
                    case 134:
                        return (T) new PluginDependencyProvider(DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.providesPluginManagerProvider));
                    case 135:
                        T t20 = (T) Optional.ofNullable((Vibrator) this.referenceGlobalRootComponentImpl.context.getSystemService(Vibrator.class));
                        Preconditions.checkNotNullFromProvides(t20);
                        return t20;
                    case 136:
                        return (T) IVrManager.Stub.asInterface(ServiceManager.getService("vrmanager"));
                    case 137:
                        T t21 = (T) ((StatusBarManager) this.referenceGlobalRootComponentImpl.context.getSystemService(StatusBarManager.class));
                        Preconditions.checkNotNullFromProvides(t21);
                        return t21;
                    case 138:
                        return (T) new CoverUtilWrapper((CoverUtil) this.referenceGlobalRootComponentImpl.coverUtilProvider.get());
                    case 139:
                        return (T) NotificationManagerCompat.from(this.referenceGlobalRootComponentImpl.context);
                    case 140:
                        T t22 = (T) ((StatsManager) this.referenceGlobalRootComponentImpl.context.getSystemService(StatsManager.class));
                        Preconditions.checkNotNullFromProvides(t22);
                        return t22;
                    case 141:
                        this.referenceGlobalRootComponentImpl.unfoldTransitionModule.getClass();
                        return (T) new DisplaySwitchLatencyLogger();
                    case 142:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl4 = this.referenceGlobalRootComponentImpl;
                        return (T) UnfoldTransitionModule_ProvidesFoldStateLoggingProviderFactory.providesFoldStateLoggingProvider(referenceGlobalRootComponentImpl4.unfoldTransitionModule, (UnfoldTransitionConfig) referenceGlobalRootComponentImpl4.resourceUnfoldTransitionConfigProvider.get(), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideFoldStateProvider));
                    case 143:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl5 = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule = referenceGlobalRootComponentImpl5.unfoldTransitionModule;
                        Optional optional = (Optional) referenceGlobalRootComponentImpl5.providesFoldStateLoggingProvider.get();
                        unfoldTransitionModule.getClass();
                        return (T) optional.map(new Function() { // from class: com.android.systemui.unfold.UnfoldTransitionModule$providesFoldStateLogger$1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                FoldStateLoggingProvider foldStateLoggingProvider = (FoldStateLoggingProvider) obj;
                                Intrinsics.checkNotNull(foldStateLoggingProvider);
                                return new FoldStateLogger(foldStateLoggingProvider);
                            }
                        });
                    case 144:
                        return (T) new DeviceStateRepositoryImpl((FoldProvider) this.referenceGlobalRootComponentImpl.deviceStateManagerFoldProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 145:
                        T t23 = (T) ((TextClassificationManager) this.referenceGlobalRootComponentImpl.context.getSystemService(TextClassificationManager.class));
                        Preconditions.checkNotNullFromProvides(t23);
                        return t23;
                    case 146:
                        T t24 = (T) ((ClipboardManager) this.referenceGlobalRootComponentImpl.context.getSystemService(ClipboardManager.class));
                        Preconditions.checkNotNullFromProvides(t24);
                        return t24;
                    case 147:
                        T t25 = (T) ((StorageManager) this.referenceGlobalRootComponentImpl.context.getSystemService(StorageManager.class));
                        Preconditions.checkNotNullFromProvides(t25);
                        return t25;
                    case 148:
                        T t26 = (T) ((OverlayManager) this.referenceGlobalRootComponentImpl.context.getSystemService(OverlayManager.class));
                        Preconditions.checkNotNullFromProvides(t26);
                        return t26;
                    case 149:
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.unfoldBgProgressHandlerProvider.get();
                        SystemUnfoldSharedModule.Companion.getClass();
                        int i = HandlerDispatcherKt.$r8$clinit;
                        return (T) new HandlerContext(handler, "@UnfoldBg Dispatcher");
                    case 150:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl6 = this.referenceGlobalRootComponentImpl;
                        UnfoldTransitionModule unfoldTransitionModule2 = referenceGlobalRootComponentImpl6.unfoldTransitionModule;
                        Context context = referenceGlobalRootComponentImpl6.context;
                        unfoldTransitionModule2.getClass();
                        return (T) new FoldLockSettingAvailabilityProvider(context.getResources());
                    case 151:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl7 = this.referenceGlobalRootComponentImpl;
                        UnfoldSharedModule unfoldSharedModule = referenceGlobalRootComponentImpl7.unfoldSharedModule;
                        T t27 = (T) ((UnfoldKeyguardVisibilityManagerImpl) referenceGlobalRootComponentImpl7.unfoldKeyguardVisibilityManagerImplProvider.get());
                        unfoldSharedModule.getClass();
                        return t27;
                    case 152:
                        T t28 = (T) IPackageManager.Stub.asInterface(ServiceManager.getService("package"));
                        Preconditions.checkNotNullFromProvides(t28);
                        return t28;
                    case 153:
                        T t29 = (T) Optional.ofNullable((TelecomManager) this.referenceGlobalRootComponentImpl.context.getSystemService(TelecomManager.class));
                        Preconditions.checkNotNullFromProvides(t29);
                        return t29;
                    case 154:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl8 = this.referenceGlobalRootComponentImpl;
                        FrameworkServicesModule frameworkServicesModule = referenceGlobalRootComponentImpl8.frameworkServicesModule;
                        Context context2 = referenceGlobalRootComponentImpl8.context;
                        frameworkServicesModule.getClass();
                        return (T) new AsyncLayoutInflater(context2);
                    case 155:
                        T t30 = (T) ((CaptioningManager) this.referenceGlobalRootComponentImpl.context.getSystemService(CaptioningManager.class));
                        Preconditions.checkNotNullFromProvides(t30);
                        return t30;
                    case 156:
                        return (T) new LowLightTransitionCoordinator();
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        /* renamed from: -$$Nest$mdisplayIdInteger, reason: not valid java name */
        public static int m1001$$Nest$mdisplayIdInteger(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl) {
            return referenceGlobalRootComponentImpl.context.getDisplayId();
        }

        /* renamed from: -$$Nest$mmainResources, reason: not valid java name */
        public static Resources m1003$$Nest$mmainResources(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl) {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(referenceGlobalRootComponentImpl.context);
        }

        /* renamed from: -$$Nest$mwallpaperManager, reason: not valid java name */
        public static WallpaperManager m1005$$Nest$mwallpaperManager(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl) {
            return FrameworkServicesModule_ProvideWallpaperManagerFactory.provideWallpaperManager(referenceGlobalRootComponentImpl.context);
        }

        public /* synthetic */ ReferenceGlobalRootComponentImpl(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, GlobalCoroutinesModule globalCoroutinesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule, HingeAngleProviderInternalModule hingeAngleProviderInternalModule, FoldStateProviderModule foldStateProviderModule, Context context, Boolean bool, int i) {
            this(globalModule, androidInternalsModule, frameworkServicesModule, globalCoroutinesModule, unfoldTransitionModule, unfoldSharedModule, unfoldSharedInternalModule, unfoldRotationProviderInternalModule, hingeAngleProviderInternalModule, foldStateProviderModule, context, bool);
        }

        public final AmbientDisplayConfiguration ambientDisplayConfiguration() {
            FrameworkServicesModule frameworkServicesModule = this.frameworkServicesModule;
            Context context = this.context;
            frameworkServicesModule.getClass();
            return new AmbientDisplayConfiguration(context);
        }

        public final int displayIdInteger() {
            return this.context.getDisplayId();
        }

        public final DisplayMetrics displayMetrics() {
            GlobalModule globalModule = this.globalModule;
            Context context = this.context;
            globalModule.getClass();
            DisplayMetrics displayMetrics = new DisplayMetrics();
            context.getDisplay().getMetrics(displayMetrics);
            return displayMetrics;
        }

        public final FoldStateRepositoryImpl foldStateRepositoryImpl() {
            return new FoldStateRepositoryImpl((FoldStateProvider) this.provideFoldStateProvider.get());
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent
        public final InitializationChecker getInitializationChecker() {
            return new InitializationChecker(this.instrumentationTest.booleanValue());
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent
        public final Looper getMainLooper() {
            return GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper();
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent
        public final ProcessWrapper getProcessWrapper() {
            return new ProcessWrapper();
        }

        public final ReferenceSysUIComponent.Builder getSysUIComponent() {
            return new ReferenceSysUIComponentBuilder(this.referenceGlobalRootComponentImpl, 0);
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent
        public final SystemPropertiesHelper getSystemPropertiesHelper() {
            return (SystemPropertiesHelper) this.systemPropertiesHelperProvider.get();
        }

        @Override // com.android.systemui.dagger.GlobalRootComponent
        public final WMComponent.Builder getWMComponentBuilder() {
            return new WMComponentBuilder(this.referenceGlobalRootComponentImpl, 0);
        }

        public final void initialize(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, GlobalCoroutinesModule globalCoroutinesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule, HingeAngleProviderInternalModule hingeAngleProviderInternalModule, FoldStateProviderModule foldStateProviderModule, Context context, Boolean bool) {
            this.systemPropertiesHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 0));
            this.provideIWindowManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 1));
            this.provideAccessibilityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 2));
            this.resourceUnfoldTransitionConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 4));
            this.provideDeviceStateManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 6));
            this.deviceStateManagerFoldProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 5));
            this.provideContentResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 9));
            this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 8));
            this.factoryProvider2 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 10));
            this.factoryProvider3 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 12));
            this.factoryProvider4 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 11));
            this.dumpManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 18));
            this.screenLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 17));
            this.lifecycleScreenStatusProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 16));
            this.provideActivityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 20));
            this.activityManagerActivityTypeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 19));
            this.unfoldKeyguardVisibilityManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 22));
            this.unfoldKeyguardVisibilityProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 21));
            this.factoryProvider5 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 15));
            this.provideMainHandlerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 23);
            this.providesSensorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 25));
            this.provideUiBackgroundExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 26));
            this.factoryProvider6 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 24));
            this.provideDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 29));
            this.provideBgLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 31));
            this.unfoldBgProgressHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 30));
            this.factoryProvider7 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 28));
            this.provideRotationChangeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 27));
            this.provideFoldStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 14));
            this.fixedTimingTransitionProgressProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 13);
            this.factoryProvider8 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 32));
            this.provideBgRotationChangeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 35));
            this.provideBgFoldStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 34));
            this.unfoldBgTransitionProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 33));
            this.unfoldBgProgressFlagProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 36));
            this.unfoldTransitionProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 7));
            this.provideMainExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 38));
            this.provideUnfoldOnlyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 37));
            this.provideShellProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 3));
            this.provideUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 39));
            this.provideActivityTaskManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 40));
            this.provideWindowManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 41));
            this.provideIStatusBarServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 42));
            this.provideUserManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 43));
            this.provideLauncherAppsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 44));
            this.provideInteractionJankMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 45));
            this.providePackageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 46));
            this.provideApplicationContextProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 47);
            this.tracingCoroutineContextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 50));
            this.mainCoroutineContextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 49));
            this.applicationScopeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 48));
            this.provideIsTestHarnessProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 51));
            this.providePowerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 52));
            this.providesFoldStateListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 53));
            this.providesPluginExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 56));
            this.provideNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 57));
            this.pluginEnablerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 58));
            this.providesPluginInstanceFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 59));
            this.providePluginInstanceManagerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 55));
            this.uncaughtExceptionPreHandlerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 60));
            this.providesPluginManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 54));
            this.provideMetricsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 61));
            this.provideViewConfigurationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 62));
            this.provideIBatteryStatsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 63));
            this.noLogcatEchoTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 64));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 65);
            this.executionImplProvider = switchingProvider;
            this.provideExecutionProvider = DoubleCheck.provider(switchingProvider);
            this.providesFingerprintManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 66));
            this.provideFaceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 67));
            this.providerLayoutInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 68));
            this.provideMainDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 69));
            this.provideLockPatternUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 70));
            this.mainDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 71));
            this.provideTrustManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 72));
            this.provideDevicePolicyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 73));
            this.provideConnectivityManagagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 74));
            this.provideSubscriptionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 75));
            this.provideTelephonyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 76));
            this.provideWifiManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 77));
            this.provideCarrierConfigManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 78));
            this.providesBiometricManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 79));
            this.provideCameraManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 80));
            this.provideIWallPaperManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 81);
            this.providesChoreographerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 82));
            this.provideIActivityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 83));
            this.provideNaturalRotationProgressProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 84));
            this.provideStatusBarScopedTransitionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 85));
            this.provideVibratorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 86));
            this.provideAudioManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 87));
            this.providePackageInstallerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 88));
            this.provideSatelliteManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 89));
            this.provideDeviceIdleControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 90));
            this.provideIUriGrantsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 91));
            this.provideNetworkScoreManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 92));
            this.provideIDreamManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 93));
            this.provideSensorPrivacyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 94));
            this.provideColorDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 95));
            this.provideBluetoothManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 97));
            this.provideBluetoothAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 96));
            this.provideSafetyCenterManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 98));
        }

        public final void initialize2(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, GlobalCoroutinesModule globalCoroutinesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule, HingeAngleProviderInternalModule hingeAngleProviderInternalModule, FoldStateProviderModule foldStateProviderModule, Context context, Boolean bool) {
            this.provideAlarmManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 99));
            this.provideIMediaProjectionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 100));
            this.provideRoleManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 101));
            this.provideMediaRouter2ManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 102);
            this.provideTelecomManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 103));
            this.provideInputMethodManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 104));
            this.providePowerExemptionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 105));
            this.provideKeyguardManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 106));
            this.provideSmartspaceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 107));
            this.provideIActivityTaskManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 108));
            this.provideShortcutManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 109));
            this.provideInputManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 110));
            this.provideLatencyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 111));
            this.vibrationUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 112));
            this.provideINotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 113));
            this.provideCrossWindowBlurListenersProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 114));
            this.provideJobSchedulerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 115));
            this.provideNearbyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 116));
            this.providePermissionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 117));
            this.provideLocationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 118));
            this.providePackageManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 119));
            this.provideScopedColorDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 120));
            this.provideUiModeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 121));
            this.unfoldTransitionProgressForwarderProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, 123);
            this.provideProgressForwarderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 122));
            this.mediaSdkSupportServiceClientProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 124));
            this.deviceControlOperationImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 125));
            this.deviceStatusOperationImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 126));
            this.mediaContentOperationImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 127));
            this.mediaOutputSelectedOperationImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 128));
            this.mediaPolicyOperationImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 129));
            this.externalClockProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 130));
            this.coverUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 131));
            this.provideVirtualDeviceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 132));
            this.provideIAudioServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 133));
            this.pluginDependencyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 134));
            this.provideOptionalVibratorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 135));
            this.provideIVrManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 136));
            this.provideStatusBarManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 137));
            this.coverUtilWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 138));
            this.provideNotificationManagerCompatProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 139));
            this.provideStatsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 140));
            this.provideDisplaySwitchLatencyLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 141));
            this.providesFoldStateLoggingProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 142));
            this.providesFoldStateLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 143));
            this.deviceStateRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 144));
            this.provideTextClassificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 145));
            this.provideClipboardManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 146));
            this.provideStorageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 147));
            this.provideOverlayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 148));
            this.unfoldBgDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 149));
            this.provideFoldLockSettingAvailabilityProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 150));
            this.unfoldKeyguardVisibilityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 151));
            this.provideIPackageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 152));
            this.provideOptionalTelecomManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 153));
            this.provideAsyncLayoutInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 154));
            this.provideCaptioningManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 155));
            this.lowLightTransitionCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, 156));
        }

        public final Resources mainResources() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.context);
        }

        public final SharedPreferences mainSharedPreferences() {
            FrameworkServicesModule frameworkServicesModule = this.frameworkServicesModule;
            Context context = this.context;
            frameworkServicesModule.getClass();
            SharedPreferences sharedPreferences = Prefs.get(context);
            Preconditions.checkNotNullFromProvides(sharedPreferences);
            return sharedPreferences;
        }

        public final MediaProjectionManager mediaProjectionManager() {
            MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) this.context.getSystemService(MediaProjectionManager.class);
            Preconditions.checkNotNullFromProvides(mediaProjectionManager);
            return mediaProjectionManager;
        }

        public final MediaSessionManager mediaSessionManager() {
            return FrameworkServicesModule_ProvideMediaSessionManagerFactory.provideMediaSessionManager(this.context);
        }

        public final List<String> namedListOfString() {
            return PluginsModule_ProvidesPrivilegedPluginsFactory.providesPrivilegedPlugins(this.context);
        }

        public final NotificationMessagingUtil notificationMessagingUtil() {
            AndroidInternalsModule androidInternalsModule = this.androidInternalsModule;
            Context context = this.context;
            androidInternalsModule.getClass();
            return new NotificationMessagingUtil(context, (Object) null);
        }

        public final PluginPrefs pluginPrefs() {
            return PluginsModule_ProvidesPluginPrefsFactory.providesPluginPrefs(this.context);
        }

        public final ScreenStatusProvider screenStatusProvider() {
            UnfoldTransitionModule unfoldTransitionModule = this.unfoldTransitionModule;
            LifecycleScreenStatusProvider lifecycleScreenStatusProvider = (LifecycleScreenStatusProvider) this.lifecycleScreenStatusProvider.get();
            unfoldTransitionModule.getClass();
            return lifecycleScreenStatusProvider;
        }

        public final SemWifiManager semWifiManager() {
            SemWifiManager semWifiManager = (SemWifiManager) this.context.getSystemService(WiFiManagerExt.SEM_WIFI_SERVICE);
            Preconditions.checkNotNullFromProvides(semWifiManager);
            return semWifiManager;
        }

        public final HingeAngleProvider unfoldBgHingeAngleProvider() {
            HingeAngleProviderInternalModule hingeAngleProviderInternalModule = this.hingeAngleProviderInternalModule;
            UnfoldTransitionConfig unfoldTransitionConfig = (UnfoldTransitionConfig) this.resourceUnfoldTransitionConfigProvider.get();
            Handler handler = (Handler) this.unfoldBgProgressHandlerProvider.get();
            SwitchingProvider.AnonymousClass6 anonymousClass6 = (SwitchingProvider.AnonymousClass6) this.factoryProvider6.get();
            hingeAngleProviderInternalModule.getClass();
            HingeAngleProvider create = ((Boolean) ((ResourceUnfoldTransitionConfig) unfoldTransitionConfig).isHingeAngleEnabled$delegate.getValue()).booleanValue() ? anonymousClass6.create(handler) : EmptyHingeAngleProvider.INSTANCE;
            Preconditions.checkNotNullFromProvides(create);
            return create;
        }

        public final HingeAngleProvider unfoldMainHingeAngleProvider() {
            HingeAngleProviderInternalModule hingeAngleProviderInternalModule = this.hingeAngleProviderInternalModule;
            UnfoldTransitionConfig unfoldTransitionConfig = (UnfoldTransitionConfig) this.resourceUnfoldTransitionConfigProvider.get();
            Handler handler = (Handler) this.provideMainHandlerProvider.get();
            SwitchingProvider.AnonymousClass6 anonymousClass6 = (SwitchingProvider.AnonymousClass6) this.factoryProvider6.get();
            hingeAngleProviderInternalModule.getClass();
            HingeAngleProvider create = ((Boolean) ((ResourceUnfoldTransitionConfig) unfoldTransitionConfig).isHingeAngleEnabled$delegate.getValue()).booleanValue() ? anonymousClass6.create(handler) : EmptyHingeAngleProvider.INSTANCE;
            Preconditions.checkNotNullFromProvides(create);
            return create;
        }

        public final UnfoldTransitionRepositoryImpl unfoldTransitionRepositoryImpl() {
            return new UnfoldTransitionRepositoryImpl((Optional) this.unfoldTransitionProgressProvider.get());
        }

        public final WallpaperManager wallpaperManager() {
            return FrameworkServicesModule_ProvideWallpaperManagerFactory.provideWallpaperManager(this.context);
        }

        private ReferenceGlobalRootComponentImpl(GlobalModule globalModule, AndroidInternalsModule androidInternalsModule, FrameworkServicesModule frameworkServicesModule, GlobalCoroutinesModule globalCoroutinesModule, UnfoldTransitionModule unfoldTransitionModule, UnfoldSharedModule unfoldSharedModule, UnfoldSharedInternalModule unfoldSharedInternalModule, UnfoldRotationProviderInternalModule unfoldRotationProviderInternalModule, HingeAngleProviderInternalModule hingeAngleProviderInternalModule, FoldStateProviderModule foldStateProviderModule, Context context, Boolean bool) {
            this.referenceGlobalRootComponentImpl = this;
            this.instrumentationTest = bool;
            this.context = context;
            this.unfoldTransitionModule = unfoldTransitionModule;
            this.unfoldSharedInternalModule = unfoldSharedInternalModule;
            this.foldStateProviderModule = foldStateProviderModule;
            this.unfoldSharedModule = unfoldSharedModule;
            this.hingeAngleProviderInternalModule = hingeAngleProviderInternalModule;
            this.unfoldRotationProviderInternalModule = unfoldRotationProviderInternalModule;
            this.globalModule = globalModule;
            this.globalCoroutinesModule = globalCoroutinesModule;
            this.androidInternalsModule = androidInternalsModule;
            this.frameworkServicesModule = frameworkServicesModule;
            initialize(globalModule, androidInternalsModule, frameworkServicesModule, globalCoroutinesModule, unfoldTransitionModule, unfoldSharedModule, unfoldSharedInternalModule, unfoldRotationProviderInternalModule, hingeAngleProviderInternalModule, foldStateProviderModule, context, bool);
            initialize2(globalModule, androidInternalsModule, frameworkServicesModule, globalCoroutinesModule, unfoldTransitionModule, unfoldSharedModule, unfoldSharedInternalModule, unfoldRotationProviderInternalModule, hingeAngleProviderInternalModule, foldStateProviderModule, context, bool);
        }
    }

    public final class ReferenceSysUIComponentBuilder implements ReferenceSysUIComponent.Builder {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public Optional<BackAnimationController.BackAnimationImpl> setBackAnimation;
        public Optional<Bubbles> setBubbles;
        public Optional<DesktopMode> setDesktopMode;
        public Optional<Object> setDisplayAreaHelper;
        public Optional<DisplayController> setDisplayController;
        public Optional<EnterSplitGestureHandler> setEnterSplitGestureHandler;
        public KeyguardTransitions setKeyguardTransitions;
        public Optional<OneHanded> setOneHanded;
        public Optional<Pip> setPip;
        public Optional<RecentTasks> setRecentTasks;
        public ShellInterface setShell;
        public ShellTransitions setShellTransitions;
        public Optional<SplitScreen> setSplitScreen;
        public Optional<SplitScreenController> setSplitScreenController;
        public Optional<StartingWindowController.StartingSurfaceImpl> setStartingSurface;
        public Optional<TaskViewFactoryController.TaskViewFactoryImpl> setTaskViewFactory;

        public /* synthetic */ ReferenceSysUIComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl);
        }

        public final ReferenceSysUIComponent build() {
            Preconditions.checkBuilderRequirement(ShellInterface.class, this.setShell);
            Preconditions.checkBuilderRequirement(Optional.class, this.setPip);
            Preconditions.checkBuilderRequirement(Optional.class, this.setSplitScreen);
            Preconditions.checkBuilderRequirement(Optional.class, this.setOneHanded);
            Preconditions.checkBuilderRequirement(Optional.class, this.setBubbles);
            Preconditions.checkBuilderRequirement(Optional.class, this.setTaskViewFactory);
            Preconditions.checkBuilderRequirement(ShellTransitions.class, this.setShellTransitions);
            Preconditions.checkBuilderRequirement(KeyguardTransitions.class, this.setKeyguardTransitions);
            Preconditions.checkBuilderRequirement(Optional.class, this.setStartingSurface);
            Preconditions.checkBuilderRequirement(Optional.class, this.setDisplayAreaHelper);
            Preconditions.checkBuilderRequirement(Optional.class, this.setRecentTasks);
            Preconditions.checkBuilderRequirement(Optional.class, this.setBackAnimation);
            Preconditions.checkBuilderRequirement(Optional.class, this.setDesktopMode);
            Preconditions.checkBuilderRequirement(Optional.class, this.setEnterSplitGestureHandler);
            Preconditions.checkBuilderRequirement(Optional.class, this.setSplitScreenController);
            Preconditions.checkBuilderRequirement(Optional.class, this.setDisplayController);
            return new ReferenceSysUIComponentImpl(this.referenceGlobalRootComponentImpl, new DependencyProvider(), new LeakModule(), new SharedLibraryModule(), new MediaProjectionDevicePolicyModule(), new SysUICoroutinesModule(), new SoundCraftNowBarViewModule(), new SysUIUnfoldModule(), this.setShell, this.setPip, this.setSplitScreen, this.setOneHanded, this.setBubbles, this.setTaskViewFactory, this.setShellTransitions, this.setKeyguardTransitions, this.setStartingSurface, this.setDisplayAreaHelper, this.setRecentTasks, this.setBackAnimation, this.setDesktopMode, this.setEnterSplitGestureHandler, this.setSplitScreenController, this.setDisplayController, 0);
        }

        public final ReferenceSysUIComponentBuilder setBackAnimation(Optional<BackAnimationController.BackAnimationImpl> optional) {
            optional.getClass();
            this.setBackAnimation = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setBubbles(Optional<Bubbles> optional) {
            optional.getClass();
            this.setBubbles = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setDesktopMode(Optional<DesktopMode> optional) {
            optional.getClass();
            this.setDesktopMode = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setDisplayAreaHelper(Optional<Object> optional) {
            optional.getClass();
            this.setDisplayAreaHelper = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setDisplayController(Optional<DisplayController> optional) {
            optional.getClass();
            this.setDisplayController = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setEnterSplitGestureHandler(Optional<EnterSplitGestureHandler> optional) {
            optional.getClass();
            this.setEnterSplitGestureHandler = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setKeyguardTransitions(KeyguardTransitions keyguardTransitions) {
            keyguardTransitions.getClass();
            this.setKeyguardTransitions = keyguardTransitions;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setOneHanded(Optional<OneHanded> optional) {
            optional.getClass();
            this.setOneHanded = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setPip(Optional<Pip> optional) {
            optional.getClass();
            this.setPip = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setRecentTasks(Optional<RecentTasks> optional) {
            optional.getClass();
            this.setRecentTasks = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setShell(ShellInterface shellInterface) {
            shellInterface.getClass();
            this.setShell = shellInterface;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setShellTransitions(ShellTransitions shellTransitions) {
            shellTransitions.getClass();
            this.setShellTransitions = shellTransitions;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setSplitScreen(Optional<SplitScreen> optional) {
            optional.getClass();
            this.setSplitScreen = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setSplitScreenController(Optional<SplitScreenController> optional) {
            optional.getClass();
            this.setSplitScreenController = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setStartingSurface(Optional<StartingWindowController.StartingSurfaceImpl> optional) {
            optional.getClass();
            this.setStartingSurface = optional;
            return this;
        }

        public final ReferenceSysUIComponentBuilder setTaskViewFactory(Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional) {
            optional.getClass();
            this.setTaskViewFactory = optional;
            return this;
        }

        private ReferenceSysUIComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
        }
    }

    public final class ReferenceSysUIComponentImpl implements ReferenceSysUIComponent {
        public Provider aODAmbientWallpaperHelperProvider;
        public Provider aODTouchModeManagerProvider;
        public Provider aUIFacadeImplProvider;
        public Provider accessibilityButtonModeObserverProvider;
        public Provider accessibilityButtonTargetsObserverProvider;
        public Provider accessibilityFloatingMenuControllerProvider;
        public Provider accessibilityInteractorProvider;
        public Provider accessibilityManagerWrapperProvider;
        public Provider accessibilityQsShortcutsRepositoryImplProvider;
        public Provider accessibilityTilesInteractorProvider;
        public Provider actionIntentExecutorProvider;
        public Provider activeNoiseCancelingViewModelProvider;
        public Provider activeNotificationListRepositoryProvider;
        public Provider activeNotificationsInteractorProvider;
        public Provider activeUnlockConfigProvider;
        public Provider activityIntentHelperProvider;
        public Provider activityStarterImplProvider;
        public Provider activityTaskManagerProxyProvider;
        public Provider activityTaskManagerTasksRepositoryProvider;
        public Provider adapterProvider;
        public Provider adaptiveViewModelProvider;
        public Provider aiBriefManagerImplProvider;
        public Provider airplaneModeInteractorProvider;
        public Provider airplaneModeRepositoryImplProvider;
        public Provider airplaneModeTileProvider;
        public Provider airplaneModeViewModelImplProvider;
        public Provider alarmTileProvider;
        public Provider alternateBouncerDependenciesProvider;
        public Provider alternateBouncerInteractorProvider;
        public Provider alternateBouncerToAodTransitionViewModelProvider;
        public Provider alternateBouncerToDozingTransitionViewModelProvider;
        public Provider alternateBouncerToGoneTransitionViewModelProvider;
        public Provider alternateBouncerToOccludedTransitionViewModelProvider;
        public Provider alternateBouncerToPrimaryBouncerTransitionViewModelProvider;
        public Provider alternateBouncerUdfpsAccessibilityOverlayViewModelProvider;
        public Provider alternateBouncerViewBinderProvider;
        public Provider alternateBouncerWindowViewModelProvider;
        public Provider alwaysOnDisplayPolicyProvider;
        public Provider ambientSoundViewModelProvider;
        public Provider ambientStateProvider;
        public Provider ambientVolumeViewModelProvider;
        public Provider animatedImageNotificationManagerProvider;
        public Provider aodAlphaViewModelProvider;
        public Provider aodBurnInViewModelProvider;
        public Provider aodToGoneTransitionViewModelProvider;
        public Provider aodToLockscreenTransitionViewModelProvider;
        public Provider aodToOccludedTransitionViewModelProvider;
        public Provider aodToPrimaryBouncerTransitionViewModelProvider;
        public Provider appClipsActivityProvider;
        public Provider appClipsCrossProcessHelperProvider;
        public Provider appClipsScreenshotHelperServiceProvider;
        public Provider appClipsServiceProvider;
        public Provider appClipsTrampolineActivityProvider;
        public Provider appControllerProvider;
        public Provider appLockNotificationControllerImplProvider;
        public Provider appOpsControllerImplProvider;
        public Provider appOpsPrivacyItemMonitorProvider;
        public Provider assistContentRequesterProvider;
        public Provider assistInteractorProvider;
        public Provider assistLoggerProvider;
        public Provider assistManagerProvider;
        public Provider assistRepositoryProvider;
        public Provider assistantAttentionMonitorProvider;
        public Provider assistantFeedbackControllerProvider;
        public Provider asyncSensorManagerProvider;
        public Provider audioEffectBoxViewModelProvider;
        public Provider audioEffectHeaderViewModelProvider;
        public Provider audioMirroringDeviceControllerProvider;
        public Provider audioPlaybackManagerProvider;
        public Provider authControllerProvider;
        public Provider authRippleControllerProvider;
        public Provider authRippleInteractorProvider;
        public Provider authenticationInteractorProvider;
        public Provider authenticationRepositoryImplProvider;
        public Provider autoAddInteractorProvider;
        public Provider autoAddSettingRepositoryProvider;
        public Provider autoHideControllerProvider;
        public Provider avalancheControllerProvider;
        public Provider avalancheProvider;
        public Provider backActionInteractorProvider;
        public Provider backlightDialogViewModelProvider;
        public Provider badgeProviderImplProvider;
        public Provider barOrderInteractorProvider;
        public Provider barOrderRepositoryProvider;
        public Provider batteryControllerLoggerProvider;
        public Provider batteryControllerStartableProvider;
        public Provider batteryInfoBoxViewModelProvider;
        public Provider batterySaverTileProvider;
        public Provider bgApplicationScopeProvider;
        public Provider bgCoroutineContextProvider;
        public Provider bgDispatcherProvider;
        public Provider bigPictureStatsManagerProvider;
        public Provider bindCapturePolicyListProvider;
        public Provider bindDeviceProvisionedControllerProvider;
        public Provider bindDisplayContentRepositoryProvider;
        public Provider bindEventLogProvider;
        public Provider bindEventManagerImplProvider;
        public Provider bindInternetTileProvider;
        public Provider bindPackageLabelIconProvider;
        public Provider bindProfileFirstRunResourcesProvider;
        public Provider bindProfileFirstRunSettingsProvider;
        public Provider bindProfileTypeRepositoryProvider;
        public Provider bindRotationPolicyWrapperProvider;
        public Provider bindScreenshotRequestProcessorProvider;
        public Provider bindSystemClockProvider;
        public Provider bindSystemStatusAnimationSchedulerProvider;
        public Provider bindSystemUiProxyProvider;
        public Provider bindableIconsRegistryImplProvider;
        public Provider binderCallMonitorImplProvider;
        public Provider bindsReaderProvider;
        public Provider biometricMessageInteractorProvider;
        public Provider biometricNotificationBroadcastReceiverProvider;
        public Provider biometricNotificationDialogFactoryProvider;
        public Provider biometricNotificationServiceProvider;
        public Provider biometricSettingsRepositoryImplProvider;
        public Provider biometricStatusInteractorImplProvider;
        public Provider biometricStatusRepositoryImplProvider;
        public Provider biometricUnlockControllerProvider;
        public Provider biometricUnlockInteractorProvider;
        public Provider biometricUnlockLoggerProvider;
        public Provider blueLightFilterTileProvider;
        public Provider bluetoothControllerImplProvider;
        public Provider bluetoothDeviceControllerProvider;
        public Provider bluetoothDeviceManagerProvider;
        public Provider bluetoothLoggerProvider;
        public Provider bluetoothRepositoryImplProvider;
        public Provider blurFacadeImplProvider;
        public Provider blurUtilsProvider;
        public Provider bootAnimationFinishedCacheImplProvider;
        public Provider bootCompleteCacheImplProvider;
        public Provider bouncerActionButtonInteractorProvider;
        public Provider bouncerDialogFactoryProvider;
        public Provider bouncerInteractorProvider;
        public Provider bouncerLoggerProvider;
        public Provider bouncerLoggerStartableProvider;
        public Provider bouncerMessageAuditLoggerProvider;
        public Provider bouncerMessageInteractorProvider;
        public Provider bouncerMessageRepositoryImplProvider;
        public Provider bouncerRepositoryProvider;
        public Provider bouncerSceneProvider;
        public Provider bouncerViewBinderProvider;
        public Provider bouncerViewImplProvider;
        public Provider bouncerlessScrimControllerProvider;
        public Provider briefLoggerProvider;
        public Provider briefNotificationControllerProvider;
        public Provider briefNowBarControllerProvider;
        public Provider briefViewControllerProvider;
        public Provider brightLineFalsingManagerProvider;
        public Provider brightnessDialogProvider;
        public Provider brightnessMirrorShowingInteractorProvider;
        public Provider brightnessMirrorShowingRepositoryProvider;
        public Provider brightnessMirrorViewModelProvider;
        public Provider brightnessPolicyEnforcementInteractorProvider;
        public Provider brightnessPolicyRepositoryImplProvider;
        public Provider brightnessSliderViewModelProvider;
        public Provider broadcastDialogControllerProvider;
        public Provider broadcastDispatcherProvider;
        public Provider broadcastDispatcherStartableProvider;
        public Provider broadcastSenderProvider;
        public Provider budsSettingIntentFactoryProvider;
        public Provider builderProvider;
        public Provider builderProvider2;
        public Provider builderProvider3;
        public Provider builtInDeviceControllerProvider;
        public Provider burnInInteractorProvider;
        public Provider callChipInteractorProvider;
        public Provider callChipViewModelProvider;
        public Provider callbackHandlerProvider;
        public Provider cameraAutoRotateRepositoryImplProvider;
        public Provider cameraGestureHelperProvider;
        public Provider cameraLauncherProvider;
        public Provider cameraQuickAffordanceConfigProvider;
        public Provider cameraSensorPrivacyRepositoryImplProvider;
        public Provider cameraToggleTileProvider;
        public Provider capturedBlurContainerControllerProvider;
        public Provider carLifeManagerProvider;
        public Provider carrierConfigCoreStartableProvider;
        public Provider carrierConfigRepositoryProvider;
        public Provider carrierConfigTrackerProvider;
        public Provider carrierInfoUtilProvider;
        public Provider carrierInfraMediatorImplProvider;
        public Provider carrierTextUtilProvider;
        public Provider castAutoAddableProvider;
        public Provider castControllerImplProvider;
        public Provider castTileProvider;
        public Provider castToOtherDeviceChipViewModelProvider;
        public Provider centralSurfacesCommandQueueCallbacksProvider;
        public Provider centralSurfacesImplProvider;
        public Provider channelEditorDialogControllerProvider;
        public Provider chipbarAnimatorProvider;
        public Provider chipbarCoordinatorProvider;
        public Provider chipbarLoggerProvider;
        public Provider chromeCastDeviceControllerProvider;
        public Provider clipboardListenerProvider;
        public Provider clipboardOverlayControllerProvider;
        public Provider clockSectionProvider;
        public Provider collapsedStatusBarFragmentProvider;
        public Provider collapsedStatusBarFragmentStartableProvider;
        public Provider collapsedStatusBarViewBinderImplProvider;
        public Provider collapsedStatusBarViewModelImplProvider;
        public Provider colorAdjustmentTileProvider;
        public Provider colorCorrectionRepositoryImplProvider;
        public Provider colorCorrectionTileProvider;
        public Provider colorInversionRepositoryImplProvider;
        public Provider colorInversionTileProvider;
        public Provider colorLensTileProvider;
        public Provider colorUpdateLoggerProvider;
        public Provider coloredBGHelperProvider;
        public Provider commandRegistryProvider;
        public Provider commonUtilProvider;
        public Provider communalAppWidgetHostStartableProvider;
        public Provider communalBackupRestoreStartableProvider;
        public Provider communalColorsImplProvider;
        public Provider communalDreamStartableProvider;
        public Provider communalEditModeViewModelProvider;
        public Provider communalInteractorProvider;
        public Provider communalLoggerStartableProvider;
        public Provider communalMediaRepositoryImplProvider;
        public Provider communalPrefsRepositoryImplProvider;
        public Provider communalSceneInteractorProvider;
        public Provider communalSceneProvider;
        public Provider communalSceneRepositoryImplProvider;
        public Provider communalSceneStartableProvider;
        public Provider communalSettingsInteractorProvider;
        public Provider communalSettingsRepositoryImplProvider;
        public Provider communalSmartspaceControllerProvider;
        public Provider communalTransitionViewModelProvider;
        public Provider communalTutorialDisabledRepositoryImplProvider;
        public Provider communalTutorialInteractorProvider;
        public Provider communalViewModelProvider;
        public Provider communalWidgetRepositoryImplProvider;
        public Provider composeBouncerDependenciesProvider;
        public Provider configurationControllerImplProvider;
        public Provider configurationControllerStartableProvider;
        public Provider configurationInteractorProvider;
        public Provider configurationRepositoryImplProvider;
        public Provider connectedDisplayInteractorImplProvider;
        public Provider connectingDisplayViewModelProvider;
        public Provider connectivityConstantsProvider;
        public Provider connectivityInputLoggerProvider;
        public Provider connectivityRepositoryImplProvider;
        public Provider connectivitySlotsProvider;
        public Provider containerConfigProvider;
        public Provider contextComponentResolverProvider;
        public Provider controlActionCoordinatorImplProvider;
        public Provider controlsActivityStarterImplProvider;
        public Provider controlsBackupRestoreReceiverProvider;
        public Provider controlsBindingControllerImplProvider;
        public Provider controlsComponentProvider;
        public Provider controlsControllerImplProvider;
        public Provider controlsFragmentFactoryProvider;
        public Provider controlsListingControllerImplProvider;
        public Provider controlsMetricsLoggerImplProvider;
        public Provider controlsRequestDialogProvider;
        public Provider controlsRequestReceiverProvider;
        public Provider controlsSettingActivityProvider;
        public Provider controlsSettingsRepositoryImplProvider;
        public Provider controlsStartableProvider;
        public Provider conversationNotificationManagerProvider;
        public Provider cornerGestureHandlerProvider;
        public Provider countDownTimerUtilProvider;
        public Provider coverHomeActivityProvider;
        public Provider coverHostImplProvider;
        public Provider coverPrivacyDotDecorProviderFactoryProvider;
        public Provider coverPrivacyDotViewControllerProvider;
        public Provider coverScreenIconControllerProvider;
        public Provider coverScreenManagerProvider;
        public Provider coverWallpaperControllerProvider;
        public Provider coverWindowDelegateProvider;
        public Provider createNoteTaskShortcutActivityProvider;
        public Provider createUserActivityProvider;
        public Provider credentialInteractorImplProvider;
        public Provider credentialViewModelProvider;
        public Provider currentTilesInteractorImplProvider;
        public Provider customTileAddedSharedPrefsRepositoryProvider;
        public Provider customTileMapperProvider;
        public Provider darkIconDispatcherImplProvider;
        public Provider darkIconRepositoryImplProvider;
        public Provider dataSaverAutoAddableProvider;
        public Provider dataSaverTileProvider;
        public Provider dataUsageLabelManagerProvider;
        public Provider dcmMascotViewContainerProvider;
        public Provider debugModeFilterProvider;
        public Provider defaultKeyguardBlueprintProvider;
        public Provider defaultTilesQSHostRepositoryProvider;
        public Provider defaultUdfpsTouchOverlayViewModelProvider;
        public Provider defaultUiControllerProvider;
        public Provider demoDeviceBasedSatelliteDataSourceProvider;
        public Provider demoDeviceBasedSatelliteRepositoryProvider;
        public Provider demoModeMobileConnectionDataSourceProvider;
        public Provider demoModeWifiDataSourceProvider;
        public final DependencyProvider dependencyProvider;
        public Provider dependencyProvider2;
        public Provider deviceAudioPathViewModelFactoryProvider;
        public Provider deviceBasedSatelliteBindableIconProvider;
        public Provider deviceBasedSatelliteInteractorProvider;
        public Provider deviceBasedSatelliteRepositoryImplProvider;
        public Provider deviceBasedSatelliteRepositorySwitcherProvider;
        public Provider deviceBasedSatelliteViewModelImplProvider;
        public Provider deviceConfigProxyProvider;
        public Provider deviceControllerProvider;
        public Provider deviceEntryBackgroundViewModelProvider;
        public Provider deviceEntryBiometricAuthInteractorProvider;
        public Provider deviceEntryBiometricSettingsInteractorProvider;
        public Provider deviceEntryFaceAuthRepositoryImplProvider;
        public Provider deviceEntryFingerprintAuthInteractorProvider;
        public Provider deviceEntryFingerprintAuthRepositoryImplProvider;
        public Provider deviceEntryForegroundViewModelProvider;
        public Provider deviceEntryHapticsInteractorProvider;
        public Provider deviceEntryIconLoggerProvider;
        public Provider deviceEntryIconViewModelProvider;
        public Provider deviceEntryInteractorProvider;
        public Provider deviceEntryRepositoryImplProvider;
        public Provider deviceEntrySideFpsOverlayInteractorProvider;
        public Provider deviceEntrySourceInteractorProvider;
        public Provider deviceEntryUdfpsInteractorProvider;
        public Provider deviceEntryUdfpsTouchOverlayViewModelProvider;
        public Provider devicePostureControllerImplProvider;
        public Provider devicePostureInteractorProvider;
        public Provider devicePostureRepositoryImplProvider;
        public Provider deviceProvisionedControllerImplProvider;
        public Provider deviceProvisioningInteractorProvider;
        public Provider deviceStateRotationLockSettingControllerProvider;
        public Provider deviceTypeWrapperProvider;
        public Provider deviceUnlockedInteractorProvider;
        public Provider disableFlagsLoggerProvider;
        public Provider disableFlagsRepositoryImplProvider;
        public Provider disabledByPolicyInteractorImplProvider;
        public Provider disabledWifiRepositoryProvider;
        public Provider disconnectedDeviceControllerProvider;
        public Provider dismissCallbackRegistryProvider;
        public Provider displayContentRepositoryImplProvider;
        public Provider displayLifecycleProvider;
        public Provider displayManagerWrapperProvider;
        public Provider displayMetricsRepositoryProvider;
        public Provider displayRepositoryImplProvider;
        public Provider displayStateInteractorImplProvider;
        public Provider displayStateRepositoryImplProvider;
        public Provider displaySwitchLatencyTrackerProvider;
        public Provider dndTileProvider;
        public Provider doNotDisturbQuickAffordanceConfigProvider;
        public Provider dockManagerImplProvider;
        public Provider dolbyViewModelProvider;
        public Provider dozeChargingHelperProvider;
        public Provider dozeInteractorProvider;
        public Provider dozeLogProvider;
        public Provider dozeParametersProvider;
        public Provider dozeScrimControllerProvider;
        public Provider dozeServiceHostProvider;
        public Provider dozeServiceProvider;
        public Provider dozeTransitionListenerProvider;
        public Provider dozingToGoneTransitionViewModelProvider;
        public Provider dozingToLockscreenTransitionViewModelProvider;
        public Provider dozingToOccludedTransitionViewModelProvider;
        public Provider dozingToPrimaryBouncerTransitionViewModelProvider;
        public Provider dreamMonitorProvider;
        public Provider dreamOverlayCallbackControllerProvider;
        public Provider dreamOverlayServiceProvider;
        public Provider dreamOverlayStateControllerProvider;
        public Provider dreamOverlayStatusBarItemsProvider;
        public Provider dreamTileProvider;
        public Provider dreamViewModelProvider;
        public Provider dreamingHostedToLockscreenTransitionViewModelProvider;
        public Provider dreamingToAodTransitionViewModelProvider;
        public Provider dreamingToGlanceableHubTransitionViewModelProvider;
        public Provider dreamingToGoneTransitionViewModelProvider;
        public Provider dreamingToLockscreenTransitionViewModelProvider;
        public Provider dynamicPrivacyControllerProvider;
        public Provider editModeViewModelProvider;
        public Provider editTilesListInteractorProvider;
        public Provider editWidgetsActivityProvider;
        public Provider emergencyAffordanceManagerProvider;
        public Provider emergencyServicesRepositoryProvider;
        public Provider emptyLockIconViewControllerProvider;
        public Provider encryptDecryptWrapperProvider;
        public Provider endMediaProjectionDialogHelperProvider;
        public Provider engineeringModeManagerWrapperProvider;
        public Provider enhancedEstimatesImplProvider;
        public Provider equalizerViewModelProvider;
        public Provider ethernetInteractorProvider;
        public Provider eventLogImplProvider;
        public Provider extensionControllerImplProvider;
        public Provider faceAuthAccessibilityDelegateProvider;
        public Provider faceAuthenticationLoggerProvider;
        public Provider faceHelpMessageDeferralFactoryProvider;
        public Provider faceHelpMessageDeferralInteractorProvider;
        public Provider facePropertyRepositoryImplProvider;
        public Provider faceScanningProviderFactoryProvider;
        public Provider faceSettingsRepositoryImplProvider;
        public Provider faceWakeUpTriggersConfigImplProvider;
        public Provider faceWidgetContainerWrapperProvider;
        public Provider faceWidgetDisplayLifeCycleWrapperProvider;
        public Provider faceWidgetKeyguardStatusCallbackWrapperProvider;
        public Provider faceWidgetKeyguardUpdateMonitorWrapperProvider;
        public Provider faceWidgetKnoxStateMonitorWrapperProvider;
        public Provider faceWidgetLockPatternUtilsWrapperProvider;
        public Provider faceWidgetLockscreenShadeTransitionControllerWrapperProvider;
        public Provider faceWidgetNotificationControllerWrapperProvider;
        public Provider faceWidgetPluginControllerImplProvider;
        public Provider faceWidgetPluginLockManagerWrapperProvider;
        public Provider faceWidgetPositionAlgorithmWrapperProvider;
        public Provider faceWidgetWakefulnessLifecycleWrapperProvider;
        public Provider faceWidgetWallpaperUtilsWrapperProvider;
        public Provider factoryProvider;
        public Provider factoryProvider10;
        public Provider factoryProvider11;
        public Provider factoryProvider12;
        public Provider factoryProvider13;
        public Provider factoryProvider14;
        public Provider factoryProvider15;
        public Provider factoryProvider16;
        public Provider factoryProvider17;
        public Provider factoryProvider18;
        public Provider factoryProvider19;
        public Provider factoryProvider2;
        public Provider factoryProvider20;
        public Provider factoryProvider21;
        public Provider factoryProvider22;
        public Provider factoryProvider23;
        public Provider factoryProvider24;
        public Provider factoryProvider25;
        public Provider factoryProvider26;
        public Provider factoryProvider27;
        public Provider factoryProvider28;
        public Provider factoryProvider29;
        public Provider factoryProvider3;
        public Provider factoryProvider30;
        public Provider factoryProvider31;
        public Provider factoryProvider32;
        public Provider factoryProvider33;
        public Provider factoryProvider34;
        public Provider factoryProvider35;
        public Provider factoryProvider36;
        public Provider factoryProvider37;
        public Provider factoryProvider38;
        public Provider factoryProvider39;
        public Provider factoryProvider4;
        public Provider factoryProvider40;
        public Provider factoryProvider41;
        public Provider factoryProvider42;
        public Provider factoryProvider43;
        public Provider factoryProvider44;
        public Provider factoryProvider45;
        public Provider factoryProvider46;
        public Provider factoryProvider47;
        public Provider factoryProvider48;
        public Provider factoryProvider49;
        public Provider factoryProvider5;
        public Provider factoryProvider50;
        public Provider factoryProvider51;
        public Provider factoryProvider6;
        public Provider factoryProvider7;
        public Provider factoryProvider8;
        public Provider factoryProvider9;
        public Provider fakeCarrierInfraMediatorImplProvider;
        public Provider falsingCollectorImplProvider;
        public Provider falsingCollectorNoOpProvider;
        public Provider falsingCoreStartableProvider;
        public Provider falsingDataProvider;
        public Provider falsingInteractorProvider;
        public Provider falsingManagerProxyProvider;
        public Provider featureFlagsClassicReleaseProvider;
        public Provider featureFlagsReleaseStartableProvider;
        public Provider fgsManagerControllerImplProvider;
        public Provider filesProvider;
        public Provider fingerprintPropertyInteractorProvider;
        public Provider fingerprintPropertyRepositoryImplProvider;
        public Provider flagDependenciesNotifierProvider;
        public Provider flagDependenciesProvider;
        public Provider flashlightControllerImplProvider;
        public Provider flashlightQuickAffordanceConfigProvider;
        public Provider flashlightTileProvider;
        public Provider flexModePanelProvider;
        public Provider fontScalingDialogDelegateProvider;
        public Provider fontScalingTileProvider;
        public Provider footerActionsControllerProvider;
        public Provider footerActionsInteractorImplProvider;
        public Provider foregroundServicesDialogProvider;
        public Provider foregroundServicesRepositoryImplProvider;
        public Provider fragmentServiceProvider;
        public Provider fromAlternateBouncerTransitionInteractorProvider;
        public Provider fromAodTransitionInteractorProvider;
        public Provider fromDozingTransitionInteractorProvider;
        public Provider fromDreamingLockscreenHostedTransitionInteractorProvider;
        public Provider fromDreamingTransitionInteractorProvider;
        public Provider fromGlanceableHubTransitionInteractorProvider;
        public Provider fromGoneTransitionInteractorProvider;
        public Provider fromLockscreenTransitionInteractorProvider;
        public Provider fromOccludedTransitionInteractorProvider;
        public Provider fromPrimaryBouncerTransitionInteractorProvider;
        public Provider fullExpansionPanelNotiAlphaControllerProvider;
        public Provider gesturePointerEventDetectorProvider;
        public Provider gesturePointerEventListenerProvider;
        public Provider getClockRegistryProvider;
        public Provider glanceableHubContainerControllerProvider;
        public Provider glanceableHubQuickAffordanceConfigProvider;
        public Provider glanceableHubToDreamingTransitionViewModelProvider;
        public Provider glanceableHubToLockscreenTransitionViewModelProvider;
        public Provider glanceableHubToOccludedTransitionViewModelProvider;
        public Provider globalActionsComponentProvider;
        public Provider globalActionsDialogLiteProvider;
        public Provider globalActionsImplProvider;
        public Provider globalActionsInteractorProvider;
        public Provider globalActionsRepositoryProvider;
        public Provider goneSceneProvider;
        public Provider goneSceneViewModelProvider;
        public Provider goneToAodTransitionViewModelProvider;
        public Provider goneToDozingTransitionViewModelProvider;
        public Provider goneToDreamingLockscreenHostedTransitionViewModelProvider;
        public Provider goneToDreamingTransitionViewModelProvider;
        public Provider goneToGlanceableHubTransitionViewModelProvider;
        public Provider goneToLockscreenTransitionViewModelProvider;
        public Provider gridConsistencyInteractorProvider;
        public Provider gridLayoutTypeInteractorProvider;
        public Provider gridLayoutTypeRepositoryImplProvider;
        public Provider groupExpansionManagerImplProvider;
        public Provider groupMembershipManagerImplProvider;
        public Provider guestResetOrExitSessionReceiverProvider;
        public Provider guestResumeSessionReceiverProvider;
        public Provider guestUserInteractorProvider;
        public Provider headerBatteryStatusChipControllerProvider;
        public Provider headlessSystemUserModeImplProvider;
        public Provider headsUpManagerPhoneProvider;
        public Provider headsUpNotificationIconViewStateRepositoryProvider;
        public Provider headsUpStyleProviderImplProvider;
        public Provider headsUpViewBinderProvider;
        public Provider heapDumpHelperProvider;
        public Provider hearingDevicesCheckerProvider;
        public Provider hearingDevicesDialogManagerProvider;
        public Provider hearingDevicesDialogReceiverProvider;
        public Provider hearingDevicesTileProvider;
        public Provider hideListViewModelProvider;
        public Provider hideNotificationsInteractorProvider;
        public Provider highContrastFontTileProvider;
        public Provider highPriorityProvider;
        public Provider historyTrackerProvider;
        public Provider homeControlsComponentInteractorProvider;
        public Provider homeControlsDreamServiceProvider;
        public Provider homeControlsDreamStartableProvider;
        public Provider homeControlsKeyguardQuickAffordanceConfigProvider;
        public Provider homeSceneFamilyResolverProvider;
        public Provider hotspotAutoAddableProvider;
        public Provider hotspotControllerImplProvider;
        public Provider hotspotTileProvider;
        public Provider iconAndNameCustomRepositoryProvider;
        public Provider iconLabelVisibilityInteractorProvider;
        public Provider iconLabelVisibilityViewModelImplProvider;
        public Provider iconManagerProvider;
        public Provider iconTilesInteractorProvider;
        public Provider iconTilesRepositoryImplProvider;
        public Provider iconTilesViewModelImplProvider;
        public Provider imageCaptureImplProvider;
        public Provider imageLoaderProvider;
        public Provider imageWallpaperProvider;
        public Provider immersiveModeConfirmationProvider;
        public Provider implProvider;
        public Provider imsRegStateUtilProvider;
        public Provider inWindowLauncherAnimationViewModelProvider;
        public Provider inWindowLauncherUnlockAnimationInteractorProvider;
        public Provider inWindowLauncherUnlockAnimationManagerProvider;
        public Provider inWindowLauncherUnlockAnimationRepositoryProvider;
        public Provider indicationHelperProvider;
        public Provider indicatorCutoutUtilProvider;
        public Provider indicatorGardenAlgorithmFactoryProvider;
        public Provider indicatorGardenInputPropertiesProvider;
        public Provider indicatorGardenPresenterProvider;
        public Provider indicatorGardenViewTreeLogHelperProvider;
        public Provider indicatorScaleGardenerProvider;
        public Provider indicatorTouchHandlerProvider;
        public Provider infiniteGridConsistencyInteractorProvider;
        public Provider infiniteGridLayoutProvider;
        public Provider infiniteGridSizeInteractorProvider;
        public Provider infiniteGridSizeRepositoryProvider;
        public Provider infiniteGridSizeViewModelImplProvider;
        public Provider initControllerProvider;
        public Provider injectionInflationControllerProvider;
        public Provider inputMethodInteractorProvider;
        public Provider inputMethodRepositoryImplProvider;
        public Provider installedTilesComponentRepositoryImplProvider;
        public Provider instantAppNotifierProvider;
        public Provider interactorFactoryProvider;
        public Provider internetDialogManagerProvider;
        public Provider internetTileViewModelProvider;
        public Provider isPMLiteEnabledProvider;
        public Provider isReduceBrightColorsAvailableProvider;
        public Provider issueRecordingServiceProvider;
        public Provider issueRecordingStateProvider;
        public Provider javaAdapterProvider;
        public Provider keyEventInteractorProvider;
        public Provider keyEventRepositoryImplProvider;
        public Provider keyboardBacklightDialogCoordinatorProvider;
        public Provider keyboardBacklightInteractorProvider;
        public Provider keyboardDockingIndicationInteractorProvider;
        public Provider keyboardDockingIndicationViewBinderProvider;
        public Provider keyboardDockingIndicationViewModelProvider;
        public Provider keyboardRepositoryImplProvider;
        public Provider keyboardShortcutsReceiverProvider;
        public Provider keyboardUIProvider;
        public Provider keyguardBiometricLockoutLoggerProvider;
        public Provider keyguardBlueprintCommandListenerProvider;
        public Provider keyguardBlueprintInteractorProvider;
        public Provider keyguardBlueprintRepositoryProvider;
        public Provider keyguardBottomAreaInteractorProvider;
        public Provider keyguardBouncerRepositoryImplProvider;
        public Provider keyguardBypassControllerProvider;
        public Provider keyguardClockInteractorProvider;
        public Provider keyguardClockRepositoryImplProvider;
        public Provider keyguardClockViewModelProvider;
        public Provider keyguardDismissActionBinderProvider;
        public Provider keyguardDismissActionInteractorProvider;
        public Provider keyguardDismissBinderProvider;
        public Provider keyguardDismissInteractorProvider;
        public Provider keyguardDismissUtilProvider;
        public Provider keyguardDisplayManagerProvider;
        public Provider keyguardEnabledInteractorProvider;
        public Provider keyguardFastBioUnlockControllerProvider;
        public Provider keyguardFixedRotationMonitorProvider;
        public Provider keyguardFoldControllerConfigImplProvider;
        public Provider keyguardFoldControllerDependencyImplProvider;
        public Provider keyguardFoldControllerImplProvider;
        public Provider keyguardInteractorProvider;
        public Provider keyguardKeyEventInteractorProvider;
        public Provider keyguardKeyboardInteractorProvider;
        public Provider keyguardLifecyclesDispatcherProvider;
        public Provider keyguardLongPressInteractorProvider;
        public Provider keyguardLongPressViewModelProvider;
        public Provider keyguardMediaControllerProvider;
        public Provider keyguardNotificationVisibilityProviderImplProvider;
        public Provider keyguardOcclusionInteractorProvider;
        public Provider keyguardOcclusionRepositoryProvider;
        public Provider keyguardPresentationDisablerProvider;
        public Provider keyguardPreviewRendererFactoryProvider;
        public Provider keyguardQuickAffordanceInteractorProvider;
        public Provider keyguardQuickAffordanceLegacySettingSyncerProvider;
        public Provider keyguardQuickAffordanceLocalUserSelectionManagerProvider;
        public Provider keyguardQuickAffordanceRemoteUserSelectionManagerProvider;
        public Provider keyguardQuickAffordanceRepositoryProvider;
        public Provider keyguardRemotePreviewManagerProvider;
        public Provider keyguardRepositoryImplProvider;
        public Provider keyguardRootViewModelProvider;
        public Provider keyguardSecBottomAreaViewControllerProvider;
        public Provider keyguardSecLegacyUnlockAnimationControllerImplProvider;
        public Provider keyguardSecUpdateMonitorImplProvider;
        public Provider keyguardSecurityModelProvider;
        public Provider keyguardServiceProvider;
        public Provider keyguardShortcutManagerProvider;
        public Provider keyguardSmartspaceInteractorProvider;
        public Provider keyguardSmartspaceRepositoryImplProvider;
        public Provider keyguardSmartspaceViewModelProvider;
        public Provider keyguardStateControllerImplProvider;
        public Provider keyguardStatusBarInteractorProvider;
        public Provider keyguardStatusBarRepositoryImplProvider;
        public Provider keyguardStatusBarViewModelProvider;
        public Provider keyguardStatusViewAlphaChangeControllerWrapperProvider;
        public Provider keyguardSurfaceBehindInteractorProvider;
        public Provider keyguardSurfaceBehindParamsApplierProvider;
        public Provider keyguardSurfaceBehindRepositoryImplProvider;
        public Provider keyguardSurfaceBehindViewModelProvider;
        public Provider keyguardSurfaceControllerImplProvider;
        public Provider keyguardSysDumpTriggerProvider;
        public Provider keyguardTouchAnimatorProvider;
        public Provider keyguardTouchDymLockInjectorProvider;
        public Provider keyguardTouchLoggingInjectorProvider;
        public Provider keyguardTouchSecurityInjectorProvider;
        public Provider keyguardTransitionAnimationFlowProvider;
        public Provider keyguardTransitionAuditLoggerProvider;
        public Provider keyguardTransitionBootInteractorProvider;
        public Provider keyguardTransitionCoreStartableProvider;
        public Provider keyguardTransitionInteractorProvider;
        public Provider keyguardTransitionRepositoryImplProvider;
        public Provider keyguardViewConfiguratorProvider;
        public Provider keyguardViewMediatorHelperImplProvider;
        public Provider keyguardVisibilityMonitorProvider;
        public Provider keyguardWallpaperControllerProvider;
        public Provider knoxStatusBarControlInteractorProvider;
        public Provider knoxStatusBarControlRepositoryImplProvider;
        public Provider labsViewModelProvider;
        public Provider largeScreenHeaderHelperProvider;
        public Provider largeScreenShadeInterpolatorImplProvider;
        public Provider latencyTesterProvider;
        public Provider launchConversationActivityProvider;
        public Provider launchFullScreenIntentProvider;
        public Provider launchNoteTaskActivityProvider;
        public Provider launchNotesRoleSettingsTrampolineActivityProvider;
        public final LeakModule leakModule;
        public Provider legacyActivityStarterInternalImplProvider;
        public Provider legacyBouncerDependenciesProvider;
        public Provider legacyMediaDataManagerImplProvider;
        public Provider legacyNotificationIconAreaControllerImplProvider;
        public Provider letterboxAppearanceCalculatorProvider;
        public Provider letterboxBackgroundProvider;
        public Provider liftToRunFaceAuthBinderProvider;
        public Provider lightBarControllerProvider;
        public Provider lightRevealScrimInteractorProvider;
        public Provider lightRevealScrimRepositoryImplProvider;
        public Provider lightRevealScrimViewModelProvider;
        public Provider lightsOutInteractorProvider;
        public Provider limitedEdgeToEdgeProvider;
        public Provider localMediaRepositoryFactoryImplProvider;
        public Provider locationControllerImplProvider;
        public Provider locationTileProvider;
        public Provider lockscreenContentViewModelProvider;
        public Provider lockscreenGestureLoggerProvider;
        public Provider lockscreenHostedDreamGestureListenerProvider;
        public Provider lockscreenNotificationIconsOnlyControllerProvider;
        public Provider lockscreenNotificationManagerProvider;
        public Provider lockscreenSceneProvider;
        public Provider lockscreenSceneTransitionInteractorProvider;
        public Provider lockscreenSceneTransitionRepositoryProvider;
        public Provider lockscreenSceneViewModelProvider;
        public Provider lockscreenShadeTransitionControllerProvider;
        public Provider lockscreenSmartspaceControllerProvider;
        public Provider lockscreenToAodTransitionViewModelProvider;
        public Provider lockscreenToDozingTransitionViewModelProvider;
        public Provider lockscreenToDreamingHostedTransitionViewModelProvider;
        public Provider lockscreenToDreamingTransitionViewModelProvider;
        public Provider lockscreenToGlanceableHubTransitionViewModelProvider;
        public Provider lockscreenToGoneTransitionViewModelProvider;
        public Provider lockscreenToOccludedTransitionViewModelProvider;
        public Provider lockscreenToPrimaryBouncerTransitionViewModelProvider;
        public Provider logBufferEulogizerProvider;
        public Provider logBufferFactoryProvider;
        public Provider logContextInteractorImplProvider;
        public Provider logcatEchoTrackerDebugProvider;
        public Provider longScreenshotActivityProvider;
        public Provider longScreenshotDataProvider;
        public Provider looperSlowLogControllerImplProvider;
        public Provider lsRuneWrapperProvider;
        public Provider magnificationProvider;
        public Provider managedProfileControllerImplProvider;
        public Provider mdmOverlayContainerProvider;
        public Provider mediaBluetoothHelperProvider;
        public Provider mediaCarouselControllerLoggerProvider;
        public Provider mediaCarouselControllerProvider;
        public Provider mediaCarouselInteractorProvider;
        public Provider mediaCarouselViewModelProvider;
        public Provider mediaContainerControllerProvider;
        public Provider mediaControlInteractorFactoryProvider;
        public Provider mediaControlPanelProvider;
        public Provider mediaControllerInteractorImplProvider;
        public Provider mediaDataFilterImplProvider;
        public Provider mediaDataProcessorProvider;
        public Provider mediaDataRepositoryProvider;
        public Provider mediaDeviceViewModelFactoryProvider;
        public Provider mediaFilterRepositoryProvider;
        public Provider mediaFlagsProvider;
        public Provider mediaHierarchyManagerProvider;
        public Provider mediaHostStatesManagerProvider;
        public Provider mediaLoadingLoggerProvider;
        public Provider mediaMuteAwaitConnectionCliProvider;
        public Provider mediaMuteAwaitConnectionManagerFactoryProvider;
        public Provider mediaMuteAwaitLoggerProvider;
        public Provider mediaOutputActivityProvider;
        public Provider mediaOutputControllerProvider;
        public Provider mediaOutputDialogReceiverProvider;
        public Provider mediaOutputHelperProvider;
        public Provider mediaOutputSwitcherDialogUIProvider;
        public Provider mediaOutputTileProvider;
        public Provider mediaProjectionAppSelectorActivityProvider;
        public Provider mediaProjectionChipInteractorProvider;
        public final MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule;
        public Provider mediaProjectionManagerRepositoryProvider;
        public Provider mediaProjectionMetricsLoggerProvider;
        public Provider mediaProjectionPermissionActivityProvider;
        public Provider mediaProjectionTaskSwitcherCoreStartableProvider;
        public Provider mediaRecommendationsInteractorProvider;
        public Provider mediaRecommendationsViewModelProvider;
        public Provider mediaResumeListenerProvider;
        public Provider mediaSessionLegacyHelperWrapperProvider;
        public Provider mediaSessionViewModelFactoryProvider;
        public Provider mediaTimeoutListenerProvider;
        public Provider mediaTimeoutLoggerProvider;
        public Provider mediaTttChipControllerReceiverProvider;
        public Provider mediaTttCommandLineHelperProvider;
        public Provider mediaTttFlagsProvider;
        public Provider mediaTttReceiverLoggerProvider;
        public Provider mediaTttReceiverUiEventLoggerProvider;
        public Provider mediaTttSenderCoordinatorProvider;
        public Provider mediaTttSenderLoggerProvider;
        public Provider mediaTttSenderUiEventLoggerProvider;
        public Provider mediaUiEventLoggerProvider;
        public Provider mediaViewControllerProvider;
        public Provider mediaViewLoggerProvider;
        public Provider memoryMonitorProvider;
        public Provider messagesProvider;
        public Provider microphoneToggleTileProvider;
        public Provider minimumTilesResourceRepositoryProvider;
        public Provider mobileConnectionsRepositoryImplProvider;
        public Provider mobileContextProvider;
        public Provider mobileDataTileProvider;
        public Provider mobileDataUtilProvider;
        public Provider mobileIconsInteractorImplProvider;
        public Provider mobileIconsViewModelProvider;
        public Provider mobileInputLoggerProvider;
        public Provider mobileRepositorySwitcherProvider;
        public Provider mobileRoamingUtilProvider;
        public Provider mobileSignalControllerFactoryProvider;
        public Provider mobileSignalUtilProvider;
        public Provider mobileUiAdapterProvider;
        public Provider mobileViewLoggerProvider;
        public Provider modeSwitchesControllerProvider;
        public Provider modelProvider;
        public Provider motionToolStartableProvider;
        public Provider multiSIMControllerProvider;
        public Provider musicShareDeviceControllerProvider;
        public Provider muteQuickAffordanceConfigProvider;
        public Provider muteQuickAffordanceCoreStartableProvider;
        public Provider naturalScrollingSettingObserverProvider;
        public Provider navBarHelperProvider;
        public Provider navBarStoreImplProvider;
        public Provider navigationBarControllerImplProvider;
        public Provider navigationModeControllerProvider;
        public Provider nearbyMediaDevicesLoggerProvider;
        public Provider nearbyMediaDevicesManagerProvider;
        public Provider networkControllerImplProvider;
        public Provider newKeyguardViewMediatorProvider;
        public Provider newQSTileFactoryProvider;
        public Provider newTilesAvailabilityInteractorProvider;
        public Provider nextAlarmControllerImplProvider;
        public Provider nfcTileProvider;
        public Provider nightDisplayAutoAddableProvider;
        public Provider nightDisplayTileProvider;
        public Provider noiseCancelingLevelViewModelProvider;
        public Provider noiseCancelingSwitchBarViewModelProvider;
        public Provider noiseControlBoxViewModelProvider;
        public Provider noiseControlEffectBoxViewModelProvider;
        public Provider noiseControlOffViewModelProvider;
        public Provider noopDeviceEntryFaceAuthInteractorProvider;
        public Provider noopGridConsistencyInteractorProvider;
        public Provider noteTaskBubblesControllerProvider;
        public Provider noteTaskBubblesServiceProvider;
        public Provider noteTaskControllerProvider;
        public Provider noteTaskControllerUpdateServiceProvider;
        public Provider notiCinemaLoggerProvider;
        public Provider notifBindPipelineProvider;
        public Provider notifCollectionProvider;
        public Provider notifCoordinatorsProvider;
        public Provider notifInflaterImplProvider;
        public Provider notifInflationErrorManagerProvider;
        public Provider notifLiveDataStoreImplProvider;
        public Provider notifPipelineChoreographerImplProvider;
        public Provider notifPipelineInitializerProvider;
        public Provider notifPipelineProvider;
        public Provider notifRemoteViewCacheImplProvider;
        public Provider notifRemoteViewsFactoryContainerImplProvider;
        public Provider notifShadeSceneFamilyResolverProvider;
        public Provider notifUiAdjustmentProvider;
        public Provider notifViewBarnProvider;
        public Provider notificationAlertsInteractorProvider;
        public Provider notificationBackupRestoreManagerProvider;
        public Provider notificationChannelsProvider;
        public Provider notificationClickNotifierProvider;
        public Provider notificationColorPickerProvider;
        public Provider notificationContentInflaterProvider;
        public Provider notificationControllerProvider;
        public Provider notificationDismissibilityProviderImplProvider;
        public Provider notificationGutsManagerProvider;
        public Provider notificationHighlightDpPreferenceProvider;
        public Provider notificationIconAreaControllerViewBinderWrapperImplProvider;
        public Provider notificationIconContainerAlwaysOnDisplayViewModelProvider;
        public Provider notificationInsetsImplProvider;
        public Provider notificationInteractionTrackerProvider;
        public Provider notificationInterruptStateProviderImplProvider;
        public Provider notificationLaunchAnimationInteractorProvider;
        public Provider notificationLaunchAnimationRepositoryProvider;
        public Provider notificationListenerProvider;
        public Provider notificationListenerSettingsRepositoryProvider;
        public Provider notificationListenerWithPluginsProvider;
        public Provider notificationLockscreenUserManagerImplProvider;
        public Provider notificationLoggerViewModelProvider;
        public Provider notificationMemoryDumperProvider;
        public Provider notificationMemoryLoggerProvider;
        public Provider notificationMemoryMonitorProvider;
        public Provider notificationPanelViewControllerProvider;
        public Provider notificationPersonExtractorPluginBoundaryProvider;
        public Provider notificationPlaceholderRepositoryProvider;
        public Provider notificationRemoteInputManagerProvider;
        public Provider notificationRoundnessManagerProvider;
        public Provider notificationRowBinderImplProvider;
        public Provider notificationRowContentBinderImplProvider;
        public Provider notificationScrollViewBinderProvider;
        public Provider notificationScrollViewModelProvider;
        public Provider notificationSectionProvider;
        public Provider notificationSectionsFeatureManagerProvider;
        public Provider notificationSectionsManagerProvider;
        public Provider notificationSettingsControllerProvider;
        public Provider notificationShadeDepthControllerProvider;
        public Provider notificationShadeWindowControllerImplProvider;
        public Provider notificationShadeWindowViewControllerProvider;
        public Provider notificationShelfInteractorProvider;
        public Provider notificationShelfManagerProvider;
        public Provider notificationShelfViewModelProvider;
        public Provider notificationStackAppearanceInteractorProvider;
        public Provider notificationStackInteractorProvider;
        public Provider notificationStackScrollLayoutControllerProvider;
        public Provider notificationStackSizeCalculatorProvider;
        public Provider notificationStatsLoggerImplProvider;
        public Provider notificationTargetsHelperProvider;
        public Provider notificationViewFlipperFactoryProvider;
        public Provider notificationViewFlipperViewModelProvider;
        public Provider notificationViewHeightRepositoryProvider;
        public Provider notificationVisibilityProviderImplProvider;
        public Provider notificationWakeUpCoordinatorProvider;
        public Provider notificationsControllerImplProvider;
        public Provider notificationsControllerStubProvider;
        public Provider notificationsKeyguardViewStateRepositoryProvider;
        public Provider notificationsPlaceholderViewModelProvider;
        public Provider notificationsQSContainerControllerProvider;
        public Provider notificationsShadeSceneProvider;
        public Provider notificationsShadeSceneViewModelProvider;
        public Provider occludedToAodTransitionViewModelProvider;
        public Provider occludedToDozingTransitionViewModelProvider;
        public Provider occludedToGlanceableHubTransitionViewModelProvider;
        public Provider occludedToGoneTransitionViewModelProvider;
        public Provider occludedToLockscreenTransitionViewModelProvider;
        public Provider occludingAppDeviceEntryInteractorProvider;
        public Provider occludingAppDeviceEntryMessageViewModelProvider;
        public Provider offToLockscreenTransitionViewModelProvider;
        public Provider onUserInteractionCallbackImplProvider;
        public Provider oneHandedModeRepositoryImplProvider;
        public Provider oneHandedModeTileProvider;
        public Provider ongoingActivityChipsViewModelProvider;
        public Provider ongoingCallControllerProvider;
        public Provider ongoingCallLoggerProvider;
        public Provider ongoingCallRepositoryProvider;
        public Provider optionalOfCentralSurfacesProvider;
        public Provider optionalOfLockscreenContentProvider;
        public Provider overlayShadeViewModelProvider;
        public Provider overviewProxyRecentsImplProvider;
        public Provider overviewProxyServiceProvider;
        public Provider packageChangeInteractorProvider;
        public Provider packageChangeRepositoryImplProvider;
        public Provider packageInstallerMonitorProvider;
        public Provider packageLabelIconProviderImplProvider;
        public Provider packageUpdateLoggerProvider;
        public Provider panelExpansionInteractorImplProvider;
        public Provider panelInteractorImplProvider;
        public Provider panelScreenShotBufferLoggerProvider;
        public Provider partitionedGridLayoutProvider;
        public Provider partitionedGridViewModelProvider;
        public Provider peopleNotificationIdentifierImplProvider;
        public Provider peopleSpaceActivityProvider;
        public Provider peopleSpaceWidgetManagerProvider;
        public Provider peopleSpaceWidgetPinnedReceiverProvider;
        public Provider peopleSpaceWidgetProvider;
        public Provider peopleTileRepositoryImplProvider;
        public Provider peopleWidgetRepositoryImplProvider;
        public Provider phoneStateMonitorProvider;
        public Provider physicalKeyboardCoreStartableProvider;
        public Provider pickupControllerProvider;
        public Provider plankComponentProvider;
        public Provider pluginAODManagerProvider;
        public Provider pluginFaceWidgetManagerProvider;
        public Provider pluginLockDataImplProvider;
        public Provider pluginLockDelegateAppProvider;
        public Provider pluginLockDelegateSysUiProvider;
        public Provider pluginLockInstancePolicyProvider;
        public Provider pluginLockManagerImplProvider;
        public Provider pluginLockMediatorImplProvider;
        public Provider pluginLockStarManagerProvider;
        public Provider pluginLockUtilsProvider;
        public Provider pluginWallpaperControllerProvider;
        public Provider pluginWallpaperManagerImplProvider;
        public Provider popupUIProvider;
        public Provider postureDependentProximitySensorProvider;
        public Provider powerInteractorProvider;
        public Provider powerRepositoryImplProvider;
        public Provider primaryBouncerCallbackInteractorProvider;
        public Provider primaryBouncerInteractorProvider;
        public Provider primaryBouncerToAodTransitionViewModelProvider;
        public Provider primaryBouncerToDozingTransitionViewModelProvider;
        public Provider primaryBouncerToGoneTransitionViewModelProvider;
        public Provider primaryBouncerToLockscreenTransitionViewModelProvider;
        public Provider privacyChipInteractorProvider;
        public Provider privacyChipRepositoryImplProvider;
        public Provider privacyConfigProvider;
        public Provider privacyDialogControllerProvider;
        public Provider privacyDialogControllerV2Provider;
        public Provider privacyDotDecorProviderFactoryProvider;
        public Provider privacyDotViewControllerProvider;
        public Provider privacyItemControllerProvider;
        public Provider profileFirstRunFileResourcesImplProvider;
        public Provider profileFirstRunSettingsImplProvider;
        public Provider profileTypeRepositoryImplProvider;
        public Provider promptRepositoryImplProvider;
        public Provider promptSelectorInteractorImplProvider;
        public Provider promptViewModelProvider;
        public Provider protocolManagerImplProvider;
        public Provider provdieSpatializerRepositoryProvider;
        public Provider provideAODLoggerProvider;
        public Provider provideAccessPointControllerImplProvider;
        public Provider provideActivityManagerWrapperProvider;
        public Provider provideActivityTransitionAnimatorProvider;
        public Provider provideAiAgentEffectProvider;
        public Provider provideAiBriefLogProvider;
        public Provider provideAirplaneModeTileViewModelProvider;
        public Provider provideAirplaneTableLogBufferProvider;
        public Provider provideAlarmTileViewModelProvider;
        public Provider provideAllowNotificationLongPressProvider;
        public Provider provideAncSliceRepositoryProvider;
        public Provider provideAnimationFeatureFlagsProvider;
        public Provider provideApiLoggerProvider;
        public Provider provideAppWidgetManagerProvider;
        public Provider provideAssistUtilsProvider;
        public Provider provideAudioManagerIntentsReceiverProvider;
        public Provider provideAudioModeInteractorProvider;
        public Provider provideAudioRepositoryProvider;
        public Provider provideAudioSharingRepositoryProvider;
        public Provider provideAudioVolumeInteractorProvider;
        public Provider provideAutoRotateSettingsManagerProvider;
        public Provider provideBackPanelUiThreadContextProvider;
        public Provider provideBackgroundDelayableExecutorProvider;
        public Provider provideBackgroundExecutorProvider;
        public Provider provideBackgroundRepeatableExecutorProvider;
        public Provider provideBackupManagerProvider;
        public Provider provideBaseShadeInteractorProvider;
        public Provider provideBatteryControllerLogProvider;
        public Provider provideBatteryControllerProvider;
        public Provider provideBatterySaverTileViewModelProvider;
        public Provider provideBgHandlerProvider;
        public Provider provideBgLooperProvider;
        public Provider provideBinderCallMonitorLoggerProvider;
        public Provider provideBinderProxyDumpHelperProvider;
        public Provider provideBiometricLogBufferProvider;
        public Provider provideBouncerLogBufferProvider;
        public Provider provideBouncerLogProvider;
        public Provider provideBroadcastDispatcherLogBufferProvider;
        public Provider provideBroadcastRunningExecutorProvider;
        public Provider provideBroadcastRunningLooperProvider;
        public Provider provideBubblesManagerProvider;
        public Provider provideCameraToggleTileViewModelProvider;
        public Provider provideCaptioningInteractorProvider;
        public Provider provideCaptioningRepositoryProvider;
        public Provider provideCarrierTextManagerLogProvider;
        public Provider provideChipbarLogBufferProvider;
        public Provider provideCollapsedSbFragmentLogBufferProvider;
        public Provider provideColorCorrectionTileViewModelProvider;
        public Provider provideColorInversionTileViewModelProvider;
        public Provider provideCommandQueueProvider;
        public Provider provideCommunalAppWidgetHostProvider;
        public Provider provideCommunalDatabaseProvider;
        public Provider provideCommunalLogBufferProvider;
        public Provider provideCommunalTableLogBufferProvider;
        public Provider provideCommunalWidgetDaoProvider;
        public Provider provideCommunalWidgetHostProvider;
        public Provider provideControlsLogWrapperProvider;
        public Provider provideControlsLoggerProvider;
        public Provider provideCoreStartableProvider;
        public Provider provideDataSaverControllerProvider;
        public Provider provideDataSaverTileViewModelProvider;
        public Provider provideDataStoreProvider;
        public Provider provideDemoModeControllerProvider;
        public Provider provideDesktopManagerProvider;
        public Provider provideDesktopSystemUiBinderProvider;
        public Provider provideDeviceBasedSatelliteInputLogProvider;
        public Provider provideDeviceEntryIconLogBufferProvider;
        public Provider provideDevicePolicyManagerWrapperProvider;
        public Provider provideDeviceStateAutoRotationLogBufferProvider;
        public Provider provideDialogTransitionAnimatorProvider;
        public Provider provideDisableFlagsRepositoryLogBufferProvider;
        public Provider provideDisplayMetricsRepoLogBufferProvider;
        public Provider provideDisplayTrackerProvider;
        public Provider provideDozeLogBufferProvider;
        public Provider provideDreamLogBufferProvider;
        public Provider provideFaceAuthLogProvider;
        public Provider provideFaceAuthTableLogProvider;
        public Provider provideFaceDetectTableLogProvider;
        public Provider provideFirstMobileSubShowingNetworkTypeIconProvider;
        public Provider provideFlashlightTileViewModelProvider;
        public Provider provideFontScalingTileViewModelProvider;
        public Provider provideGoodLockLifecycleProvider;
        public Provider provideHeadsUpStyleManagerProvider;
        public Provider provideIndicatorLogBufferProvider;
        public Provider provideIndividualSensorPrivacyControllerProvider;
        public Provider provideInternetTileViewModelProvider;
        public Provider provideKeyboardLogBufferProvider;
        public Provider provideKeyguardClickControllerProvider;
        public Provider provideKeyguardClockLogProvider;
        public Provider provideKeyguardEditModeControllerProvider;
        public Provider provideKeyguardIndicationControllerProvider;
        public Provider provideKeyguardLargeClockLogProvider;
        public Provider provideKeyguardLogBufferProvider;
        public Provider provideKeyguardLoggerProvider;
        public Provider provideKeyguardMediaControllerLogBufferProvider;
        public Provider provideKeyguardSmallClockLogProvider;
        public Provider provideKeyguardTransitionAnimationLogBufferProvider;
        public Provider provideKeyguardUnlockAnimationExecutorProvider;
        public Provider provideKeyguardUpdateMonitorLogBufferProvider;
        public Provider provideLSShadeTransitionControllerBufferProvider;
        public Provider provideLegacyLoggerOptionalProvider;
        public Provider provideListContainerProvider;
        public Provider provideLocalBluetoothControllerProvider;
        public Provider provideLocationTileViewModelProvider;
        public Provider provideLockIconViewControllerProvider;
        public Provider provideLogcatEchoTrackerProvider;
        public Provider provideLongRunningDelayableExecutorProvider;
        public Provider provideLongRunningExecutorProvider;
        public Provider provideLongRunningLooperProvider;
        public Provider provideMediaBrowserBufferProvider;
        public Provider provideMediaCarouselControllerBufferProvider;
        public Provider provideMediaDeviceSessionRepositoryProvider;
        public Provider provideMediaLogBufferProvider;
        public Provider provideMediaMuteAwaitLogBufferProvider;
        public Provider provideMediaOutputViewProvider;
        public Provider provideMediaTttReceiverLogBufferProvider;
        public Provider provideMediaTttSenderLogBufferProvider;
        public Provider provideMediaViewLogBufferProvider;
        public Provider provideMicrophoneToggleTileViewModelProvider;
        public Provider provideMobileInputLogBufferProvider;
        public Provider provideMobileSummaryLogBufferProvider;
        public Provider provideMobileViewLogBufferProvider;
        public Provider provideMonitorTableLogBufferProvider;
        public Provider provideNavBarButtonClickLogBufferProvider;
        public Provider provideNavBarServiceLoggerProvider;
        public Provider provideNavbarBgHandlerProvider;
        public Provider provideNavbarOrientationTrackingLogBufferProvider;
        public Provider provideNavbarStoreProvider;
        public Provider provideNearbyMediaDevicesLogBufferProvider;
        public Provider provideNetspeedViewControllerProvider;
        public Provider provideNightDisplayTileViewModelProvider;
        public Provider provideNotifInflationExecutorProvider;
        public Provider provideNotifInflationLogBufferProvider;
        public Provider provideNotifInflationLooperProvider;
        public Provider provideNotifInteractionLogBufferProvider;
        public Provider provideNotifRemoteViewCacheProvider;
        public Provider provideNotifRemoteViewsFactoryContainerProvider;
        public Provider provideNotificationHeadsUpLogBufferProvider;
        public Provider provideNotificationInterruptLogBufferProvider;
        public Provider provideNotificationLockScreenLogBufferProvider;
        public Provider provideNotificationMediaManagerProvider;
        public Provider provideNotificationPanelLoggerProvider;
        public Provider provideNotificationRemoteInputLogBufferProvider;
        public Provider provideNotificationRenderLogBufferProvider;
        public Provider provideNotificationRowContentBinderProvider;
        public Provider provideNotificationSettingsInteractorProvider;
        public Provider provideNotificationSettingsRepositoryProvider;
        public Provider provideNotificationTransitionAnimatorControllerProvider;
        public Provider provideNotificationsControllerProvider;
        public Provider provideNotificationsLogBufferProvider;
        public Provider provideNotificationsSoundPolicyInteractrorProvider;
        public Provider provideNotificationsSoundPolicyRepositoryProvider;
        public Provider provideOneHandedModeTileViewModelProvider;
        public Provider provideOngoingActivityControllerProvider;
        public Provider provideOptionalProvider;
        public Provider providePackageChangeRepoLogBufferProvider;
        public Provider providePanelExpansionInteractorProvider;
        public Provider providePanelScreenShotLogBufferProvider;
        public Provider providePlankDispatcherFactoryProvider;
        public Provider providePrivacyLogBufferProvider;
        public Provider provideProtocolProvider;
        public Provider provideQRCodeScannerTileViewModelProvider;
        public Provider provideQSAutoAddLogBufferProvider;
        public Provider provideQSConfigLogBufferProvider;
        public Provider provideQSFragmentDisableLogBufferProvider;
        public Provider provideQSTileListLogBufferProvider;
        public Provider provideQuickAccessWalletClientProvider;
        public Provider provideQuickPanelLogBufferProvider;
        public Provider provideQuickSettingsControllerProvider;
        public Provider provideQuickSettingsLogBufferProvider;
        public Provider provideRealWifiRepositoryProvider;
        public Provider provideRecentsProvider;
        public Provider provideReduceBrightColorsTileViewModelProvider;
        public Provider provideResolverMapProvider;
        public Provider provideRotationTileViewModelProvider;
        public Provider provideSPluginManagerProvider;
        public Provider provideSceneFrameworkLogBufferProvider;
        public Provider provideScreenDecorationsLogProvider;
        public Provider provideScreenRecordTileViewModelProvider;
        public Provider provideScrimLogBufferProvider;
        public Provider provideSearcleManagerProvider;
        public Provider provideSecureSettingsRepositoryProvider;
        public Provider provideSecurityLoggerProvider;
        public Provider provideSensitiveNotificationProtectionLogBufferProvider;
        public Provider provideSensorPrivacyControllerProvider;
        public Provider provideShadeAnimationInteractorProvider;
        public Provider provideShadeCarrierLogProvider;
        public Provider provideShadeControllerProvider;
        public Provider provideShadeLockscreenInteractorProvider;
        public Provider provideShadeLogBufferProvider;
        public Provider provideShadeSessionStorageProvider;
        public Provider provideShadeSurfaceProvider;
        public Provider provideShadeTouchLogBufferProvider;
        public Provider provideShadeWindowLogBufferProvider;
        public Provider provideSharedConnectivityTableLogBufferProvider;
        public Provider provideSmartReplyControllerProvider;
        public Provider provideSpatializerInetractorProvider;
        public Provider provideSpatializerProvider;
        public Provider provideStatusBarIconListProvider;
        public Provider provideStatusBarKeyguardViewManagerProvider;
        public Provider provideStatusBarNetworkControllerBufferProvider;
        public Provider provideStatusIconContainerControllerProvider;
        public Provider provideSwipeUpLogBufferProvider;
        public Provider provideSysUIUnfoldComponentProvider;
        public Provider provideSysUiStateProvider;
        public Provider provideSystemStatusAnimationSchedulerLogBufferProvider;
        public Provider provideSystemUserMonitorProvider;
        public Provider provideTaskStackChangeListenersProvider;
        public Provider provideTestInputMonitorProvider;
        public Provider provideTimeTickHandlerProvider;
        public Provider provideToastLogBufferProvider;
        public Provider provideUdfpsLogBufferProvider;
        public Provider provideUiModeNightTileViewModelProvider;
        public Provider provideUnseenNotificationLogBufferProvider;
        public Provider provideUserTrackerProvider;
        public Provider provideVerboseDeviceBasedSatelliteInputLogProvider;
        public Provider provideVerboseMobileViewLogBufferProvider;
        public Provider provideVisualInterruptionDecisionProvider;
        public Provider provideVolumeLogWrapperProvider;
        public Provider provideVolumePanelLoggerProvider;
        public Provider provideWakeLockLogProvider;
        public Provider provideWallpaperLoggerProvider;
        public Provider provideWifiLogBufferProvider;
        public Provider provideWifiTableLogBufferProvider;
        public Provider provideWorkModeTileViewModelProvider;
        public Provider providerBluetoothLogBufferProvider;
        public Provider providerProvider;
        public Provider providerQsResetSettingsManagerProvider;
        public Provider providerSubscreenQsPanelControllerProvider;
        public Provider providesAlertingHeaderSubcomponentProvider;
        public Provider providesAuthRippleViewProvider;
        public Provider providesBandAidPackFactoryProvider;
        public Provider providesBatteryMeterViewControllerProvider;
        public Provider providesBatteryMeterViewProvider;
        public Provider providesBehindScrimViewProvider;
        public Provider providesBiometricStatusInteractorProvider;
        public Provider providesBrightnessLogProvider;
        public Provider providesBrightnessTableLogProvider;
        public Provider providesCaptruedBlurContainerProvider;
        public Provider providesCombinedShadeHeadersConstraintManagerProvider;
        public Provider providesCommunalBackupUtilsProvider;
        public Provider providesCommunalMediaHostProvider;
        public Provider providesCommunalSceneDataSourceDelegatorProvider;
        public Provider providesControlsFeatureEnabledProvider;
        public Provider providesCredentialInteractorProvider;
        public Provider providesDisplayStateInteractorProvider;
        public Provider providesDreamOverlayNotificationCountProvider;
        public Provider providesFaceAuthInteractorInstanceProvider;
        public Provider providesFalsingCollectorLegacyProvider;
        public Provider providesFavoriteHeaderSubcomponentProvider;
        public Provider providesFrontScrimViewProvider;
        public Provider providesGridConsistencyLogProvider;
        public Provider providesHighlightsHeaderSubcomponentProvider;
        public Provider providesIconTileLabelVisibilityLogProvider;
        public Provider providesIncomingHeaderSubcomponentProvider;
        public Provider providesKeyguardLogWrapperProvider;
        public Provider providesKeyguardMediaHostProvider;
        public Provider providesKeyguardRootViewProvider;
        public Provider providesKnoxStateMonitorProvider;
        public Provider providesLayoutProviderContainerProvider;
        public Provider providesLeakDetectorProvider;
        public Provider providesLightRevealScrimProvider;
        public Provider providesLockscreenBlueprintsProvider;
        public Provider providesLockscreenContentProvider;
        public Provider providesMediaDataManagerProvider;
        public Provider providesMediaLoadingLogBufferProvider;
        public Provider providesMediaLoggerProvider;
        public Provider providesMediaTimeoutListenerLogBufferProvider;
        public Provider providesNavBarLoggerProvider;
        public Provider providesNotificationPanelViewProvider;
        public Provider providesNotificationShadeWindowViewProvider;
        public Provider providesNotificationStackScrollLayoutProvider;
        public Provider providesNotificationsQuickSettingsContainerProvider;
        public Provider providesOngoingActivityHeaderSubcomponentProvider;
        public Provider providesOngoingPrivacyChipProvider;
        public Provider providesOverlapDetectorProvider;
        public Provider providesPeopleHeaderSubcomponentProvider;
        public Provider providesPlankFeatureEnabledProvider;
        public Provider providesPluginExecutorProvider;
        public Provider providesPopupUILogWrapperProvider;
        public Provider providesPopupUIViewModelListProvider;
        public Provider providesQSCMainViewProvider;
        public Provider providesQSGradationDrawableProvider;
        public Provider providesQSMediaHostProvider;
        public Provider providesQSRestoreLogBufferProvider;
        public Provider providesQuickQSMediaHostProvider;
        public Provider providesSceneDataSourceDelegatorProvider;
        public Provider providesScreenshotViewModelProvider;
        public Provider providesScrnshtNotifSmartActionsProvider;
        public Provider providesSecLockIconViewProvider;
        public Provider providesSecPanelBackgroundProvider;
        public Provider providesShadeHeaderViewProvider;
        public Provider providesSharedNotificationContainerProvider;
        public Provider providesSilentHeaderSubcomponentProvider;
        public Provider providesSoundCraftNowBarViewProvider;
        public Provider providesStatusBarWindowViewProvider;
        public Provider providesStatusIconContainerProvider;
        public Provider providesTapAgainViewProvider;
        public Provider providesThreadAssertProvider;
        public Provider providesViewMediatorCallbackProvider;
        public Provider providesWindowRootViewProvider;
        public Provider providsBackGestureTfClassifierProvider;
        public Provider proximitySensorImplProvider;
        public Provider pulseExpansionHandlerProvider;
        public Provider pulsingGestureListenerProvider;
        public Provider qRCodeScannerControllerProvider;
        public Provider qRCodeScannerTileProvider;
        public Provider qSBackupRestoreManagerProvider;
        public Provider qSCMainViewControllerProvider;
        public Provider qSCPopupButtonControllerProvider;
        public Provider qSClockBellAlternateCalendarUtilProvider;
        public Provider qSClockBellTowerProvider;
        public Provider qSFactoryImplProvider;
        public Provider qSFragmentLegacyProvider;
        public Provider qSFragmentStartableProvider;
        public Provider qSGuideDialogProvider;
        public Provider qSHostAdapterProvider;
        public Provider qSImplProvider;
        public Provider qSPipelineCoreStartableProvider;
        public Provider qSPipelineFlagsRepositoryProvider;
        public Provider qSPreferencesInteractorProvider;
        public Provider qSPreferencesRepositoryProvider;
        public Provider qSSceneAdapterImplProvider;
        public Provider qSScrimViewSwitchProvider;
        public Provider qSSecurityFooterUtilsProvider;
        public Provider qSSettingsRestoredBroadcastRepositoryProvider;
        public Provider qSTileAnalyticsProvider;
        public Provider qSTileConfigProviderImplProvider;
        public Provider qSTileHostProvider;
        public Provider qSTileIntentUserInputHandlerImplProvider;
        public Provider qSTileLoggerProvider;
        public Provider qrCodeScannerKeyguardQuickAffordanceConfigProvider;
        public Provider qsEventLoggerImplProvider;
        public Provider qsFrameTranslateImplProvider;
        public Provider qsStatusEventLogProvider;
        public Provider quickAccessWalletControllerProvider;
        public Provider quickAccessWalletKeyguardQuickAffordanceConfigProvider;
        public Provider quickAccessWalletTileProvider;
        public Provider quickPanelExternalLoggerProvider;
        public Provider quickSettingsControllerImplProvider;
        public Provider quickSettingsControllerSceneImplProvider;
        public Provider quickSettingsSceneFamilyResolverProvider;
        public Provider quickSettingsSceneProvider;
        public Provider quickSettingsSceneViewModelProvider;
        public Provider quickSettingsShadeSceneProvider;
        public Provider quickSettingsShadeSceneViewModelProvider;
        public Provider rearDisplayDialogControllerProvider;
        public Provider recordIssueTileProvider;
        public Provider recordingControllerProvider;
        public Provider recordingServiceProvider;
        public Provider reduceBrightColorsAutoAddableProvider;
        public Provider reduceBrightColorsControllerImplProvider;
        public Provider reduceBrightColorsTileProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public Provider refreshUsersSchedulerProvider;
        public Provider remoteDeviceControllerProvider;
        public Provider remoteInputControllerLoggerProvider;
        public Provider remoteInputInteractorProvider;
        public Provider remoteInputNotificationRebuilderProvider;
        public Provider remoteInputQuickSettingsDisablerProvider;
        public Provider remoteInputRepositoryImplProvider;
        public Provider remoteInputUriControllerProvider;
        public Provider renderStageManagerProvider;
        public Provider repoProvider;
        public Provider resourceTrimmerProvider;
        public Provider restartDozeListenerProvider;
        public Provider restoreReconciliationInteractorProvider;
        public Provider resumeMediaBrowserLoggerProvider;
        public Provider retailModeSettingsRepositoryProvider;
        public Provider ringerModeTrackerImplProvider;
        public Provider ringtonePlayerProvider;
        public Provider rotationLockControllerImplProvider;
        public Provider rotationPolicyWrapperImplProvider;
        public Provider routineManagerProvider;
        public Provider routineTestViewModelProvider;
        public Provider rowContentBindStageProvider;
        public Provider rowInflaterTaskProvider;
        public Provider sALoggerProvider;
        public Provider sBlueLightFilterSWTileProvider;
        public Provider sBluetoothControllerImplProvider;
        public Provider sBluetoothTileProvider;
        public Provider sPluginDependencyProvider;
        public Provider sRotationLockTileProvider;
        public Provider sWorkModeTileProvider;
        public Provider safeUINavigationBarProvider;
        public Provider safeUIStatusBarWindowControllerProvider;
        public Provider samsungStatusBarGrayIconHelperProvider;
        public Provider samsungVolumeDialogImplProvider;
        public Provider satelliteModeObserverHelperProvider;
        public Provider sceneBackInteractorProvider;
        public Provider sceneContainerOcclusionInteractorProvider;
        public Provider sceneContainerPluginProvider;
        public Provider sceneContainerRepositoryProvider;
        public Provider sceneContainerStartableProvider;
        public Provider sceneContainerViewModelProvider;
        public Provider sceneInteractorProvider;
        public Provider screenBrightnessDisplayManagerRepositoryProvider;
        public Provider screenBrightnessInteractorProvider;
        public Provider screenCaptureDevicePolicyResolverProvider;
        public Provider screenCaptureTileProvider;
        public Provider screenControllerProvider;
        public Provider screenDecorationsControllerProvider;
        public Provider screenDecorationsLoggerProvider;
        public Provider screenOffAnimationControllerProvider;
        public Provider screenOnCoordinatorProvider;
        public Provider screenPinningRequestProvider;
        public Provider screenRecordChipInteractorProvider;
        public Provider screenRecordChipViewModelProvider;
        public Provider screenRecordRepositoryImplProvider;
        public Provider screenRecordTileProvider;
        public Provider screenRecordingStateProvider;
        public Provider screenshotPolicyImplProvider;
        public Provider screenshotProxyServiceProvider;
        public Provider screenshotSmartActionsProvider;
        public Provider screenshotSoundControllerImplProvider;
        public Provider screenshotSoundProviderImplProvider;
        public Provider scrimControllerProvider;
        public Provider scrimShadeTransitionControllerProvider;
        public Provider scrimStartableProvider;
        public Provider secAutoTileManagerProvider;
        public Provider secControlsActivityProvider;
        public Provider secControlsFavoritingActivityProvider;
        public Provider secControlsProviderSelectorActivityProvider;
        public Provider secControlsReorderActivityProvider;
        public Provider secControlsUiControllerImplProvider;
        public Provider secDeviceControlsControllerImplProvider;
        public Provider secDeviceControlsTileProvider;
        public Provider secHideNotificationShadeInMirrorInteractorProvider;
        public Provider secLightRevealScrimHelperProvider;
        public Provider secLockIconViewControllerProvider;
        public Provider secLsScrimControlHelperProvider;
        public Provider secMediaControlPanelProvider;
        public Provider secMediaHostProvider;
        public Provider secMediaPlayerDataProvider;
        public Provider secNotificationShadeWindowControllerHelperImplProvider;
        public Provider secNotificationShadeWindowStateInteractorProvider;
        public Provider secPanelBackgroundControllerProvider;
        public Provider secPanelExpansionStateInteractorProvider;
        public Provider secPanelSAStatusLogInteractorProvider;
        public Provider secPanelSplitHelperProvider;
        public Provider secPanelTouchBlockHelperProvider;
        public Provider secPanelTouchProximityInteractorProvider;
        public Provider secPowerNotificationWarningsProvider;
        public Provider secPowerUIProvider;
        public Provider secQSCoverResourcePickerProvider;
        public Provider secQSDetailControllerProvider;
        public Provider secQSExpansionStateInteractorProvider;
        public Provider secQSGradationDrawableControllerProvider;
        public Provider secQSPanelResourcePickerProvider;
        public Provider secQSSettingEditResourcesProvider;
        public Provider secQpBlurControllerProvider;
        public Provider secQuickSettingsAffordanceInteractorProvider;
        public Provider secRotationWatcherProvider;
        public Provider secSTQuickControlRequestReceiverProvider;
        public Provider secSelectedComponentRepositoryImplProvider;
        public Provider secTaskBarManagerImplProvider;
        public Provider secUnlockedScreenOffAnimationHelperProvider;
        public Provider secVendorServicesProvider;
        public Provider sectionHeaderControllerSubcomponentBuilderProvider;
        public Provider sectionHeaderVisibilityProvider;
        public Provider sectionStyleProvider;
        public Provider secureSettingsImplProvider;
        public Provider securityControllerImplProvider;
        public Provider securityRepositoryImplProvider;
        public Provider seenNotificationsInteractorProvider;
        public Provider selectedComponentRepositoryImplProvider;
        public Provider selectedUserInteractorProvider;
        public Provider semClipboardToastControllerProvider;
        public Provider semImageCaptureImplProvider;
        public Provider sensitiveNotificationProtectionControllerImplProvider;
        public Provider sensorUseStartedActivityProvider;
        public Provider sessionAudioPathViewModelFactoryProvider;
        public Provider sessionTrackerProvider;
        public final Optional<BackAnimationController.BackAnimationImpl> setBackAnimation;
        public final Optional<Bubbles> setBubbles;
        public final Optional<DesktopMode> setDesktopMode;
        public final Optional<Object> setDisplayAreaHelper;
        public final Optional<EnterSplitGestureHandler> setEnterSplitGestureHandler;
        public final KeyguardTransitions setKeyguardTransitions;
        public Provider setOfSceneProvider;
        public final Optional<OneHanded> setOneHanded;
        public final Optional<Pip> setPip;
        public final Optional<RecentTasks> setRecentTasks;
        public final ShellInterface setShell;
        public final ShellTransitions setShellTransitions;
        public final Optional<SplitScreen> setSplitScreen;
        public final Optional<SplitScreenController> setSplitScreenController;
        public final Optional<StartingWindowController.StartingSurfaceImpl> setStartingSurface;
        public final Optional<TaskViewFactoryController.TaskViewFactoryImpl> setTaskViewFactory;
        public Provider settingViewModelProvider;
        public Provider settingsHelperProvider;
        public Provider shadeAnimationInteractorLegacyImplProvider;
        public Provider shadeAnimationInteractorSceneContainerImplProvider;
        public Provider shadeAnimationRepositoryProvider;
        public Provider shadeCarrierGroupControllerLoggerProvider;
        public Provider shadeControllerImplProvider;
        public Provider shadeControllerSceneImplProvider;
        public Provider shadeEventCoordinatorProvider;
        public Provider shadeExpansionStateManagerProvider;
        public Provider shadeHeaderClockInteractorProvider;
        public Provider shadeHeaderClockRepositoryProvider;
        public Provider shadeHeaderControllerProvider;
        public Provider shadeHeaderViewModelProvider;
        public Provider shadeInteractorImplProvider;
        public Provider shadeInteractorLegacyImplProvider;
        public Provider shadeInteractorSceneContainerImplProvider;
        public Provider shadeListBuilderProvider;
        public Provider shadeLockscreenInteractorImplProvider;
        public Provider shadeRepositoryImplProvider;
        public Provider shadeSceneProvider;
        public Provider shadeSceneViewModelProvider;
        public Provider shadeStartableProvider;
        public Provider shadeSurfaceImplProvider;
        public Provider shadeViewManagerFactoryProvider;
        public Provider shareToAppChipViewModelProvider;
        public final SharedLibraryModule sharedLibraryModule;
        public Provider sharedNotificationContainerBinderProvider;
        public Provider sharedNotificationContainerInteractorProvider;
        public Provider sharedNotificationContainerViewModelProvider;
        public Provider shelfToolTipManagerProvider;
        public Provider shortcutHelperActivityProvider;
        public Provider shortcutHelperActivityStarterProvider;
        public Provider shortcutHelperInteractorProvider;
        public Provider shortcutHelperRepositoryProvider;
        public Provider shortcutKeyDispatcherProvider;
        public Provider shortcutsBesideUdfpsKeyguardBlueprintProvider;
        public Provider sideFpsLoggerProvider;
        public Provider sideFpsOverlayViewBinderProvider;
        public Provider sideFpsProgressBarProvider;
        public Provider sideFpsProgressBarViewBinderProvider;
        public Provider sideFpsProgressBarViewModelProvider;
        public Provider sideFpsSensorInteractorProvider;
        public Provider simBouncerInteractorProvider;
        public Provider simBouncerRepositoryImplProvider;
        public Provider simCardInfoUtilProvider;
        public Provider singlePointerTouchProcessorProvider;
        public Provider sliceBroadcastRelayHandlerProvider;
        public Provider slimIndicatorViewMediatorImplProvider;
        public Provider smartActionsReceiverProvider;
        public Provider smartMirroringDeviceControllerProvider;
        public Provider smartReplyConstantsProvider;
        public Provider smartspaceRepositoryImplProvider;
        public Provider smartspaceSectionProvider;
        public Provider soundAliveIntentFactoryProvider;
        public Provider soundAliveManagerProvider;
        public Provider soundCraftActionBarViewModelProvider;
        public Provider soundCraftManagerProvider;
        public Provider soundCraftNowBarControllerProvider;
        public final SoundCraftNowBarViewModule soundCraftNowBarViewModule;
        public Provider soundCraftQpDetailAdapterProvider;
        public Provider soundCraftSettingsProvider;
        public Provider soundCraftViewModelFactoryProvider;
        public Provider soundCraftViewModelProvider;
        public Provider soundModeTileProvider;
        public Provider spatialAudioViewModelProvider;
        public Provider splitShadeKeyguardBlueprintProvider;
        public Provider splitShadeStateControllerImplProvider;
        public Provider starterProvider;
        public Provider statusBarContentInsetsProvider;
        public Provider statusBarHeadsUpChangeListenerProvider;
        public Provider statusBarHideIconsForBouncerManagerProvider;
        public Provider statusBarIconControllerImplProvider;
        public Provider statusBarIconViewBindingFailureTrackerProvider;
        public Provider statusBarInitializerProvider;
        public Provider statusBarKeyguardViewManagerInteractorProvider;
        public Provider statusBarLocationPublisherProvider;
        public Provider statusBarModePerDisplayRepositoryFactoryProvider;
        public Provider statusBarModeRepositoryImplProvider;
        public Provider statusBarNotificationActivityStarterProvider;
        public Provider statusBarNotificationPresenterProvider;
        public Provider statusBarPipelineFlagsProvider;
        public Provider statusBarRemoteInputCallbackProvider;
        public Provider statusBarSignalPolicyProvider;
        public Provider statusBarStateControllerImplProvider;
        public Provider statusBarTouchableRegionManagerProvider;
        public Provider statusBarWindowControllerProvider;
        public Provider statusBarWindowStateControllerProvider;
        public Provider stickyKeyDialogFactoryProvider;
        public Provider stickyKeysIndicatorCoordinatorProvider;
        public Provider stickyKeysRepositoryImplProvider;
        public Provider stockTilesRepositoryProvider;
        public Provider storageNotificationProvider;
        public Provider storeLogUtilProvider;
        public Provider stretchedGridLayoutProvider;
        public Provider stylusManagerProvider;
        public Provider stylusUsiPowerStartableProvider;
        public Provider stylusUsiPowerUIProvider;
        public Provider subHomeActivityProvider;
        public Provider subRoomNetworkInfoProvider;
        public Provider subScreenFallbackProvider;
        public Provider subScreenManagerProvider;
        public Provider subScreenQuickPanelWindowControllerProvider;
        public Provider subscreenMusicWidgetControllerProvider;
        public Provider subscreenNotificationControllerProvider;
        public Provider subscreenNotificationIntelligenceStartActivityProvider;
        public Provider subscreenNotificationReplyActivityProvider;
        public Provider subscreenUtilProvider;
        public Provider subscriptionManagerSlotIndexResolverProvider;
        public Provider subscriptionsOrderProvider;
        public Provider summarizeControllerProvider;
        public Provider surfaceVisibilityControllerProvider;
        public Provider swipeChipbarAwayGestureHandlerProvider;
        public Provider swipeStatusBarAwayGestureHandlerProvider;
        public Provider swipeToDismissInteractorProvider;
        public Provider swipeUpAnywhereGestureHandlerProvider;
        public Provider swipeUpGestureLoggerProvider;
        public Provider switchToManagedProfileForCallActivityProvider;
        public Provider syncTileProvider;
        public final SysUICoroutinesModule sysUICoroutinesModule;
        public Provider sysUICoverServiceProvider;
        public Provider sysUICutoutProvider;
        public Provider sysUIKeyEventHandlerProvider;
        public final SysUIUnfoldModule sysUIUnfoldModule;
        public Provider sysUiUnfoldComponentProvider;
        public Provider systemActionsProvider;
        public Provider systemClockImplProvider;
        public Provider systemEventCoordinatorProvider;
        public Provider systemPropertiesWrapperProvider;
        public Provider systemStatusAnimationSchedulerImplProvider;
        public Provider systemStatusAnimationSchedulerLoggerProvider;
        public Provider systemUIAnalyticsWrapperProvider;
        public Provider systemUIAuxiliaryDumpServiceProvider;
        public Provider systemUICommandActionHandlerProvider;
        public Provider systemUIConfigDumpableProvider;
        public Provider systemUIDeviceEntryFaceAuthInteractorProvider;
        public Provider systemUIDialogManagerProvider;
        public Provider systemUIIndexMediatorProvider;
        public Provider systemUISecondaryUserServiceProvider;
        public Provider systemUIServiceProvider;
        public Provider systemUiProxyClientProvider;
        public Provider sysuiColorExtractorProvider;
        public Provider tableLogBufferFactoryProvider;
        public Provider takeScreenshotExecutorImplProvider;
        public Provider takeScreenshotServiceProvider;
        public Provider tapAgainViewControllerProvider;
        public Provider tapGestureDetectorProvider;
        public Provider targetSdkResolverProvider;
        public Provider taskSwitchInteractorProvider;
        public Provider taskSwitcherNotificationCoordinatorProvider;
        public Provider telephonyInteractorProvider;
        public Provider telephonyListenerManagerProvider;
        public Provider telephonyRepositoryImplProvider;
        public Provider temporaryViewUiEventLoggerProvider;
        public Provider themeOverlayApplierProvider;
        public Provider themeOverlayControllerProvider;
        public Provider tileGridViewModelProvider;
        public Provider tileJavaAdapterProvider;
        public Provider tileServicesProvider;
        public Provider tileSpecSettingsRepositoryProvider;
        public Provider tilesAvailabilityInteractorProvider;
        public Provider toAodFoldTransitionInteractorProvider;
        public Provider toastFactoryProvider;
        public Provider toastUIProvider;
        public Provider touchpadTutorialActivityProvider;
        public Provider traceurMessageSenderProvider;
        public Provider trustInteractorProvider;
        public Provider trustRepositoryImplProvider;
        public Provider trustRepositoryLoggerProvider;
        public Provider tunablePaddingServiceProvider;
        public Provider tunerActivityProvider;
        public Provider tunerServiceImplProvider;
        public Provider twoPhoneModeIconControllerProvider;
        public Provider udfpsControllerProvider;
        public Provider udfpsHapticsSimulatorProvider;
        public Provider udfpsKeyguardAccessibilityDelegateProvider;
        public Provider udfpsLoggerProvider;
        public Provider udfpsOverlayInteractorProvider;
        public Provider udfpsShellProvider;
        public Provider uiModeNightTileProvider;
        public Provider uiOffloadThreadProvider;
        public Provider uiThreadMonitorProvider;
        public Provider unfoldInitializationStartableProvider;
        public Provider unfoldTraceLoggerProvider;
        public Provider unfoldTransitionInteractorProvider;
        public Provider unlockedScreenOffAnimationControllerProvider;
        public Provider usbAccessoryUriActivityProvider;
        public Provider usbConfirmActivityProvider;
        public Provider usbDebuggingActivityProvider;
        public Provider usbDebuggingSecondaryUserActivityProvider;
        public Provider usbPermissionActivityProvider;
        public Provider userAwareSecureSettingsRepositoryImplProvider;
        public Provider userFileManagerImplProvider;
        public Provider userInfoControllerImplProvider;
        public Provider userRepositoryImplProvider;
        public Provider userSetupRepositoryImplProvider;
        public Provider userSwitchDialogControllerProvider;
        public Provider userSwitcherControllerProvider;
        public Provider userSwitcherDialogCoordinatorProvider;
        public Provider userSwitcherInteractorProvider;
        public Provider userSwitcherRepositoryImplProvider;
        public Provider userSwitcherViewModelProvider;
        public Provider verboseMobileViewLoggerProvider;
        public Provider vibratorHelperProvider;
        public Provider videoCameraQuickAffordanceConfigProvider;
        public Provider viewModelProvider;
        public Provider viewModelProvider2;
        public Provider viewUtilProvider;
        public Provider visibilityLocationProviderDelegatorProvider;
        public Provider visualInterruptionDecisionProviderImplProvider;
        public Provider visualStabilityCoordinatorProvider;
        public Provider visualStabilityProvider;
        public Provider voiceBoostViewModelProvider;
        public Provider volumeBarViewModelProvider;
        public Provider volumeDependencyProvider;
        public Provider volumeDialogComponentProvider;
        public Provider volumeDialogControllerImplProvider;
        public Provider volumeDialogInteractorProvider;
        public Provider volumeDialogRepositoryProvider;
        public Provider volumeManagerProvider;
        public Provider volumeNavigatorProvider;
        public Provider volumeNormalizationViewModelProvider;
        public Provider volumePanelDialogReceiverProvider;
        public Provider volumePanelFactoryProvider;
        public Provider volumePanelGlobalStateInteractorProvider;
        public Provider volumePanelGlobalStateRepositoryProvider;
        public Provider volumeUIProvider;
        public Provider wMShellProvider;
        public Provider wakefulnessLifecycleProvider;
        public Provider walletActivityProvider;
        public Provider walletAutoAddableProvider;
        public Provider walletContextualLocationsServiceProvider;
        public Provider walletContextualSuggestionsControllerProvider;
        public Provider walletControllerImplProvider;
        public Provider wallpaperChangeNotifierProvider;
        public Provider wallpaperControllerProvider;
        public Provider wallpaperEventNotifierProvider;
        public Provider wallpaperRepositoryImplProvider;
        public Provider wearableManagerProvider;
        public Provider widgetInteractionHandlerProvider;
        public Provider wifiConstantsProvider;
        public Provider wifiDisplayDeviceControllerProvider;
        public Provider wifiInteractorImplProvider;
        public Provider wifiPickerTrackerFactoryProvider;
        public Provider wifiRepositorySwitcherProvider;
        public Provider wifiStateWorkerProvider;
        public Provider wifiTextManagerProvider;
        public Provider wifiTileProvider;
        public Provider wifiUiAdapterProvider;
        public Provider wifiViewModelProvider;
        public Provider windowManagerLockscreenVisibilityInteractorProvider;
        public Provider windowManagerLockscreenVisibilityManagerProvider;
        public Provider windowManagerLockscreenVisibilityViewModelProvider;
        public Provider windowManagerOcclusionManagerProvider;
        public Provider windowRootViewVisibilityInteractorProvider;
        public Provider windowRootViewVisibilityRepositoryProvider;
        public Provider windowVisibilityControllerProvider;
        public Provider wiredChargingRippleControllerProvider;
        public Provider workLockActivityProvider;
        public Provider workTileAutoAddableProvider;
        public Provider workTileRestoreProcessorProvider;
        public Provider zenModeControllerImplProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceSysUIComponentImpl$SwitchingProvider$27, reason: invalid class name */
            public final class AnonymousClass27 {
                public AnonymousClass27() {
                }

                public final SensorPrivacyToggleTileDataInteractor create(int i) {
                    SwitchingProvider switchingProvider = SwitchingProvider.this;
                    return new SensorPrivacyToggleTileDataInteractor((CoroutineContext) switchingProvider.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (IndividualSensorPrivacyController) switchingProvider.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), i);
                }
            }

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceSysUIComponentImpl$SwitchingProvider$48, reason: invalid class name */
            public final class AnonymousClass48 {
                public AnonymousClass48() {
                }

                public final AutoAddableSetting create(String str, TileSpec tileSpec) {
                    SwitchingProvider switchingProvider = SwitchingProvider.this;
                    return new AutoAddableSetting((SecureSettings) switchingProvider.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get(), str, tileSpec);
                }
            }

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceSysUIComponentImpl$SwitchingProvider$49, reason: invalid class name */
            public final class AnonymousClass49 {
                public AnonymousClass49() {
                }

                public final A11yShortcutAutoAddable create(TileSpec tileSpec, ComponentName componentName) {
                    SwitchingProvider switchingProvider = SwitchingProvider.this;
                    return new A11yShortcutAutoAddable((AccessibilityQsShortcutsRepository) switchingProvider.referenceSysUIComponentImpl.accessibilityQsShortcutsRepositoryImplProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get(), tileSpec, componentName);
                }
            }

            /* renamed from: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent$ReferenceSysUIComponentImpl$SwitchingProvider$5, reason: invalid class name */
            public final class AnonymousClass5 {
                public AnonymousClass5() {
                }

                public final CustomTile create(String str, Context context) {
                    SwitchingProvider switchingProvider = SwitchingProvider.this;
                    return new CustomTile(DoubleCheck.lazy(switchingProvider.referenceSysUIComponentImpl.qSHostAdapterProvider), (QsEventLogger) switchingProvider.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) switchingProvider.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) switchingProvider.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) switchingProvider.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) switchingProvider.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) switchingProvider.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), switchingProvider.referenceSysUIComponentImpl.qSLogger(), str, context, switchingProvider.referenceSysUIComponentImpl.customTileStatePersisterImpl(), (TileServices) switchingProvider.referenceSysUIComponentImpl.tileServicesProvider.get(), (DisplayTracker) switchingProvider.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (IUriGrantsManager) switchingProvider.referenceGlobalRootComponentImpl.provideIUriGrantsManagerProvider.get(), (UserTracker) switchingProvider.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) switchingProvider.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayLifecycle) switchingProvider.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                }
            }

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.id = i;
            }

            private T get0() {
                int i = 0;
                switch (this.id) {
                    case 0:
                        return (T) new BootCompleteCacheImpl((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1:
                        return (T) new ConfigurationControllerImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                    case 2:
                        return (T) new ContextComponentResolver(this.referenceSysUIComponentImpl.mapOfClassOfAndProviderOfActivity(), this.referenceSysUIComponentImpl.mapOfClassOfAndProviderOfService(), this.referenceSysUIComponentImpl.mapOfClassOfAndProviderOfRecentsImplementation(), this.referenceSysUIComponentImpl.mapOfClassOfAndProviderOfBroadcastReceiver());
                    case 3:
                        return (T) new TunerActivity((DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl());
                    case 4:
                        return (T) DemoModeModule_ProvideDemoModeControllerFactory.provideDemoModeController(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 5:
                        return (T) new BroadcastDispatcher(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBroadcastRunningLooperProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBroadcastRunningExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceSysUIComponentImpl.broadcastDispatcherLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceSysUIComponentImpl.pendingRemovalStore());
                    case 6:
                        return (T) SysUIConcurrencyModule_ProvideBroadcastRunningLooperFactory.provideBroadcastRunningLooper();
                    case 7:
                        return (T) SysUIConcurrencyModule_ProvideBroadcastRunningExecutorFactory.provideBroadcastRunningExecutor((Looper) this.referenceSysUIComponentImpl.provideBroadcastRunningLooperProvider.get());
                    case 8:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "BroadcastDispatcherLog", false);
                    case 9:
                        return (T) new LogBufferFactory((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case 10:
                        Lazy lazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.logcatEchoTrackerDebugProvider);
                        if (!Build.isDebuggable()) {
                            return (T) new LogcatEchoTrackerProd();
                        }
                        ?? r0 = (T) ((LogcatEchoTrackerDebug) lazy.get());
                        r0.start();
                        return r0;
                    case 11:
                        return (T) new LogcatEchoTrackerDebug((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get());
                    case 12:
                        return (T) SysUICoroutinesModule_BgDispatcherFactory.bgDispatcher(this.referenceSysUIComponentImpl.sysUICoroutinesModule);
                    case 13:
                        return (T) new CommandRegistry(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 14:
                        return (T) MultiUserUtilsModule_ProvideUserTrackerFactory.provideUserTracker(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider, (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 15:
                        Resources m1003$$Nest$mmainResources = ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl);
                        SystemPropertiesHelper systemPropertiesHelper = (SystemPropertiesHelper) this.referenceGlobalRootComponentImpl.systemPropertiesHelperProvider.get();
                        ServerFlagReader serverFlagReader = (ServerFlagReader) this.referenceSysUIComponentImpl.bindsReaderProvider.get();
                        FlagsCommonModule.Companion.getClass();
                        FlagsFactory.INSTANCE.getClass();
                        Map map = FlagsFactory.flagMap;
                        map.containsKey(com.android.systemui.flags.Flags.NULL_FLAG.name);
                        return (T) new FeatureFlagsClassicRelease(m1003$$Nest$mmainResources, systemPropertiesHelper, serverFlagReader, map, this.referenceSysUIComponentImpl.conditionalRestarter());
                    case 16:
                        DeviceConfigProxy deviceConfigProxy = (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get();
                        Executor executor = (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                        boolean booleanValue = ((Boolean) this.referenceGlobalRootComponentImpl.provideIsTestHarnessProvider.get()).booleanValue();
                        ServerFlagReaderModule.Companion.getClass();
                        return (T) new ServerFlagReaderImpl(ServerFlagReaderModule.Companion.SYSUI_NAMESPACE, deviceConfigProxy, executor, booleanValue);
                    case 17:
                        return (T) new DeviceConfigProxy();
                    case 18:
                        return (T) SysUIConcurrencyModule_ProvideBackgroundExecutorFactory.provideBackgroundExecutor((Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get());
                    case 19:
                        return (T) SysUIConcurrencyModule_ProvideBgLooperFactory.provideBgLooper();
                    case 20:
                        return (T) new PowerInteractor((PowerRepository) this.referenceSysUIComponentImpl.powerRepositoryImplProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.falsingCollectorImplProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 21:
                        return (T) new PowerRepositoryImpl((PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 22:
                        return (T) new SystemClockImpl();
                    case 23:
                        return (T) new FalsingCollectorImpl((FalsingDataProvider) this.referenceSysUIComponentImpl.falsingDataProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (HistoryTracker) this.referenceSysUIComponentImpl.historyTrackerProvider.get(), this.referenceSysUIComponentImpl.proximitySensor(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.selectedUserInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.communalInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceEntryInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneContainerOcclusionInteractorProvider));
                    case 24:
                        return (T) new FalsingDataProvider(this.referenceGlobalRootComponentImpl.displayMetrics(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (DeviceStateManager.FoldStateListener) this.referenceGlobalRootComponentImpl.providesFoldStateListenerProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), this.referenceSysUIComponentImpl.namedBoolean());
                    case 25:
                        return (T) AospPolicyModule_ProvideBatteryControllerFactory.provideBatteryController(this.referenceGlobalRootComponentImpl.context, (EnhancedEstimates) this.referenceSysUIComponentImpl.enhancedEstimatesImplProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BatteryControllerLogger) this.referenceSysUIComponentImpl.batteryControllerLoggerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 26:
                        return (T) new EnhancedEstimatesImpl();
                    case 27:
                        return (T) new BatteryControllerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideBatteryControllerLogProvider.get());
                    case 28:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(30, "BatteryControllerLog");
                    case 29:
                        return (T) SysUIConcurrencyModule_ProvideBgHandlerFactory.provideBgHandler((Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get());
                    case 30:
                        return (T) new DockManagerImpl();
                    case 31:
                        return (T) new FalsingManagerProxy((PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceSysUIComponentImpl.brightLineFalsingManagerProvider);
                    case 32:
                        return (T) new BrightLineFalsingManager((FalsingDataProvider) this.referenceSysUIComponentImpl.falsingDataProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), this.referenceSysUIComponentImpl.namedSetOfFalsingClassifier(), this.referenceSysUIComponentImpl.singleTapClassifier(), this.referenceSysUIComponentImpl.longTapClassifier(), this.referenceSysUIComponentImpl.doubleTapClassifier(), (HistoryTracker) this.referenceSysUIComponentImpl.historyTrackerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), ((Boolean) this.referenceGlobalRootComponentImpl.provideIsTestHarnessProvider.get()).booleanValue(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 33:
                        return (T) new HistoryTracker((SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case 34:
                        return (T) new KeyguardStateControllerImpl(this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider), this.referenceSysUIComponentImpl.keyguardUpdateMonitorLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 35:
                        return (T) new KeyguardSecUpdateMonitorImpl((IBatteryStats) this.referenceGlobalRootComponentImpl.provideIBatteryStatsProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (BinderCallMonitor) this.referenceSysUIComponentImpl.binderCallMonitorImplProvider.get(), (LooperSlowLogController) this.referenceSysUIComponentImpl.looperSlowLogControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideDesktopManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginFaceWidgetManagerProvider), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (TelephonyListenerManager) this.referenceSysUIComponentImpl.telephonyListenerManagerProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), (ActiveUnlockConfig) this.referenceSysUIComponentImpl.activeUnlockConfigProvider.get(), this.referenceSysUIComponentImpl.keyguardUpdateMonitorLogger(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.sessionTrackerProvider, (TrustManager) this.referenceGlobalRootComponentImpl.provideTrustManagerProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (SensorPrivacyManager) this.referenceGlobalRootComponentImpl.provideSensorPrivacyManagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get(), (BiometricManager) this.referenceGlobalRootComponentImpl.providesBiometricManagerProvider.get(), (FaceWakeUpTriggersConfig) this.referenceSysUIComponentImpl.faceWakeUpTriggersConfigImplProvider.get(), (CarrierConfigManager) this.referenceGlobalRootComponentImpl.provideCarrierConfigManagerProvider.get(), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), Optional.empty(), (TaskStackChangeListeners) this.referenceSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get());
                    case 36:
                        return (T) new KeyguardFastBioUnlockController((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceGlobalRootComponentImpl.context, (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (BinderCallMonitor) this.referenceSysUIComponentImpl.binderCallMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SurfaceVisibilityController) this.referenceSysUIComponentImpl.surfaceVisibilityControllerProvider.get(), (WindowVisibilityController) this.referenceSysUIComponentImpl.windowVisibilityControllerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider), (AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.looperSlowLogControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardViewMediatorHelperImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.scrimControllerProvider));
                    case 37:
                        return (T) new DisplayTrackerImpl((DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 38:
                        return (T) this.referenceSysUIComponentImpl.injectBinderCallMonitorImpl(new BinderCallMonitorImpl());
                    case 39:
                        return (T) new SamsungServiceLoggerImpl("BinderCallMonitorLogger", BinderCallMonitorConstants.MAX_BUF_COUNT, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceGlobalRootComponentImpl.noLogcatEchoTrackerProvider.get());
                    case 40:
                        return (T) new SettingsHelper(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 41:
                        return (T) this.referenceSysUIComponentImpl.injectStatusBarStateControllerImpl(new StatusBarStateControllerImpl((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceUnlockedInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardClockInteractorProvider)));
                    case 42:
                        return (T) new JavaAdapter((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 43:
                        return (T) new KeyguardTransitionInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.fromLockscreenTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.fromPrimaryBouncerTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.fromAodTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.fromAlternateBouncerTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.fromDozingTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider));
                    case 44:
                        return (T) new KeyguardRepositoryImpl((StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DozeTransitionListener) this.referenceSysUIComponentImpl.dozeTransitionListenerProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (DreamOverlayCallbackController) this.referenceSysUIComponentImpl.dreamOverlayCallbackControllerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 45:
                        return (T) new DozeTransitionListener();
                    case 46:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        Execution execution = (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get();
                        CommandQueue commandQueue = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                        ActivityTaskManager activityTaskManager = (ActivityTaskManager) this.referenceGlobalRootComponentImpl.provideActivityTaskManagerProvider.get();
                        WindowManager windowManager = (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get();
                        FingerprintManager fingerprintManager = (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get();
                        FaceManager faceManager = (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get();
                        Provider provider = this.referenceSysUIComponentImpl.udfpsControllerProvider;
                        DisplayManager displayManager = (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get();
                        WakefulnessLifecycle wakefulnessLifecycle = (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get();
                        AuthDialogPanelInteractionDetector authDialogPanelInteractionDetector = this.referenceSysUIComponentImpl.authDialogPanelInteractionDetector();
                        UserManager userManager = (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get();
                        LockPatternUtils lockPatternUtils = (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get();
                        Lazy lazy2 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.udfpsLoggerProvider);
                        Lazy lazy3 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.logContextInteractorImplProvider);
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        Provider provider2 = referenceSysUIComponentImpl.promptSelectorInteractorImplProvider;
                        Provider provider3 = referenceSysUIComponentImpl.credentialViewModelProvider;
                        Provider provider4 = this.referenceSysUIComponentImpl.promptViewModelProvider;
                        InteractionJankMonitor interactionJankMonitor = (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get();
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get();
                        BiometricsModule.Companion.getClass();
                        return (T) new AuthController(context, coroutineScope, execution, commandQueue, activityTaskManager, windowManager, fingerprintManager, faceManager, provider, displayManager, wakefulnessLifecycle, authDialogPanelInteractionDetector, userManager, lockPatternUtils, lazy2, lazy3, provider2, provider3, provider4, interactionJankMonitor, handler, delayableExecutor, new UdfpsUtils(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get());
                    case 47:
                        return (T) new CommandQueue(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), this.referenceSysUIComponentImpl.dumpHandler(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.powerInteractorProvider));
                    case 48:
                        return (T) new LogBufferEulogizer(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (Files) this.referenceSysUIComponentImpl.filesProvider.get());
                    case 49:
                        return (T) new Files();
                    case 50:
                        return (T) new SystemUIConfigDumpable((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.getStartables());
                    case 51:
                        return (T) new UdfpsController(this.referenceGlobalRootComponentImpl.context, (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get(), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (UdfpsHapticsSimulator) this.referenceSysUIComponentImpl.udfpsHapticsSimulatorProvider.get(), (UdfpsShell) this.referenceSysUIComponentImpl.udfpsShellProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (UnlockedScreenOffAnimationController) this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (SystemUIDialogManager) this.referenceSysUIComponentImpl.systemUIDialogManagerProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), (ActivityTransitionAnimator) this.referenceSysUIComponentImpl.provideActivityTransitionAnimatorProvider.get(), (Executor) this.referenceSysUIComponentImpl.providesPluginExecutorProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SinglePointerTouchProcessor) this.referenceSysUIComponentImpl.singlePointerTouchProcessorProvider.get(), (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (UdfpsKeyguardAccessibilityDelegate) this.referenceSysUIComponentImpl.udfpsKeyguardAccessibilityDelegateProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceEntryUdfpsTouchOverlayViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.defaultUdfpsTouchOverlayViewModelProvider), (UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 52:
                        Lazy lazy4 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.legacyBouncerDependenciesProvider);
                        KeyguardViewMediatorHelper keyguardViewMediatorHelper = (KeyguardViewMediatorHelper) this.referenceSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get();
                        KeyguardFastBioUnlockController keyguardFastBioUnlockController = (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get();
                        Lazy lazy5 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider);
                        SettingsHelper settingsHelper = (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get();
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        ViewMediatorCallback viewMediatorCallback = (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get();
                        LockPatternUtils lockPatternUtils2 = (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get();
                        SysuiStatusBarStateController sysuiStatusBarStateController = (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        DreamOverlayStateController dreamOverlayStateController = (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get();
                        NavigationModeController navigationModeController = (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get();
                        DockManager dockManager = (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get();
                        NotificationShadeWindowController notificationShadeWindowController = (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        KeyguardMessageAreaController.Factory keyguardMessageAreaControllerFactory = this.referenceSysUIComponentImpl.keyguardMessageAreaControllerFactory();
                        Optional optional = (Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get();
                        Lazy lazy6 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeControllerProvider);
                        LatencyTracker latencyTracker = (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get();
                        KeyguardSecurityModel keyguardSecurityModel = (KeyguardSecurityModel) this.referenceSysUIComponentImpl.keyguardSecurityModelProvider.get();
                        PrimaryBouncerCallbackInteractor primaryBouncerCallbackInteractor = (PrimaryBouncerCallbackInteractor) this.referenceSysUIComponentImpl.primaryBouncerCallbackInteractorProvider.get();
                        PrimaryBouncerInteractor primaryBouncerInteractor = (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get();
                        BouncerView bouncerView = (BouncerView) this.referenceSysUIComponentImpl.bouncerViewImplProvider.get();
                        AlternateBouncerInteractor alternateBouncerInteractor = (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get();
                        UdfpsOverlayInteractor udfpsOverlayInteractor = (UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get();
                        ActivityStarter activityStarter = (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get();
                        KeyguardTransitionInteractor keyguardTransitionInteractor = (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get();
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get();
                        Lazy lazy7 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityInteractorProvider);
                        Lazy lazy8 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardDismissActionInteractorProvider);
                        SelectedUserInteractor selectedUserInteractor = (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get();
                        JavaAdapter javaAdapter = (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get();
                        Lazy lazy9 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider);
                        StatusBarKeyguardViewManagerInteractor statusBarKeyguardViewManagerInteractor = (StatusBarKeyguardViewManagerInteractor) this.referenceSysUIComponentImpl.statusBarKeyguardViewManagerInteractorProvider.get();
                        return SafeUIState.isSysUiSafeModeEnabled() ? (T) new SafeUIStatusBarKeyguardViewManager(context2, viewMediatorCallback, lockPatternUtils2, sysuiStatusBarStateController, configurationController, keyguardUpdateMonitor, dreamOverlayStateController, navigationModeController, dockManager, notificationShadeWindowController, keyguardStateController, keyguardMessageAreaControllerFactory, optional, lazy6, latencyTracker, keyguardSecurityModel, primaryBouncerCallbackInteractor, primaryBouncerInteractor, bouncerView, alternateBouncerInteractor, udfpsOverlayInteractor, activityStarter, keyguardTransitionInteractor, coroutineDispatcher, lazy7, lazy8, selectedUserInteractor, javaAdapter, lazy9, statusBarKeyguardViewManagerInteractor, lazy4) : (T) new SecStatusBarKeyguardViewManager(keyguardViewMediatorHelper, keyguardFastBioUnlockController, lazy5, settingsHelper, context2, viewMediatorCallback, lockPatternUtils2, sysuiStatusBarStateController, configurationController, keyguardUpdateMonitor, dreamOverlayStateController, navigationModeController, dockManager, notificationShadeWindowController, keyguardStateController, keyguardMessageAreaControllerFactory, optional, lazy6, latencyTracker, keyguardSecurityModel, primaryBouncerCallbackInteractor, primaryBouncerInteractor, bouncerView, alternateBouncerInteractor, udfpsOverlayInteractor, activityStarter, keyguardTransitionInteractor, coroutineDispatcher, lazy7, lazy8, selectedUserInteractor, javaAdapter, lazy9, statusBarKeyguardViewManagerInteractor);
                    case 53:
                        return (T) new LegacyBouncerDependencies(this.referenceSysUIComponentImpl.keyguardBouncerViewModel(), (PrimaryBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), new KeyguardBouncerComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), this.referenceSysUIComponentImpl.keyguardMessageAreaControllerFactory(), (BouncerMessageInteractor) this.referenceSysUIComponentImpl.bouncerMessageInteractorProvider.get(), (BouncerLogger) this.referenceSysUIComponentImpl.bouncerLoggerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 54:
                        return (T) new BouncerViewImpl();
                    case 55:
                        return (T) new PrimaryBouncerInteractor((KeyguardBouncerRepository) this.referenceSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get(), (BouncerView) this.referenceSysUIComponentImpl.bouncerViewImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardSecurityModel) this.referenceSysUIComponentImpl.keyguardSecurityModelProvider.get(), (PrimaryBouncerCallbackInteractor) this.referenceSysUIComponentImpl.primaryBouncerCallbackInteractorProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (DismissCallbackRegistry) this.referenceSysUIComponentImpl.dismissCallbackRegistryProvider.get(), this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (TrustRepository) this.referenceSysUIComponentImpl.trustRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get());
                    case 56:
                        return (T) new KeyguardBouncerRepositoryImpl((SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideBouncerLogBufferProvider.get());
                    case 57:
                        return (T) ((TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "BouncerTableLog");
                    case 58:
                        return (T) new TableLogBufferFactory((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (LogcatEchoTracker) this.referenceSysUIComponentImpl.provideLogcatEchoTrackerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 59:
                        return (T) this.referenceSysUIComponentImpl.injectKeyguardSecurityModel(new KeyguardSecurityModel(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get()));
                    case 60:
                        return (T) new PrimaryBouncerCallbackInteractor();
                    case 61:
                        Object obj = this.referenceSysUIComponentImpl.falsingCollectorImplProvider.get();
                        T t = (T) ((FalsingCollectorImpl) obj);
                        int i2 = SceneContainerFlag.$r8$clinit;
                        Flags.sceneContainer();
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 62:
                        return (T) new FalsingCollectorNoOp();
                    case 63:
                        return (T) new DismissCallbackRegistry((Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get());
                    case 64:
                        return (T) new TrustRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (TrustManager) this.referenceGlobalRootComponentImpl.provideTrustManagerProvider.get(), (TrustRepositoryLogger) this.referenceSysUIComponentImpl.trustRepositoryLoggerProvider.get());
                    case 65:
                        return (T) new UserRepositoryImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 66:
                        return (T) new TrustRepositoryLogger((LogBuffer) this.referenceSysUIComponentImpl.provideKeyguardUpdateMonitorLogBufferProvider.get());
                    case 67:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(400, "KeyguardUpdateMonitorLog");
                    case 68:
                        return (T) new SelectedUserInteractor((UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get());
                    case 69:
                        FaceManager faceManager2 = (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get();
                        Lazy lazy10 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.systemUIDeviceEntryFaceAuthInteractorProvider);
                        Lazy lazy11 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.noopDeviceEntryFaceAuthInteractorProvider);
                        DeviceEntryFaceAuthModule.Companion.getClass();
                        if (faceManager2 != null) {
                            Object obj2 = lazy10.get();
                            Intrinsics.checkNotNull(obj2);
                            return (T) ((DeviceEntryFaceAuthInteractor) obj2);
                        }
                        Object obj3 = lazy11.get();
                        Intrinsics.checkNotNull(obj3);
                        return (T) ((DeviceEntryFaceAuthInteractor) obj3);
                    case 70:
                        return (T) new SystemUIDeviceEntryFaceAuthInteractor(this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (DeviceEntryFaceAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFaceAuthRepositoryImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (FaceAuthenticationLogger) this.referenceSysUIComponentImpl.faceAuthenticationLoggerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get(), (FaceWakeUpTriggersConfig) this.referenceSysUIComponentImpl.faceWakeUpTriggersConfigImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (TrustManager) this.referenceGlobalRootComponentImpl.provideTrustManagerProvider.get());
                    case 71:
                        return (T) new DeviceEntryFaceAuthRepositoryImpl(this.referenceGlobalRootComponentImpl.context, (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FaceAuthenticationLogger) this.referenceSysUIComponentImpl.faceAuthenticationLoggerProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (DeviceEntryFingerprintAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideFaceDetectTableLogProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideFaceAuthTableLogProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DisplayStateInteractor) this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 72:
                        return (T) new KeyguardBypassController(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 73:
                        return (T) new TunerServiceImpl(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (LeakDetector) this.referenceSysUIComponentImpl.providesLeakDetectorProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.factoryProvider8));
                    case 74:
                        return (T) LeakModule_ProvidesLeakDetectorFactory.providesLeakDetector(this.referenceSysUIComponentImpl.leakModule, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), TrackedCollections_Factory.newInstance());
                    case 75:
                        return (T) new SystemUIDialog.Factory((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (SystemUIDialogManager) this.referenceSysUIComponentImpl.systemUIDialogManagerProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get());
                    case 76:
                        return (T) new SystemUIDialogManager((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get());
                    case 77:
                        DisplayTracker displayTracker = (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get();
                        DumpManager dumpManager = (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
                        ?? r3 = (T) new SysUiState(displayTracker, (SceneContainerPlugin) this.referenceSysUIComponentImpl.sceneContainerPluginProvider.get());
                        dumpManager.registerDumpable(r3);
                        return r3;
                    case 78:
                        return (T) new SceneContainerPlugin(DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneContainerOcclusionInteractorProvider));
                    case 79:
                        return (T) new SceneInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneContainerRepository) this.referenceSysUIComponentImpl.sceneContainerRepositoryProvider.get(), this.referenceSysUIComponentImpl.sceneLogger(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideResolverMapProvider), (DeviceUnlockedInteractor) this.referenceSysUIComponentImpl.deviceUnlockedInteractorProvider.get());
                    case 80:
                        return (T) new SceneContainerRepository((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneContainerConfig) this.referenceSysUIComponentImpl.containerConfigProvider.get(), (SceneDataSource) this.referenceSysUIComponentImpl.providesSceneDataSourceDelegatorProvider.get());
                    case 81:
                        return (T) SceneContainerFrameworkModule_Companion_ContainerConfigFactory.containerConfig();
                    case 82:
                        return (T) new SceneDataSourceDelegator((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneContainerConfig) this.referenceSysUIComponentImpl.containerConfigProvider.get());
                    case 83:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "SceneFramework");
                    case 84:
                        return (T) SceneResolverModule_Companion_ProvideResolverMapFactory.provideResolverMap(this.referenceSysUIComponentImpl.setOfSceneResolver());
                    case 85:
                        return (T) new HomeSceneFamilyResolver((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get());
                    case 86:
                        return (T) new DeviceEntryInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryRepository) this.referenceSysUIComponentImpl.deviceEntryRepositoryImplProvider.get(), (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (DeviceEntryBiometricSettingsInteractor) this.referenceSysUIComponentImpl.deviceEntryBiometricSettingsInteractorProvider.get(), (TrustInteractor) this.referenceSysUIComponentImpl.trustInteractorProvider.get(), (DeviceUnlockedInteractor) this.referenceSysUIComponentImpl.deviceUnlockedInteractorProvider.get(), (SystemPropertiesHelper) this.referenceGlobalRootComponentImpl.systemPropertiesHelperProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get());
                    case 87:
                        return (T) new DeviceEntryRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get());
                    case 88:
                        return (T) new AuthenticationInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (AuthenticationRepository) this.referenceSysUIComponentImpl.authenticationRepositoryImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 89:
                        return (T) new AuthenticationRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), this.referenceSysUIComponentImpl.functionOfIntegerAndSecurityMode(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get());
                    case 90:
                        return (T) new MobileRepositorySwitcher((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (MobileConnectionsRepositoryImpl) this.referenceSysUIComponentImpl.mobileConnectionsRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.demoMobileConnectionsRepository(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get());
                    case 91:
                        return (T) new MobileConnectionsRepositoryImpl((ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get(), this.referenceSysUIComponentImpl.subscriptionManagerProxyImpl(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (MobileInputLogger) this.referenceSysUIComponentImpl.mobileInputLoggerProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideMobileSummaryLogBufferProvider.get(), new MobileMappingsProxyImpl(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceGlobalRootComponentImpl.context, (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (AirplaneModeRepository) this.referenceSysUIComponentImpl.airplaneModeRepositoryImplProvider.get(), (WifiRepository) this.referenceSysUIComponentImpl.wifiRepositorySwitcherProvider.get(), this.referenceSysUIComponentImpl.fullMobileConnectionRepositoryFactory(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SimCardInfoUtil) this.referenceSysUIComponentImpl.simCardInfoUtilProvider.get(), this.referenceSysUIComponentImpl.mobileDataIconResource(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 92:
                        return (T) new ConnectivityRepositoryImpl((ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (ConnectivitySlots) this.referenceSysUIComponentImpl.connectivitySlotsProvider.get(), this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ConnectivityInputLogger) this.referenceSysUIComponentImpl.connectivityInputLoggerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get());
                    case 93:
                        return (T) new ConnectivitySlots(this.referenceGlobalRootComponentImpl.context);
                    case 94:
                        return (T) new ConnectivityInputLogger((LogBuffer) this.referenceSysUIComponentImpl.provideSharedConnectivityTableLogBufferProvider.get());
                    case 95:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory.create(60, "SharedConnectivityInputLog", true);
                    case 96:
                        return (T) new MobileInputLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMobileInputLogBufferProvider.get());
                    case 97:
                        LogBufferFactory logBufferFactory2 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory2.create(300, "MobileInputLog", true);
                    case 98:
                        TableLogBufferFactory tableLogBufferFactory = (TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) tableLogBufferFactory.create(100, "MobileSummaryLog");
                    case 99:
                        return (T) new AirplaneModeRepositoryImpl((ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideAirplaneTableLogBufferProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            private T get1() {
                int i = 0;
                switch (this.id) {
                    case 100:
                        return (T) SysUICoroutinesModule_BgCoroutineContextFactory.bgCoroutineContext(this.referenceSysUIComponentImpl.sysUICoroutinesModule, (CoroutineContext) this.referenceGlobalRootComponentImpl.tracingCoroutineContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 101:
                        TableLogBufferFactory tableLogBufferFactory = (TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) tableLogBufferFactory.create(30, "AirplaneTableLog");
                    case 102:
                        return (T) new WifiRepositorySwitcher((RealWifiRepository) this.referenceSysUIComponentImpl.provideRealWifiRepositoryProvider.get(), this.referenceSysUIComponentImpl.demoWifiRepository(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 103:
                        return (T) StatusBarPipelineModule_Companion_ProvideRealWifiRepositoryFactory.provideRealWifiRepository((WifiManager) this.referenceGlobalRootComponentImpl.provideWifiManagerProvider.get(), (DisabledWifiRepository) this.referenceSysUIComponentImpl.disabledWifiRepositoryProvider.get(), (WifiRepositoryImpl.Factory) this.referenceSysUIComponentImpl.factoryProvider.get());
                    case 104:
                        return (T) new DisabledWifiRepository();
                    case 105:
                        FeatureFlags featureFlags = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get();
                        WifiPickerTrackerFactory wifiPickerTrackerFactory = (WifiPickerTrackerFactory) this.referenceSysUIComponentImpl.wifiPickerTrackerFactoryProvider.get();
                        LogBuffer logBuffer = (LogBuffer) this.referenceSysUIComponentImpl.provideWifiLogBufferProvider.get();
                        TableLogBuffer tableLogBuffer = (TableLogBuffer) this.referenceSysUIComponentImpl.provideWifiTableLogBufferProvider.get();
                        SemWifiManager semWifiManager = (SemWifiManager) this.referenceGlobalRootComponentImpl.context.getSystemService(WiFiManagerExt.SEM_WIFI_SERVICE);
                        Preconditions.checkNotNullFromProvides(semWifiManager);
                        return (T) new WifiRepositoryImpl.Factory(featureFlags, coroutineScope, executor, coroutineDispatcher, wifiPickerTrackerFactory, logBuffer, tableLogBuffer, semWifiManager, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 106:
                        return (T) new WifiPickerTrackerFactory(this.referenceGlobalRootComponentImpl.context, (WifiManager) this.referenceGlobalRootComponentImpl.provideWifiManagerProvider.get(), (ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), ThreadFactoryImpl_Factory.newInstance());
                    case 107:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory.create(200, "WifiInputLog", true);
                    case 108:
                        TableLogBufferFactory tableLogBufferFactory2 = (TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) tableLogBufferFactory2.create(100, "WifiTableLog");
                    case 109:
                        return (T) new DemoModeWifiDataSource((DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 110:
                        return (T) new CarrierConfigRepository((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (CarrierConfigManager) this.referenceGlobalRootComponentImpl.provideCarrierConfigManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (MobileInputLogger) this.referenceSysUIComponentImpl.mobileInputLoggerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 111:
                        return (T) new FakeCarrierInfraMediatorImpl((CarrierInfraMediatorImpl) this.referenceSysUIComponentImpl.carrierInfraMediatorImplProvider.get());
                    case 112:
                        return (T) new CarrierInfraMediatorImpl((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CommonUtil) this.referenceSysUIComponentImpl.commonUtilProvider.get(), (MobileSignalUtil) this.referenceSysUIComponentImpl.mobileSignalUtilProvider.get(), (CarrierInfoUtil) this.referenceSysUIComponentImpl.carrierInfoUtilProvider.get(), (MobileDataUtil) this.referenceSysUIComponentImpl.mobileDataUtilProvider.get(), (MobileRoamingUtil) this.referenceSysUIComponentImpl.mobileRoamingUtilProvider.get());
                    case 113:
                        return (T) new CommonUtil((SystemPropertiesWrapper) this.referenceSysUIComponentImpl.systemPropertiesWrapperProvider.get());
                    case 114:
                        return (T) new SystemPropertiesWrapper();
                    case 115:
                        return (T) new MobileSignalUtil((CommonUtil) this.referenceSysUIComponentImpl.commonUtilProvider.get(), (SystemPropertiesWrapper) this.referenceSysUIComponentImpl.systemPropertiesWrapperProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get());
                    case 116:
                        return (T) new CarrierInfoUtil((CommonUtil) this.referenceSysUIComponentImpl.commonUtilProvider.get());
                    case 117:
                        return (T) new MobileDataUtil((CommonUtil) this.referenceSysUIComponentImpl.commonUtilProvider.get());
                    case 118:
                        return (T) new MobileRoamingUtil((CommonUtil) this.referenceSysUIComponentImpl.commonUtilProvider.get());
                    case 119:
                        return (T) new SimCardInfoUtil((TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get());
                    case 120:
                        return (T) new ImsRegStateUtil(this.referenceGlobalRootComponentImpl.context, (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 121:
                        return (T) new CarrierMergedConnectionRepository.Factory((TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (WifiRepository) this.referenceSysUIComponentImpl.wifiRepositorySwitcherProvider.get());
                    case 122:
                        return (T) new DemoModeMobileConnectionDataSource((DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 123:
                        return (T) new DeviceEntryFingerprintAuthInteractor((DeviceEntryFingerprintAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (DeviceEntryBiometricSettingsInteractor) this.referenceSysUIComponentImpl.deviceEntryBiometricSettingsInteractorProvider.get(), (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get());
                    case 124:
                        return (T) new DeviceEntryFingerprintAuthRepositoryImpl((AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 125:
                        return (T) new DeviceEntryBiometricSettingsInteractor((BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get());
                    case 126:
                        return (T) new BiometricSettingsRepositoryImpl(this.referenceGlobalRootComponentImpl.context, (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (BiometricManager) this.referenceGlobalRootComponentImpl.providesBiometricManagerProvider.get(), (DevicePostureRepository) this.referenceSysUIComponentImpl.devicePostureRepositoryImplProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get(), (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get(), (MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 127:
                        return (T) new DevicePostureRepositoryImpl((DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 128:
                        return (T) new DevicePostureControllerImpl(this.referenceGlobalRootComponentImpl.context, (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 129:
                        return (T) new FacePropertyRepositoryImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get(), (CameraManager) this.referenceGlobalRootComponentImpl.provideCameraManagerProvider.get(), (DisplayStateRepository) this.referenceSysUIComponentImpl.displayStateRepositoryImplProvider.get(), (ConfigurationRepository) this.referenceSysUIComponentImpl.configurationRepositoryImplProvider.get());
                    case 130:
                        return (T) new DisplayStateRepositoryImpl((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), this.referenceSysUIComponentImpl.deviceStateRepositoryImpl(), (DisplayRepository) this.referenceSysUIComponentImpl.displayRepositoryImplProvider.get());
                    case 131:
                        return (T) SysUICoroutinesModule_BgApplicationScopeFactory.bgApplicationScope(this.referenceSysUIComponentImpl.sysUICoroutinesModule, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case 132:
                        return (T) new DisplayRepositoryImpl((DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 133:
                        return (T) new ConfigurationRepositoryImpl((ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), new DisplayUtilsWrapper());
                    case 134:
                        return (T) new FingerprintPropertyRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get());
                    case 135:
                        return (T) new TrustInteractor((TrustRepository) this.referenceSysUIComponentImpl.trustRepositoryImplProvider.get());
                    case 136:
                        return (T) new DeviceUnlockedInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get(), (DeviceEntryRepository) this.referenceSysUIComponentImpl.deviceEntryRepositoryImplProvider.get(), (TrustInteractor) this.referenceSysUIComponentImpl.trustInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 137:
                        return (T) new AlternateBouncerInteractor((StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBouncerRepository) this.referenceSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get(), (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 138:
                        KeyguardRepository keyguardRepository = (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get();
                        CommandQueue commandQueue = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                        PowerInteractor powerInteractor = (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get();
                        KeyguardBouncerRepository keyguardBouncerRepository = (KeyguardBouncerRepository) this.referenceSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get();
                        ConfigurationInteractor configurationInteractor = (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get();
                        ShadeRepository shadeRepository = (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get();
                        KeyguardTransitionInteractor keyguardTransitionInteractor = (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get();
                        Provider provider = this.referenceSysUIComponentImpl.sceneInteractorProvider;
                        Provider provider2 = this.referenceSysUIComponentImpl.fromGoneTransitionInteractorProvider;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new KeyguardInteractor(keyguardRepository, commandQueue, powerInteractor, keyguardBouncerRepository, configurationInteractor, shadeRepository, keyguardTransitionInteractor, provider, provider2, referenceSysUIComponentImpl.fromLockscreenTransitionInteractorProvider, referenceSysUIComponentImpl.sharedNotificationContainerInteractorProvider, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 139:
                        return (T) new ConfigurationInteractor((ConfigurationRepository) this.referenceSysUIComponentImpl.configurationRepositoryImplProvider.get());
                    case 140:
                        return (T) new ShadeRepositoryImpl();
                    case 141:
                        return (T) new FromGoneTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardEnabledInteractor) this.referenceSysUIComponentImpl.keyguardEnabledInteractorProvider.get());
                    case 142:
                        return (T) new KeyguardTransitionRepositoryImpl((CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 143:
                        return (T) new CommunalInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (CommunalWidgetRepository) this.referenceSysUIComponentImpl.communalWidgetRepositoryImplProvider.get(), (CommunalPrefsRepository) this.referenceSysUIComponentImpl.communalPrefsRepositoryImplProvider.get(), (CommunalMediaRepository) this.referenceSysUIComponentImpl.communalMediaRepositoryImplProvider.get(), (SmartspaceRepository) this.referenceSysUIComponentImpl.smartspaceRepositoryImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CommunalSettingsInteractor) this.referenceSysUIComponentImpl.communalSettingsInteractorProvider.get(), (CommunalAppWidgetHost) this.referenceSysUIComponentImpl.provideCommunalAppWidgetHostProvider.get(), this.referenceSysUIComponentImpl.editWidgetsActivityStarterImpl(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideCommunalTableLogBufferProvider.get());
                    case 144:
                        return (T) new CommunalWidgetRepositoryImpl((CommunalAppWidgetHost) this.referenceSysUIComponentImpl.provideCommunalAppWidgetHostProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CommunalWidgetHost) this.referenceSysUIComponentImpl.provideCommunalWidgetHostProvider.get(), (CommunalWidgetDao) this.referenceSysUIComponentImpl.provideCommunalWidgetDaoProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get(), (BackupManager) this.referenceSysUIComponentImpl.provideBackupManagerProvider.get(), (CommunalBackupUtils) this.referenceSysUIComponentImpl.providesCommunalBackupUtilsProvider.get(), (PackageChangeRepository) this.referenceSysUIComponentImpl.packageChangeRepositoryImplProvider.get());
                    case 145:
                        Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        CoroutineScope coroutineScope2 = (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get();
                        WidgetInteractionHandler widgetInteractionHandler = (WidgetInteractionHandler) this.referenceSysUIComponentImpl.widgetInteractionHandlerProvider.get();
                        Looper provideMainLooper = GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper();
                        LogBuffer logBuffer2 = (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get();
                        CommunalWidgetModule.Companion.getClass();
                        return (T) new CommunalAppWidgetHost(context, coroutineScope2, 116, widgetInteractionHandler, provideMainLooper, logBuffer2);
                    case 146:
                        return (T) new WidgetInteractionHandler((ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 147:
                        return (T) new ActivityStarterImpl((SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.legacyActivityStarterInternalImplProvider), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider));
                    case 148:
                        return (T) new LegacyActivityStarterInternalImpl(DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.dozeServiceHostProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeControllerProvider), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (ShadeAnimationInteractor) this.referenceSysUIComponentImpl.provideShadeAnimationInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider), (ActivityTransitionAnimator) this.referenceSysUIComponentImpl.provideActivityTransitionAnimatorProvider.get(), this.referenceGlobalRootComponentImpl.context, ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityIntentHelper) this.referenceSysUIComponentImpl.activityIntentHelperProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get());
                    case 149:
                        return (T) Optional.of((CentralSurfaces) this.referenceSysUIComponentImpl.centralSurfacesImplProvider.get());
                    case 150:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl2.injectCentralSurfacesImpl(new CentralSurfacesImpl((MdmOverlayContainer) referenceSysUIComponentImpl2.mdmOverlayContainerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.coverHostImplProvider), (SystemUICommandActionHandler) this.referenceSysUIComponentImpl.systemUICommandActionHandlerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), this.referenceGlobalRootComponentImpl.context, (NotificationsController) this.referenceSysUIComponentImpl.provideNotificationsControllerProvider.get(), (FragmentService) this.referenceSysUIComponentImpl.fragmentServiceProvider.get(), (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get(), (AutoHideController) this.referenceSysUIComponentImpl.autoHideControllerProvider.get(), (StatusBarInitializer) this.referenceSysUIComponentImpl.statusBarInitializerProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarSignalPolicy) this.referenceSysUIComponentImpl.statusBarSignalPolicyProvider.get(), (PulseExpansionHandler) this.referenceSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (NotificationGutsManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), this.referenceGlobalRootComponentImpl.displayMetrics(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), this.referenceSysUIComponentImpl.shadeLogger(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (ShadeSurface) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get(), (NotificationMediaManager) this.referenceSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (QuickSettingsController) this.referenceSysUIComponentImpl.provideQuickSettingsControllerProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SysuiColorExtractor) this.referenceSysUIComponentImpl.sysuiColorExtractorProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.setBubbles, DoubleCheck.lazy(this.referenceSysUIComponentImpl.noteTaskControllerProvider), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (NavigationBarController) this.referenceSysUIComponentImpl.navigationBarControllerImplProvider.get(), (AccessibilityFloatingMenuController) this.referenceSysUIComponentImpl.accessibilityFloatingMenuControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowViewControllerProvider), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.statusBarNotificationPresenterProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.statusBarNotificationActivityStarterProvider), (NotificationLaunchAnimatorControllerProvider) this.referenceSysUIComponentImpl.provideNotificationTransitionAnimatorControllerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (ScrimController) this.referenceSysUIComponentImpl.scrimControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), (AuthRippleController) this.referenceSysUIComponentImpl.authRippleControllerProvider.get(), (DozeServiceHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (BackActionInteractor) this.referenceSysUIComponentImpl.backActionInteractorProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (DozeScrimController) this.referenceSysUIComponentImpl.dozeScrimControllerProvider.get(), (VolumeComponent) this.referenceSysUIComponentImpl.volumeDialogComponentProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesCommandQueueCallbacksProvider), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (WindowRootViewVisibilityInteractor) this.referenceSysUIComponentImpl.windowRootViewVisibilityInteractorProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (InitController) this.referenceSysUIComponentImpl.initControllerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideTimeTickHandlerProvider.get(), (PluginDependencyProvider) this.referenceGlobalRootComponentImpl.pluginDependencyProvider.get(), (ExtensionController) this.referenceSysUIComponentImpl.extensionControllerImplProvider.get(), (UserInfoControllerImpl) this.referenceSysUIComponentImpl.userInfoControllerImplProvider.get(), this.referenceSysUIComponentImpl.phoneStatusBarPolicy(), (KeyguardIndicationController) this.referenceSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider), (StatusBarTouchableRegionManager) this.referenceSysUIComponentImpl.statusBarTouchableRegionManagerProvider.get(), this.referenceSysUIComponentImpl.notificationIconAreaController(), this.referenceSysUIComponentImpl.brightnessSliderControllerFactory(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (WallpaperController) this.referenceSysUIComponentImpl.wallpaperControllerProvider.get(), (OngoingActivityController) this.referenceSysUIComponentImpl.provideOngoingActivityControllerProvider.get(), (StatusBarHideIconsForBouncerManager) this.referenceSysUIComponentImpl.statusBarHideIconsForBouncerManagerProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), this.referenceSysUIComponentImpl.mainMessageRouter(), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), this.referenceSysUIComponentImpl.setStartingSurface, (ActivityTransitionAnimator) this.referenceSysUIComponentImpl.provideActivityTransitionAnimatorProvider.get(), (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (WiredChargingRippleController) this.referenceSysUIComponentImpl.wiredChargingRippleControllerProvider.get(), (IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.cameraLauncherProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.lightRevealScrimViewModelProvider), (LightRevealScrim) this.referenceSysUIComponentImpl.providesLightRevealScrimProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (BrightnessMirrorShowingInteractor) this.referenceSysUIComponentImpl.brightnessMirrorShowingInteractorProvider.get(), (GlanceableHubContainerController) this.referenceSysUIComponentImpl.glanceableHubContainerControllerProvider.get(), this.referenceSysUIComponentImpl.emergencyGestureIntentFactory(), (SecQpBlurController) this.referenceSysUIComponentImpl.secQpBlurControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.navBarHelperProvider), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (NotifRemoteViewCache) this.referenceSysUIComponentImpl.provideNotifRemoteViewCacheProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sBlueLightFilterSWTileProvider), (AiAgentEffect) this.referenceSysUIComponentImpl.provideAiAgentEffectProvider.get()));
                    case 151:
                        return (T) new MdmOverlayContainer(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider));
                    case 152:
                        return (T) new CoverHostImpl(this.referenceGlobalRootComponentImpl.context, (CentralSurfaces) this.referenceSysUIComponentImpl.centralSurfacesImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (CoverUtil) this.referenceGlobalRootComponentImpl.coverUtilProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (PluginLockManager) this.referenceSysUIComponentImpl.pluginLockManagerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 153:
                        KeyguardViewMediatorHelperImpl keyguardViewMediatorHelperImpl = (KeyguardViewMediatorHelperImpl) this.referenceSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get();
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        UiEventLogger uiEventLogger = (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get();
                        SessionTracker sessionTracker = (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get();
                        UserTracker userTracker = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                        FalsingCollector falsingCollector = (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get();
                        LockPatternUtils lockPatternUtils = (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get();
                        BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get();
                        Lazy lazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider);
                        DismissCallbackRegistry dismissCallbackRegistry = (DismissCallbackRegistry) this.referenceSysUIComponentImpl.dismissCallbackRegistryProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        DumpManager dumpManager = (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
                        PowerManager powerManager = (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get();
                        TrustManager trustManager = (TrustManager) this.referenceGlobalRootComponentImpl.provideTrustManagerProvider.get();
                        UserSwitcherController userSwitcherController = (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get();
                        Executor executor2 = (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get();
                        DeviceConfigProxy deviceConfigProxy = (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get();
                        NavigationModeController navigationModeController = (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get();
                        KeyguardDisplayManager keyguardDisplayManager = (KeyguardDisplayManager) this.referenceSysUIComponentImpl.keyguardDisplayManagerProvider.get();
                        DozeParameters dozeParameters = (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get();
                        SysuiStatusBarStateController sysuiStatusBarStateController = (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        Lazy lazy2 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider);
                        ScreenOffAnimationController screenOffAnimationController = (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get();
                        Lazy lazy3 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider);
                        ScreenOnCoordinator screenOnCoordinator = (ScreenOnCoordinator) this.referenceSysUIComponentImpl.screenOnCoordinatorProvider.get();
                        KeyguardTransitions keyguardTransitions = this.referenceSysUIComponentImpl.setKeyguardTransitions;
                        InteractionJankMonitor interactionJankMonitor = (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get();
                        DreamOverlayStateController dreamOverlayStateController = (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get();
                        JavaAdapter javaAdapter = (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get();
                        WallpaperRepository wallpaperRepository = (WallpaperRepository) this.referenceSysUIComponentImpl.wallpaperRepositoryImplProvider.get();
                        Lazy lazy4 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeControllerProvider);
                        Lazy lazy5 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider);
                        Lazy lazy6 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideActivityTransitionAnimatorProvider);
                        Lazy lazy7 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.scrimControllerProvider);
                        IActivityTaskManager iActivityTaskManager = (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get();
                        FeatureFlags featureFlags2 = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        SecureSettings secureSettings = (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get();
                        SystemSettings systemSettings = (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl();
                        SystemClock systemClock = (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get();
                        CoroutineDispatcher coroutineDispatcher2 = (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get();
                        Lazy lazy8 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.dreamViewModelProvider);
                        Lazy lazy9 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.communalTransitionViewModelProvider);
                        SystemPropertiesHelper systemPropertiesHelper = (SystemPropertiesHelper) this.referenceGlobalRootComponentImpl.systemPropertiesHelperProvider.get();
                        Lazy lazy10 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityManagerProvider);
                        SelectedUserInteractor selectedUserInteractor = (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get();
                        KeyguardInteractor keyguardInteractor = (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get();
                        WindowManagerOcclusionManager windowManagerOcclusionManager = (WindowManagerOcclusionManager) this.referenceSysUIComponentImpl.windowManagerOcclusionManagerProvider.get();
                        return SafeUIState.isSysUiSafeModeEnabled() ? (T) new SafeUIKeyguardViewMediator(keyguardViewMediatorHelperImpl, context2, uiEventLogger, sessionTracker, userTracker, falsingCollector, lockPatternUtils, broadcastDispatcher, lazy, dismissCallbackRegistry, keyguardUpdateMonitor, dumpManager, executor2, powerManager, trustManager, userSwitcherController, deviceConfigProxy, navigationModeController, keyguardDisplayManager, dozeParameters, sysuiStatusBarStateController, keyguardStateController, lazy2, screenOffAnimationController, lazy3, screenOnCoordinator, keyguardTransitions, interactionJankMonitor, dreamOverlayStateController, javaAdapter, wallpaperRepository, lazy4, lazy5, lazy6, lazy7, iActivityTaskManager, featureFlags2, secureSettings, systemSettings, systemClock, coroutineDispatcher2, lazy8, lazy9, systemPropertiesHelper, lazy10, selectedUserInteractor, keyguardInteractor, windowManagerOcclusionManager) : (T) new KeyguardViewMediator(keyguardViewMediatorHelperImpl, context2, uiEventLogger, sessionTracker, userTracker, falsingCollector, lockPatternUtils, broadcastDispatcher, lazy, dismissCallbackRegistry, keyguardUpdateMonitor, dumpManager, executor2, powerManager, trustManager, userSwitcherController, deviceConfigProxy, navigationModeController, keyguardDisplayManager, dozeParameters, sysuiStatusBarStateController, keyguardStateController, lazy2, screenOffAnimationController, lazy3, screenOnCoordinator, keyguardTransitions, interactionJankMonitor, dreamOverlayStateController, javaAdapter, wallpaperRepository, lazy4, lazy5, lazy6, lazy7, iActivityTaskManager, featureFlags2, secureSettings, systemSettings, systemClock, coroutineDispatcher2, lazy8, lazy9, systemPropertiesHelper, lazy10, selectedUserInteractor, keyguardInteractor, windowManagerOcclusionManager);
                    case 154:
                        return (T) new KeyguardViewMediatorHelperImpl(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideKeyguardUnlockAnimationExecutorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.scrimControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSurfaceControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider), (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (KeyguardDisplayManager) this.referenceSysUIComponentImpl.keyguardDisplayManagerProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardSysDumpTrigger) this.referenceSysUIComponentImpl.keyguardSysDumpTriggerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (PickupController) this.referenceSysUIComponentImpl.pickupControllerProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DismissCallbackRegistry) this.referenceSysUIComponentImpl.dismissCallbackRegistryProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UnlockedScreenOffAnimationController) this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (SecUnlockedScreenOffAnimationHelper) this.referenceSysUIComponentImpl.secUnlockedScreenOffAnimationHelperProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.dreamViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), (LooperSlowLogController) this.referenceSysUIComponentImpl.looperSlowLogControllerImplProvider.get(), (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideKeyguardLoggerProvider.get(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideSecurityLoggerProvider.get(), (BootAnimationFinishedTrigger) this.referenceSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (BinderCallMonitor) this.referenceSysUIComponentImpl.binderCallMonitorImplProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), (KeyguardFoldControllerImpl) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardFixedRotationMonitor) this.referenceSysUIComponentImpl.keyguardFixedRotationMonitorProvider.get(), (KeyguardVisibilityMonitor) this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideNotificationsControllerProvider), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (CarLifeManager) this.referenceSysUIComponentImpl.carLifeManagerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.briefNowBarControllerProvider), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get());
                    case 155:
                        HandlerThread handlerThread = new HandlerThread("UnlockAnimationThread", -4);
                        handlerThread.start();
                        return (T) new HandlerExecutor(Handler.createAsync(handlerThread.getLooper()));
                    case 156:
                        return (T) new NotificationShadeWindowControllerImpl((SecNotificationShadeWindowControllerHelperImpl) this.referenceSysUIComponentImpl.secNotificationShadeWindowControllerHelperImplProvider.get(), this.referenceGlobalRootComponentImpl.context, new WindowRootViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SysuiColorExtractor) this.referenceSysUIComponentImpl.sysuiColorExtractorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider), this.referenceSysUIComponentImpl.shadeWindowLogger(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.selectedUserInteractorProvider), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.communalInteractorProvider));
                    case 157:
                        return (T) new SecNotificationShadeWindowControllerHelperImpl(this.referenceGlobalRootComponentImpl.context, (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (KeyguardVisibilityMonitor) this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (EngineeringModeManagerWrapper) this.referenceSysUIComponentImpl.engineeringModeManagerWrapperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginLockStarManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.powerInteractorProvider), (KeyguardViewMediatorHelper) this.referenceSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get());
                    case 158:
                        return (T) new DisplayLifecycle(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider));
                    case 159:
                        return (T) new KeyguardFoldControllerImpl(this.referenceGlobalRootComponentImpl.context, (KeyguardFoldControllerConfig) this.referenceSysUIComponentImpl.keyguardFoldControllerConfigImplProvider.get(), (KeyguardFoldControllerDependency) this.referenceSysUIComponentImpl.keyguardFoldControllerDependencyImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (BinderCallMonitor) this.referenceSysUIComponentImpl.binderCallMonitorImplProvider.get(), (LooperSlowLogController) this.referenceSysUIComponentImpl.looperSlowLogControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 160:
                        return (T) new KeyguardFoldControllerConfigImpl();
                    case 161:
                        return (T) new KeyguardFoldControllerDependencyImpl();
                    case 162:
                        return (T) new WakefulnessLifecycle(this.referenceGlobalRootComponentImpl.context, (IWallpaperManager) this.referenceGlobalRootComponentImpl.provideIWallPaperManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 163:
                        return (T) new LooperSlowLogControllerImpl(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.providesChoreographerProvider), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 164:
                        return (T) new KeyguardVisibilityMonitor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider));
                    case 165:
                        return (T) new ShadeExpansionStateManager();
                    case 166:
                        return (T) new EngineeringModeManagerWrapper(this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 167:
                        return (T) this.referenceSysUIComponentImpl.injectPluginAODManager(new PluginAODManager(this.referenceGlobalRootComponentImpl.context, (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (LockscreenNotificationManager) this.referenceSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (PluginFaceWidgetManager) this.referenceSysUIComponentImpl.pluginFaceWidgetManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (DozeServiceHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.coverScreenManagerProvider), (FaceWidgetWallpaperUtilsWrapper) this.referenceSysUIComponentImpl.faceWidgetWallpaperUtilsWrapperProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideAODLoggerProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get(), (NotificationsController) this.referenceSysUIComponentImpl.provideNotificationsControllerProvider.get(), (KeyguardNotificationVisibilityProvider) this.referenceSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (LockscreenNotificationIconsOnlyController) this.referenceSysUIComponentImpl.lockscreenNotificationIconsOnlyControllerProvider.get(), (SubScreenQuickPanelWindowController) this.referenceSysUIComponentImpl.subScreenQuickPanelWindowControllerProvider.get(), (KeyguardViewMediatorHelper) this.referenceSysUIComponentImpl.keyguardViewMediatorHelperImplProvider.get(), (AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (AODTouchModeManager) this.referenceSysUIComponentImpl.aODTouchModeManagerProvider.get(), (KeyguardWallpaperController) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get()));
                    case 168:
                        return (T) new LockscreenNotificationManager(this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), this.referenceSysUIComponentImpl.lockscreenNotificationManagerLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 169:
                        LogBufferFactory logBufferFactory2 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        this.referenceSysUIComponentImpl.notifPipelineFlags();
                        return (T) logBufferFactory2.create(1000, "NotifLog", false);
                    case 170:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl3 = this.referenceSysUIComponentImpl;
                        Context context3 = this.referenceGlobalRootComponentImpl.context;
                        PluginManager pluginManager = (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get();
                        KeyguardFoldController keyguardFoldController = (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get();
                        KeyguardClockPositionAlgorithm keyguardClockPositionAlgorithm = (KeyguardClockPositionAlgorithm) this.referenceSysUIComponentImpl.faceWidgetPositionAlgorithmWrapperProvider.get();
                        FaceWidgetContainerWrapper faceWidgetContainerWrapper = (FaceWidgetContainerWrapper) this.referenceSysUIComponentImpl.faceWidgetContainerWrapperProvider.get();
                        FaceWidgetKeyguardStatusCallbackWrapper faceWidgetKeyguardStatusCallbackWrapper = (FaceWidgetKeyguardStatusCallbackWrapper) this.referenceSysUIComponentImpl.faceWidgetKeyguardStatusCallbackWrapperProvider.get();
                        FaceWidgetKeyguardUpdateMonitorWrapper faceWidgetKeyguardUpdateMonitorWrapper = (FaceWidgetKeyguardUpdateMonitorWrapper) this.referenceSysUIComponentImpl.faceWidgetKeyguardUpdateMonitorWrapperProvider.get();
                        FaceWidgetDisplayLifeCycleWrapper faceWidgetDisplayLifeCycleWrapper = (FaceWidgetDisplayLifeCycleWrapper) this.referenceSysUIComponentImpl.faceWidgetDisplayLifeCycleWrapperProvider.get();
                        FaceWidgetWakefulnessLifecycleWrapper faceWidgetWakefulnessLifecycleWrapper = (FaceWidgetWakefulnessLifecycleWrapper) this.referenceSysUIComponentImpl.faceWidgetWakefulnessLifecycleWrapperProvider.get();
                        FaceWidgetKnoxStateMonitorWrapper faceWidgetKnoxStateMonitorWrapper = (FaceWidgetKnoxStateMonitorWrapper) this.referenceSysUIComponentImpl.faceWidgetKnoxStateMonitorWrapperProvider.get();
                        FaceWidgetLockPatternUtilsWrapper faceWidgetLockPatternUtilsWrapper = (FaceWidgetLockPatternUtilsWrapper) this.referenceSysUIComponentImpl.faceWidgetLockPatternUtilsWrapperProvider.get();
                        FaceWidgetWallpaperUtilsWrapper faceWidgetWallpaperUtilsWrapper = (FaceWidgetWallpaperUtilsWrapper) this.referenceSysUIComponentImpl.faceWidgetWallpaperUtilsWrapperProvider.get();
                        FaceWidgetPluginLockManagerWrapper faceWidgetPluginLockManagerWrapper = (FaceWidgetPluginLockManagerWrapper) this.referenceSysUIComponentImpl.faceWidgetPluginLockManagerWrapperProvider.get();
                        FaceWidgetNotificationControllerWrapper faceWidgetNotificationControllerWrapper = (FaceWidgetNotificationControllerWrapper) this.referenceSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get();
                        FaceWidgetLockscreenShadeTransitionControllerWrapper faceWidgetLockscreenShadeTransitionControllerWrapper = (FaceWidgetLockscreenShadeTransitionControllerWrapper) this.referenceSysUIComponentImpl.faceWidgetLockscreenShadeTransitionControllerWrapperProvider.get();
                        ExternalClockProvider externalClockProvider = (ExternalClockProvider) this.referenceGlobalRootComponentImpl.externalClockProvider.get();
                        KeyguardFastBioUnlockController keyguardFastBioUnlockController = (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get();
                        Lazy lazy11 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider);
                        MediaDataManager mediaDataManager = (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get();
                        BootAnimationFinishedCache bootAnimationFinishedCache = (BootAnimationFinishedCache) this.referenceSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get();
                        KeyguardWallpaper keyguardWallpaper = (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get();
                        KeyguardEditModeController keyguardEditModeController = (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get();
                        DozeParameters dozeParameters2 = (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get();
                        KeyguardStatusViewAlphaChangeControllerWrapper keyguardStatusViewAlphaChangeControllerWrapper = (KeyguardStatusViewAlphaChangeControllerWrapper) this.referenceSysUIComponentImpl.keyguardStatusViewAlphaChangeControllerWrapperProvider.get();
                        IndicatorGardenPresenter indicatorGardenPresenter = (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get();
                        MediaDataRepository mediaDataRepository = (MediaDataRepository) this.referenceSysUIComponentImpl.mediaDataRepositoryProvider.get();
                        Provider provider3 = this.referenceSysUIComponentImpl.mediaOutputControllerProvider;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl4 = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl3.injectPluginFaceWidgetManager(new PluginFaceWidgetManager(context3, pluginManager, keyguardFoldController, keyguardClockPositionAlgorithm, faceWidgetContainerWrapper, faceWidgetKeyguardStatusCallbackWrapper, faceWidgetKeyguardUpdateMonitorWrapper, faceWidgetDisplayLifeCycleWrapper, faceWidgetWakefulnessLifecycleWrapper, faceWidgetKnoxStateMonitorWrapper, faceWidgetLockPatternUtilsWrapper, faceWidgetWallpaperUtilsWrapper, faceWidgetPluginLockManagerWrapper, faceWidgetNotificationControllerWrapper, faceWidgetLockscreenShadeTransitionControllerWrapper, externalClockProvider, keyguardFastBioUnlockController, lazy11, mediaDataManager, bootAnimationFinishedCache, keyguardWallpaper, keyguardEditModeController, dozeParameters2, keyguardStatusViewAlphaChangeControllerWrapper, indicatorGardenPresenter, mediaDataRepository, provider3, referenceSysUIComponentImpl4.soundCraftNowBarControllerProvider, (CapturedBlurContainerController) referenceSysUIComponentImpl4.capturedBlurContainerControllerProvider.get()));
                    case 171:
                        return (T) new FaceWidgetPositionAlgorithmWrapper((LogBuffer) this.referenceSysUIComponentImpl.provideKeyguardClockLogProvider.get());
                    case 172:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "KeyguardClockLog");
                    case 173:
                        return (T) new FaceWidgetContainerWrapper(this.referenceGlobalRootComponentImpl.context);
                    case 174:
                        return (T) new FaceWidgetKeyguardStatusCallbackWrapper();
                    case 175:
                        return (T) new FaceWidgetKeyguardUpdateMonitorWrapper((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 176:
                        return (T) new FaceWidgetDisplayLifeCycleWrapper((DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                    case 177:
                        return (T) new FaceWidgetWakefulnessLifecycleWrapper((WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 178:
                        return (T) new FaceWidgetKnoxStateMonitorWrapper((KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get());
                    case 179:
                        DependencyProvider dependencyProvider = this.referenceSysUIComponentImpl.dependencyProvider;
                        Context context4 = this.referenceGlobalRootComponentImpl.context;
                        DumpManager dumpManager2 = (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
                        SelectedUserInteractor selectedUserInteractor2 = (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get();
                        dependencyProvider.getClass();
                        return (T) new KnoxStateMonitorImpl(context4, dumpManager2, selectedUserInteractor2);
                    case 180:
                        return (T) new FaceWidgetLockPatternUtilsWrapper((LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 181:
                        return (T) new FaceWidgetWallpaperUtilsWrapper((KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get());
                    case 182:
                        return (T) new KeyguardWallpaperController(this.referenceGlobalRootComponentImpl.context, ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PluginWallpaperManager) this.referenceSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (WallpaperLogger) this.referenceSysUIComponentImpl.provideWallpaperLoggerProvider.get(), (WallpaperEventNotifier) this.referenceSysUIComponentImpl.wallpaperEventNotifierProvider.get(), this.referenceSysUIComponentImpl.systemWallpaperColors(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), this.referenceSysUIComponentImpl.keyguardWallpaperEventHandler(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (WallpaperChangeNotifier) this.referenceSysUIComponentImpl.wallpaperChangeNotifierProvider.get());
                    case 183:
                        return (T) new PluginWallpaperManagerImpl((PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockDelegateApp) this.referenceSysUIComponentImpl.pluginLockDelegateAppProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get(), this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 184:
                        return (T) new PluginLockMediatorImpl(this.referenceGlobalRootComponentImpl.context, (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (SPluginManager) this.referenceSysUIComponentImpl.provideSPluginManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (ExternalClockProvider) this.referenceGlobalRootComponentImpl.externalClockProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardShortcutManagerProvider), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 185:
                        return (T) new SPluginManagerImpl(this.referenceGlobalRootComponentImpl.context, new SPluginInitializerImpl(), (UncaughtExceptionPreHandlerManager) this.referenceGlobalRootComponentImpl.uncaughtExceptionPreHandlerManagerProvider.get());
                    case 186:
                        return (T) new DozeParameters((SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (AlwaysOnDisplayPolicy) this.referenceSysUIComponentImpl.alwaysOnDisplayPolicyProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get(), (UnlockedScreenOffAnimationController) this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DozeInteractor) this.referenceSysUIComponentImpl.dozeInteractorProvider.get());
                    case 187:
                        return (T) new AlwaysOnDisplayPolicy(this.referenceGlobalRootComponentImpl.context);
                    case 188:
                        return (T) new ScreenOffAnimationController((Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get(), (UnlockedScreenOffAnimationController) this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 189:
                        Optional of = Optional.of((Optional) this.referenceSysUIComponentImpl.provideSysUIUnfoldComponentProvider.get());
                        CommonSystemUIUnfoldModule.Companion.getClass();
                        T t = (T) ((Optional) (of.isPresent() ? of.get() : Optional.empty()));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 190:
                        return (T) SysUIUnfoldModule_ProvideSysUIUnfoldComponentFactory.provideSysUIUnfoldComponent(this.referenceSysUIComponentImpl.sysUIUnfoldModule, (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.provideNaturalRotationProgressProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.provideStatusBarScopedTransitionProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.unfoldBgTransitionProgressProvider.get(), new SysUIUnfoldComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i));
                    case 191:
                        return (T) new UnlockedScreenOffAnimationController((SecUnlockedScreenOffAnimationHelper) this.referenceSysUIComponentImpl.secUnlockedScreenOffAnimationHelperProvider.get(), this.referenceGlobalRootComponentImpl.context, (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (StatusBarStateControllerImpl) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.dozeParametersProvider), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeLockscreenInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secQpBlurControllerProvider));
                    case 192:
                        return (T) new SecUnlockedScreenOffAnimationHelper((AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.dozeParametersProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (StatusBarStateControllerImpl) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardVisibilityMonitor) this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginFaceWidgetManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginLockStarManagerProvider), (AODTouchModeManager) this.referenceSysUIComponentImpl.aODTouchModeManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider));
                    case 193:
                        return (T) new AODAmbientWallpaperHelper((SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.statusBarWindowControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider));
                    case 194:
                        return (T) new StatusBarWindowController(this.referenceGlobalRootComponentImpl.context, (StatusBarWindowView) this.referenceSysUIComponentImpl.providesStatusBarWindowViewProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (StatusBarContentInsetsProvider) this.referenceSysUIComponentImpl.statusBarContentInsetsProvider.get(), (FragmentService) this.referenceSysUIComponentImpl.fragmentServiceProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), this.referenceSysUIComponentImpl.statusBarWindowControllerExt());
                    case 195:
                        LayoutInflater layoutInflater = (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get();
                        StatusBarWindowModule.Companion.getClass();
                        T t2 = (T) ((StatusBarWindowView) layoutInflater.inflate(R.layout.super_status_bar, (ViewGroup) null));
                        if (t2 != null) {
                            return t2;
                        }
                        throw new IllegalStateException("R.layout.super_status_bar could not be properly inflated");
                    case 196:
                        return (T) new StatusBarContentInsetsProvider(this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (SysUICutoutProvider) this.referenceSysUIComponentImpl.sysUICutoutProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 197:
                        return (T) new SysUICutoutProvider(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.cameraProtectionLoaderImpl());
                    case 198:
                        return (T) new IndicatorGardenPresenter((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceGlobalRootComponentImpl.context, (IndicatorGardenAlgorithmFactory) this.referenceSysUIComponentImpl.indicatorGardenAlgorithmFactoryProvider.get(), (IndicatorGardenInputProperties) this.referenceSysUIComponentImpl.indicatorGardenInputPropertiesProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get());
                    case 199:
                        return (T) new IndicatorGardenAlgorithmFactory((IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get(), this.referenceSysUIComponentImpl.indicatorGardenAlgorithmNoCutout(), this.referenceSysUIComponentImpl.indicatorGardenAlgorithmCenterCutout(), this.referenceSysUIComponentImpl.indicatorGardenAlgorithmSidelingCenterCutout());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id / 100) {
                    case 0:
                        return get0();
                    case 1:
                        return get1();
                    case 2:
                        return get2();
                    case 3:
                        return get3();
                    case 4:
                        return get4();
                    case 5:
                        return get5();
                    case 6:
                        return get6();
                    case 7:
                        return get7();
                    case 8:
                        return get8();
                    case 9:
                        return get9();
                    case 10:
                        return get10();
                    case 11:
                        return get11();
                    case 12:
                        return get12();
                    case 13:
                        return get13();
                    case 14:
                        return get14();
                    case 15:
                        return get15();
                    case 16:
                        return get16();
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get10() {
                switch (this.id) {
                    case 1000:
                        return (T) new PartitionedGridLayout((PartitionedGridViewModel) this.referenceSysUIComponentImpl.partitionedGridViewModelProvider.get());
                    case 1001:
                        return (T) new PartitionedGridViewModel((IconTilesViewModel) this.referenceSysUIComponentImpl.iconTilesViewModelImplProvider.get(), (InfiniteGridSizeViewModel) this.referenceSysUIComponentImpl.infiniteGridSizeViewModelImplProvider.get(), (IconLabelVisibilityViewModel) this.referenceSysUIComponentImpl.iconLabelVisibilityViewModelImplProvider.get());
                    case 1002:
                        return (T) new IconLabelVisibilityViewModelImpl((IconLabelVisibilityInteractor) this.referenceSysUIComponentImpl.iconLabelVisibilityInteractorProvider.get());
                    case 1003:
                        return (T) new IconLabelVisibilityInteractor((QSPreferencesInteractor) this.referenceSysUIComponentImpl.qSPreferencesInteractorProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.providesIconTileLabelVisibilityLogProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case VolteConstants.ErrorCode.CLIENT_ERROR_NOT_ALLOWED_URI /* 1004 */:
                        return (T) new QSPreferencesInteractor((QSPreferencesRepository) this.referenceSysUIComponentImpl.qSPreferencesRepositoryProvider.get());
                    case 1005:
                        return (T) new QSPreferencesRepository((UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1006:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        PanelsModule.Companion.getClass();
                        return (T) logBufferFactory.create(50, "IconLabelVisibilityLog", true);
                    case 1007:
                        return (T) new EditModeViewModel((EditTilesListInteractor) this.referenceSysUIComponentImpl.editTilesListInteractorProvider.get(), (CurrentTilesInteractor) this.referenceSysUIComponentImpl.currentTilesInteractorImplProvider.get(), (TilesAvailabilityInteractor) this.referenceSysUIComponentImpl.tilesAvailabilityInteractorProvider.get(), this.referenceSysUIComponentImpl.minimumTilesInteractor(), (GridLayout) this.referenceSysUIComponentImpl.partitionedGridLayoutProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (GridLayoutTypeInteractor) this.referenceSysUIComponentImpl.gridLayoutTypeInteractorProvider.get(), this.referenceSysUIComponentImpl.mapOfGridLayoutTypeAndGridLayout());
                    case EnterpriseContainerCallback.CONTAINER_PACKAGE_UNINSTALL_SUCCESS /* 1008 */:
                        return (T) new EditTilesListInteractor((StockTilesRepository) this.referenceSysUIComponentImpl.stockTilesRepositoryProvider.get(), (QSTileConfigProvider) this.referenceSysUIComponentImpl.qSTileConfigProviderImplProvider.get(), (IconAndNameCustomRepository) this.referenceSysUIComponentImpl.iconAndNameCustomRepositoryProvider.get());
                    case EnterpriseContainerCallback.CONTAINER_PACKAGE_UNINSTALL_FAILURE /* 1009 */:
                        return (T) new StockTilesRepository(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
                    case EnterpriseContainerCallback.CONTAINER_MOUNT_STATUS /* 1010 */:
                        return (T) new IconAndNameCustomRepository((InstalledTilesComponentRepository) this.referenceSysUIComponentImpl.installedTilesComponentRepositoryImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case EnterpriseContainerCallback.CONTAINER_PACKAGE_INFORMATION /* 1011 */:
                        return (T) new TilesAvailabilityInteractor((NewTilesAvailabilityInteractor) this.referenceSysUIComponentImpl.newTilesAvailabilityInteractorProvider.get(), (QSFactory) this.referenceSysUIComponentImpl.qSFactoryImplProvider.get(), (QSPipelineFlagsRepository) this.referenceSysUIComponentImpl.qSPipelineFlagsRepositoryProvider.get());
                    case EnterpriseContainerCallback.CONTAINER_CHANGE_PWD_SUCCESSFUL /* 1012 */:
                        return (T) new NewTilesAvailabilityInteractor(this.referenceSysUIComponentImpl.mapOfStringAndQSTileAvailabilityInteractor(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get());
                    case EnterpriseContainerCallback.CONTAINER_CHANGE_PWD_FAILED /* 1013 */:
                        return (T) new AnonymousClass27();
                    case EnterpriseContainerCallback.CONTAINER_VERIFY_PWD_SUCCESSFUL /* 1014 */:
                        return (T) new ColorCorrectionRepositoryImpl((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case EnterpriseContainerCallback.CONTAINER_VERIFY_PWD_FAILED /* 1015 */:
                        return (T) new OneHandedModeRepositoryImpl((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case EnterpriseContainerCallback.CONTAINER_CANCELLED /* 1016 */:
                        return (T) new ScreenRecordRepositoryImpl((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (RecordingController) this.referenceSysUIComponentImpl.recordingControllerProvider.get());
                    case 1017:
                        return (T) new RotationLockControllerImpl((RotationPolicyWrapper) this.referenceSysUIComponentImpl.bindRotationPolicyWrapperProvider.get(), (DeviceStateRotationLockSettingController) this.referenceSysUIComponentImpl.deviceStateRotationLockSettingControllerProvider.get(), this.referenceSysUIComponentImpl.namedStringArray());
                    case 1018:
                        return (T) new RotationPolicyWrapperImpl(this.referenceGlobalRootComponentImpl.context, (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 1019:
                        return (T) new DeviceStateRotationLockSettingController((RotationPolicyWrapper) this.referenceSysUIComponentImpl.bindRotationPolicyWrapperProvider.get(), (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DeviceStateRotationLockSettingsManager) this.referenceSysUIComponentImpl.provideAutoRotateSettingsManagerProvider.get(), this.referenceSysUIComponentImpl.deviceStateRotationLockSettingControllerLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1020:
                        return (T) StatusBarPolicyModule_ProvideAutoRotateSettingsManagerFactory.provideAutoRotateSettingsManager(this.referenceGlobalRootComponentImpl.context);
                    case 1021:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "DeviceStateAutoRotationLog");
                    case 1022:
                        return (T) new CameraAutoRotateRepositoryImpl((SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1023:
                        return (T) new CameraSensorPrivacyRepositoryImpl((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SensorPrivacyManager) this.referenceGlobalRootComponentImpl.provideSensorPrivacyManagerProvider.get());
                    case 1024:
                        return (T) Optional.of((LockscreenContent) this.referenceSysUIComponentImpl.providesLockscreenContentProvider.get());
                    case 1025:
                        return (T) new NotificationsShadeScene((NotificationsShadeSceneViewModel) this.referenceSysUIComponentImpl.notificationsShadeSceneViewModelProvider.get(), (OverlayShadeViewModel) this.referenceSysUIComponentImpl.overlayShadeViewModelProvider.get(), (ShadeHeaderViewModel) this.referenceSysUIComponentImpl.shadeHeaderViewModelProvider.get(), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), (BatteryMeterViewController.Factory) this.referenceSysUIComponentImpl.factoryProvider27.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), this.referenceSysUIComponentImpl.saveableSession(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfLockscreenContentProvider));
                    case 1026:
                        return (T) new NotificationsShadeSceneViewModel();
                    case 1027:
                        return (T) new NotificationInsetsImpl();
                    case 1028:
                        return (T) new Recents(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.recentsImplementation(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 1029:
                        return (T) SysUIConcurrencyModule_ProvideBackPanelUiThreadContextFactory.provideBackPanelUiThreadContext(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 1030:
                        return (T) new BackGestureTfClassifierProvider();
                    case 1031:
                        return (T) new CornerGestureHandler(this.referenceGlobalRootComponentImpl.context, (NavBarStore) this.referenceSysUIComponentImpl.provideNavbarStoreProvider.get(), (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider));
                    case 1032:
                        return (T) new SecTaskBarManagerImpl(this.referenceGlobalRootComponentImpl.context, (LightBarTransitionsController.Factory) this.referenceSysUIComponentImpl.factoryProvider19.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (NavBarStore) this.referenceSysUIComponentImpl.provideNavbarStoreProvider.get());
                    case 1033:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        return (T) new AutoHideController(referenceGlobalRootComponentImpl.context, (Handler) referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get());
                    case 1034:
                        return (T) new ScreenPinningRequest(this.referenceGlobalRootComponentImpl.context, (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.navigationBarControllerImplProvider), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1035:
                        return (T) new InWindowLauncherUnlockAnimationManager((InWindowLauncherUnlockAnimationInteractor) this.referenceSysUIComponentImpl.inWindowLauncherUnlockAnimationInteractorProvider.get(), (InWindowLauncherAnimationViewModel) this.referenceSysUIComponentImpl.inWindowLauncherAnimationViewModelProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1036:
                        return (T) new InWindowLauncherUnlockAnimationInteractor((InWindowLauncherUnlockAnimationRepository) this.referenceSysUIComponentImpl.inWindowLauncherUnlockAnimationRepositoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSurfaceBehindRepositoryImplProvider), (ActivityManagerWrapper) this.referenceSysUIComponentImpl.provideActivityManagerWrapperProvider.get());
                    case 1037:
                        return (T) new InWindowLauncherUnlockAnimationRepository();
                    case 1038:
                        return (T) new KeyguardSurfaceBehindRepositoryImpl();
                    case 1039:
                        return (T) new InWindowLauncherAnimationViewModel((InWindowLauncherUnlockAnimationInteractor) this.referenceSysUIComponentImpl.inWindowLauncherUnlockAnimationInteractorProvider.get());
                    case 1040:
                        return (T) new SearcleManager(this.referenceGlobalRootComponentImpl.context);
                    case 1041:
                        return (T) new LogWrapper(ModuleType.POPUPUI, null);
                    case 1042:
                        return (T) new SecMediaControlPanel(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.secSeekBarViewModel(), (MediaOutputHelper) this.referenceSysUIComponentImpl.mediaOutputHelperProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), (MediaLogger) this.referenceSysUIComponentImpl.providesMediaLoggerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 1043:
                        return (T) new MediaOutputHelper((SecMediaHost) this.referenceSysUIComponentImpl.secMediaHostProvider.get(), (SecQSDetailController) this.referenceSysUIComponentImpl.secQSDetailControllerProvider.get(), this.referenceSysUIComponentImpl.mediaOutputDetailAdapter());
                    case 1044:
                        return (T) new SecQSDetailController(this.referenceSysUIComponentImpl.secQSDetail(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (StatusBarStateControllerImpl) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get());
                    case 1045:
                        return (T) new ColoredBGHelper(this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 1046:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        DependencyProvider dependencyProvider = referenceSysUIComponentImpl.dependencyProvider;
                        MediaLogWriter mediaLogWriter = referenceSysUIComponentImpl.mediaLogWriter();
                        dependencyProvider.getClass();
                        return (T) new MediaLoggerImpl(mediaLogWriter);
                    case 1047:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "MediaLog");
                    case 1048:
                        return (T) new SecMediaPlayerData();
                    case 1049:
                        return (T) new MediaBluetoothHelper(this.referenceGlobalRootComponentImpl.context);
                    case 1050:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        ViewModelFactory viewModelFactory = this.referenceSysUIComponentImpl.viewModelFactory();
                        ColoredBGHelper coloredBGHelper = (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get();
                        AudioManager audioManager = (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get();
                        MediaSdkSupportServiceClient mediaSdkSupportServiceClient = (MediaSdkSupportServiceClient) this.referenceGlobalRootComponentImpl.mediaSdkSupportServiceClientProvider.get();
                        MediaOutputModule.Companion.getClass();
                        return (T) new MediaOutputView(context, null, viewModelFactory, coloredBGHelper, audioManager, mediaSdkSupportServiceClient);
                    case 1051:
                        return (T) new SavedStateHandleAssisted() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.28
                            @Override // com.android.systemui.media.mediaoutput.dagger.SavedStateHandleAssisted
                            public final MediaSessionViewModel create(SavedStateHandle savedStateHandle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new MediaSessionViewModel(switchingProvider.referenceGlobalRootComponentImpl.context, (CommonNotifCollection) switchingProvider.referenceSysUIComponentImpl.notifPipelineProvider.get(), FrameworkServicesModule_ProvideMediaSessionManagerFactory.provideMediaSessionManager(switchingProvider.referenceGlobalRootComponentImpl.context), (AudioManager) switchingProvider.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (DataStore) switchingProvider.referenceSysUIComponentImpl.provideDataStoreProvider.get(), savedStateHandle);
                            }
                        };
                    case 1052:
                        return (T) MediaOutputModule_Companion_ProvideDataStoreFactory.provideDataStore(this.referenceGlobalRootComponentImpl.context);
                    case 1053:
                        return (T) new SavedStateHandleAssisted() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.29
                            @Override // com.android.systemui.media.mediaoutput.dagger.SavedStateHandleAssisted
                            public final SessionAudioPathViewModel create(SavedStateHandle savedStateHandle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                Context context2 = switchingProvider.referenceGlobalRootComponentImpl.context;
                                ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = switchingProvider.referenceSysUIComponentImpl;
                                Provider provider = referenceSysUIComponentImpl2.builtInDeviceControllerProvider;
                                Provider provider2 = referenceSysUIComponentImpl2.bluetoothDeviceControllerProvider;
                                Provider provider3 = referenceSysUIComponentImpl2.chromeCastDeviceControllerProvider;
                                Provider provider4 = referenceSysUIComponentImpl2.audioMirroringDeviceControllerProvider;
                                Provider provider5 = referenceSysUIComponentImpl2.disconnectedDeviceControllerProvider;
                                Provider provider6 = referenceSysUIComponentImpl2.musicShareDeviceControllerProvider;
                                Provider provider7 = referenceSysUIComponentImpl2.wifiDisplayDeviceControllerProvider;
                                Provider provider8 = referenceSysUIComponentImpl2.smartMirroringDeviceControllerProvider;
                                AuracastDeviceController auracastDeviceController = referenceSysUIComponentImpl2.auracastDeviceController();
                                ReferenceSysUIComponentImpl referenceSysUIComponentImpl3 = switchingProvider.referenceSysUIComponentImpl;
                                return new SessionAudioPathViewModel(context2, provider, provider2, provider3, provider4, provider5, provider6, provider7, provider8, auracastDeviceController, referenceSysUIComponentImpl3.remoteDeviceControllerProvider, (DataStore) referenceSysUIComponentImpl3.provideDataStoreProvider.get(), savedStateHandle);
                            }
                        };
                    case 1054:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) new BuiltInDeviceController(referenceGlobalRootComponentImpl2.context, (AudioManager) referenceGlobalRootComponentImpl2.provideAudioManagerProvider.get(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case 1055:
                        return (T) new BluetoothDeviceController((ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case 1056:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl3 = this.referenceGlobalRootComponentImpl;
                        return (T) new ChromeCastDeviceController(referenceGlobalRootComponentImpl3.context, (AudioManager) referenceGlobalRootComponentImpl3.provideAudioManagerProvider.get(), (DataStore) this.referenceSysUIComponentImpl.provideDataStoreProvider.get());
                    case 1057:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl4 = this.referenceGlobalRootComponentImpl;
                        return (T) new AudioMirroringDeviceController(referenceGlobalRootComponentImpl4.context, (AudioManager) referenceGlobalRootComponentImpl4.provideAudioManagerProvider.get(), (DataStore) this.referenceSysUIComponentImpl.provideDataStoreProvider.get());
                    case 1058:
                        return (T) new DisconnectedDeviceController((LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case 1059:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl5 = this.referenceGlobalRootComponentImpl;
                        return (T) new MusicShareDeviceController(referenceGlobalRootComponentImpl5.context, (AudioManager) referenceGlobalRootComponentImpl5.provideAudioManagerProvider.get(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (DataStore) this.referenceSysUIComponentImpl.provideDataStoreProvider.get());
                    case 1060:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl6 = this.referenceGlobalRootComponentImpl;
                        return (T) new WifiDisplayDeviceController(referenceGlobalRootComponentImpl6.context, (AudioManager) referenceGlobalRootComponentImpl6.provideAudioManagerProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (DisplayManagerWrapper) this.referenceSysUIComponentImpl.displayManagerWrapperProvider.get(), (DataStore) this.referenceSysUIComponentImpl.provideDataStoreProvider.get());
                    case 1061:
                        return (T) new DisplayManagerWrapper(this.referenceGlobalRootComponentImpl.context, (LogWrapper) this.referenceSysUIComponentImpl.provideVolumeLogWrapperProvider.get());
                    case 1062:
                        return (T) new LogWrapper(ModuleType.VOLUME, (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideVolumePanelLoggerProvider.get());
                    case 1063:
                        return (T) new SamsungServiceLoggerImpl("VolumePanelLogger", 200, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case 1064:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl7 = this.referenceGlobalRootComponentImpl;
                        return (T) new SmartMirroringDeviceController(referenceGlobalRootComponentImpl7.context, (AudioManager) referenceGlobalRootComponentImpl7.provideAudioManagerProvider.get());
                    case 1065:
                        return (T) new RemoteDeviceController(FrameworkServicesModule_ProvideMediaSessionManagerFactory.provideMediaSessionManager(this.referenceGlobalRootComponentImpl.context));
                    case 1066:
                        return (T) new SavedStateHandleAssisted() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.30
                            @Override // com.android.systemui.media.mediaoutput.dagger.SavedStateHandleAssisted
                            public final MediaDeviceViewModel create(SavedStateHandle savedStateHandle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new MediaDeviceViewModel(switchingProvider.referenceSysUIComponentImpl.smartThingsMediaSdkManager(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (ShadeController) switchingProvider.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (DataStore) switchingProvider.referenceSysUIComponentImpl.provideDataStoreProvider.get(), savedStateHandle);
                            }
                        };
                    case 1067:
                        return (T) new SavedStateHandleAssisted() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.31
                            @Override // com.android.systemui.media.mediaoutput.dagger.SavedStateHandleAssisted
                            public final DeviceAudioPathViewModel create(SavedStateHandle savedStateHandle) {
                                return new DeviceAudioPathViewModel(SwitchingProvider.this.referenceSysUIComponentImpl.smartThingsMediaSdkManager(), savedStateHandle);
                            }
                        };
                    case 1068:
                        return (T) new SettingViewModel(this.referenceGlobalRootComponentImpl.context, (DataStore) this.referenceSysUIComponentImpl.provideDataStoreProvider.get());
                    case 1069:
                        return (T) new LabsViewModel(this.referenceGlobalRootComponentImpl.context, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (DataStore) this.referenceSysUIComponentImpl.provideDataStoreProvider.get());
                    case 1070:
                        return (T) new BatterySaverTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 1071:
                        return (T) new SRotationLockTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (RotationLockController) this.referenceSysUIComponentImpl.rotationLockControllerImplProvider.get(), (SensorPrivacyManager) this.referenceGlobalRootComponentImpl.provideSensorPrivacyManagerProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 1072:
                        return (T) new TileServiceRequestController.Builder((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (IUriGrantsManager) this.referenceGlobalRootComponentImpl.provideIUriGrantsManagerProvider.get());
                    case 1073:
                        QSTileViewModelFactory$Static staticOfColorCorrectionTileModel = this.referenceSysUIComponentImpl.staticOfColorCorrectionTileModel();
                        ColorCorrectionTileMapper colorCorrectionTileMapper = this.referenceSysUIComponentImpl.colorCorrectionTileMapper();
                        ColorCorrectionTileDataInteractor colorCorrectionTileDataInteractor = this.referenceSysUIComponentImpl.colorCorrectionTileDataInteractor();
                        ColorCorrectionUserActionInteractor colorCorrectionUserActionInteractor = this.referenceSysUIComponentImpl.colorCorrectionUserActionInteractor();
                        QSAccessibilityModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfColorCorrectionTileModel.create(TileSpec.Companion.create("color_correction"), colorCorrectionUserActionInteractor, colorCorrectionTileDataInteractor, colorCorrectionTileMapper);
                    case 1074:
                        return (T) new DisabledByPolicyInteractorImpl(this.referenceGlobalRootComponentImpl.context, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.restrictedLockProxy(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1075:
                        return (T) new QSTileAnalytics((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1076:
                        return (T) new QSTileLogger(new HashMap(), (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 1077:
                        return (T) new QSTileIntentUserInputHandlerImpl((ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), new UserHandle(UserHandle.myUserId()));
                    case 1078:
                        QSTileViewModelFactory$Static staticOfColorInversionTileModel = this.referenceSysUIComponentImpl.staticOfColorInversionTileModel();
                        ColorInversionTileMapper colorInversionTileMapper = this.referenceSysUIComponentImpl.colorInversionTileMapper();
                        ColorInversionTileDataInteractor colorInversionTileDataInteractor = this.referenceSysUIComponentImpl.colorInversionTileDataInteractor();
                        ColorInversionUserActionInteractor colorInversionUserActionInteractor = this.referenceSysUIComponentImpl.colorInversionUserActionInteractor();
                        QSAccessibilityModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfColorInversionTileModel.create(TileSpec.Companion.create("inversion"), colorInversionUserActionInteractor, colorInversionTileDataInteractor, colorInversionTileMapper);
                    case 1079:
                        return (T) new ColorInversionRepositoryImpl((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 1080:
                        QSTileViewModelFactory$Static staticOfFontScalingTileModel = this.referenceSysUIComponentImpl.staticOfFontScalingTileModel();
                        FontScalingTileMapper fontScalingTileMapper = this.referenceSysUIComponentImpl.fontScalingTileMapper();
                        FontScalingTileDataInteractor fontScalingTileDataInteractor = new FontScalingTileDataInteractor();
                        FontScalingTileUserActionInteractor fontScalingTileUserActionInteractor = this.referenceSysUIComponentImpl.fontScalingTileUserActionInteractor();
                        QSAccessibilityModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfFontScalingTileModel.create(TileSpec.Companion.create("font_scaling"), fontScalingTileUserActionInteractor, fontScalingTileDataInteractor, fontScalingTileMapper);
                    case 1081:
                        this.referenceSysUIComponentImpl.staticOfReduceBrightColorsTileModel();
                        this.referenceSysUIComponentImpl.reduceBrightColorsTileMapper();
                        this.referenceSysUIComponentImpl.reduceBrightColorsTileDataInteractor();
                        this.referenceSysUIComponentImpl.reduceBrightColorsTileUserActionInteractor();
                        QSAccessibilityModule.Companion.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        T t = (T) StubQSTileViewModel.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1082:
                        this.referenceSysUIComponentImpl.staticOfOneHandedModeTileModel();
                        this.referenceSysUIComponentImpl.oneHandedModeTileMapper();
                        this.referenceSysUIComponentImpl.oneHandedModeTileDataInteractor();
                        this.referenceSysUIComponentImpl.oneHandedModeTileUserActionInteractor();
                        QSAccessibilityModule.Companion.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        T t2 = (T) StubQSTileViewModel.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 1083:
                        this.referenceSysUIComponentImpl.staticOfNightDisplayTileModel();
                        this.referenceSysUIComponentImpl.nightDisplayTileMapper();
                        this.referenceSysUIComponentImpl.nightDisplayTileDataInteractor();
                        this.referenceSysUIComponentImpl.nightDisplayTileUserActionInteractor();
                        QSAccessibilityModule.Companion.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        T t3 = (T) StubQSTileViewModel.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 1084:
                        QSTileViewModelFactory$Static staticOfAirplaneModeTileModel = this.referenceSysUIComponentImpl.staticOfAirplaneModeTileModel();
                        AirplaneModeMapper airplaneModeMapper = this.referenceSysUIComponentImpl.airplaneModeMapper();
                        AirplaneModeTileDataInteractor airplaneModeTileDataInteractor = this.referenceSysUIComponentImpl.airplaneModeTileDataInteractor();
                        AirplaneModeTileUserActionInteractor airplaneModeTileUserActionInteractor = this.referenceSysUIComponentImpl.airplaneModeTileUserActionInteractor();
                        ConnectivityModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfAirplaneModeTileModel.create(TileSpec.Companion.create(SubRoom.EXTRA_KEY_AIRPLANE_MODE), airplaneModeTileUserActionInteractor, airplaneModeTileDataInteractor, airplaneModeMapper);
                    case 1085:
                        QSTileViewModelFactory$Static staticOfDataSaverTileModel = this.referenceSysUIComponentImpl.staticOfDataSaverTileModel();
                        DataSaverTileMapper dataSaverTileMapper = this.referenceSysUIComponentImpl.dataSaverTileMapper();
                        DataSaverTileDataInteractor dataSaverTileDataInteractor = this.referenceSysUIComponentImpl.dataSaverTileDataInteractor();
                        DataSaverTileUserActionInteractor dataSaverTileUserActionInteractor = this.referenceSysUIComponentImpl.dataSaverTileUserActionInteractor();
                        ConnectivityModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfDataSaverTileModel.create(TileSpec.Companion.create("saver"), dataSaverTileUserActionInteractor, dataSaverTileDataInteractor, dataSaverTileMapper);
                    case 1086:
                        QSTileViewModelFactory$Static staticOfInternetTileModel = this.referenceSysUIComponentImpl.staticOfInternetTileModel();
                        InternetTileMapper internetTileMapper = this.referenceSysUIComponentImpl.internetTileMapper();
                        InternetTileDataInteractor internetTileDataInteractor = this.referenceSysUIComponentImpl.internetTileDataInteractor();
                        InternetTileUserActionInteractor internetTileUserActionInteractor = this.referenceSysUIComponentImpl.internetTileUserActionInteractor();
                        ConnectivityModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfInternetTileModel.create(TileSpec.Companion.create(ImsProfile.PDN_INTERNET), internetTileUserActionInteractor, internetTileDataInteractor, internetTileMapper);
                    case 1087:
                        QSTileViewModelFactory$Static staticOfFlashlightTileModel = this.referenceSysUIComponentImpl.staticOfFlashlightTileModel();
                        FlashlightMapper flashlightMapper = this.referenceSysUIComponentImpl.flashlightMapper();
                        FlashlightTileDataInteractor flashlightTileDataInteractor = this.referenceSysUIComponentImpl.flashlightTileDataInteractor();
                        FlashlightTileUserActionInteractor flashlightTileUserActionInteractor = this.referenceSysUIComponentImpl.flashlightTileUserActionInteractor();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfFlashlightTileModel.create(TileSpec.Companion.create("flashlight"), flashlightTileUserActionInteractor, flashlightTileDataInteractor, flashlightMapper);
                    case 1088:
                        QSTileViewModelFactory$Static staticOfLocationTileModel = this.referenceSysUIComponentImpl.staticOfLocationTileModel();
                        LocationTileMapper locationTileMapper = this.referenceSysUIComponentImpl.locationTileMapper();
                        LocationTileDataInteractor locationTileDataInteractor = this.referenceSysUIComponentImpl.locationTileDataInteractor();
                        LocationTileUserActionInteractor locationTileUserActionInteractor = this.referenceSysUIComponentImpl.locationTileUserActionInteractor();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfLocationTileModel.create(TileSpec.Companion.create("location"), locationTileUserActionInteractor, locationTileDataInteractor, locationTileMapper);
                    case 1089:
                        QSTileViewModelFactory$Static staticOfAlarmTileModel = this.referenceSysUIComponentImpl.staticOfAlarmTileModel();
                        AlarmTileMapper alarmTileMapper = this.referenceSysUIComponentImpl.alarmTileMapper();
                        AlarmTileDataInteractor alarmTileDataInteractor = this.referenceSysUIComponentImpl.alarmTileDataInteractor();
                        AlarmTileUserActionInteractor alarmTileUserActionInteractor = this.referenceSysUIComponentImpl.alarmTileUserActionInteractor();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfAlarmTileModel.create(TileSpec.Companion.create("alarm"), alarmTileUserActionInteractor, alarmTileDataInteractor, alarmTileMapper);
                    case 1090:
                        QSTileViewModelFactory$Static staticOfUiModeNightTileModel = this.referenceSysUIComponentImpl.staticOfUiModeNightTileModel();
                        UiModeNightTileMapper uiModeNightTileMapper = this.referenceSysUIComponentImpl.uiModeNightTileMapper();
                        UiModeNightTileDataInteractor uiModeNightTileDataInteractor = this.referenceSysUIComponentImpl.uiModeNightTileDataInteractor();
                        UiModeNightTileUserActionInteractor uiModeNightTileUserActionInteractor = this.referenceSysUIComponentImpl.uiModeNightTileUserActionInteractor();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfUiModeNightTileModel.create(TileSpec.Companion.create("dark"), uiModeNightTileUserActionInteractor, uiModeNightTileDataInteractor, uiModeNightTileMapper);
                    case 1091:
                        QSTileViewModelFactory$Static staticOfWorkModeTileModel = this.referenceSysUIComponentImpl.staticOfWorkModeTileModel();
                        WorkModeTileMapper workModeTileMapper = this.referenceSysUIComponentImpl.workModeTileMapper();
                        WorkModeTileDataInteractor workModeTileDataInteractor = this.referenceSysUIComponentImpl.workModeTileDataInteractor();
                        WorkModeTileUserActionInteractor workModeTileUserActionInteractor = this.referenceSysUIComponentImpl.workModeTileUserActionInteractor();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfWorkModeTileModel.create(TileSpec.Companion.create("work"), workModeTileUserActionInteractor, workModeTileDataInteractor, workModeTileMapper);
                    case 1092:
                        QSTileViewModelFactory$Static staticOfSensorPrivacyToggleTileModel = this.referenceSysUIComponentImpl.staticOfSensorPrivacyToggleTileModel();
                        AnonymousClass32 anonymousClass32 = (AnonymousClass32) this.referenceSysUIComponentImpl.factoryProvider30.get();
                        AnonymousClass27 anonymousClass27 = (AnonymousClass27) this.referenceSysUIComponentImpl.factoryProvider28.get();
                        AnonymousClass33 anonymousClass33 = (AnonymousClass33) this.referenceSysUIComponentImpl.factoryProvider31.get();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfSensorPrivacyToggleTileModel.create(TileSpec.Companion.create("cameratoggle"), anonymousClass33.create(2), anonymousClass27.create(2), anonymousClass32.create(SensorPrivacyTileResources.CameraPrivacyTileResources.INSTANCE));
                    case 1093:
                        return (T) new Object() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.32
                            public final SensorPrivacyToggleTileMapper create(SensorPrivacyTileResources sensorPrivacyTileResources) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new SensorPrivacyToggleTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(switchingProvider.referenceGlobalRootComponentImpl.context), switchingProvider.referenceSysUIComponentImpl.theme(), sensorPrivacyTileResources);
                            }
                        };
                    case 1094:
                        return (T) new Object() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.33
                            public final SensorPrivacyToggleTileUserActionInteractor create(int i) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new SensorPrivacyToggleTileUserActionInteractor((QSTileIntentUserInputHandler) switchingProvider.referenceSysUIComponentImpl.qSTileIntentUserInputHandlerImplProvider.get(), (KeyguardInteractor) switchingProvider.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (IndividualSensorPrivacyController) switchingProvider.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (SafetyCenterManager) switchingProvider.referenceGlobalRootComponentImpl.provideSafetyCenterManagerProvider.get(), i);
                            }
                        };
                    case 1095:
                        QSTileViewModelFactory$Static staticOfSensorPrivacyToggleTileModel2 = this.referenceSysUIComponentImpl.staticOfSensorPrivacyToggleTileModel();
                        AnonymousClass32 anonymousClass322 = (AnonymousClass32) this.referenceSysUIComponentImpl.factoryProvider30.get();
                        AnonymousClass27 anonymousClass272 = (AnonymousClass27) this.referenceSysUIComponentImpl.factoryProvider28.get();
                        AnonymousClass33 anonymousClass332 = (AnonymousClass33) this.referenceSysUIComponentImpl.factoryProvider31.get();
                        PolicyModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfSensorPrivacyToggleTileModel2.create(TileSpec.Companion.create("mictoggle"), anonymousClass332.create(1), anonymousClass272.create(1), anonymousClass322.create(SensorPrivacyTileResources.MicrophonePrivacyTileResources.INSTANCE));
                    case 1096:
                        this.referenceSysUIComponentImpl.staticOfQRCodeScannerTileModel();
                        this.referenceSysUIComponentImpl.qRCodeScannerTileMapper();
                        this.referenceSysUIComponentImpl.qRCodeScannerTileDataInteractor();
                        this.referenceSysUIComponentImpl.qRCodeScannerTileUserActionInteractor();
                        QRCodeScannerModule.Companion.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        T t4 = (T) StubQSTileViewModel.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 1097:
                        QSTileViewModelFactory$Static staticOfScreenRecordModel = this.referenceSysUIComponentImpl.staticOfScreenRecordModel();
                        ScreenRecordTileMapper screenRecordTileMapper = this.referenceSysUIComponentImpl.screenRecordTileMapper();
                        ScreenRecordTileDataInteractor screenRecordTileDataInteractor = this.referenceSysUIComponentImpl.screenRecordTileDataInteractor();
                        ScreenRecordTileUserActionInteractor screenRecordTileUserActionInteractor = this.referenceSysUIComponentImpl.screenRecordTileUserActionInteractor();
                        ScreenRecordModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfScreenRecordModel.create(TileSpec.Companion.create("screenrecord"), screenRecordTileUserActionInteractor, screenRecordTileDataInteractor, screenRecordTileMapper);
                    case 1098:
                        QSTileViewModelFactory$Static staticOfBatterySaverTileModel = this.referenceSysUIComponentImpl.staticOfBatterySaverTileModel();
                        BatterySaverTileMapper batterySaverTileMapper = this.referenceSysUIComponentImpl.batterySaverTileMapper();
                        BatterySaverTileDataInteractor batterySaverTileDataInteractor = this.referenceSysUIComponentImpl.batterySaverTileDataInteractor();
                        BatterySaverTileUserActionInteractor batterySaverTileUserActionInteractor = this.referenceSysUIComponentImpl.batterySaverTileUserActionInteractor();
                        BatterySaverModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfBatterySaverTileModel.create(TileSpec.Companion.create("battery"), batterySaverTileUserActionInteractor, batterySaverTileDataInteractor, batterySaverTileMapper);
                    case 1099:
                        QSTileViewModelFactory$Static staticOfRotationLockTileModel = this.referenceSysUIComponentImpl.staticOfRotationLockTileModel();
                        RotationLockTileMapper rotationLockTileMapper = this.referenceSysUIComponentImpl.rotationLockTileMapper();
                        RotationLockTileDataInteractor rotationLockTileDataInteractor = this.referenceSysUIComponentImpl.rotationLockTileDataInteractor();
                        RotationLockTileUserActionInteractor rotationLockTileUserActionInteractor = this.referenceSysUIComponentImpl.rotationLockTileUserActionInteractor();
                        RotationLockNewModule.Companion.getClass();
                        TileSpec.Companion.getClass();
                        return (T) staticOfRotationLockTileModel.create(TileSpec.Companion.create("rotation"), rotationLockTileUserActionInteractor, rotationLockTileDataInteractor, rotationLockTileMapper);
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get11() {
                int i = 0;
                switch (this.id) {
                    case 1100:
                        return (T) new SecAutoTileManager(this.referenceGlobalRootComponentImpl.context, (AutoAddTracker.Builder) this.referenceSysUIComponentImpl.builderProvider3.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (ManagedProfileController) this.referenceSysUIComponentImpl.managedProfileControllerImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get());
                    case VolteConstants.ErrorCode.CALL_SESSION_ABORT /* 1101 */:
                        return (T) new AutoAddTracker.Builder((SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case VolteConstants.ErrorCode.CALL_SESSION_TERMINATED /* 1102 */:
                        return (T) new BootAnimationFinishedCacheImpl((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case VolteConstants.ErrorCode.CALL_SESSION_TIMEOUT /* 1103 */:
                        return (T) new PanelInteractorImpl((ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get());
                    case VolteConstants.ErrorCode.CALL_STATUS_CONF_START_SESSION_FAILURE /* 1104 */:
                        return (T) new BadgeProviderImpl(this.referenceGlobalRootComponentImpl.context, (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
                    case VolteConstants.ErrorCode.CALL_STATUS_CONF_ADD_USER_TO_SESSION_FAILURE /* 1105 */:
                        return (T) new ControlsBindingControllerImpl(this.referenceGlobalRootComponentImpl.context, (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsControllerImplProvider), (PackageUpdateMonitor.Factory) this.referenceSysUIComponentImpl.factoryProvider32.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceSysUIComponentImpl.controlsUtil());
                    case VolteConstants.ErrorCode.CALL_STATUS_CONF_REMOVE_USER_FROM_SESSION_FAILURE /* 1106 */:
                        return (T) new PackageUpdateMonitor.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.34
                            @Override // com.android.systemui.controls.controller.PackageUpdateMonitor.Factory
                            public final PackageUpdateMonitor create(UserHandle userHandle, String str, Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new PackageUpdateMonitor(userHandle, str, runnable, (Handler) switchingProvider.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (Context) switchingProvider.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                            }
                        };
                    case VolteConstants.ErrorCode.CALL_END_CALL_NW_HANDOVER /* 1107 */:
                        return (T) new AODTouchModeManager(this.referenceGlobalRootComponentImpl.context, (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (LogWrapper) this.referenceSysUIComponentImpl.providesKeyguardLogWrapperProvider.get(), (LsRuneWrapper) this.referenceSysUIComponentImpl.lsRuneWrapperProvider.get(), (DeviceTypeWrapper) this.referenceSysUIComponentImpl.deviceTypeWrapperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardViewMediatorHelperImplProvider), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get());
                    case VolteConstants.ErrorCode.CALL_REJECT_REASON_USR_BUSY_CS_CALL /* 1108 */:
                        return (T) new LogWrapper(ModuleType.KEYGUARD, null);
                    case VolteConstants.ErrorCode.CALL_SWITCH_FAILURE /* 1109 */:
                        return (T) new LsRuneWrapper();
                    case VolteConstants.ErrorCode.CALL_SWITCH_REJECTED /* 1110 */:
                        return (T) new DeviceTypeWrapper();
                    case VolteConstants.ErrorCode.CALL_HOLD_FAILED /* 1111 */:
                        return (T) new DozeInteractor((KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider));
                    case VolteConstants.ErrorCode.CALL_RESUME_FAILED /* 1112 */:
                        return (T) new PluginLockDelegateApp((PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get());
                    case VolteConstants.ErrorCode.CALL_TEMP_UNAVAILABLE_415_CAUSE /* 1113 */:
                        return (T) new WallpaperEventNotifier(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case VolteConstants.ErrorCode.CALL_INVITE_TIMEOUT /* 1114 */:
                        return (T) new FaceWidgetPluginLockManagerWrapper((PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get());
                    case VolteConstants.ErrorCode.CALL_END_REASON_IMS_DEREGISTRATION /* 1115 */:
                        return (T) new FaceWidgetLockscreenShadeTransitionControllerWrapper((LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case VolteConstants.ErrorCode.CALL_BARRED_DUE_TO_SSAC /* 1116 */:
                        return (T) new MediaOutputController(this.referenceSysUIComponentImpl.provideMediaOutputViewProvider);
                    case VolteConstants.ErrorCode.CALL_ENDED_BY_NW_HANDOVER_BEFORE_100_TRYING /* 1117 */:
                        return (T) new SoundCraftNowBarController(this.referenceSysUIComponentImpl.providesSoundCraftNowBarViewProvider);
                    case VolteConstants.ErrorCode.CALL_TRANSFER_SUCCESS /* 1118 */:
                        SoundCraftNowBarViewModule soundCraftNowBarViewModule = this.referenceSysUIComponentImpl.soundCraftNowBarViewModule;
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        SoundCraftViewComponent soundCraftViewComponent = this.referenceSysUIComponentImpl.soundCraftViewComponent();
                        soundCraftNowBarViewModule.getClass();
                        ?? r1 = (T) new SoundCraftNowBarView(context, null);
                        r1.viewComponent = soundCraftViewComponent;
                        return r1;
                    case VolteConstants.ErrorCode.CALL_TRANSFER_FAILED /* 1119 */:
                        return (T) new SoundCraftViewModelFactory(DoubleCheck.lazy(this.referenceSysUIComponentImpl.soundCraftViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.soundCraftActionBarViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.noiseControlBoxViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.audioEffectBoxViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.volumeBarViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.audioEffectHeaderViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.dolbyViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.spatialAudioViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.equalizerViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.voiceBoostViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.volumeNormalizationViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.activeNoiseCancelingViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.adaptiveViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.ambientSoundViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.noiseCancelingLevelViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.noiseControlEffectBoxViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.noiseControlOffViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.noiseCancelingSwitchBarViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.ambientVolumeViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.batteryInfoBoxViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.routineTestViewModelProvider));
                    case VolteConstants.ErrorCode.CALL_CANCEL_TRANSFER_SUCCESS /* 1120 */:
                        return (T) new SoundCraftViewModel(this.referenceGlobalRootComponentImpl.context, (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundCraftSettings) this.referenceSysUIComponentImpl.soundCraftSettingsProvider.get(), (AudioPlaybackManager) this.referenceSysUIComponentImpl.audioPlaybackManagerProvider.get(), (SoundAliveManager) this.referenceSysUIComponentImpl.soundAliveManagerProvider.get(), (VolumeManager) this.referenceSysUIComponentImpl.volumeManagerProvider.get(), (SoundCraftManager) this.referenceSysUIComponentImpl.soundCraftManagerProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get());
                    case VolteConstants.ErrorCode.CALL_CANCEL_TRANSFER_FAILED /* 1121 */:
                        return (T) new WearableManager(this.referenceGlobalRootComponentImpl.context, (SoundCraftSettings) this.referenceSysUIComponentImpl.soundCraftSettingsProvider.get());
                    case VolteConstants.ErrorCode.CALL_CANCEL_MODIFY_REQUESTED /* 1122 */:
                        return (T) new SoundCraftSettings(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get());
                    case VolteConstants.ErrorCode.CALL_END_REASON_TELEPHONY_NOT_RESPONDING /* 1123 */:
                        return (T) new ModelProvider();
                    case VolteConstants.ErrorCode.CALL_18X_RETRANSMISSION_TIMEOUT /* 1124 */:
                        return (T) new RoutineManager(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundCraftSettings) this.referenceSysUIComponentImpl.soundCraftSettingsProvider.get());
                    case VolteConstants.ErrorCode.CALL_INVITE_TIMEOUT_NR /* 1125 */:
                        return (T) new BluetoothDeviceManager(this.referenceGlobalRootComponentImpl.context);
                    case 1126:
                        return (T) new AudioPlaybackManager(this.referenceGlobalRootComponentImpl.context);
                    case 1127:
                        return (T) new SoundAliveManager(this.referenceGlobalRootComponentImpl.context);
                    case 1128:
                        return (T) new VolumeManager(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.bluetoothAdapterWrapper(), (DisplayManagerWrapper) this.referenceSysUIComponentImpl.displayManagerWrapperProvider.get());
                    case 1129:
                        return (T) new SoundCraftManager(this.referenceGlobalRootComponentImpl.context, (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), this.referenceSysUIComponentImpl.broadcastReceiverManager(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get(), (TaskStackChangeListeners) this.referenceSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), (SoundCraftSettings) this.referenceSysUIComponentImpl.soundCraftSettingsProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secQSDetailControllerProvider), (SoundCraftQpDetailAdapter) this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider.get());
                    case 1130:
                        return (T) new SoundCraftQpDetailAdapter(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.soundCraftViewComponent(), (SoundAliveIntentFactory) this.referenceSysUIComponentImpl.soundAliveIntentFactoryProvider.get(), (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get());
                    case 1131:
                        return (T) new SoundAliveIntentFactory((ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get());
                    case 1132:
                        return (T) new SoundCraftActionBarViewModel(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.secQSDetailControllerProvider), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get(), (SoundCraftQpDetailAdapter) this.referenceSysUIComponentImpl.soundCraftQpDetailAdapterProvider.get(), (SoundCraftNowBarController) this.referenceSysUIComponentImpl.soundCraftNowBarControllerProvider.get());
                    case 1133:
                        return (T) new NoiseControlBoxViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1134:
                        return (T) new AudioEffectBoxViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundCraftSettings) this.referenceSysUIComponentImpl.soundCraftSettingsProvider.get(), (BudsSettingIntentFactory) this.referenceSysUIComponentImpl.budsSettingIntentFactoryProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get());
                    case 1135:
                        return (T) new BudsSettingIntentFactory(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundCraftSettings) this.referenceSysUIComponentImpl.soundCraftSettingsProvider.get());
                    case 1136:
                        return (T) new VolumeBarViewModel((ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (VolumeManager) this.referenceSysUIComponentImpl.volumeManagerProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1137:
                        return (T) new AudioEffectHeaderViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get());
                    case 1138:
                        return (T) new DolbyViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundAliveManager) this.referenceSysUIComponentImpl.soundAliveManagerProvider.get(), (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get());
                    case 1139:
                        return (T) new SpatialAudioViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get());
                    case 1140:
                        return (T) new EqualizerViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundAliveManager) this.referenceSysUIComponentImpl.soundAliveManagerProvider.get(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get());
                    case 1141:
                        return (T) new VoiceBoostViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundAliveManager) this.referenceSysUIComponentImpl.soundAliveManagerProvider.get(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get());
                    case 1142:
                        return (T) new VolumeNormalizationViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (SoundAliveManager) this.referenceSysUIComponentImpl.soundAliveManagerProvider.get(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get(), (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get());
                    case 1143:
                        return (T) new ActiveNoiseCancelingViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1144:
                        return (T) new AdaptiveViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1145:
                        return (T) new AmbientSoundViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1146:
                        return (T) new NoiseCancelingLevelViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get());
                    case 1147:
                        return (T) new NoiseControlEffectBoxViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1148:
                        return (T) new NoiseControlOffViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1149:
                        return (T) new NoiseCancelingSwitchBarViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1150:
                        return (T) new AmbientVolumeViewModel(this.referenceGlobalRootComponentImpl.context, (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (WearableManager) this.referenceSysUIComponentImpl.wearableManagerProvider.get());
                    case 1151:
                        return (T) new BatteryInfoBoxViewModel((ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (BluetoothDeviceManager) this.referenceSysUIComponentImpl.bluetoothDeviceManagerProvider.get());
                    case 1152:
                        return (T) new RoutineTestViewModel(this.referenceGlobalRootComponentImpl.context, (RoutineManager) this.referenceSysUIComponentImpl.routineManagerProvider.get(), (ModelProvider) this.referenceSysUIComponentImpl.modelProvider.get(), (AudioPlaybackManager) this.referenceSysUIComponentImpl.audioPlaybackManagerProvider.get());
                    case 1153:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl.injectDozeServiceHost(new DozeServiceHost((DozeLog) referenceSysUIComponentImpl.dozeLogProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (ScrimController) this.referenceSysUIComponentImpl.scrimControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), (DozeScrimController) this.referenceSysUIComponentImpl.dozeScrimControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PulseExpansionHandler) this.referenceSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), this.referenceSysUIComponentImpl.notificationIconAreaController(), (ShadeLockscreenInteractor) this.referenceSysUIComponentImpl.provideShadeLockscreenInteractorProvider.get(), (DozeInteractor) this.referenceSysUIComponentImpl.dozeInteractorProvider.get()));
                    case 1154:
                        return (T) new SamsungServiceLoggerImpl("AODLogger", 200, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceGlobalRootComponentImpl.noLogcatEchoTrackerProvider.get());
                    case 1155:
                        return (T) new SubScreenQuickPanelWindowController((SubscreenQsPanelController) this.referenceSysUIComponentImpl.providerSubscreenQsPanelControllerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (RemoteInputQuickSettingsDisabler) this.referenceSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (ScreenRecordingStateProvider) this.referenceSysUIComponentImpl.screenRecordingStateProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), this.referenceGlobalRootComponentImpl.context, (FlingAnimationUtils.Builder) this.referenceSysUIComponentImpl.builderProvider.get(), (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), new SubScreenQuickPanelComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (SubscreenUtil) this.referenceSysUIComponentImpl.subscreenUtilProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 1156:
                        return (T) DependencyProvider_ProviderSubscreenQsPanelControllerFactory.providerSubscreenQsPanelController(this.referenceSysUIComponentImpl.dependencyProvider, this.referenceGlobalRootComponentImpl.context, (InjectionInflationController) this.referenceSysUIComponentImpl.injectionInflationControllerProvider.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get());
                    case 1157:
                        return (T) new InjectionInflationController(new ViewInstanceCreatorFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i));
                    case 1158:
                        return (T) new ScreenRecordingStateProvider(this.referenceGlobalRootComponentImpl.context);
                    case 1159:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(VolteConstants.ErrorCode.BUSY_EVERYWHERE, "ShadeWindowLog", false);
                    case 1160:
                        return (T) new KeyguardDisplayManager((KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (KeyguardVisibilityMonitor) this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (KeyguardPresentationDisabler) this.referenceSysUIComponentImpl.keyguardPresentationDisablerProvider.get(), this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.navigationBarControllerImplProvider), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (KeyguardDisplayManager.DeviceStateHelper) this.referenceSysUIComponentImpl.deviceStateHelper(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ConnectedDisplayKeyguardPresentation.Factory) this.referenceSysUIComponentImpl.factoryProvider33.get());
                    case 1161:
                        return (T) new KeyguardPresentationDisabler((VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1162:
                        return (T) new ConnectedDisplayKeyguardPresentation.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.35
                            @Override // com.android.keyguard.ConnectedDisplayKeyguardPresentation.Factory
                            public final ConnectedDisplayKeyguardPresentation create(Display display) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = switchingProvider.referenceGlobalRootComponentImpl;
                                return new ConnectedDisplayKeyguardPresentation(display, referenceGlobalRootComponentImpl.context, new KeyguardStatusViewComponentFactory(referenceGlobalRootComponentImpl, switchingProvider.referenceSysUIComponentImpl, 0), (ClockRegistry) switchingProvider.referenceSysUIComponentImpl.getClockRegistryProvider.get(), switchingProvider.referenceSysUIComponentImpl.clockEventController());
                            }
                        };
                    case 1163:
                        return (T) new KeyguardSysDumpTrigger(this.referenceGlobalRootComponentImpl.context, (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get());
                    case 1164:
                        return (T) new PickupController((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SensorManager) this.referenceGlobalRootComponentImpl.providesSensorManagerProvider.get());
                    case 1165:
                        return (T) new DreamViewModel((ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (GlanceableHubToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.glanceableHubToDreamingTransitionViewModelProvider.get(), (DreamingToGlanceableHubTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToGlanceableHubTransitionViewModelProvider.get(), (DreamingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1166:
                        return (T) new SamsungServiceLoggerImpl("KeyguardSecLogger", 2300, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceGlobalRootComponentImpl.noLogcatEchoTrackerProvider.get());
                    case 1167:
                        return (T) new SamsungServiceLoggerImpl("SecurityLogger", 1000, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceGlobalRootComponentImpl.noLogcatEchoTrackerProvider.get());
                    case 1168:
                        return (T) new KeyguardFixedRotationMonitor(DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get());
                    case 1169:
                        return (T) new CarLifeManager((DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                    case 1170:
                        return (T) new BriefNowBarController(this.referenceGlobalRootComponentImpl.context, (BriefLogger) this.referenceSysUIComponentImpl.briefLoggerProvider.get(), (BriefViewController) this.referenceSysUIComponentImpl.briefViewControllerProvider.get(), (FaceWidgetNotificationControllerWrapper) this.referenceSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 1171:
                        return (T) new BriefLogger((LogBuffer) this.referenceSysUIComponentImpl.provideAiBriefLogProvider.get());
                    case 1172:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "AiBriefLog");
                    case 1173:
                        return (T) new BriefViewController(this.referenceGlobalRootComponentImpl.context, (BriefLogger) this.referenceSysUIComponentImpl.briefLoggerProvider.get());
                    case 1174:
                        return (T) new ScreenOnCoordinator((Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 1175:
                        return (T) new WindowManagerLockscreenVisibilityManager((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardSurfaceBehindParamsApplier) this.referenceSysUIComponentImpl.keyguardSurfaceBehindParamsApplierProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 1176:
                        return (T) new KeyguardSurfaceBehindParamsApplier((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardSurfaceBehindInteractor) this.referenceSysUIComponentImpl.keyguardSurfaceBehindInteractorProvider.get());
                    case 1177:
                        return (T) new KeyguardSurfaceBehindInteractor((KeyguardSurfaceBehindRepository) this.referenceSysUIComponentImpl.keyguardSurfaceBehindRepositoryImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.inWindowLauncherUnlockAnimationInteractorProvider), (SwipeToDismissInteractor) this.referenceSysUIComponentImpl.swipeToDismissInteractorProvider.get(), (NotificationLaunchAnimationInteractor) this.referenceSysUIComponentImpl.notificationLaunchAnimationInteractorProvider.get());
                    case 1178:
                        return (T) new SwipeToDismissInteractor((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get());
                    case 1179:
                        return (T) new WindowManagerOcclusionManager((KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (ActivityTransitionAnimator) this.referenceSysUIComponentImpl.provideActivityTransitionAnimatorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), this.referenceGlobalRootComponentImpl.context, (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DreamingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1180:
                        return (T) new PluginLockManagerImpl((PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockInstancePolicy) this.referenceSysUIComponentImpl.pluginLockInstancePolicyProvider.get(), (PluginLockDelegateApp) this.referenceSysUIComponentImpl.pluginLockDelegateAppProvider.get(), (PluginLockDelegateSysUi) this.referenceSysUIComponentImpl.pluginLockDelegateSysUiProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get(), (PluginWallpaperManager) this.referenceSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 1181:
                        return (T) new PluginLockInstancePolicy();
                    case 1182:
                        return (T) new PluginLockDelegateSysUi((PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 1183:
                        return (T) new SystemUICommandActionHandler(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.appControlActionInteractor(), this.referenceSysUIComponentImpl.deviceControlActionInteractor(), this.referenceSysUIComponentImpl.musicControlActionInteractor(), this.referenceSysUIComponentImpl.notificationControlActionInteractor(), this.referenceSysUIComponentImpl.screenControlActionInteractor(), this.referenceSysUIComponentImpl.shareViaActionInteractor(), (SubscreenNotificationController) this.referenceSysUIComponentImpl.subscreenNotificationControllerProvider.get());
                    case 1184:
                        return (T) new AppController(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.activityLauncher(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1185:
                        return (T) new DeviceController(this.referenceGlobalRootComponentImpl.context, (FlashlightController) this.referenceSysUIComponentImpl.flashlightControllerImplProvider.get(), (RotationLockController) this.referenceSysUIComponentImpl.rotationLockControllerImplProvider.get());
                    case 1186:
                        return (T) new NotificationController(this.referenceGlobalRootComponentImpl.context, (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get());
                    case 1187:
                        return (T) new ScreenController(DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1188:
                        return (T) new SubscreenNotificationController(this.referenceGlobalRootComponentImpl.context, (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (NotificationInterruptStateProvider) this.referenceSysUIComponentImpl.notificationInterruptStateProviderImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.subScreenManagerProvider), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (BindEventManager) this.referenceSysUIComponentImpl.bindEventManagerImplProvider.get(), (NotificationController) this.referenceSysUIComponentImpl.notificationControllerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (ConversationNotificationManager) this.referenceSysUIComponentImpl.conversationNotificationManagerProvider.get(), this.referenceSysUIComponentImpl.setBubbles, (LogBuffer) this.referenceSysUIComponentImpl.provideNotifInteractionLogBufferProvider.get(), (DebugModeFilterProvider) this.referenceSysUIComponentImpl.debugModeFilterProvider.get(), (KeyguardNotificationVisibilityProvider) this.referenceSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.mediaFeatureFlag(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get());
                    case 1189:
                        return (T) new DebugModeFilterProvider((CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1190:
                        StatusBarWindowController statusBarWindowController = (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        return (T) new StatusBarInitializer(statusBarWindowController, referenceSysUIComponentImpl2.collapsedStatusBarFragmentProvider, referenceSysUIComponentImpl2.setOfOnStatusBarViewInitializedListener());
                    case 1191:
                        return (T) new CollapsedStatusBarFragment(new StatusBarFragmentComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (OngoingActivityController) this.referenceSysUIComponentImpl.provideOngoingActivityControllerProvider.get(), (OngoingCallController) this.referenceSysUIComponentImpl.ongoingCallControllerProvider.get(), (SystemStatusAnimationScheduler) this.referenceSysUIComponentImpl.bindSystemStatusAnimationSchedulerProvider.get(), (StatusBarLocationPublisher) this.referenceSysUIComponentImpl.statusBarLocationPublisherProvider.get(), this.referenceSysUIComponentImpl.notificationIconAreaController(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (DarkIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider34.get(), (CollapsedStatusBarViewModel) this.referenceSysUIComponentImpl.collapsedStatusBarViewModelImplProvider.get(), (CollapsedStatusBarViewBinder) this.referenceSysUIComponentImpl.collapsedStatusBarViewBinderImplProvider.get(), (StatusBarHideIconsForBouncerManager) this.referenceSysUIComponentImpl.statusBarHideIconsForBouncerManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.notificationIconContainerStatusBarViewBinder(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (CarrierConfigTracker) this.referenceSysUIComponentImpl.carrierConfigTrackerProvider.get(), this.referenceSysUIComponentImpl.collapsedStatusBarFragmentLogger(), this.referenceSysUIComponentImpl.operatorNameViewControllerFactory(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceSysUIComponentImpl.privacyLogger(), (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), this.referenceSysUIComponentImpl.carrierHomeLogoViewControllerFactory(), this.referenceSysUIComponentImpl.statusBarVisibilityExt());
                    case 1192:
                        return (T) new OngoingActivityController(this.referenceGlobalRootComponentImpl.context, (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (OngoingCallController) this.referenceSysUIComponentImpl.ongoingCallControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (TaskStackChangeListeners) this.referenceSysUIComponentImpl.provideTaskStackChangeListenersProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get());
                    case 1193:
                        return (T) new SystemStatusAnimationSchedulerImpl((SystemEventCoordinator) this.referenceSysUIComponentImpl.systemEventCoordinatorProvider.get(), this.referenceSysUIComponentImpl.systemEventChipAnimationController(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SystemStatusAnimationSchedulerLogger) this.referenceSysUIComponentImpl.systemStatusAnimationSchedulerLoggerProvider.get(), (StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (HeaderBatteryStatusChipController) this.referenceSysUIComponentImpl.headerBatteryStatusChipControllerProvider.get());
                    case 1194:
                        return (T) new SystemEventCoordinator((SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (PrivacyItemController) this.referenceSysUIComponentImpl.privacyItemControllerProvider.get(), this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ConnectedDisplayInteractor) this.referenceSysUIComponentImpl.connectedDisplayInteractorImplProvider.get());
                    case 1195:
                        return (T) new ConnectedDisplayInteractorImpl((VirtualDeviceManager) this.referenceGlobalRootComponentImpl.provideVirtualDeviceManagerProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (DisplayRepository) this.referenceSysUIComponentImpl.displayRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.deviceStateRepositoryImpl(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1196:
                        return (T) new SystemStatusAnimationSchedulerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideSystemStatusAnimationSchedulerLogBufferProvider.get());
                    case 1197:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarEventsModule.Companion.getClass();
                        return (T) logBufferFactory.create(60, "SystemStatusAnimationSchedulerLog", true);
                    case 1198:
                        return (T) new HeaderBatteryStatusChipController(this.referenceGlobalRootComponentImpl.context, (MotionLayout) this.referenceSysUIComponentImpl.providesShadeHeaderViewProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 1199:
                        return (T) new StatusBarLocationPublisher();
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get12() {
                int i = 0;
                switch (this.id) {
                    case 1200:
                        return (T) new DarkIconManager.Factory((WifiUiAdapter) this.referenceSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileContextProvider) this.referenceSysUIComponentImpl.mobileContextProvider.get(), (MobileUiAdapter) this.referenceSysUIComponentImpl.mobileUiAdapterProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), this.referenceSysUIComponentImpl.bTTetherUiAdapter());
                    case VolteConstants.ErrorCode.QOS_FAILURE /* 1201 */:
                        return (T) new CollapsedStatusBarViewModelImpl((LightsOutInteractor) this.referenceSysUIComponentImpl.lightsOutInteractorProvider.get(), (ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (OngoingActivityChipsViewModel) this.referenceSysUIComponentImpl.ongoingActivityChipsViewModelProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case VolteConstants.ErrorCode.QOS_NW_UNAWARE /* 1202 */:
                        return (T) new LightsOutInteractor((StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get());
                    case VolteConstants.ErrorCode.QOS_INCALL_SUSPEND /* 1203 */:
                        return (T) new OngoingActivityChipsViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ScreenRecordChipViewModel) this.referenceSysUIComponentImpl.screenRecordChipViewModelProvider.get(), (ShareToAppChipViewModel) this.referenceSysUIComponentImpl.shareToAppChipViewModelProvider.get(), (CastToOtherDeviceChipViewModel) this.referenceSysUIComponentImpl.castToOtherDeviceChipViewModelProvider.get(), (CallChipViewModel) this.referenceSysUIComponentImpl.callChipViewModelProvider.get());
                    case VolteConstants.ErrorCode.QOS_INCALL_UNAWARE /* 1204 */:
                        return (T) new ScreenRecordChipViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ScreenRecordChipInteractor) this.referenceSysUIComponentImpl.screenRecordChipInteractorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (EndMediaProjectionDialogHelper) this.referenceSysUIComponentImpl.endMediaProjectionDialogHelperProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get());
                    case 1205:
                        return (T) new ScreenRecordChipInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ScreenRecordRepository) this.referenceSysUIComponentImpl.screenRecordRepositoryImplProvider.get(), (MediaProjectionRepository) this.referenceSysUIComponentImpl.mediaProjectionManagerRepositoryProvider.get());
                    case 1206:
                        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) this.referenceGlobalRootComponentImpl.context.getSystemService(MediaProjectionManager.class);
                        Preconditions.checkNotNullFromProvides(mediaProjectionManager);
                        return (T) new MediaProjectionManagerRepository(mediaProjectionManager, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (TasksRepository) this.referenceSysUIComponentImpl.activityTaskManagerTasksRepositoryProvider.get(), new MediaProjectionServiceHelper());
                    case 1207:
                        return (T) new ActivityTaskManagerTasksRepository((IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1208:
                        return (T) new EndMediaProjectionDialogHelper((SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 1209:
                        return (T) new ShareToAppChipViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (MediaProjectionChipInteractor) this.referenceSysUIComponentImpl.mediaProjectionChipInteractorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (EndMediaProjectionDialogHelper) this.referenceSysUIComponentImpl.endMediaProjectionDialogHelperProvider.get());
                    case 1210:
                        return (T) new MediaProjectionChipInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (MediaProjectionRepository) this.referenceSysUIComponentImpl.mediaProjectionManagerRepositoryProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 1211:
                        return (T) new CastToOtherDeviceChipViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (MediaProjectionChipInteractor) this.referenceSysUIComponentImpl.mediaProjectionChipInteractorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (EndMediaProjectionDialogHelper) this.referenceSysUIComponentImpl.endMediaProjectionDialogHelperProvider.get());
                    case 1212:
                        return (T) new CallChipViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CallChipInteractor) this.referenceSysUIComponentImpl.callChipInteractorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 1213:
                        return (T) new CallChipInteractor((OngoingCallRepository) this.referenceSysUIComponentImpl.ongoingCallRepositoryProvider.get());
                    case 1214:
                        return (T) new CollapsedStatusBarViewBinderImpl();
                    case 1215:
                        return (T) new StatusBarHideIconsForBouncerManager((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1216:
                        return (T) new DarkIconRepositoryImpl((SysuiDarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get());
                    case 1217:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "CollapsedSbFragmentLog");
                    case 1218:
                        return (T) new StatusBarSignalPolicy(this.referenceGlobalRootComponentImpl.context, (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (CarrierConfigTracker) this.referenceSysUIComponentImpl.carrierConfigTrackerProvider.get(), (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (SecurityController) this.referenceSysUIComponentImpl.securityControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (CoverScreenIconController) this.referenceSysUIComponentImpl.coverScreenIconControllerProvider.get());
                    case 1219:
                        return (T) new CoverScreenIconController((SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (SubRoomNetworkInfo) this.referenceSysUIComponentImpl.subRoomNetworkInfoProvider.get(), this.referenceGlobalRootComponentImpl.context, (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
                    case 1220:
                        return (T) new SubRoomNetworkInfo();
                    case 1221:
                        return (T) new AccessibilityFloatingMenuController(this.referenceGlobalRootComponentImpl.context, (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (AccessibilityButtonTargetsObserver) this.referenceSysUIComponentImpl.accessibilityButtonTargetsObserverProvider.get(), (AccessibilityButtonModeObserver) this.referenceSysUIComponentImpl.accessibilityButtonModeObserverProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 1222:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl.injectNotificationShadeWindowViewController(new NotificationShadeWindowViewController(referenceSysUIComponentImpl.keyguardBouncerViewModel(), new KeyguardBouncerComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (PrimaryBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get(), (KeyguardSysDumpTrigger) this.referenceSysUIComponentImpl.keyguardSysDumpTriggerProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (NotificationShadeDepthController) this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get(), (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get(), (SecLockIconViewController) this.referenceSysUIComponentImpl.secLockIconViewControllerProvider.get(), (CentralSurfaces) this.referenceSysUIComponentImpl.centralSurfacesImplProvider.get(), (DozeServiceHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (DozeScrimController) this.referenceSysUIComponentImpl.dozeScrimControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get(), (Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (NotificationInsetsController) this.referenceSysUIComponentImpl.notificationInsetsImplProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get(), this.referenceSysUIComponentImpl.shadeLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (PulsingGestureListener) this.referenceSysUIComponentImpl.pulsingGestureListenerProvider.get(), (LockscreenHostedDreamGestureListener) this.referenceSysUIComponentImpl.lockscreenHostedDreamGestureListenerProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (GlanceableHubContainerController) this.referenceSysUIComponentImpl.glanceableHubContainerControllerProvider.get(), (NotificationLaunchAnimationInteractor) this.referenceSysUIComponentImpl.notificationLaunchAnimationInteractorProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (SysUIKeyEventHandler) this.referenceSysUIComponentImpl.sysUIKeyEventHandlerProvider.get(), (QuickSettingsController) this.referenceSysUIComponentImpl.provideQuickSettingsControllerProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (BouncerViewBinder) this.referenceSysUIComponentImpl.bouncerViewBinderProvider.get()));
                    case 1223:
                        return (T) new PulsingGestureListener((FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.shadeLogger(), (DozeInteractor) this.referenceSysUIComponentImpl.dozeInteractorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1224:
                        return (T) new LockscreenHostedDreamGestureListener((FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.shadeLogger());
                    case 1225:
                        return (T) new GlanceableHubContainerController((CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (CommunalViewModel) this.referenceSysUIComponentImpl.communalViewModelProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (CommunalColors) this.referenceSysUIComponentImpl.communalColorsImplProvider.get(), new AmbientTouchComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), this.referenceSysUIComponentImpl.communalContent(), (SceneDataSourceDelegator) this.referenceSysUIComponentImpl.providesCommunalSceneDataSourceDelegatorProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get());
                    case 1226:
                        return (T) new SysUIKeyEventHandler((BackActionInteractor) this.referenceSysUIComponentImpl.backActionInteractorProvider.get(), (KeyguardKeyEventInteractor) this.referenceSysUIComponentImpl.keyguardKeyEventInteractorProvider.get());
                    case 1227:
                        return (T) new BackActionInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (WindowRootViewVisibilityInteractor) this.referenceSysUIComponentImpl.windowRootViewVisibilityInteractorProvider.get(), (NotificationPanelViewController) this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider.get());
                    case 1228:
                        return (T) new KeyguardKeyEventInteractor((KeyguardSysDumpTrigger) this.referenceSysUIComponentImpl.keyguardSysDumpTriggerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (MediaSessionLegacyHelperWrapper) this.referenceSysUIComponentImpl.mediaSessionLegacyHelperWrapperProvider.get(), (BackActionInteractor) this.referenceSysUIComponentImpl.backActionInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 1229:
                        return (T) new MediaSessionLegacyHelperWrapper();
                    case 1230:
                        return (T) new BouncerViewBinder((ComposeBouncerFlags) this.referenceSysUIComponentImpl.implProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.legacyBouncerDependenciesProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.composeBouncerDependenciesProvider));
                    case 1231:
                        return (T) new ComposeBouncerDependencies((PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (BouncerViewModel) this.referenceSysUIComponentImpl.viewModelProvider2.get(), (BouncerDialogFactory) this.referenceSysUIComponentImpl.bouncerDialogFactoryProvider.get(), (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get(), (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 1232:
                        return (T) new VolumeDialogComponent(this.referenceGlobalRootComponentImpl.context, (KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (VolumeDialogControllerImpl) this.referenceSysUIComponentImpl.volumeDialogControllerImplProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (PluginDependencyProvider) this.referenceGlobalRootComponentImpl.pluginDependencyProvider.get(), (ExtensionController) this.referenceSysUIComponentImpl.extensionControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), this.referenceSysUIComponentImpl.volumeDialog(), (SamsungVolumeDialogImpl) this.referenceSysUIComponentImpl.samsungVolumeDialogImplProvider.get());
                    case 1233:
                        return (T) new VolumeDialogControllerImpl(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (RingerModeTracker) this.referenceSysUIComponentImpl.ringerModeTrackerImplProvider.get(), ThreadFactoryImpl_Factory.newInstance(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (IAudioService) this.referenceGlobalRootComponentImpl.provideIAudioServiceProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), new SALoggingWrapper(), this.referenceSysUIComponentImpl.broadcastReceiverManager(), (DisplayManagerWrapper) this.referenceSysUIComponentImpl.displayManagerWrapperProvider.get(), new DesktopManagerWrapper(), (KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), this.referenceSysUIComponentImpl.bluetoothAdapterWrapper(), this.referenceSysUIComponentImpl.soundAssistantManagerWrapper(), this.referenceSysUIComponentImpl.deviceStateManagerWrapper(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (VolumeManager) this.referenceSysUIComponentImpl.volumeManagerProvider.get(), (VolumeDependency) this.referenceSysUIComponentImpl.volumeDependencyProvider.get(), (SoundCraftManager) this.referenceSysUIComponentImpl.soundCraftManagerProvider.get());
                    case 1234:
                        return (T) new VolumeDependency(this.referenceGlobalRootComponentImpl.context, (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideVolumePanelLoggerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider));
                    case 1235:
                        return (T) new VolumeNavigator((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (VolumePanelFactory) this.referenceSysUIComponentImpl.volumePanelFactoryProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.volumePanelViewModelFactory(), this.referenceSysUIComponentImpl.systemUIDialogFactory(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (VolumePanelGlobalStateInteractor) this.referenceSysUIComponentImpl.volumePanelGlobalStateInteractorProvider.get());
                    case 1236:
                        return (T) new VolumePanelFactory(this.referenceGlobalRootComponentImpl.context, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get());
                    case 1237:
                        return (T) new VolumePanelGlobalStateInteractor((VolumePanelGlobalStateRepository) this.referenceSysUIComponentImpl.volumePanelGlobalStateRepositoryProvider.get());
                    case 1238:
                        return (T) new VolumePanelGlobalStateRepository((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1239:
                        return (T) new CsdWarningDialog.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.36
                            @Override // com.android.systemui.volume.CsdWarningDialog.Factory
                            public final CsdWarningDialog create(int i2, Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = switchingProvider.referenceGlobalRootComponentImpl;
                                return new CsdWarningDialog(i2, referenceGlobalRootComponentImpl.context, (AudioManager) referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (NotificationManager) switchingProvider.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (DelayableExecutor) switchingProvider.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), runnable);
                            }
                        };
                    case 1240:
                        return (T) new VolumeDialogInteractor((VolumeDialogRepository) this.referenceSysUIComponentImpl.volumeDialogRepositoryProvider.get());
                    case 1241:
                        return (T) new VolumeDialogRepository();
                    case 1242:
                        return (T) new SamsungVolumeDialogImpl(this.referenceGlobalRootComponentImpl.context, (VolumeDependency) this.referenceSysUIComponentImpl.volumeDependencyProvider.get());
                    case 1243:
                        return (T) new CentralSurfacesCommandQueueCallbacks((CoverHost) this.referenceSysUIComponentImpl.coverHostImplProvider.get(), (CentralSurfaces) this.referenceSysUIComponentImpl.centralSurfacesImplProvider.get(), (QuickSettingsController) this.referenceSysUIComponentImpl.provideQuickSettingsControllerProvider.get(), this.referenceGlobalRootComponentImpl.context, ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (ScreenPinningRequest) this.referenceSysUIComponentImpl.screenPinningRequestProvider.get(), this.referenceSysUIComponentImpl.samsungScreenPinningRequest(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (RemoteInputQuickSettingsDisabler) this.referenceSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (AssistManager) this.referenceSysUIComponentImpl.assistManagerProvider.get(), (DozeServiceHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (StatusBarHideIconsForBouncerManager) this.referenceSysUIComponentImpl.statusBarHideIconsForBouncerManagerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.provideOptionalVibratorProvider.get(), ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), DoubleCheck.lazy(this.referenceSysUIComponentImpl.cameraLauncherProvider), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.emergencyGestureIntentFactory(), (SearcleManager) this.referenceSysUIComponentImpl.provideSearcleManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.subScreenManagerProvider));
                    case 1244:
                        return (T) new CameraLauncher((CameraGestureHelper) this.referenceSysUIComponentImpl.cameraGestureHelperProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get());
                    case 1245:
                        ?? r1 = (T) new SensorPrivacyControllerImpl((SensorPrivacyManager) this.referenceGlobalRootComponentImpl.provideSensorPrivacyManagerProvider.get());
                        r1.mSensorPrivacyEnabled = r1.mSensorPrivacyManager.isAllSensorPrivacyEnabled();
                        r1.mSensorPrivacyManager.addAllSensorPrivacyListener(r1);
                        return r1;
                    case 1246:
                        return (T) new WiredChargingRippleController((CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), this.referenceGlobalRootComponentImpl.context, (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1247:
                        return (T) new LightRevealScrimViewModel((LightRevealScrimInteractor) this.referenceSysUIComponentImpl.lightRevealScrimInteractorProvider.get());
                    case 1248:
                        return (T) new LightRevealScrimInteractor((KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (LightRevealScrimRepository) this.referenceSysUIComponentImpl.lightRevealScrimRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.scrimLogger(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.powerInteractorProvider));
                    case 1249:
                        return (T) new LightRevealScrimRepositoryImpl((KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (PowerRepository) this.referenceSysUIComponentImpl.powerRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.scrimLogger());
                    case 1250:
                        return (T) new SBlueLightFilterSWTile(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1251:
                        return (T) new AiAgentEffect(this.referenceGlobalRootComponentImpl.context, (PrivacyItemController) this.referenceSysUIComponentImpl.privacyItemControllerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get());
                    case 1252:
                        return (T) new SecLightRevealScrimHelper(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (BiometricUnlockController) this.referenceSysUIComponentImpl.biometricUnlockControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (LightRevealScrim) this.referenceSysUIComponentImpl.providesLightRevealScrimProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 1253:
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        Optional optional = (Optional) this.referenceSysUIComponentImpl.provideAppWidgetManagerProvider.get();
                        CommunalAppWidgetHost communalAppWidgetHost = (CommunalAppWidgetHost) this.referenceSysUIComponentImpl.provideCommunalAppWidgetHostProvider.get();
                        SelectedUserInteractor selectedUserInteractor = (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get();
                        LogBuffer logBuffer = (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get();
                        CommunalWidgetModule.Companion.getClass();
                        return (T) new CommunalWidgetHost(coroutineScope, optional, communalAppWidgetHost, selectedUserInteractor, logBuffer);
                    case 1254:
                        Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        CommunalWidgetModule.Companion.getClass();
                        return (T) Optional.ofNullable(AppWidgetManager.getInstance(context));
                    case 1255:
                        CommunalDatabase communalDatabase = (CommunalDatabase) this.referenceSysUIComponentImpl.provideCommunalDatabaseProvider.get();
                        CommunalDatabaseModule.Companion.getClass();
                        T t = (T) communalDatabase.communalWidgetDao();
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1256:
                        Context context2 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        DefaultWidgetPopulation defaultWidgetPopulation = this.referenceSysUIComponentImpl.defaultWidgetPopulation();
                        CommunalDatabaseModule.Companion.getClass();
                        CommunalDatabase.Companion.getClass();
                        if (CommunalDatabase.instance == null) {
                            String string = context2.getResources().getString(R.string.config_communalDatabase);
                            int i2 = Room.$r8$clinit;
                            if (!(!(string == null || StringsKt__StringsJVMKt.isBlank(string)))) {
                                throw new IllegalArgumentException("Cannot build a database with null or empty name. If you are trying to create an in memory database, use Room.inMemoryDatabaseBuilder".toString());
                            }
                            if (!(!Intrinsics.areEqual(string, ":memory:"))) {
                                throw new IllegalArgumentException("Cannot build a database with the special name ':memory:'. If you are trying to create an in memory database, use Room.inMemoryDatabaseBuilder".toString());
                            }
                            RoomDatabase.Builder builder = new RoomDatabase.Builder(context2, CommunalDatabase.class, string);
                            builder.requireMigration = false;
                            builder.allowDestructiveMigrationOnDowngrade = true;
                            builder.allowDestructiveMigrationForAllTables = false;
                            if (defaultWidgetPopulation != null) {
                                ((ArrayList) builder.callbacks).add(defaultWidgetPopulation);
                            }
                            CommunalDatabase.instance = (CommunalDatabase) builder.build();
                        }
                        T t2 = (T) CommunalDatabase.instance;
                        Intrinsics.checkNotNull(t2);
                        return t2;
                    case 1257:
                        return (T) new BackupManager((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                    case 1258:
                        Context context3 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        CommunalModule.Companion.getClass();
                        return (T) new CommunalBackupUtils(context3);
                    case 1259:
                        return (T) new CommunalPrefsRepositoryImpl((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideCommunalTableLogBufferProvider.get());
                    case 1260:
                        return (T) new CommunalMediaRepositoryImpl((MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideCommunalTableLogBufferProvider.get());
                    case 1261:
                        return (T) new SmartspaceRepositoryImpl((CommunalSmartspaceController) this.referenceSysUIComponentImpl.communalSmartspaceControllerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 1262:
                        return (T) new CommunalSmartspaceController(this.referenceGlobalRootComponentImpl.context, (SmartspaceManager) this.referenceGlobalRootComponentImpl.provideSmartspaceManagerProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceSysUIComponentImpl.lockscreenPrecondition(), Optional.empty(), Optional.empty());
                    case 1263:
                        return (T) new KeyguardEnabledInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 1264:
                        return (T) new FromLockscreenTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), this.referenceSysUIComponentImpl.glanceableHubTransitions(), (SwipeToDismissInteractor) this.referenceSysUIComponentImpl.swipeToDismissInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1265:
                        return (T) new NotifShadeSceneFamilyResolver((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 1266:
                        return (T) new QuickSettingsSceneFamilyResolver((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 1267:
                        return (T) new SceneContainerOcclusionInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 1268:
                        return (T) new FaceAuthenticationLogger((LogBuffer) this.referenceSysUIComponentImpl.provideFaceAuthLogProvider.get());
                    case 1269:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(300, "DeviceEntryFaceAuthRepositoryLog");
                    case 1270:
                        TableLogBufferFactory tableLogBufferFactory = (TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        DeviceEntryFaceAuthModule.Companion.getClass();
                        return (T) tableLogBufferFactory.create(400, "FaceDetectTableLog");
                    case 1271:
                        TableLogBufferFactory tableLogBufferFactory2 = (TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        DeviceEntryFaceAuthModule.Companion.getClass();
                        return (T) tableLogBufferFactory2.create(400, "FaceAuthTableLog");
                    case 1272:
                        return (T) new FaceWakeUpTriggersConfigImpl(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1273:
                        return (T) new NoopDeviceEntryFaceAuthInteractor();
                    case 1274:
                        return (T) new BouncerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideBouncerLogProvider.get());
                    case 1275:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "BouncerLog");
                    case 1276:
                        return (T) new WindowManagerLockscreenVisibilityInteractor((KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardSurfaceBehindInteractor) this.referenceSysUIComponentImpl.keyguardSurfaceBehindInteractorProvider.get(), (FromLockscreenTransitionInteractor) this.referenceSysUIComponentImpl.fromLockscreenTransitionInteractorProvider.get(), (FromPrimaryBouncerTransitionInteractor) this.referenceSysUIComponentImpl.fromPrimaryBouncerTransitionInteractorProvider.get(), (FromAlternateBouncerTransitionInteractor) this.referenceSysUIComponentImpl.fromAlternateBouncerTransitionInteractorProvider.get(), (NotificationLaunchAnimationInteractor) this.referenceSysUIComponentImpl.notificationLaunchAnimationInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceEntryInteractorProvider));
                    case 1277:
                        return (T) new FromPrimaryBouncerTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (KeyguardSecurityModel) this.referenceSysUIComponentImpl.keyguardSecurityModelProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1278:
                        return (T) new FromAlternateBouncerTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get());
                    case 1279:
                        return (T) new StatusBarKeyguardViewManagerInteractor((KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (WindowManagerLockscreenVisibilityInteractor) this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityInteractorProvider.get(), (KeyguardSurfaceBehindInteractor) this.referenceSysUIComponentImpl.keyguardSurfaceBehindInteractorProvider.get());
                    case PeripheralConstants.ErrorCode.ERROR_PLUGIN_CUSTOM_BASE /* 1280 */:
                        return (T) new UdfpsHapticsSimulator((CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 1281:
                        return (T) new UdfpsShell((CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get());
                    case 1282:
                        ThreadFactoryImpl newInstance = ThreadFactoryImpl_Factory.newInstance();
                        BiometricsModule.Companion.getClass();
                        return (T) newInstance.buildExecutorOnNewThread("biometrics");
                    case 1283:
                        return (T) new SinglePointerTouchProcessor((OverlapDetector) this.referenceSysUIComponentImpl.providesOverlapDetectorProvider.get());
                    case 1284:
                        return (T) BiometricsModule_Companion_ProvidesOverlapDetectorFactory.providesOverlapDetector();
                    case 1285:
                        return (T) new UdfpsKeyguardAccessibilityDelegate(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get());
                    case 1286:
                        return (T) new DeviceEntryUdfpsTouchOverlayViewModel((DeviceEntryIconViewModel) this.referenceSysUIComponentImpl.deviceEntryIconViewModelProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (SystemUIDialogManager) this.referenceSysUIComponentImpl.systemUIDialogManagerProvider.get(), (DeviceEntryIconLogger) this.referenceSysUIComponentImpl.deviceEntryIconLoggerProvider.get());
                    case 1287:
                        return (T) new DeviceEntryIconLogger((LogBuffer) this.referenceSysUIComponentImpl.provideDeviceEntryIconLogBufferProvider.get());
                    case 1288:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "DeviceEntryIconLog");
                    case 1289:
                        return (T) new DefaultUdfpsTouchOverlayViewModel((ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SystemUIDialogManager) this.referenceSysUIComponentImpl.systemUIDialogManagerProvider.get());
                    case 1290:
                        return (T) new UdfpsLogger((LogBuffer) this.referenceSysUIComponentImpl.provideUdfpsLogBufferProvider.get());
                    case 1291:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(1000, "UdfpsLog");
                    case 1292:
                        return (T) new LogContextInteractorImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.deviceStateRepositoryImpl(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get());
                    case 1293:
                        return (T) new PromptSelectorInteractorImpl((FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get(), (DisplayStateInteractor) this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider.get(), (PromptRepository) this.referenceSysUIComponentImpl.promptRepositoryImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get());
                    case 1294:
                        return (T) new PromptRepositoryImpl((FaceSettingsRepository) this.referenceSysUIComponentImpl.faceSettingsRepositoryImplProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get());
                    case 1295:
                        return (T) new FaceSettingsRepositoryImpl((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 1296:
                        return (T) new CredentialViewModel((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), this.referenceSysUIComponentImpl.promptCredentialInteractor());
                    case 1297:
                        return (T) new CredentialInteractorImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case 1298:
                        DisplayStateInteractor displayStateInteractor = (DisplayStateInteractor) this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider.get();
                        PromptSelectorInteractor promptSelectorInteractor = (PromptSelectorInteractor) this.referenceSysUIComponentImpl.promptSelectorInteractorImplProvider.get();
                        Context context4 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        UdfpsOverlayInteractor udfpsOverlayInteractor = (UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get();
                        BiometricStatusInteractor biometricStatusInteractor = (BiometricStatusInteractor) this.referenceSysUIComponentImpl.providesBiometricStatusInteractorProvider.get();
                        BiometricsModule.Companion.getClass();
                        return (T) new PromptViewModel(displayStateInteractor, promptSelectorInteractor, context4, udfpsOverlayInteractor, biometricStatusInteractor, new UdfpsUtils(), this.referenceSysUIComponentImpl.iconProvider(), (ActivityTaskManager) this.referenceGlobalRootComponentImpl.provideActivityTaskManagerProvider.get());
                    case 1299:
                        return (T) new BiometricStatusInteractorImpl((ActivityTaskManager) this.referenceGlobalRootComponentImpl.provideActivityTaskManagerProvider.get(), (BiometricStatusRepository) this.referenceSysUIComponentImpl.biometricStatusRepositoryImplProvider.get(), (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get13() {
                int i = 0;
                switch (this.id) {
                    case 1300:
                        return (T) new BiometricStatusRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (BiometricManager) this.referenceGlobalRootComponentImpl.providesBiometricManagerProvider.get());
                    case VolteConstants.ErrorCode.PPP_STATUS_CLOSE_EVENT /* 1301 */:
                        return (T) new DreamOverlayCallbackController();
                    case VolteConstants.ErrorCode.PPP_OPEN_FAILURE /* 1302 */:
                        return (T) new FromAodTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (DeviceEntryRepository) this.referenceSysUIComponentImpl.deviceEntryRepositoryImplProvider.get());
                    case 1303:
                        return (T) new FromDozingTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get(), (DeviceEntryRepository) this.referenceSysUIComponentImpl.deviceEntryRepositoryImplProvider.get());
                    case 1304:
                        return (T) new SurfaceVisibilityController(DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSurfaceControllerImplProvider));
                    case 1305:
                        return (T) new WindowVisibilityController((Choreographer) this.referenceGlobalRootComponentImpl.providesChoreographerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider));
                    case 1306:
                        return (T) new ActiveUnlockConfig((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1307:
                        return (T) PostureDependentProximitySensor_Factory.newInstance(this.referenceSysUIComponentImpl.primaryProxSensorThresholdSensorArray(), this.referenceSysUIComponentImpl.secondaryProxSensorThresholdSensorArray(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get(), (DevicePostureController) this.referenceSysUIComponentImpl.devicePostureControllerImplProvider.get());
                    case 1308:
                        return (T) new AsyncSensorManager((SensorManager) this.referenceGlobalRootComponentImpl.providesSensorManagerProvider.get(), ThreadFactoryImpl_Factory.newInstance(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get());
                    case 1309:
                        return (T) ProximitySensorImpl_Factory.newInstance(this.referenceSysUIComponentImpl.primaryProxSensorThresholdSensor(), this.referenceSysUIComponentImpl.secondaryProxSensorThresholdSensor(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get());
                    case 1310:
                        return (T) new ForegroundServicesDialog((MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get());
                    case 1311:
                        return (T) new WorkLockActivity((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 1312:
                        return (T) new BrightnessDialog(this.referenceSysUIComponentImpl.brightnessSliderControllerFactory(), (BrightnessController.Factory) this.referenceSysUIComponentImpl.factoryProvider36.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (AccessibilityManagerWrapper) this.referenceSysUIComponentImpl.accessibilityManagerWrapperProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 1313:
                        return (T) new BrightnessController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.37
                            @Override // com.android.systemui.settings.brightness.BrightnessController.Factory
                            public final BrightnessController create(ToggleSlider toggleSlider) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new BrightnessController(switchingProvider.referenceGlobalRootComponentImpl.context, toggleSlider, (UserTracker) switchingProvider.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) switchingProvider.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (DisplayManager) switchingProvider.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (SecureSettings) switchingProvider.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (IVrManager) switchingProvider.referenceGlobalRootComponentImpl.provideIVrManagerProvider.get(), (Executor) switchingProvider.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (Handler) switchingProvider.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                            }
                        };
                    case 1314:
                        return (T) new UsbDebuggingActivity((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1315:
                        return (T) new UsbDebuggingSecondaryUserActivity((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1316:
                        return (T) new UsbPermissionActivity(new UsbAudioWarningDialogMessage());
                    case 1317:
                        return (T) new UsbConfirmActivity(new UsbAudioWarningDialogMessage());
                    case 1318:
                        return (T) new UsbAccessoryUriActivity((DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get());
                    case 1319:
                        return (T) new CreateUserActivity(this.referenceSysUIComponentImpl.userCreator(), new CreateUserDialogController(LeakReporter.FILEPROVIDER_AUTHORITY), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1320:
                        return (T) new PeopleSpaceActivity(this.referenceSysUIComponentImpl.peopleViewModelFactory());
                    case 1321:
                        return (T) new PeopleTileRepositoryImpl((PeopleSpaceWidgetManager) this.referenceSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 1322:
                        return (T) new PeopleWidgetRepositoryImpl((PeopleSpaceWidgetManager) this.referenceSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 1323:
                        return (T) new LongScreenshotActivity((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.imageExporter(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (LongScreenshotData) this.referenceSysUIComponentImpl.longScreenshotDataProvider.get(), (ActionIntentExecutor) this.referenceSysUIComponentImpl.actionIntentExecutorProvider.get());
                    case 1324:
                        return (T) new LongScreenshotData();
                    case 1325:
                        return (T) new ActionIntentExecutor(this.referenceGlobalRootComponentImpl.context, (ActivityManagerWrapper) this.referenceSysUIComponentImpl.provideActivityManagerWrapperProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (SystemUiProxy) this.referenceSysUIComponentImpl.bindSystemUiProxyProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 1326:
                        return (T) new SystemUiProxyClient((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                    case 1327:
                        return (T) new AppClipsTrampolineActivity((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (NoteTaskController) this.referenceSysUIComponentImpl.noteTaskControllerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 1328:
                        return (T) new AppClipsActivity((AppClipsViewModel.Factory) this.referenceSysUIComponentImpl.appClipsViewModelFactory(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1329:
                        return (T) new AppClipsCrossProcessHelper((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 1330:
                        return (T) new LaunchConversationActivity((NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (Optional) this.referenceSysUIComponentImpl.provideBubblesManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 1331:
                        return (T) new SensorUseStartedActivity((IndividualSensorPrivacyController) this.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardDismissUtil) this.referenceSysUIComponentImpl.keyguardDismissUtilProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 1332:
                        return (T) new EditWidgetsActivity((CommunalEditModeViewModel) this.referenceSysUIComponentImpl.communalEditModeViewModelProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (WidgetConfigurationController.Factory) this.referenceSysUIComponentImpl.factoryProvider37.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get());
                    case 1333:
                        return (T) new CommunalEditModeViewModel((CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (CommunalSettingsInteractor) this.referenceSysUIComponentImpl.communalSettingsInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesCommunalMediaHostProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1334:
                        return (T) new WidgetConfigurationController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.38
                            @Override // com.android.systemui.communal.widgets.WidgetConfigurationController.Factory
                            public final WidgetConfigurationController create(ComponentActivity componentActivity) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new WidgetConfigurationController(componentActivity, (CommunalAppWidgetHost) switchingProvider.referenceSysUIComponentImpl.provideCommunalAppWidgetHostProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                            }
                        };
                    case 1335:
                        return (T) new CoverHomeActivity(DoubleCheck.lazy(this.referenceSysUIComponentImpl.coverScreenManagerProvider));
                    case 1336:
                        return (T) new SwitchToManagedProfileForCallActivity((TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get());
                    case 1337:
                        return (T) new TouchpadTutorialActivity(new TouchpadTutorialViewModel.Factory());
                    case 1338:
                        return (T) new SubscreenNotificationReplyActivity((SubscreenNotificationController) this.referenceSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get());
                    case 1339:
                        return (T) new SubscreenNotificationIntelligenceStartActivity((SubscreenNotificationController) this.referenceSysUIComponentImpl.subscreenNotificationControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1340:
                        return (T) new SubHomeActivity(DoubleCheck.lazy(this.referenceSysUIComponentImpl.subScreenManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.settingsHelperProvider));
                    case 1341:
                        return (T) new SubScreenFallback((SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get());
                    case 1342:
                        return (T) new ControlsRequestDialog((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ControlsListingController) this.referenceSysUIComponentImpl.controlsListingControllerImplProvider.get(), this.referenceSysUIComponentImpl.controlsUtil());
                    case 1343:
                        return (T) new MediaProjectionAppSelectorActivity(new MediaProjectionAppSelectorComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), this.referenceSysUIComponentImpl.asyncActivityLauncher());
                    case 1344:
                        return (T) new MediaProjectionPermissionActivity((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider), (StatusBarManager) this.referenceGlobalRootComponentImpl.provideStatusBarManagerProvider.get(), (MediaProjectionMetricsLogger) this.referenceSysUIComponentImpl.mediaProjectionMetricsLoggerProvider.get(), this.referenceSysUIComponentImpl.screenCaptureDisabledDialogDelegate());
                    case 1345:
                        return (T) new LaunchNoteTaskActivity((NoteTaskController) this.referenceSysUIComponentImpl.noteTaskControllerProvider.get());
                    case 1346:
                        return (T) new LaunchNotesRoleSettingsTrampolineActivity((NoteTaskController) this.referenceSysUIComponentImpl.noteTaskControllerProvider.get());
                    case 1347:
                        return (T) new CreateNoteTaskShortcutActivity((RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get(), (ShortcutManager) this.referenceGlobalRootComponentImpl.provideShortcutManagerProvider.get());
                    case 1348:
                        return (T) new WalletActivity((KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardDismissUtil) this.referenceSysUIComponentImpl.keyguardDismissUtilProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get());
                    case 1349:
                        return (T) new SecControlsProviderSelectorActivity((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (ControlsListingController) this.referenceSysUIComponentImpl.controlsListingControllerImplProvider.get(), (ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (ControlsActivityStarter) this.referenceSysUIComponentImpl.controlsActivityStarterImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.controlsUtil(), this.referenceSysUIComponentImpl.layoutUtil(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get(), (BadgeProvider) this.referenceSysUIComponentImpl.badgeProviderImplProvider.get(), this.referenceSysUIComponentImpl.authorizedPanelsRepositoryImpl());
                    case 1350:
                        return (T) new SecControlsFavoritingActivity((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (SecControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.layoutUtil(), this.referenceSysUIComponentImpl.controlsUtil(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (AUIFacade) this.referenceSysUIComponentImpl.aUIFacadeImplProvider.get(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get());
                    case 1351:
                        return (T) new SecControlsActivity((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (ControlsUiController) this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider.get(), (SecControlsUiController) this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider.get(), this.referenceSysUIComponentImpl.controlsUtil(), (ControlsFragmentFactory) this.referenceSysUIComponentImpl.controlsFragmentFactoryProvider.get(), (BlurFacade) this.referenceSysUIComponentImpl.blurFacadeImplProvider.get(), (AUIFacade) this.referenceSysUIComponentImpl.aUIFacadeImplProvider.get());
                    case 1352:
                        return (T) new ControlsFragmentFactory((ControlsActivityStarter) this.referenceSysUIComponentImpl.controlsActivityStarterImplProvider.get(), this.referenceSysUIComponentImpl.layoutUtil(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get(), (BadgeSubject) this.referenceSysUIComponentImpl.badgeProviderImplProvider.get(), (ControlsListingController) this.referenceSysUIComponentImpl.controlsListingControllerImplProvider.get(), (SecControlsUiController) this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider.get());
                    case 1353:
                        return (T) new BlurFacadeImpl((SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1354:
                        return (T) new SecControlsReorderActivity((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.layoutUtil(), this.referenceSysUIComponentImpl.controlsUtil(), (AUIFacade) this.referenceSysUIComponentImpl.aUIFacadeImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1355:
                        return (T) new ControlsSettingActivity((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (ControlsFragmentFactory) this.referenceSysUIComponentImpl.controlsFragmentFactoryProvider.get(), this.referenceSysUIComponentImpl.layoutUtil(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get());
                    case 1356:
                        return (T) new MediaOutputActivity(this.referenceSysUIComponentImpl.viewModelFactory(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get());
                    case 1357:
                        return (T) new ShortcutHelperActivity(this.referenceSysUIComponentImpl.shortcutHelperViewModel());
                    case 1358:
                        return (T) new ShortcutHelperInteractor((DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (ShortcutHelperRepository) this.referenceSysUIComponentImpl.shortcutHelperRepositoryProvider.get());
                    case 1359:
                        return (T) new ShortcutHelperRepository((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1360:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl.injectDozeService(new DozeService(new DozeComponentFactory(this.referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, i), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get()));
                    case 1361:
                        return (T) new ImageWallpaper((DelayableExecutor) this.referenceSysUIComponentImpl.provideLongRunningDelayableExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (WallpaperLogger) this.referenceSysUIComponentImpl.provideWallpaperLoggerProvider.get(), this.referenceSysUIComponentImpl.systemWallpaperColors(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (CoverWallpaper) this.referenceSysUIComponentImpl.coverWallpaperControllerProvider.get(), (PluginWallpaper) this.referenceSysUIComponentImpl.pluginWallpaperControllerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get());
                    case 1362:
                        return (T) SysUIConcurrencyModule_ProvideLongRunningDelayableExecutorFactory.provideLongRunningDelayableExecutor((Looper) this.referenceSysUIComponentImpl.provideLongRunningLooperProvider.get());
                    case 1363:
                        return (T) SysUIConcurrencyModule_ProvideLongRunningLooperFactory.provideLongRunningLooper();
                    case 1364:
                        return (T) new PluginWallpaperController(this.referenceGlobalRootComponentImpl.context, ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (WallpaperLogger) this.referenceSysUIComponentImpl.provideWallpaperLoggerProvider.get(), (PluginWallpaperManager) this.referenceSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (WallpaperChangeNotifier) this.referenceSysUIComponentImpl.wallpaperChangeNotifierProvider.get());
                    case 1365:
                        return (T) new KeyguardService((KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (KeyguardLifecyclesDispatcher) this.referenceSysUIComponentImpl.keyguardLifecyclesDispatcherProvider.get(), (ScreenOnCoordinator) this.referenceSysUIComponentImpl.screenOnCoordinatorProvider.get(), this.referenceSysUIComponentImpl.setShellTransitions, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (WindowManagerLockscreenVisibilityViewModel) this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityViewModelProvider.get(), (WindowManagerLockscreenVisibilityManager) this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityManagerProvider.get(), (KeyguardSurfaceBehindViewModel) this.referenceSysUIComponentImpl.keyguardSurfaceBehindViewModelProvider.get(), (KeyguardSurfaceBehindParamsApplier) this.referenceSysUIComponentImpl.keyguardSurfaceBehindParamsApplierProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (WindowManagerOcclusionManager) this.referenceSysUIComponentImpl.windowManagerOcclusionManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardEnabledInteractor) this.referenceSysUIComponentImpl.keyguardEnabledInteractorProvider.get());
                    case 1366:
                        return (T) new KeyguardLifecyclesDispatcher(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 1367:
                        return (T) new WindowManagerLockscreenVisibilityViewModel((WindowManagerLockscreenVisibilityInteractor) this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityInteractorProvider.get());
                    case 1368:
                        return (T) new KeyguardSurfaceBehindViewModel((KeyguardSurfaceBehindInteractor) this.referenceSysUIComponentImpl.keyguardSurfaceBehindInteractorProvider.get());
                    case 1369:
                        return (T) new DreamOverlayService(this.referenceGlobalRootComponentImpl.context, new DreamOverlayLifecycleOwner(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), new cascd_ComplicationComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), new casdcd_ComplicationComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), new DreamOverlayComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), new AmbientTouchComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), this.referenceSysUIComponentImpl.scrimManager(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), this.referenceSysUIComponentImpl.systemDialogsCloser(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), this.referenceSysUIComponentImpl.namedTouchInsetManager(), this.referenceSysUIComponentImpl.namedComponentName2(), this.referenceSysUIComponentImpl.namedComponentName3(), (DreamOverlayCallbackController) this.referenceSysUIComponentImpl.dreamOverlayCallbackControllerProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), this.referenceSysUIComponentImpl.namedString());
                    case 1370:
                        return (T) new BouncerlessScrimController((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get());
                    case 1371:
                        return (T) new NotificationListenerWithPlugins((PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get());
                    case 1372:
                        return (T) new SystemUIService((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceSysUIComponentImpl.dumpHandler(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (LogBufferEulogizer) this.referenceSysUIComponentImpl.logBufferEulogizerProvider.get(), this.referenceSysUIComponentImpl.logBufferFreezer(), this.referenceSysUIComponentImpl.batteryStateNotifier(), (UncaughtExceptionPreHandlerManager) this.referenceGlobalRootComponentImpl.uncaughtExceptionPreHandlerManagerProvider.get(), (BinderProxyDumpHelper) this.referenceSysUIComponentImpl.provideBinderProxyDumpHelperProvider.get(), (MemoryMonitor) this.referenceSysUIComponentImpl.memoryMonitorProvider.get());
                    case 1373:
                        return (T) new BinderProxyDumpHelper((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1374:
                        return (T) new MemoryMonitor((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (BootCompleteCache) this.referenceSysUIComponentImpl.bootCompleteCacheImplProvider.get(), (HeapDumpHelper) this.referenceSysUIComponentImpl.heapDumpHelperProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (UncaughtExceptionPreHandlerManager) this.referenceGlobalRootComponentImpl.uncaughtExceptionPreHandlerManagerProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get());
                    case 1375:
                        return (T) new HeapDumpHelper(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 1376:
                        return (T) new SystemUIAuxiliaryDumpService(this.referenceSysUIComponentImpl.dumpHandler());
                    case 1377:
                        return (T) new RecordingService((RecordingController) this.referenceSysUIComponentImpl.recordingControllerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideLongRunningExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardDismissUtil) this.referenceSysUIComponentImpl.keyguardDismissUtilProvider.get());
                    case 1378:
                        return (T) SysUIConcurrencyModule_ProvideLongRunningExecutorFactory.provideLongRunningExecutor((Looper) this.referenceSysUIComponentImpl.provideLongRunningLooperProvider.get());
                    case 1379:
                        return (T) new IssueRecordingService((RecordingController) this.referenceSysUIComponentImpl.recordingControllerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideLongRunningExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardDismissUtil) this.referenceSysUIComponentImpl.keyguardDismissUtilProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (TraceurMessageSender) this.referenceSysUIComponentImpl.traceurMessageSenderProvider.get(), (IssueRecordingState) this.referenceSysUIComponentImpl.issueRecordingStateProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get());
                    case 1380:
                        return (T) new SysUICoverService((CoverScreenManager) this.referenceSysUIComponentImpl.coverScreenManagerProvider.get());
                    case 1381:
                        return (T) new SystemUISecondaryUserService(new ProcessWrapper());
                    case 1382:
                        return (T) new HomeControlsDreamService((ControlsSettingsRepository) this.referenceSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), (TaskFragmentComponent.Factory) this.referenceSysUIComponentImpl.factoryProvider38.get(), (HomeControlsComponentInteractor) this.referenceSysUIComponentImpl.homeControlsComponentInteractorProvider.get(), this.referenceSysUIComponentImpl.wakeLockBuilder(), new DreamServiceDelegateImpl(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDreamLogBufferProvider.get());
                    case 1383:
                        return (T) new TaskFragmentComponent.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.39
                            @Override // com.android.systemui.dreams.homecontrols.TaskFragmentComponent.Factory
                            public final TaskFragmentComponent create(Activity activity, Function1 function1, Function1 function12, Function0 function0) {
                                return new TaskFragmentComponent(activity, function1, function12, function0, (DelayableExecutor) SwitchingProvider.this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
                            }
                        };
                    case 1384:
                        return (T) new HomeControlsComponentInteractor((SelectedComponentRepository) this.referenceSysUIComponentImpl.selectedComponentRepositoryImplProvider.get(), (SecSelectedComponentRepository) this.referenceSysUIComponentImpl.secSelectedComponentRepositoryImplProvider.get(), (ControlsComponent) this.referenceSysUIComponentImpl.controlsComponentProvider.get(), this.referenceSysUIComponentImpl.authorizedPanelsRepositoryImpl(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (PackageChangeInteractor) this.referenceSysUIComponentImpl.packageChangeInteractorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), this.referenceSysUIComponentImpl.dreamManager(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get());
                    case 1385:
                        return (T) new PackageChangeInteractor((PackageChangeRepository) this.referenceSysUIComponentImpl.packageChangeRepositoryImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 1386:
                        return (T) new TakeScreenshotService((UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (ScreenshotNotificationsController.Factory) this.referenceSysUIComponentImpl.factoryProvider39.get(), this.referenceSysUIComponentImpl.screenshotErrorController(), this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (TakeScreenshotExecutor) this.referenceSysUIComponentImpl.takeScreenshotExecutorImplProvider.get());
                    case 1387:
                        return (T) new ScreenshotNotificationsController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.40
                            @Override // com.android.systemui.screenshot.ScreenshotNotificationsController.Factory
                            public final ScreenshotNotificationsController create(int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = switchingProvider.referenceGlobalRootComponentImpl;
                                return new ScreenshotNotificationsController(i2, referenceGlobalRootComponentImpl.context, (NotificationManager) referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (DevicePolicyManager) switchingProvider.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get());
                            }
                        };
                    case 1388:
                        return (T) new TakeScreenshotExecutorImpl((ScreenshotController.Factory) this.referenceSysUIComponentImpl.factoryProvider45.get(), (DisplayRepository) this.referenceSysUIComponentImpl.displayRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ScreenshotRequestProcessor) this.referenceSysUIComponentImpl.bindScreenshotRequestProcessorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (ScreenshotNotificationsController.Factory) this.referenceSysUIComponentImpl.factoryProvider39.get(), this.referenceSysUIComponentImpl.headlessScreenshotHandler());
                    case 1389:
                        return (T) new ScreenshotController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.41
                            @Override // com.android.systemui.screenshot.ScreenshotController.Factory
                            public final ScreenshotController create(Display display, boolean z) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = switchingProvider.referenceGlobalRootComponentImpl;
                                Context context = referenceGlobalRootComponentImpl.context;
                                WindowManager windowManager = (WindowManager) referenceGlobalRootComponentImpl.provideWindowManagerProvider.get();
                                FeatureFlags featureFlags = (FeatureFlags) switchingProvider.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                                ScreenshotViewProxy.Factory screenshotViewProxyFactory = switchingProvider.referenceSysUIComponentImpl.screenshotViewProxyFactory();
                                ScreenshotSmartActions screenshotSmartActions = (ScreenshotSmartActions) switchingProvider.referenceSysUIComponentImpl.screenshotSmartActionsProvider.get();
                                ScreenshotNotificationsController.Factory factory = (ScreenshotNotificationsController.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider39.get();
                                UiEventLogger uiEventLogger = (UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get();
                                ImageExporter imageExporter = switchingProvider.referenceSysUIComponentImpl.imageExporter();
                                ImageCapture imageCapture = (ImageCapture) switchingProvider.referenceSysUIComponentImpl.imageCaptureImplProvider.get();
                                SemImageCaptureImpl semImageCaptureImpl = (SemImageCaptureImpl) switchingProvider.referenceSysUIComponentImpl.semImageCaptureImplProvider.get();
                                ScreenshotDetectionController screenshotDetectionController = switchingProvider.referenceSysUIComponentImpl.screenshotDetectionController();
                                Executor executor = (Executor) switchingProvider.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                                ScrollCaptureExecutor scrollCaptureExecutor = switchingProvider.referenceSysUIComponentImpl.scrollCaptureExecutor();
                                TimeoutHandler timeoutHandler = switchingProvider.referenceSysUIComponentImpl.timeoutHandler();
                                BroadcastSender broadcastSender = (BroadcastSender) switchingProvider.referenceSysUIComponentImpl.broadcastSenderProvider.get();
                                BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) switchingProvider.referenceSysUIComponentImpl.broadcastDispatcherProvider.get();
                                ScreenshotNotificationSmartActionsProvider screenshotNotificationSmartActionsProvider = (ScreenshotNotificationSmartActionsProvider) switchingProvider.referenceSysUIComponentImpl.providesScrnshtNotifSmartActionsProvider.get();
                                ScreenshotActionsController.Factory factory2 = (ScreenshotActionsController.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider43.get();
                                ActionIntentExecutor actionIntentExecutor = (ActionIntentExecutor) switchingProvider.referenceSysUIComponentImpl.actionIntentExecutorProvider.get();
                                ActionExecutor.Factory factory3 = (ActionExecutor.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider44.get();
                                UserManager userManager = (UserManager) switchingProvider.referenceGlobalRootComponentImpl.provideUserManagerProvider.get();
                                AssistContentRequester assistContentRequester = (AssistContentRequester) switchingProvider.referenceSysUIComponentImpl.assistContentRequesterProvider.get();
                                MessageContainerController messageContainerController = switchingProvider.referenceSysUIComponentImpl.messageContainerController();
                                ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = switchingProvider.referenceSysUIComponentImpl;
                                return new ScreenshotController(context, windowManager, featureFlags, screenshotViewProxyFactory, screenshotSmartActions, factory, uiEventLogger, imageExporter, imageCapture, semImageCaptureImpl, screenshotDetectionController, executor, scrollCaptureExecutor, timeoutHandler, broadcastSender, broadcastDispatcher, screenshotNotificationSmartActionsProvider, factory2, actionIntentExecutor, factory3, userManager, assistContentRequester, messageContainerController, referenceSysUIComponentImpl2.screenshotSoundControllerImplProvider, referenceSysUIComponentImpl2.announcementResolver(), display, z);
                            }
                        };
                    case 1390:
                        return (T) new ScreenshotViewProxy.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.42
                            @Override // com.android.systemui.screenshot.ScreenshotViewProxy.Factory
                            public final ScreenshotShelfViewProxy getProxy(Context context, int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ScreenshotShelfViewProxy((UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (ScreenshotViewModel) switchingProvider.referenceSysUIComponentImpl.providesScreenshotViewModelProvider.get(), (WindowManager) switchingProvider.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), switchingProvider.referenceSysUIComponentImpl.screenshotShelfViewBinder(), new ThumbnailObserver(), context, i2);
                            }
                        };
                    case 1391:
                        return (T) new ScreenshotViewModel((AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get());
                    case 1392:
                        return (T) new ScreenshotViewProxy.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.43
                            @Override // com.android.systemui.screenshot.ScreenshotViewProxy.Factory
                            public final LegacyScreenshotViewProxy getProxy(Context context, int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LegacyScreenshotViewProxy((UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FeatureFlags) switchingProvider.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), context, i2);
                            }
                        };
                    case 1393:
                        return (T) new ScreenshotSmartActions(this.referenceSysUIComponentImpl.providesScrnshtNotifSmartActionsProvider);
                    case 1394:
                        return (T) new ScreenshotNotificationSmartActionsProvider();
                    case 1395:
                        return (T) new ImageCaptureImpl((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1396:
                        return (T) new SemImageCaptureImpl(this.referenceGlobalRootComponentImpl.context, (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1397:
                        return (T) new ScreenshotActionsController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.44
                            @Override // com.android.systemui.screenshot.ScreenshotActionsController.Factory
                            public final ScreenshotActionsController getController(ActionExecutor actionExecutor) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ScreenshotActionsController((ScreenshotViewModel) switchingProvider.referenceSysUIComponentImpl.providesScreenshotViewModelProvider.get(), (ScreenshotActionsProvider$Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider42.get(), actionExecutor);
                            }
                        };
                    case 1398:
                        return (T) new ScreenshotActionsProvider$Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.45
                            public final DefaultScreenshotActionsProvider create(UUID uuid, ScreenshotData screenshotData, ActionExecutor actionExecutor, ScreenshotActionsController.ActionsCallback actionsCallback) {
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = SwitchingProvider.this.referenceGlobalRootComponentImpl;
                                return new DefaultScreenshotActionsProvider(referenceGlobalRootComponentImpl.context, (UiEventLogger) referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), uuid, screenshotData, actionExecutor, actionsCallback);
                            }
                        };
                    case 1399:
                        return (T) new ActionExecutor.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.46
                            @Override // com.android.systemui.screenshot.ActionExecutor.Factory
                            public final ActionExecutor create(Window window, ScreenshotViewProxy screenshotViewProxy, Function0 function0) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ActionExecutor((ActionIntentExecutor) switchingProvider.referenceSysUIComponentImpl.actionIntentExecutorProvider.get(), (CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), window, screenshotViewProxy, function0);
                            }
                        };
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get14() {
                switch (this.id) {
                    case 1400:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        return (T) new AssistContentRequester(referenceGlobalRootComponentImpl.context, (Executor) referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case VolteConstants.ErrorCode.RTP_TIME_OUT /* 1401 */:
                        return (T) new PackageLabelIconProviderImpl((PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 1402:
                        return (T) new ProfileFirstRunFileResourcesImpl(this.referenceGlobalRootComponentImpl.context);
                    case 1403:
                        return (T) new ProfileFirstRunSettingsImpl(this.referenceGlobalRootComponentImpl.context);
                    case 1404:
                        return (T) new ProfileTypeRepositoryImpl((UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1405:
                        return (T) new ScreenshotSoundControllerImpl((ScreenshotSoundProvider) this.referenceSysUIComponentImpl.screenshotSoundProviderImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1406:
                        return (T) new ScreenshotSoundProviderImpl(this.referenceGlobalRootComponentImpl.context);
                    case 1407:
                        return (T) new Messages(this.referenceGlobalRootComponentImpl.context);
                    case 1408:
                        ImageCapture imageCapture = (ImageCapture) this.referenceSysUIComponentImpl.imageCaptureImplProvider.get();
                        Provider provider = this.referenceSysUIComponentImpl.screenshotPolicyImplProvider;
                        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get();
                        SemImageCaptureImpl semImageCaptureImpl = (SemImageCaptureImpl) this.referenceSysUIComponentImpl.semImageCaptureImplProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        Provider provider2 = referenceSysUIComponentImpl.bindDisplayContentRepositoryProvider;
                        Provider provider3 = referenceSysUIComponentImpl.bindCapturePolicyListProvider;
                        ScreenshotPolicyModule.Companion.getClass();
                        return (T) new RequestProcessor(imageCapture, (ScreenshotPolicy) provider.get(), devicePolicyManager, semImageCaptureImpl);
                    case 1409:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) new ScreenshotPolicyImpl(referenceGlobalRootComponentImpl2.context, (UserManager) referenceGlobalRootComponentImpl2.provideUserManagerProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 1410:
                        return (T) new DisplayContentRepositoryImpl((IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (SystemUiProxy) this.referenceSysUIComponentImpl.bindSystemUiProxyProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1411:
                        PrivateProfilePolicy privateProfilePolicy = this.referenceSysUIComponentImpl.privateProfilePolicy();
                        WorkProfilePolicy workProfilePolicy = this.referenceSysUIComponentImpl.workProfilePolicy();
                        ScreenshotPolicyModule.Companion.getClass();
                        List listOf = CollectionsKt__CollectionsKt.listOf(workProfilePolicy, privateProfilePolicy);
                        Preconditions.checkNotNullFromProvides(listOf);
                        return (T) listOf;
                    case 1412:
                        return (T) new AppClipsScreenshotHelperService(this.referenceSysUIComponentImpl.setBubbles);
                    case 1413:
                        return (T) new AppClipsService((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), this.referenceSysUIComponentImpl.setBubbles, (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get());
                    case 1414:
                        return (T) new ScreenshotProxyService((ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 1415:
                        return (T) new NoteTaskControllerUpdateService((NoteTaskController) this.referenceSysUIComponentImpl.noteTaskControllerProvider.get());
                    case 1416:
                        return (T) new NoteTaskBubblesController.NoteTaskBubblesService(this.referenceSysUIComponentImpl.setBubbles);
                    case 1417:
                        return (T) new WalletContextualLocationsService((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (WalletContextualSuggestionsController) this.referenceSysUIComponentImpl.walletContextualSuggestionsControllerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1418:
                        return (T) new WalletContextualSuggestionsController((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (QuickAccessWalletController) this.referenceSysUIComponentImpl.quickAccessWalletControllerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1419:
                        return (T) new OverviewProxyRecentsImpl((OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 1420:
                        return (T) new SmartActionsReceiver((ScreenshotSmartActions) this.referenceSysUIComponentImpl.screenshotSmartActionsProvider.get());
                    case 1421:
                        return (T) new MediaOutputDialogReceiver(this.referenceSysUIComponentImpl.mediaOutputDialogManager(), this.referenceSysUIComponentImpl.mediaOutputBroadcastDialogManager());
                    case 1422:
                        return (T) new PeopleSpaceWidgetPinnedReceiver((PeopleSpaceWidgetManager) this.referenceSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 1423:
                        return (T) new PeopleSpaceWidgetProvider((PeopleSpaceWidgetManager) this.referenceSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get());
                    case 1424:
                        return (T) new GuestResetOrExitSessionReceiver((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.resetSessionDialogFactory(), this.referenceSysUIComponentImpl.exitSessionDialogFactory());
                    case 1425:
                        return (T) new HearingDevicesDialogReceiver((HearingDevicesDialogManager) this.referenceSysUIComponentImpl.hearingDevicesDialogManagerProvider.get());
                    case 1426:
                        return (T) new ControlsRequestReceiver((ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (SecControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler());
                    case 1427:
                        return (T) new ControlsBackupRestoreReceiver((ControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (SecControlsController) this.referenceSysUIComponentImpl.controlsControllerImplProvider.get(), (SecControlsUiController) this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider.get(), new ControlsFileLoader(), (EncryptDecryptWrapper) this.referenceSysUIComponentImpl.encryptDecryptWrapperProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), this.referenceSysUIComponentImpl.controlsUtil());
                    case 1428:
                        return (T) new EncryptDecryptWrapper();
                    case 1429:
                        return (T) new KeyboardShortcutsReceiver((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1430:
                        return (T) new VolumePanelDialogReceiver((VolumeNavigator) this.referenceSysUIComponentImpl.volumeNavigatorProvider.get(), this.referenceSysUIComponentImpl.volumePanelNavigationInteractor());
                    case 1431:
                        return (T) this.referenceSysUIComponentImpl.injectDependency(new Dependency());
                    case 1432:
                        return (T) new SubscreenMusicWidgetController(this.referenceGlobalRootComponentImpl.context, (SecMediaHost) this.referenceSysUIComponentImpl.secMediaHostProvider.get());
                    case 1433:
                        final TunerService tunerService = (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get();
                        return (T) new Object(tunerService) { // from class: com.android.systemui.tuner.TunablePadding$TunablePaddingService
                        };
                    case 1434:
                        return (T) new UiOffloadThread();
                    case 1435:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl3 = this.referenceGlobalRootComponentImpl;
                        return (T) new QSClockBellTower(referenceGlobalRootComponentImpl3.context, (Handler) referenceGlobalRootComponentImpl3.provideMainHandlerProvider.get(), (QSClockBellAlternateCalendarUtil) this.referenceSysUIComponentImpl.qSClockBellAlternateCalendarUtilProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1436:
                        return (T) new QSClockBellAlternateCalendarUtil(this.referenceGlobalRootComponentImpl.context, GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1437:
                        return (T) new SecHideNotificationShadeInMirrorInteractor((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1438:
                        return (T) new SecNotificationShadeWindowStateInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1439:
                        return (T) new SecPanelExpansionStateInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
                    case 1440:
                        return (T) new QuickPanelExternalLogger((LogBuffer) this.referenceSysUIComponentImpl.provideQuickPanelLogBufferProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 1441:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(1500, "QuickPanelLog");
                    case 1442:
                        return (T) new SecQSExpansionStateInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 1443:
                        return (T) new SecPanelTouchBlockHelper(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 1444:
                        return (T) new SecPanelTouchProximityInteractor((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 1445:
                        return (T) new QSScrimViewSwitch((KeyguardBouncerRepository) this.referenceSysUIComponentImpl.keyguardBouncerRepositoryImplProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ScrimView) this.referenceSysUIComponentImpl.providesBehindScrimViewProvider.get(), (ScrimView) this.referenceSysUIComponentImpl.providesFrontScrimViewProvider.get());
                    case 1446:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((ScrimView) notificationShadeWindowView.requireViewById(R.id.scrim_behind));
                    case 1447:
                        NotificationShadeWindowView notificationShadeWindowView2 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((ScrimView) notificationShadeWindowView2.requireViewById(R.id.scrim_in_front));
                    case 1448:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl4 = this.referenceGlobalRootComponentImpl;
                        return (T) new SecPanelSAStatusLogInteractor(referenceGlobalRootComponentImpl4.context, (CoroutineScope) referenceGlobalRootComponentImpl4.applicationScopeProvider.get());
                    case 1449:
                        return (T) new SecQSCoverResourcePicker();
                    case 1450:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        DependencyProvider dependencyProvider = referenceSysUIComponentImpl2.dependencyProvider;
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) referenceSysUIComponentImpl2.broadcastDispatcherProvider.get();
                        dependencyProvider.getClass();
                        return (T) new QsResetSettingsManager(context, broadcastDispatcher);
                    case 1451:
                        return (T) new QSBackupRestoreManager();
                    case 1452:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl5 = this.referenceGlobalRootComponentImpl;
                        return (T) new SystemUIIndexMediator(referenceGlobalRootComponentImpl5.context, (Handler) referenceGlobalRootComponentImpl5.provideMainHandlerProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get());
                    case 1453:
                        return (T) new MultiSIMController(this.referenceGlobalRootComponentImpl.context, (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (MultiSIMPreferredSlotView.SIMInfoIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider46.get());
                    case 1454:
                        return (T) new MultiSIMPreferredSlotView.SIMInfoIconManager.Factory((StatusBarPipelineFlags) this.referenceSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (WifiUiAdapter) this.referenceSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileUiAdapter) this.referenceSysUIComponentImpl.mobileUiAdapterProvider.get(), (MobileContextProvider) this.referenceSysUIComponentImpl.mobileContextProvider.get(), this.referenceSysUIComponentImpl.bTTetherUiAdapter());
                    case 1455:
                        HandlerThread handlerThread = new HandlerThread("SysUiNavbarBg", 0);
                        handlerThread.start();
                        return (T) new Handler(handlerThread.getLooper());
                    case 1456:
                        return (T) new SecQuickSettingsAffordanceInteractor(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 1457:
                        return (T) new FullExpansionPanelNotiAlphaController();
                    case 1458:
                        return (T) new FaceWidgetPluginControllerImpl((FaceWidgetNotificationController) this.referenceSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (PluginFaceWidgetManager) this.referenceSysUIComponentImpl.pluginFaceWidgetManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1459:
                        return (T) new SPluginDependencyProvider((SPluginManager) this.referenceSysUIComponentImpl.provideSPluginManagerProvider.get());
                    case 1460:
                        return (T) new PanelScreenShotBufferLogger((LogBuffer) this.referenceSysUIComponentImpl.providePanelScreenShotLogBufferProvider.get());
                    case 1461:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(10, "PanelScreenShotLog");
                    case 1462:
                        return (T) new NotiCinemaLogger();
                    case 1463:
                        return (T) new NotificationBackupRestoreManager();
                    case 1464:
                        return (T) new ShelfToolTipManager(this.referenceGlobalRootComponentImpl.context, (NotificationShelfManager) this.referenceSysUIComponentImpl.notificationShelfManagerProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1465:
                        return (T) new NotificationColorPicker(this.referenceGlobalRootComponentImpl.context);
                    case 1466:
                        return (T) new AiBriefManagerImpl((BriefLogger) this.referenceSysUIComponentImpl.briefLoggerProvider.get(), (BriefViewController) this.referenceSysUIComponentImpl.briefViewControllerProvider.get(), (BriefNowBarController) this.referenceSysUIComponentImpl.briefNowBarControllerProvider.get(), (BriefNotificationController) this.referenceSysUIComponentImpl.briefNotificationControllerProvider.get());
                    case 1467:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl6 = this.referenceGlobalRootComponentImpl;
                        return (T) new BriefNotificationController(referenceGlobalRootComponentImpl6.context, (NotificationManagerCompat) referenceGlobalRootComponentImpl6.provideNotificationManagerCompatProvider.get());
                    case 1468:
                        return (T) new SecSTQuickControlRequestReceiver();
                    case 1469:
                        return (T) new SummarizeController(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 1470:
                        return (T) new NotificationHighlightDpPreference(this.referenceGlobalRootComponentImpl.context, (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 1471:
                        Optional optional = (Optional) this.referenceSysUIComponentImpl.provideLegacyLoggerOptionalProvider.get();
                        NotificationStatsLoggerModule.Companion.getClass();
                        T t = (T) ((NotificationLogger) optional.orElse(null));
                        return t != null ? t : (T) new NoOpCoreStartable();
                    case 1472:
                        DoubleCheck.lazy(this.referenceSysUIComponentImpl.shortcutHelperActivityStarterProvider);
                        ShortcutHelperModule.Companion.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        T t2 = (T) NoOpStartable.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 1473:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl7 = this.referenceGlobalRootComponentImpl;
                        return (T) new ShortcutHelperActivityStarter(referenceGlobalRootComponentImpl7.context, (CoroutineScope) referenceGlobalRootComponentImpl7.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.shortcutHelperViewModel());
                    case 1474:
                        DoubleCheck.lazy(this.referenceSysUIComponentImpl.shortcutHelperRepositoryProvider);
                        ShortcutHelperModule.Companion.getClass();
                        Flags.FEATURE_FLAGS.getClass();
                        T t3 = (T) NoOpStartable.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 1475:
                        return (T) new BroadcastDispatcherStartable((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1476:
                        return (T) new NotificationMemoryMonitor((NotificationMemoryDumper) this.referenceSysUIComponentImpl.notificationMemoryDumperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationMemoryLoggerProvider));
                    case 1477:
                        return (T) new NotificationMemoryDumper((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get());
                    case 1478:
                        return (T) new NotificationMemoryLogger((NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (StatsManager) this.referenceGlobalRootComponentImpl.provideStatsManagerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 1479:
                        return (T) new FalsingCoreStartable((FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get());
                    case 1480:
                        return (T) new SideFpsProgressBarViewBinder((SideFpsProgressBarViewModel) this.referenceSysUIComponentImpl.sideFpsProgressBarViewModelProvider.get(), (SideFpsProgressBar) this.referenceSysUIComponentImpl.sideFpsProgressBarProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SideFpsLogger) this.referenceSysUIComponentImpl.sideFpsLoggerProvider.get(), (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get());
                    case 1481:
                        return (T) new SideFpsProgressBarViewModel(this.referenceGlobalRootComponentImpl.context, (BiometricStatusInteractor) this.referenceSysUIComponentImpl.providesBiometricStatusInteractorProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (SideFpsSensorInteractor) this.referenceSysUIComponentImpl.sideFpsSensorInteractorProvider.get(), (DozeServiceHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (DisplayStateInteractor) this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 1482:
                        return (T) new SideFpsSensorInteractor(this.referenceGlobalRootComponentImpl.context, (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (DisplayStateInteractor) this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider.get(), Optional.empty(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (SideFpsLogger) this.referenceSysUIComponentImpl.sideFpsLoggerProvider.get());
                    case 1483:
                        return (T) new SideFpsLogger((LogBuffer) this.referenceSysUIComponentImpl.provideBouncerLogProvider.get());
                    case 1484:
                        return (T) new SideFpsProgressBar((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
                    case 1485:
                        return (T) new BouncerMessageAuditLogger((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (BouncerMessageRepository) this.referenceSysUIComponentImpl.bouncerMessageRepositoryImplProvider.get());
                    case 1486:
                        return (T) new LiftToRunFaceAuthBinder((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (AsyncSensorManager) this.referenceSysUIComponentImpl.asyncSensorManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 1487:
                        return (T) new KeyguardTransitionCoreStartable(this.referenceSysUIComponentImpl.setOfTransitionInteractor(), (KeyguardTransitionAuditLogger) this.referenceSysUIComponentImpl.keyguardTransitionAuditLoggerProvider.get(), (KeyguardTransitionBootInteractor) this.referenceSysUIComponentImpl.keyguardTransitionBootInteractorProvider.get());
                    case 1488:
                        return (T) new FromDreamingLockscreenHostedTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1489:
                        return (T) new FromOccludedTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1490:
                        return (T) new FromGlanceableHubTransitionInteractor((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), this.referenceSysUIComponentImpl.glanceableHubTransitions(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1491:
                        return (T) new KeyguardTransitionAuditLogger((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), this.referenceSysUIComponentImpl.keyguardLogger(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (SharedNotificationContainerViewModel) this.referenceSysUIComponentImpl.sharedNotificationContainerViewModelProvider.get(), (KeyguardRootViewModel) this.referenceSysUIComponentImpl.keyguardRootViewModelProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 1492:
                        return (T) new KeyguardTransitionBootInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get(), (DeviceProvisioningInteractor) this.referenceSysUIComponentImpl.deviceProvisioningInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get());
                    case 1493:
                        return (T) new LockscreenSceneTransitionInteractor((KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (LockscreenSceneTransitionRepository) this.referenceSysUIComponentImpl.lockscreenSceneTransitionRepositoryProvider.get());
                    case 1494:
                        return (T) new LockscreenSceneTransitionRepository();
                    case 1495:
                        return (T) new ResourceTrimmer((KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), new GlobalWindowManager(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get());
                    case 1496:
                        return (T) new BouncerLoggerStartable((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryBiometricSettingsInteractor) this.referenceSysUIComponentImpl.deviceEntryBiometricSettingsInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (BouncerLogger) this.referenceSysUIComponentImpl.bouncerLoggerProvider.get());
                    case 1497:
                        return (T) new SideFpsOverlayViewBinder((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesBiometricStatusInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceEntrySideFpsOverlayInteractorProvider), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sideFpsProgressBarViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sideFpsSensorInteractorProvider), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideWindowManagerProvider));
                    case 1498:
                        return (T) new DeviceEntrySideFpsOverlayInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (DeviceEntryFingerprintAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 1499:
                        return (T) new AlternateBouncerViewBinder((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.alternateBouncerWindowViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.alternateBouncerDependenciesProvider), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideWindowManagerProvider), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider));
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get15() {
                int i = 0;
                switch (this.id) {
                    case 1500:
                        return (T) new AlternateBouncerWindowViewModel((AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case VolteConstants.ErrorCode.SERVER_UNREACHABLE /* 1501 */:
                        return (T) new AlternateBouncerDependencies(this.referenceSysUIComponentImpl.alternateBouncerViewModel(), (SwipeUpAnywhereGestureHandler) this.referenceSysUIComponentImpl.swipeUpAnywhereGestureHandlerProvider.get(), (TapGestureDetector) this.referenceSysUIComponentImpl.tapGestureDetectorProvider.get(), this.referenceSysUIComponentImpl.alternateBouncerUdfpsIconViewModel(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.alternateBouncerUdfpsAccessibilityOverlayViewModelProvider), this.referenceSysUIComponentImpl.alternateBouncerMessageAreaViewModel(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case VolteConstants.ErrorCode.SERVER_ERROR /* 1502 */:
                        return (T) new SwipeUpAnywhereGestureHandler(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (SwipeUpGestureLogger) this.referenceSysUIComponentImpl.swipeUpGestureLoggerProvider.get());
                    case VolteConstants.ErrorCode.DNS_FAILURE_HOST /* 1503 */:
                        return (T) new TapGestureDetector(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case VolteConstants.ErrorCode.DNS_FAILURE_NAPTR /* 1504 */:
                        return (T) new AlternateBouncerUdfpsAccessibilityOverlayViewModel((UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get(), (AccessibilityInteractor) this.referenceSysUIComponentImpl.accessibilityInteractorProvider.get());
                    case VolteConstants.ErrorCode.DNS_FAILURE_SVC /* 1505 */:
                        return (T) new ConfigurationControllerStartable((ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceSysUIComponentImpl.setOfConfigurationListener());
                    case VolteConstants.ErrorCode.SDP_PROCESSING_FAILED /* 1506 */:
                        return (T) new SecPowerUI(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (SecWarningsUI) this.referenceSysUIComponentImpl.secPowerNotificationWarningsProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DozeChargingHelper) this.referenceSysUIComponentImpl.dozeChargingHelperProvider.get(), (FaceWidgetNotificationControllerWrapper) this.referenceSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (SystemEventCoordinator) this.referenceSysUIComponentImpl.systemEventCoordinatorProvider.get());
                    case VolteConstants.ErrorCode.VONR_NOT_POSSIBLE /* 1507 */:
                        return (T) new SecPowerNotificationWarnings(this.referenceGlobalRootComponentImpl.context);
                    case VolteConstants.ErrorCode.DSDA_FALLBACK_DSDS /* 1508 */:
                        return (T) new DozeChargingHelper(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider));
                    case 1509:
                        return (T) new RearDisplayDialogController((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get());
                    case 1510:
                        return (T) new ToastUI(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (ToastFactory) this.referenceSysUIComponentImpl.toastFactoryProvider.get(), this.referenceSysUIComponentImpl.toastLogger());
                    case 1511:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "ToastLog");
                    case 1512:
                        return (T) new VolumeUI(this.referenceGlobalRootComponentImpl.context, (VolumeDialogComponent) this.referenceSysUIComponentImpl.volumeDialogComponentProvider.get());
                    case 1513:
                        return (T) new FeatureFlagsReleaseStartable((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1514:
                        return (T) new FlagDependencies((FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (FlagDependenciesBase.Handler) this.referenceSysUIComponentImpl.flagDependenciesNotifierProvider.get());
                    case 1515:
                        return (T) new FlagDependenciesNotifier(this.referenceGlobalRootComponentImpl.context, (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get());
                    case 1516:
                        return (T) new MotionToolStartable(this.referenceSysUIComponentImpl.ddmHandleMotionTool());
                    case 1517:
                        return (T) new QSFragmentStartable((FragmentService) this.referenceSysUIComponentImpl.fragmentServiceProvider.get(), this.referenceSysUIComponentImpl.qSFragmentLegacyProvider);
                    case 1518:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new QSFragmentLegacy(referenceSysUIComponentImpl.qSImplProvider, new QSFragmentComponentFactory(this.referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, i));
                    case 1519:
                        return (T) new CarrierConfigCoreStartable((CarrierConfigRepository) this.referenceSysUIComponentImpl.carrierConfigRepositoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1520:
                        return (T) new UserSwitcherDialogCoordinator(DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideApplicationContextProvider), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.applicationScopeProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.falsingManagerProxyProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.broadcastSenderProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.userSwitcherInteractorProvider), this.referenceSysUIComponentImpl.adapterProvider, DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.activityStarterImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.userSwitcherViewModelProvider));
                    case 1521:
                        return (T) new UserDetailView.Adapter(this.referenceGlobalRootComponentImpl.context, (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get());
                    case 1522:
                        return (T) new MediaProjectionTaskSwitcherCoreStartable(DoubleCheck.lazy(this.referenceSysUIComponentImpl.taskSwitcherNotificationCoordinatorProvider));
                    case 1523:
                        return (T) new TaskSwitcherNotificationCoordinator(this.referenceGlobalRootComponentImpl.context, (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.taskSwitcherNotificationViewModel(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 1524:
                        return (T) new TaskSwitchInteractor((MediaProjectionRepository) this.referenceSysUIComponentImpl.mediaProjectionManagerRepositoryProvider.get(), (TasksRepository) this.referenceSysUIComponentImpl.activityTaskManagerTasksRepositoryProvider.get());
                    case 1525:
                        return (T) new DisplaySwitchLatencyTracker(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.deviceStateRepositoryImpl(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (UnfoldTransitionInteractor) this.referenceSysUIComponentImpl.unfoldTransitionInteractorProvider.get(), this.referenceSysUIComponentImpl.animationStatusRepositoryImpl(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DisplaySwitchLatencyLogger) this.referenceGlobalRootComponentImpl.provideDisplaySwitchLatencyLoggerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case 1526:
                        return (T) new ImmersiveModeConfirmation(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 1527:
                        return (T) new GesturePointerEventListener(this.referenceGlobalRootComponentImpl.context, (GesturePointerEventDetector) this.referenceSysUIComponentImpl.gesturePointerEventDetectorProvider.get());
                    case 1528:
                        return (T) new GesturePointerEventDetector(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 1529:
                        return (T) new Magnification(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (ModeSwitchesController) this.referenceSysUIComponentImpl.modeSwitchesControllerProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), this.referenceSysUIComponentImpl.accessibilityLogger(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get());
                    case 1530:
                        return (T) new ModeSwitchesController(this.referenceGlobalRootComponentImpl.context, (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get());
                    case 1531:
                        return (T) new StatusBarHeadsUpChangeListener((NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get(), (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get());
                    case 1532:
                        return (T) new KeyguardDismissActionBinder((KeyguardDismissActionInteractor) this.referenceSysUIComponentImpl.keyguardDismissActionInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.keyguardLogger());
                    case 1533:
                        return (T) new KeyguardDismissBinder((KeyguardDismissInteractor) this.referenceSysUIComponentImpl.keyguardDismissInteractorProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.keyguardLogger(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1534:
                        return (T) new CommunalLoggerStartable((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1535:
                        return (T) new CommunalSceneStartable((DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl(), (Optional) this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 1536:
                        return (T) new CommunalDreamStartable((PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), this.referenceSysUIComponentImpl.dreamManager(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get());
                    case 1537:
                        return (T) new CommunalAppWidgetHostStartable((CommunalAppWidgetHost) this.referenceSysUIComponentImpl.provideCommunalAppWidgetHostProvider.get(), (CommunalWidgetHost) this.referenceSysUIComponentImpl.provideCommunalWidgetHostProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 1538:
                        return (T) new CommunalBackupRestoreStartable((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get());
                    case 1539:
                        return (T) new HomeControlsDreamStartable(this.referenceGlobalRootComponentImpl.context, (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (HomeControlsComponentInteractor) this.referenceSysUIComponentImpl.homeControlsComponentInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get());
                    case 1540:
                        return (T) new BatteryControllerStartable((BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 1541:
                        return (T) new QSGuideDialog(this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (CentralSurfacesCommandQueueCallbacks) this.referenceSysUIComponentImpl.centralSurfacesCommandQueueCallbacksProvider.get(), (SecPanelSplitHelper) this.referenceSysUIComponentImpl.secPanelSplitHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 1542:
                        return (T) new ControlsStartable((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (ControlsComponent) this.referenceSysUIComponentImpl.controlsComponentProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceSysUIComponentImpl.authorizedPanelsRepositoryImpl(), (SelectedComponentRepository) this.referenceSysUIComponentImpl.selectedComponentRepositoryImplProvider.get(), (PackageChangeInteractor) this.referenceSysUIComponentImpl.packageChangeInteractorProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.controlsUtil());
                    case 1543:
                        return (T) new CollapsedStatusBarFragmentStartable((FragmentService) this.referenceSysUIComponentImpl.fragmentServiceProvider.get(), this.referenceSysUIComponentImpl.collapsedStatusBarFragmentProvider);
                    case 1544:
                        return (T) new ConnectingDisplayViewModel(this.referenceGlobalRootComponentImpl.context, (ConnectedDisplayInteractor) this.referenceSysUIComponentImpl.connectedDisplayInteractorImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), this.referenceSysUIComponentImpl.mirroringConfirmationDialogDelegateFactory());
                    case 1545:
                        final Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        final ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        return (T) new Object(context, configurationController) { // from class: com.android.systemui.statusbar.phone.SystemUIBottomSheetDialog$WindowLayout$LimitedEdgeToEdge
                        };
                    case 1546:
                        return (T) new KeyguardBlueprintCommandListener((CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (KeyguardBlueprintRepository) this.referenceSysUIComponentImpl.keyguardBlueprintRepositoryProvider.get(), (KeyguardBlueprintInteractor) this.referenceSysUIComponentImpl.keyguardBlueprintInteractorProvider.get());
                    case 1547:
                        return (T) new MediaMuteAwaitConnectionCli((CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get());
                    case 1548:
                        return (T) new QSPipelineCoreStartable((CurrentTilesInteractor) this.referenceSysUIComponentImpl.currentTilesInteractorImplProvider.get(), (AccessibilityTilesInteractor) this.referenceSysUIComponentImpl.accessibilityTilesInteractorProvider.get(), (AutoAddInteractor) this.referenceSysUIComponentImpl.autoAddInteractorProvider.get(), (QSPipelineFlagsRepository) this.referenceSysUIComponentImpl.qSPipelineFlagsRepositoryProvider.get(), (RestoreReconciliationInteractor) this.referenceSysUIComponentImpl.restoreReconciliationInteractorProvider.get(), (GridConsistencyInteractor) this.referenceSysUIComponentImpl.gridConsistencyInteractorProvider.get());
                    case 1549:
                        return (T) new AccessibilityTilesInteractor((AccessibilityQsShortcutsRepository) this.referenceSysUIComponentImpl.accessibilityQsShortcutsRepositoryImplProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1550:
                        return (T) new AccessibilityQsShortcutsRepositoryImpl((AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (UserA11yQsShortcutsRepository.Factory) this.referenceSysUIComponentImpl.factoryProvider47.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1551:
                        return (T) new UserA11yQsShortcutsRepository.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.47
                            public final UserA11yQsShortcutsRepository create(int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new UserA11yQsShortcutsRepository(i2, (SecureSettings) switchingProvider.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                            }
                        };
                    case 1552:
                        return (T) new AutoAddInteractor(this.referenceSysUIComponentImpl.setOfAutoAddable(), (AutoAddRepository) this.referenceSysUIComponentImpl.autoAddSettingRepositoryProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceSysUIComponentImpl.qSPipelineLogger(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1553:
                        return (T) new AnonymousClass48();
                    case 1554:
                        return (T) new AnonymousClass49();
                    case 1555:
                        return (T) new CastAutoAddable((CastController) this.referenceSysUIComponentImpl.castControllerImplProvider.get());
                    case 1556:
                        return (T) new DataSaverAutoAddable((DataSaverController) this.referenceSysUIComponentImpl.provideDataSaverControllerProvider.get());
                    case 1557:
                        return (T) new HotspotAutoAddable((HotspotController) this.referenceSysUIComponentImpl.hotspotControllerImplProvider.get());
                    case 1558:
                        return (T) new NightDisplayAutoAddable(this.referenceSysUIComponentImpl.nightDisplayListenerModuleBuilder(), this.referenceGlobalRootComponentImpl.context);
                    case 1559:
                        return (T) new ReduceBrightColorsAutoAddable((ReduceBrightColorsController) this.referenceSysUIComponentImpl.reduceBrightColorsControllerImplProvider.get(), ((Boolean) this.referenceSysUIComponentImpl.isReduceBrightColorsAvailableProvider.get()).booleanValue());
                    case 1560:
                        return (T) new WalletAutoAddable((WalletController) this.referenceSysUIComponentImpl.walletControllerImplProvider.get());
                    case 1561:
                        return (T) new WalletControllerImpl((QuickAccessWalletClient) this.referenceSysUIComponentImpl.provideQuickAccessWalletClientProvider.get());
                    case 1562:
                        return (T) new WorkTileAutoAddable((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (WorkTileRestoreProcessor) this.referenceSysUIComponentImpl.workTileRestoreProcessorProvider.get());
                    case 1563:
                        return (T) new WorkTileRestoreProcessor();
                    case 1564:
                        return (T) new AutoAddSettingRepository((UserAutoAddRepository.Factory) this.referenceSysUIComponentImpl.factoryProvider50.get());
                    case 1565:
                        return (T) new UserAutoAddRepository.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.50
                            public final UserAutoAddRepository create(int i2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new UserAutoAddRepository(i2, (SecureSettings) switchingProvider.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), switchingProvider.referenceSysUIComponentImpl.qSPipelineLogger(), (CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                            }
                        };
                    case 1566:
                        return (T) new RestoreReconciliationInteractor((TileSpecRepository) this.referenceSysUIComponentImpl.tileSpecSettingsRepositoryProvider.get(), (AutoAddRepository) this.referenceSysUIComponentImpl.autoAddSettingRepositoryProvider.get(), (QSSettingsRestoredRepository) this.referenceSysUIComponentImpl.qSSettingsRestoredBroadcastRepositoryProvider.get(), this.referenceSysUIComponentImpl.setOfRestoreProcessor(), this.referenceSysUIComponentImpl.qSPipelineLogger(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1567:
                        return (T) new QSSettingsRestoredBroadcastRepository((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), this.referenceSysUIComponentImpl.qSPipelineLogger(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1568:
                        return (T) new GridConsistencyInteractor((GridLayoutTypeInteractor) this.referenceSysUIComponentImpl.gridLayoutTypeInteractorProvider.get(), (CurrentTilesInteractor) this.referenceSysUIComponentImpl.currentTilesInteractorImplProvider.get(), this.referenceSysUIComponentImpl.mapOfGridLayoutTypeAndGridTypeConsistencyInteractor(), (GridTypeConsistencyInteractor) this.referenceSysUIComponentImpl.noopGridConsistencyInteractorProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.providesGridConsistencyLogProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1569:
                        return (T) new InfiniteGridConsistencyInteractor((IconTilesInteractor) this.referenceSysUIComponentImpl.iconTilesInteractorProvider.get(), (InfiniteGridSizeInteractor) this.referenceSysUIComponentImpl.infiniteGridSizeInteractorProvider.get());
                    case 1570:
                        return (T) new NoopGridConsistencyInteractor();
                    case 1571:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        PanelsModule.Companion.getClass();
                        return (T) logBufferFactory.create(50, "GridConsistencyLog", true);
                    case 1572:
                        return (T) new ShadeStartable((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideShadeTouchLogBufferProvider.get(), (ConfigurationRepository) this.referenceSysUIComponentImpl.configurationRepositoryImplProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (ScrimShadeTransitionController) this.referenceSysUIComponentImpl.scrimShadeTransitionControllerProvider.get(), this.referenceSysUIComponentImpl.sceneInteractorProvider, this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider, (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 1573:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "ShadeTouchLog", false);
                    case 1574:
                        return (T) new ScrimShadeTransitionController((ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ScrimController) this.referenceSysUIComponentImpl.scrimControllerProvider.get());
                    case 1575:
                        return (T) new SceneContainerStartable((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get(), (DeviceUnlockedInteractor) this.referenceSysUIComponentImpl.deviceUnlockedInteractorProvider.get(), (BouncerInteractor) this.referenceSysUIComponentImpl.bouncerInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), this.referenceSysUIComponentImpl.sceneLogger(), (FalsingCollector) this.referenceSysUIComponentImpl.falsingCollectorImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.simBouncerInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.authenticationInteractorProvider), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DeviceProvisioningInteractor) this.referenceSysUIComponentImpl.deviceProvisioningInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider), this.referenceSysUIComponentImpl.headsUpNotificationInteractor(), (SceneContainerOcclusionInteractor) this.referenceSysUIComponentImpl.sceneContainerOcclusionInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (SceneBackInteractor) this.referenceSysUIComponentImpl.sceneBackInteractorProvider.get(), (SessionStorage) this.referenceSysUIComponentImpl.provideShadeSessionStorageProvider.get(), (WindowManagerLockscreenVisibilityInteractor) this.referenceSysUIComponentImpl.windowManagerLockscreenVisibilityInteractorProvider.get());
                    case 1576:
                        return (T) new ScrimStartable((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ScrimController) this.referenceSysUIComponentImpl.scrimControllerProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (SceneContainerOcclusionInteractor) this.referenceSysUIComponentImpl.sceneContainerOcclusionInteractorProvider.get(), (BiometricUnlockInteractor) this.referenceSysUIComponentImpl.biometricUnlockInteractorProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (BrightnessMirrorShowingInteractor) this.referenceSysUIComponentImpl.brightnessMirrorShowingInteractorProvider.get(), (DozeServiceHost) this.referenceSysUIComponentImpl.dozeServiceHostProvider.get());
                    case 1577:
                        return (T) new UnfoldInitializationStartable((Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.providesFoldStateLoggingProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.providesFoldStateLoggerProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.unfoldBgTransitionProgressProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.provideProgressForwarderProvider.get());
                    case 1578:
                        return (T) new UnfoldTraceLogger(this.referenceGlobalRootComponentImpl.context, this.referenceGlobalRootComponentImpl.foldStateRepositoryImpl(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (DeviceStateRepository) this.referenceGlobalRootComponentImpl.deviceStateRepositoryImplProvider.get());
                    case 1579:
                        return (T) new NotificationChannels(this.referenceGlobalRootComponentImpl.context);
                    case 1580:
                        return (T) new KeyguardBiometricLockoutLogger((ViewMediatorCallback) this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 1581:
                        return (T) new SliceBroadcastRelayHandler(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 1582:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        ShellInterface shellInterface = referenceSysUIComponentImpl2.setShell;
                        Optional<Pip> optional = referenceSysUIComponentImpl2.setPip;
                        Optional<SplitScreen> optional2 = referenceSysUIComponentImpl2.setSplitScreen;
                        Optional optional3 = referenceSysUIComponentImpl2.setOneHanded;
                        Optional optional4 = this.referenceSysUIComponentImpl.setDesktopMode;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl3 = this.referenceSysUIComponentImpl;
                        return (T) new WMShell(context2, shellInterface, optional, optional2, optional3, optional4, referenceSysUIComponentImpl3.setRecentTasks, (CommandQueue) referenceSysUIComponentImpl3.provideCommandQueueProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.referenceSysUIComponentImpl.noteTaskInitializer(), (CommunalTransitionViewModel) this.referenceSysUIComponentImpl.communalTransitionViewModelProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceSysUIComponentImpl.setEnterSplitGestureHandler);
                    case 1583:
                        return (T) this.referenceSysUIComponentImpl.injectSecVendorServices(new SecVendorServices());
                    case 1584:
                        return (T) new UiThreadMonitor((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LooperSlowLogController) this.referenceSysUIComponentImpl.looperSlowLogControllerImplProvider.get());
                    case 1585:
                        return (T) new BiometricNotificationService(this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (BiometricNotificationBroadcastReceiver) this.referenceSysUIComponentImpl.biometricNotificationBroadcastReceiverProvider.get(), Optional.empty(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get(), (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get());
                    case 1586:
                        return (T) new BiometricNotificationBroadcastReceiver(this.referenceGlobalRootComponentImpl.context, (BiometricNotificationDialogFactory) this.referenceSysUIComponentImpl.biometricNotificationDialogFactoryProvider.get());
                    case 1587:
                        return (T) new BiometricNotificationDialogFactory(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get(), (FaceManager) this.referenceGlobalRootComponentImpl.provideFaceManagerProvider.get());
                    case 1588:
                        return (T) new ClipboardListener(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.clipboardOverlayControllerProvider, this.referenceSysUIComponentImpl.semClipboardToastControllerProvider, (ClipboardToast) this.referenceSysUIComponentImpl.clipboardToast(), (ClipboardManager) this.referenceGlobalRootComponentImpl.provideClipboardManagerProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1589:
                        return (T) new ClipboardOverlayController(this.referenceSysUIComponentImpl.overlayWindowContextContext(), this.referenceSysUIComponentImpl.clipboardOverlayView(), this.referenceSysUIComponentImpl.clipboardOverlayWindow(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get(), this.referenceSysUIComponentImpl.timeoutHandler(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (ClipboardOverlayUtils) this.referenceSysUIComponentImpl.clipboardOverlayUtils(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.referenceSysUIComponentImpl.clipboardImageLoader(), this.referenceSysUIComponentImpl.clipboardTransitionExecutor(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1590:
                        return (T) new SemClipboardToastController(this.referenceGlobalRootComponentImpl.context, (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get());
                    case 1591:
                        return (T) new InstantAppNotifier(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 1592:
                        return (T) new KeyboardUI(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider, (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), this.referenceSysUIComponentImpl.bluetoothDialogDelegate());
                    case 1593:
                        return (T) new LatencyTester((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 1594:
                        return (T) new RingtonePlayer(this.referenceGlobalRootComponentImpl.context);
                    case 1595:
                        return (T) new ShortcutKeyDispatcher(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.setSplitScreenController);
                    case 1596:
                        return (T) new StorageNotification(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (StorageManager) this.referenceGlobalRootComponentImpl.provideStorageManagerProvider.get());
                    case 1597:
                        return (T) new ThemeOverlayController(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (ThemeOverlayApplier) this.referenceSysUIComponentImpl.themeOverlayApplierProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (UiModeManager) this.referenceGlobalRootComponentImpl.provideUiModeManagerProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get());
                    case 1598:
                        return (T) new ThemeOverlayApplier((OverlayManager) this.referenceGlobalRootComponentImpl.provideOverlayManagerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.referenceSysUIComponentImpl.namedString2(), this.referenceSysUIComponentImpl.namedString3(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 1599:
                        return (T) new MediaOutputSwitcherDialogUI(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), this.referenceSysUIComponentImpl.mediaOutputDialogManager());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get16() {
                int i = 0;
                switch (this.id) {
                    case 1600:
                        return (T) new PopupUI(this.referenceGlobalRootComponentImpl.context, (LogWrapper) this.referenceSysUIComponentImpl.providesPopupUILogWrapperProvider.get(), (List) this.referenceSysUIComponentImpl.providesPopupUIViewModelListProvider.get());
                    case VolteConstants.ErrorCode.SIP_REG_FAILURE /* 1601 */:
                        DataConnectionViewModel dataConnectionViewModel = this.referenceSysUIComponentImpl.dataConnectionViewModel();
                        MWOverheatWarningViewModel mWOverheatWarningViewModel = this.referenceSysUIComponentImpl.mWOverheatWarningViewModel();
                        SimTrayProtectionViewModel simTrayProtectionViewModel = this.referenceSysUIComponentImpl.simTrayProtectionViewModel();
                        MobileDeviceWarningViewModel mobileDeviceWarningViewModel = this.referenceSysUIComponentImpl.mobileDeviceWarningViewModel();
                        ?? r4 = (T) new ArrayList();
                        r4.add(dataConnectionViewModel);
                        r4.add(mWOverheatWarningViewModel);
                        r4.add(simTrayProtectionViewModel);
                        if (BasicRune.POPUPUI_MOBILE_DEVICE_WARNING) {
                            r4.add(mobileDeviceWarningViewModel);
                        }
                        return r4;
                    case 1602:
                        ChipbarCoordinator chipbarCoordinator = (ChipbarCoordinator) this.referenceSysUIComponentImpl.chipbarCoordinatorProvider.get();
                        CommandQueue commandQueue = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        return (T) new MediaTttSenderCoordinator(chipbarCoordinator, commandQueue, referenceGlobalRootComponentImpl.context, (DumpManager) referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (MediaTttSenderLogger) this.referenceSysUIComponentImpl.mediaTttSenderLoggerProvider.get(), (MediaTttFlags) this.referenceSysUIComponentImpl.mediaTttFlagsProvider.get(), (MediaTttSenderUiEventLogger) this.referenceSysUIComponentImpl.mediaTttSenderUiEventLoggerProvider.get());
                    case 1603:
                        return (T) new MediaTttSenderLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMediaTttSenderLogBufferProvider.get());
                    case VolteConstants.ErrorCode.DEREG_SUCCEEDED /* 1604 */:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(30, "MediaTttSender");
                    case 1605:
                        return (T) new MediaTttFlags((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1606:
                        return (T) new MediaTttSenderUiEventLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1607:
                        return (T) new MediaTttChipControllerReceiver((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), this.referenceGlobalRootComponentImpl.context, (MediaTttReceiverLogger) this.referenceSysUIComponentImpl.mediaTttReceiverLoggerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (MediaTttFlags) this.referenceSysUIComponentImpl.mediaTttFlagsProvider.get(), (MediaTttReceiverUiEventLogger) this.referenceSysUIComponentImpl.mediaTttReceiverUiEventLoggerProvider.get(), (ViewUtil) this.referenceSysUIComponentImpl.viewUtilProvider.get(), this.referenceSysUIComponentImpl.wakeLockBuilder(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), this.referenceSysUIComponentImpl.mediaTttReceiverRippleController(), (TemporaryViewUiEventLogger) this.referenceSysUIComponentImpl.temporaryViewUiEventLoggerProvider.get());
                    case 1608:
                        return (T) new MediaTttReceiverLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMediaTttReceiverLogBufferProvider.get());
                    case 1609:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "MediaTttReceiver");
                    case 1610:
                        return (T) new MediaTttReceiverUiEventLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1611:
                        CommandRegistry commandRegistry = (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) new MediaTttCommandLineHelper(commandRegistry, referenceGlobalRootComponentImpl2.context, (Executor) referenceGlobalRootComponentImpl2.provideMainExecutorProvider.get());
                    case 1612:
                        return (T) new StylusUsiPowerStartable((StylusManager) this.referenceSysUIComponentImpl.stylusManagerProvider.get(), (InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get(), (StylusUsiPowerUI) this.referenceSysUIComponentImpl.stylusUsiPowerUIProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1613:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl3 = this.referenceGlobalRootComponentImpl;
                        return (T) new StylusUsiPowerUI(referenceGlobalRootComponentImpl3.context, (NotificationManagerCompat) referenceGlobalRootComponentImpl3.provideNotificationManagerCompatProvider.get(), (InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 1614:
                        return (T) new PhysicalKeyboardCoreStartable(DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyboardBacklightDialogCoordinatorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.stickyKeysIndicatorCoordinatorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyboardDockingIndicationViewBinderProvider), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 1615:
                        return (T) new KeyboardBacklightDialogCoordinator((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (BacklightDialogViewModel) this.referenceSysUIComponentImpl.backlightDialogViewModelProvider.get());
                    case 1616:
                        return (T) new BacklightDialogViewModel((KeyboardBacklightInteractor) this.referenceSysUIComponentImpl.keyboardBacklightInteractorProvider.get(), (AccessibilityManagerWrapper) this.referenceSysUIComponentImpl.accessibilityManagerWrapperProvider.get());
                    case 1617:
                        return (T) new KeyboardBacklightInteractor((KeyboardRepository) this.referenceSysUIComponentImpl.keyboardRepositoryImplProvider.get());
                    case 1618:
                        return (T) new KeyboardRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get());
                    case 1619:
                        return (T) new StickyKeysIndicatorCoordinator((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (StickyKeyDialogFactory) this.referenceSysUIComponentImpl.stickyKeyDialogFactoryProvider.get(), this.referenceSysUIComponentImpl.stickyKeysIndicatorViewModel(), this.referenceSysUIComponentImpl.stickyKeysLogger());
                    case 1620:
                        return (T) new StickyKeyDialogFactory((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                    case 1621:
                        return (T) new StickyKeysRepositoryImpl((InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (UserAwareSecureSettingsRepository) this.referenceSysUIComponentImpl.userAwareSecureSettingsRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.stickyKeysLogger());
                    case 1622:
                        return (T) new UserAwareSecureSettingsRepositoryImpl((SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1623:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "KeyboardLog");
                    case 1624:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl4 = this.referenceGlobalRootComponentImpl;
                        return (T) new KeyboardDockingIndicationViewBinder(referenceGlobalRootComponentImpl4.context, (CoroutineScope) referenceGlobalRootComponentImpl4.applicationScopeProvider.get(), (KeyboardDockingIndicationViewModel) this.referenceSysUIComponentImpl.keyboardDockingIndicationViewModelProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
                    case 1625:
                        return (T) new KeyboardDockingIndicationViewModel((WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), this.referenceGlobalRootComponentImpl.context, (KeyboardDockingIndicationInteractor) this.referenceSysUIComponentImpl.keyboardDockingIndicationInteractorProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get());
                    case 1626:
                        return (T) new KeyboardDockingIndicationInteractor((KeyboardRepository) this.referenceSysUIComponentImpl.keyboardRepositoryImplProvider.get());
                    case 1627:
                        return (T) new MuteQuickAffordanceCoreStartable((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (RingerModeTracker) this.referenceSysUIComponentImpl.ringerModeTrackerImplProvider.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (KeyguardQuickAffordanceRepository) this.referenceSysUIComponentImpl.keyguardQuickAffordanceRepositoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1628:
                        return (T) new DreamMonitor((Monitor) this.referenceSysUIComponentImpl.provideSystemUserMonitorProvider.get(), this.referenceSysUIComponentImpl.dreamCondition(), this.referenceSysUIComponentImpl.dreamStatusBarStateCallback(), (RestartDozeListener) this.referenceSysUIComponentImpl.restartDozeListenerProvider.get());
                    case 1629:
                        Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                        SystemProcessCondition systemProcessCondition = this.referenceSysUIComponentImpl.systemProcessCondition();
                        return (T) new Monitor(executor, Collections.singleton(systemProcessCondition), (TableLogBuffer) this.referenceSysUIComponentImpl.provideMonitorTableLogBufferProvider.get());
                    case 1630:
                        return (T) ((TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "MonitorLog");
                    case 1631:
                        return (T) new RestartDozeListener((SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 1632:
                        return (T) new AssistantAttentionMonitor((Monitor) this.referenceSysUIComponentImpl.provideSystemUserMonitorProvider.get(), this.referenceSysUIComponentImpl.assistantAttentionCondition(), this.referenceSysUIComponentImpl.assistantAttentionCallback());
                    case 1633:
                        return (T) new FlexModePanel(this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (AutoHideController) this.referenceSysUIComponentImpl.autoHideControllerProvider.get());
                    case 1634:
                        return (T) new ScreenDecorationsController(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), new ScreenDecorationsComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (PrivacyDotViewController) this.referenceSysUIComponentImpl.privacyDotViewControllerProvider.get(), (CoverPrivacyDotViewController) this.referenceSysUIComponentImpl.coverPrivacyDotViewControllerProvider.get(), (PrivacyDotDecorProviderFactory) this.referenceSysUIComponentImpl.privacyDotDecorProviderFactoryProvider.get(), (CoverPrivacyDotDecorProviderFactory) this.referenceSysUIComponentImpl.coverPrivacyDotDecorProviderFactoryProvider.get());
                    case 1635:
                        return (T) new PrivacyDotViewController((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarContentInsetsProvider) this.referenceSysUIComponentImpl.statusBarContentInsetsProvider.get(), (SystemStatusAnimationScheduler) this.referenceSysUIComponentImpl.bindSystemStatusAnimationSchedulerProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), this.referenceSysUIComponentImpl.privacyLogger(), (SecPanelExpansionStateInteractor) this.referenceSysUIComponentImpl.secPanelExpansionStateInteractorProvider.get());
                    case 1636:
                        return (T) new CoverPrivacyDotViewController((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarContentInsetsProvider) this.referenceSysUIComponentImpl.statusBarContentInsetsProvider.get(), (SystemStatusAnimationScheduler) this.referenceSysUIComponentImpl.bindSystemStatusAnimationSchedulerProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), this.referenceSysUIComponentImpl.privacyLogger(), (SecPanelExpansionStateInteractor) this.referenceSysUIComponentImpl.secPanelExpansionStateInteractorProvider.get());
                    case 1637:
                        return (T) new PrivacyDotDecorProviderFactory(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
                    case 1638:
                        return (T) new CoverPrivacyDotDecorProviderFactory(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
                    case 1639:
                        return (T) new SafeUIStatusBarWindowController(this.referenceGlobalRootComponentImpl.context);
                    case 1640:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl5 = this.referenceGlobalRootComponentImpl;
                        return (T) new SafeUINavigationBar(referenceGlobalRootComponentImpl5.context, (WindowManager) referenceGlobalRootComponentImpl5.provideWindowManagerProvider.get());
                    case 1641:
                        return (T) new PlankComponent(((Boolean) this.referenceSysUIComponentImpl.providesPlankFeatureEnabledProvider.get()).booleanValue(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.protocolManagerImplProvider));
                    case 1642:
                        PlankModule.Companion.getClass();
                        return (T) Boolean.valueOf(Rune.SYSUI_TEST_FOR_PLANK);
                    case 1643:
                        return (T) new ProtocolManagerImpl((TestInputMonitor) this.referenceSysUIComponentImpl.provideTestInputMonitorProvider.get(), (Protocol) this.referenceSysUIComponentImpl.provideProtocolProvider.get(), (ApiLogger) this.referenceSysUIComponentImpl.provideApiLoggerProvider.get(), (PlankDispatcherFactory) this.referenceSysUIComponentImpl.providePlankDispatcherFactoryProvider.get());
                    case 1644:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        PlankModule.Companion.getClass();
                        return (T) new TestInputMonitor(context);
                    case 1645:
                        PlankModule.Companion.getClass();
                        return (T) new Protocol();
                    case 1646:
                        PlankModule.Companion.getClass();
                        T t = (T) ApiLogger.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1647:
                        PlankModule.Companion.getClass();
                        return (T) new PlankDispatcherFactory();
                    case 1648:
                        return (T) new KeyguardRemotePreviewManager((KeyguardPreviewRendererFactory) this.referenceSysUIComponentImpl.keyguardPreviewRendererFactoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 1649:
                        return (T) new KeyguardPreviewRendererFactory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.51
                            @Override // com.android.systemui.keyguard.ui.preview.KeyguardPreviewRendererFactory
                            public final KeyguardPreviewRenderer create(Bundle bundle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new KeyguardPreviewRenderer((Context) switchingProvider.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) switchingProvider.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (Handler) switchingProvider.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get(), switchingProvider.referenceSysUIComponentImpl.keyguardPreviewClockViewModel(), switchingProvider.referenceSysUIComponentImpl.keyguardPreviewSmartspaceViewModel(), switchingProvider.referenceSysUIComponentImpl.keyguardBottomAreaViewModel(), switchingProvider.referenceSysUIComponentImpl.keyguardQuickAffordancesCombinedViewModel(), (DisplayManager) switchingProvider.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (WindowManager) switchingProvider.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), switchingProvider.referenceSysUIComponentImpl.configurationState(), switchingProvider.referenceSysUIComponentImpl.clockEventController(), (ClockRegistry) switchingProvider.referenceSysUIComponentImpl.getClockRegistryProvider.get(), (BroadcastDispatcher) switchingProvider.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (LockscreenSmartspaceController) switchingProvider.referenceSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (UdfpsOverlayInteractor) switchingProvider.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get(), (FalsingManager) switchingProvider.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (VibratorHelper) switchingProvider.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (KeyguardIndicationController) switchingProvider.referenceSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (KeyguardRootViewModel) switchingProvider.referenceSysUIComponentImpl.keyguardRootViewModelProvider.get(), switchingProvider.referenceSysUIComponentImpl.keyguardBlueprintViewModel(), bundle, (OccludingAppDeviceEntryMessageViewModel) switchingProvider.referenceSysUIComponentImpl.occludingAppDeviceEntryMessageViewModelProvider.get(), (ChipbarCoordinator) switchingProvider.referenceSysUIComponentImpl.chipbarCoordinatorProvider.get(), (ScreenOffAnimationController) switchingProvider.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (ShadeInteractor) switchingProvider.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SecureSettings) switchingProvider.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), switchingProvider.referenceSysUIComponentImpl.communalTutorialIndicatorViewModel(), switchingProvider.referenceSysUIComponentImpl.defaultShortcutsSection(), (KeyguardClockInteractor) switchingProvider.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (KeyguardClockViewModel) switchingProvider.referenceSysUIComponentImpl.keyguardClockViewModelProvider.get());
                            }
                        };
                    case 1650:
                        return (T) new ToAodFoldTransitionInteractor((KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 1651:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl6 = this.referenceGlobalRootComponentImpl;
                        return (T) new CustomTileMapper(referenceGlobalRootComponentImpl6.context, (IUriGrantsManager) referenceGlobalRootComponentImpl6.provideIUriGrantsManagerProvider.get());
                    case 1652:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "UnseenNotifLog", false);
                    case 1653:
                        return (T) new NotifUiAdjustmentProvider((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SensitiveNotificationProtectionController) this.referenceSysUIComponentImpl.sensitiveNotificationProtectionControllerImplProvider.get(), (SectionStyleProvider) this.referenceSysUIComponentImpl.sectionStyleProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get(), (HighPriorityProvider) this.referenceSysUIComponentImpl.highPriorityProvider.get(), (AppLockNotificationController) this.referenceSysUIComponentImpl.appLockNotificationControllerImplProvider.get());
                    case 1654:
                        return (T) new RemoteInputNotificationRebuilder(this.referenceGlobalRootComponentImpl.context);
                    case 1655:
                        return (T) new NotificationSettingsController((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1656:
                        return (T) new ImageLoader((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 1657:
                        return (T) new BigPictureStatsManager((LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 1658:
                        return (T) new BarOrderInteractor((BarOrderRepository) this.referenceSysUIComponentImpl.barOrderRepositoryProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1659:
                        return (T) new BarOrderRepository((TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1660:
                        return (T) new QSCMainViewController((QSCMainView) this.referenceSysUIComponentImpl.providesQSCMainViewProvider.get(), this.referenceGlobalRootComponentImpl.context, (SecQSSettingEditResources) this.referenceSysUIComponentImpl.secQSSettingEditResourcesProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (BarOrderInteractor) this.referenceSysUIComponentImpl.barOrderInteractorProvider.get(), (QSCPopupButtonController) this.referenceSysUIComponentImpl.qSCPopupButtonControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 1661:
                        NotificationPanelView notificationPanelView = (NotificationPanelView) this.referenceSysUIComponentImpl.providesNotificationPanelViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((QSCMainView) notificationPanelView.requireViewById(R.id.qs_customizer_main));
                    case 1662:
                        return (T) new SecQSSettingEditResources(this.referenceGlobalRootComponentImpl.context, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get());
                    case 1663:
                        return (T) new QSCPopupButtonController(this.referenceGlobalRootComponentImpl.context, (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (SecQSSettingEditResources) this.referenceSysUIComponentImpl.secQSSettingEditResourcesProvider.get());
                    case 1664:
                        return (T) new SecQSGradationDrawableController((SecQSGradationDrawableView) this.referenceSysUIComponentImpl.providesQSGradationDrawableProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get());
                    case 1665:
                        NotificationPanelView notificationPanelView2 = (NotificationPanelView) this.referenceSysUIComponentImpl.providesNotificationPanelViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((SecQSGradationDrawableView) notificationPanelView2.requireViewById(R.id.qs_gradation_view));
                    case 1666:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new UserSwitchDialogController(referenceSysUIComponentImpl.adapterProvider, (ActivityStarter) referenceSysUIComponentImpl.activityStarterImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get());
                    case 1667:
                        return (T) new KeyguardStatusBarViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.headsUpNotificationInteractor(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardStatusBarInteractor) this.referenceSysUIComponentImpl.keyguardStatusBarInteractorProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get());
                    case 1668:
                        return (T) new KeyguardStatusBarInteractor((KeyguardStatusBarRepository) this.referenceSysUIComponentImpl.keyguardStatusBarRepositoryImplProvider.get());
                    case 1669:
                        return (T) new KeyguardStatusBarRepositoryImpl(this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (UserSwitcherRepository) this.referenceSysUIComponentImpl.userSwitcherRepositoryImplProvider.get());
                    case 1670:
                        return (T) new TwoPhoneModeIconController(this.referenceGlobalRootComponentImpl.context, (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 1671:
                        return (T) new KnoxStatusBarControlInteractor((KnoxStatusBarControlRepository) this.referenceSysUIComponentImpl.knoxStatusBarControlRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1672:
                        return (T) new KnoxStatusBarControlRepositoryImpl((KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 1673:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NavBarButtonClick");
                    case 1674:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NavbarOrientationTrackingLog");
                    case 1675:
                        return (T) new IndicatorGardenViewTreeLogHelper();
                    case 1676:
                        return (T) new KeyguardKeyboardInteractor((KeyboardRepository) this.referenceSysUIComponentImpl.keyboardRepositoryImplProvider.get());
                    case 1677:
                        return (T) new FaceAuthAccessibilityDelegate(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get());
                    case 1678:
                        T t2 = (T) Optional.empty();
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 1679:
                        return (T) new DreamOverlayStatusBarItemsProvider((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 1680:
                        AudioManagerEventsReceiver audioManagerEventsReceiver = (AudioManagerEventsReceiver) this.referenceSysUIComponentImpl.provideAudioManagerIntentsReceiverProvider.get();
                        AudioManager audioManager = (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get();
                        ContentResolver contentResolver = (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get();
                        CoroutineContext coroutineContext = (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get();
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        AudioModule.Companion.getClass();
                        return (T) new AudioRepositoryImpl(audioManagerEventsReceiver, audioManager, contentResolver, coroutineContext, coroutineScope);
                    case 1681:
                        Context context2 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        CoroutineScope coroutineScope2 = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        AudioModule.Companion.getClass();
                        return (T) new AudioManagerEventsReceiverImpl(context2, coroutineScope2);
                    case 1682:
                        AudioRepository audioRepository = (AudioRepository) this.referenceSysUIComponentImpl.provideAudioRepositoryProvider.get();
                        AudioModule.Companion.getClass();
                        return (T) new AudioModeInteractor(audioRepository);
                    case 1683:
                        return (T) new LocalMediaRepositoryFactoryImpl((AudioManagerEventsReceiver) this.referenceSysUIComponentImpl.provideAudioManagerIntentsReceiverProvider.get(), this.referenceSysUIComponentImpl.localMediaManagerFactory());
                    case 1684:
                        AudioManagerEventsReceiver audioManagerEventsReceiver2 = (AudioManagerEventsReceiver) this.referenceSysUIComponentImpl.provideAudioManagerIntentsReceiverProvider.get();
                        MediaSessionManager provideMediaSessionManager = FrameworkServicesModule_ProvideMediaSessionManagerFactory.provideMediaSessionManager(this.referenceGlobalRootComponentImpl.context);
                        LocalBluetoothManager localBluetoothManager = (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get();
                        CoroutineScope coroutineScope3 = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        CoroutineContext coroutineContext2 = (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get();
                        MediaDevicesModule.Companion.getClass();
                        return (T) new MediaControllerRepositoryImpl(audioManagerEventsReceiver2, provideMediaSessionManager, localBluetoothManager, coroutineScope3, coroutineContext2);
                    case 1685:
                        return (T) new MediaControllerInteractorImpl((Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 1686:
                        LocalBluetoothManager localBluetoothManager2 = (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get();
                        CoroutineContext coroutineContext3 = (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get();
                        AudioModule.Companion.getClass();
                        return (T) new AudioSharingRepositoryImpl(localBluetoothManager2, coroutineContext3);
                    case 1687:
                        Context context3 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        AnonymousClass52 anonymousClass52 = (AnonymousClass52) this.referenceSysUIComponentImpl.factoryProvider51.get();
                        AncModule.Companion.getClass();
                        T t3 = (T) anonymousClass52.create(new SliceViewManagerWrapper(context3));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 1688:
                        return (T) new Object() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.52
                            public final AncSliceRepositoryImpl create(SliceViewManager sliceViewManager) {
                                return new AncSliceRepositoryImpl((CoroutineContext) SwitchingProvider.this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), sliceViewManager);
                            }
                        };
                    case 1689:
                        SpatializerRepository spatializerRepository = (SpatializerRepository) this.referenceSysUIComponentImpl.provdieSpatializerRepositoryProvider.get();
                        SpatializerModule.Companion.getClass();
                        return (T) new SpatializerInteractor(spatializerRepository);
                    case 1690:
                        Spatializer spatializer = (Spatializer) this.referenceSysUIComponentImpl.provideSpatializerProvider.get();
                        CoroutineContext coroutineContext4 = (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get();
                        SpatializerModule.Companion.getClass();
                        return (T) new SpatializerRepositoryImpl(spatializer, coroutineContext4);
                    case 1691:
                        AudioManager audioManager2 = (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get();
                        SpatializerModule.Companion.getClass();
                        return (T) audioManager2.getSpatializer();
                    case 1692:
                        CaptioningRepository captioningRepository = (CaptioningRepository) this.referenceSysUIComponentImpl.provideCaptioningRepositoryProvider.get();
                        CaptioningModule.Companion.getClass();
                        return (T) new CaptioningInteractor(captioningRepository);
                    case 1693:
                        CaptioningManager captioningManager = (CaptioningManager) this.referenceGlobalRootComponentImpl.provideCaptioningManagerProvider.get();
                        CoroutineContext coroutineContext5 = (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get();
                        CoroutineScope coroutineScope4 = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        CaptioningModule.Companion.getClass();
                        return (T) new CaptioningRepositoryImpl(captioningManager, coroutineContext5, coroutineScope4);
                    case 1694:
                        AudioRepository audioRepository2 = (AudioRepository) this.referenceSysUIComponentImpl.provideAudioRepositoryProvider.get();
                        NotificationsSoundPolicyInteractor notificationsSoundPolicyInteractor = (NotificationsSoundPolicyInteractor) this.referenceSysUIComponentImpl.provideNotificationsSoundPolicyInteractrorProvider.get();
                        AudioModule.Companion.getClass();
                        return (T) new AudioVolumeInteractor(audioRepository2, notificationsSoundPolicyInteractor);
                    case 1695:
                        return (T) new NotificationsSoundPolicyInteractor((NotificationsSoundPolicyRepository) this.referenceSysUIComponentImpl.provideNotificationsSoundPolicyRepositoryProvider.get());
                    case 1696:
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl7 = this.referenceGlobalRootComponentImpl;
                        return (T) new NotificationsSoundPolicyRepositoryImpl(referenceGlobalRootComponentImpl7.context, (NotificationManager) referenceGlobalRootComponentImpl7.provideNotificationManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case 1697:
                        return (T) new FaceScanningProviderFactory((AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ScreenDecorationsLogger) this.referenceSysUIComponentImpl.screenDecorationsLoggerProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get());
                    case 1698:
                        return (T) new ScreenDecorationsLogger((LogBuffer) this.referenceSysUIComponentImpl.provideScreenDecorationsLogProvider.get());
                    case 1699:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(200, "ScreenDecorationsLog");
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get2() {
                switch (this.id) {
                    case 200:
                        return (T) new IndicatorCutoutUtil(this.referenceGlobalRootComponentImpl.context, (IndicatorGardenInputProperties) this.referenceSysUIComponentImpl.indicatorGardenInputPropertiesProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                    case 201:
                        return (T) new IndicatorGardenInputProperties(this.referenceGlobalRootComponentImpl.context);
                    case 202:
                        return (T) new IndicatorScaleGardener(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 203:
                        return (T) new FragmentService((FragmentHostManager.Factory) this.referenceSysUIComponentImpl.factoryProvider3.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 204:
                        return (T) new FragmentHostManager.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.1
                            @Override // com.android.systemui.fragments.FragmentHostManager.Factory
                            public final FragmentHostManager create(View view) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new FragmentHostManager(view, (FragmentService) switchingProvider.referenceSysUIComponentImpl.fragmentServiceProvider.get(), (LeakDetector) switchingProvider.referenceSysUIComponentImpl.providesLeakDetectorProvider.get());
                            }
                        };
                    case 205:
                        return (T) new DesktopManagerImpl(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (KeyguardSecurityModel) this.referenceSysUIComponentImpl.keyguardSecurityModelProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideDesktopSystemUiBinderProvider), this.referenceSysUIComponentImpl.indicatorLogger(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secDeviceControlsControllerImplProvider));
                    case 206:
                        return (T) new DesktopSystemUiBinder(this.referenceGlobalRootComponentImpl.context);
                    case 207:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        IndicatorPhoneModule.Companion.getClass();
                        return (T) logBufferFactory.create(500, "IndicatorLog", true);
                    case 208:
                        return (T) new SecDeviceControlsControllerImpl(this.referenceGlobalRootComponentImpl.context, (ControlsComponent) this.referenceSysUIComponentImpl.controlsComponentProvider.get(), (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (ControlsActivityStarter) this.referenceSysUIComponentImpl.controlsActivityStarterImplProvider.get(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getVibrationIntensity /* 209 */:
                        return (T) new ControlsComponent(((Boolean) this.referenceSysUIComponentImpl.providesControlsFeatureEnabledProvider.get()).booleanValue(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsListingControllerImplProvider), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ControlsSettingsRepository) this.referenceSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), Optional.empty());
                    case 210:
                        return (T) Boolean.valueOf(ControlsModule.providesControlsFeatureEnabled((PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get()));
                    case IKnoxCustomManager.Stub.TRANSACTION_getWifiHotspotEnabledState /* 211 */:
                        return (T) new ControlsControllerImpl(this.referenceGlobalRootComponentImpl.context, (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (ControlsUiController) this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider.get(), (SelectedComponentRepository) this.referenceSysUIComponentImpl.selectedComponentRepositoryImplProvider.get(), (ControlsBindingController) this.referenceSysUIComponentImpl.controlsBindingControllerImplProvider.get(), (ControlsListingController) this.referenceSysUIComponentImpl.controlsListingControllerImplProvider.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceSysUIComponentImpl.authorizedPanelsRepositoryImpl(), Optional.empty(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SecControlsBindingController) this.referenceSysUIComponentImpl.controlsBindingControllerImplProvider.get(), (SecControlsUiController) this.referenceSysUIComponentImpl.secControlsUiControllerImplProvider.get(), (SecSelectedComponentRepository) this.referenceSysUIComponentImpl.secSelectedComponentRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.controlsUtil(), (BadgeProvider) this.referenceSysUIComponentImpl.badgeProviderImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getWifiState /* 212 */:
                        return (T) SysUIConcurrencyModule_ProvideBackgroundDelayableExecutorFactory.provideBackgroundDelayableExecutor((Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addAutoCallNumber /* 213 */:
                        Lazy lazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsControllerImplProvider);
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get();
                        DelayableExecutor delayableExecutor2 = (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get();
                        Lazy lazy2 = DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsListingControllerImplProvider);
                        ControlActionCoordinator controlActionCoordinator = (ControlActionCoordinator) this.referenceSysUIComponentImpl.controlActionCoordinatorImplProvider.get();
                        ActivityStarter activityStarter = (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get();
                        ControlsMetricsLogger controlsMetricsLogger = (ControlsMetricsLogger) this.referenceSysUIComponentImpl.controlsMetricsLoggerImplProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        UserTracker userTracker = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new SecControlsUiControllerImpl(lazy, context, delayableExecutor, delayableExecutor2, lazy2, controlActionCoordinator, activityStarter, controlsMetricsLogger, keyguardStateController, userTracker, referenceSysUIComponentImpl.setTaskViewFactory, (ControlsSettingsRepository) referenceSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), this.referenceSysUIComponentImpl.authorizedPanelsRepositoryImpl(), (SelectedComponentRepository) this.referenceSysUIComponentImpl.selectedComponentRepositoryImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogWrapper) this.referenceSysUIComponentImpl.provideControlsLogWrapperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsControllerImplProvider), (SecControlActionCoordinator) this.referenceSysUIComponentImpl.controlActionCoordinatorImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.controlsActivityStarterImplProvider), (SecSelectedComponentRepository) this.referenceSysUIComponentImpl.secSelectedComponentRepositoryImplProvider.get(), this.referenceGlobalRootComponentImpl.mainSharedPreferences(), this.referenceSysUIComponentImpl.layoutUtil(), this.referenceSysUIComponentImpl.controlsUtil(), (AUIFacade) this.referenceSysUIComponentImpl.aUIFacadeImplProvider.get(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get(), (BadgeSubject) this.referenceSysUIComponentImpl.badgeProviderImplProvider.get(), (BadgeProvider) this.referenceSysUIComponentImpl.badgeProviderImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeAutoCallNumber /* 214 */:
                        return (T) new ControlsListingControllerImpl(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityTaskManagerProxy) this.referenceSysUIComponentImpl.activityTaskManagerProxyProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (SecSelectedComponentRepository) this.referenceSysUIComponentImpl.secSelectedComponentRepositoryImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberDelay /* 215 */:
                        return (T) new ActivityTaskManagerProxy();
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberAnswerMode /* 216 */:
                        return (T) new SecSelectedComponentRepositoryImpl((UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberList /* 217 */:
                        return (T) new UserFileManagerImpl(this.referenceGlobalRootComponentImpl.context, (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setAutoCallPickupState /* 218 */:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        DelayableExecutor delayableExecutor3 = (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get();
                        DelayableExecutor delayableExecutor4 = (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get();
                        ActivityStarter activityStarter2 = (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get();
                        BroadcastSender broadcastSender = (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get();
                        KeyguardStateController keyguardStateController2 = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        return (T) new ControlActionCoordinatorImpl(context2, delayableExecutor3, delayableExecutor4, activityStarter2, broadcastSender, keyguardStateController2, referenceSysUIComponentImpl2.setTaskViewFactory, (ControlsMetricsLogger) referenceSysUIComponentImpl2.controlsMetricsLoggerImplProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (ControlsSettingsRepository) this.referenceSysUIComponentImpl.controlsSettingsRepositoryImplProvider.get(), (SALogger) this.referenceSysUIComponentImpl.sALoggerProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (AUIFacade) this.referenceSysUIComponentImpl.aUIFacadeImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAutoCallPickupState /* 219 */:
                        return (T) new BroadcastSender(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.wakeLockBuilder(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 220:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "WakeLockLog", false);
                    case 221:
                        return (T) new ControlsMetricsLoggerImpl();
                    case 222:
                        return (T) new VibratorHelper((Vibrator) this.referenceGlobalRootComponentImpl.provideVibratorProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getLockScreenShortcut /* 223 */:
                        return (T) new ControlsSettingsRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setUsbConnectionType /* 224 */:
                        return (T) SecureSettingsImpl_Factory.newInstance((ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionType /* 225 */:
                        return (T) new SALogger((SystemUIAnalyticsWrapper) this.referenceSysUIComponentImpl.systemUIAnalyticsWrapperProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionTypeInternal /* 226 */:
                        return (T) new SystemUIAnalyticsWrapper();
                    case IKnoxCustomManager.Stub.TRANSACTION_setForceAutoShutDownState /* 227 */:
                        return (T) new AUIFacadeImpl(this.referenceGlobalRootComponentImpl.context, (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getForceAutoShutDownState /* 228 */:
                        return (T) new SelectedComponentRepositoryImpl((UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setBrightness /* 229 */:
                        return (T) new LogWrapper(ModuleType.CONTROLS, (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideControlsLoggerProvider.get());
                    case 230:
                        return (T) new SamsungServiceLoggerImpl("ControlsLogger", 200, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeShortcut /* 231 */:
                        return (T) new ControlsActivityStarterImpl((ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (ControlsComponent) this.referenceSysUIComponentImpl.controlsComponentProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case IKnoxCustomManager.Stub.TRANSACTION_addWidget /* 232 */:
                        return (T) new QSPipelineFlagsRepository();
                    case IKnoxCustomManager.Stub.TRANSACTION_removeWidget /* 233 */:
                        return (T) new QSTileHost(this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.newQSTileFactoryProvider), (QSFactory) this.referenceSysUIComponentImpl.qSFactoryImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), this.referenceSysUIComponentImpl.secAutoTileManagerProvider, DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeControllerProvider), this.referenceSysUIComponentImpl.qSLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), this.referenceSysUIComponentImpl.customTileStatePersisterImpl(), (TileLifecycleManager.Factory) this.referenceSysUIComponentImpl.factoryProvider6.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (QSPipelineFlagsRepository) this.referenceSysUIComponentImpl.qSPipelineFlagsRepositoryProvider.get(), (BootAnimationFinishedCache) this.referenceSysUIComponentImpl.bootAnimationFinishedCacheImplProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_deleteHomeScreenPage /* 234 */:
                        return (T) new NewQSTileFactory((QSTileConfigProvider) this.referenceSysUIComponentImpl.qSTileConfigProviderImplProvider.get(), (QSTileViewModelAdapter.Factory) this.referenceSysUIComponentImpl.factoryProvider29.get(), this.referenceSysUIComponentImpl.mapOfStringAndProviderOfQSTileViewModel(), this.referenceSysUIComponentImpl.qSTileViewModelFactoryComponent());
                    case IKnoxCustomManager.Stub.TRANSACTION_setAppsButtonState /* 235 */:
                        return (T) new QSTileConfigProviderImpl(this.referenceSysUIComponentImpl.mapOfStringAndQSTileConfig(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAppsButtonState /* 236 */:
                        return (T) new QsEventLoggerImpl((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setFavoriteApp /* 237 */:
                        return (T) new QSTileViewModelAdapter.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.2
                            @Override // com.android.systemui.qs.tiles.viewmodel.QSTileViewModelAdapter.Factory
                            public final QSTileViewModelAdapter create(QSTileViewModel qSTileViewModel) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new QSTileViewModelAdapter((CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (QSHost) switchingProvider.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), qSTileViewModel);
                            }
                        };
                    case IKnoxCustomManager.Stub.TRANSACTION_removeFavoriteApp /* 238 */:
                        return (T) new QSHostAdapter((QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (CurrentTilesInteractor) this.referenceSysUIComponentImpl.currentTilesInteractorImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (TileServiceRequestController.Builder) this.referenceSysUIComponentImpl.builderProvider2.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (QSPipelineFlagsRepository) this.referenceSysUIComponentImpl.qSPipelineFlagsRepositoryProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getFavoriteAppsMaxCount /* 239 */:
                        return (T) new CurrentTilesInteractorImpl((TileSpecRepository) this.referenceSysUIComponentImpl.tileSpecSettingsRepositoryProvider.get(), (InstalledTilesComponentRepository) this.referenceSysUIComponentImpl.installedTilesComponentRepositoryImplProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (MinimumTilesRepository) this.referenceSysUIComponentImpl.minimumTilesResourceRepositoryProvider.get(), (RetailModeRepository) this.referenceSysUIComponentImpl.retailModeSettingsRepositoryProvider.get(), this.referenceSysUIComponentImpl.customTileStatePersisterImpl(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newQSTileFactoryProvider), (QSFactory) this.referenceSysUIComponentImpl.qSFactoryImplProvider.get(), this.referenceSysUIComponentImpl.customTileAddedRepository(), (TileLifecycleManager.Factory) this.referenceSysUIComponentImpl.factoryProvider6.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.qSPipelineLogger(), (QSPipelineFlagsRepository) this.referenceSysUIComponentImpl.qSPipelineFlagsRepositoryProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getFavoriteApp /* 240 */:
                        return (T) new TileSpecSettingsRepository(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), this.referenceSysUIComponentImpl.qSPipelineLogger(), (RetailModeRepository) this.referenceSysUIComponentImpl.retailModeSettingsRepositoryProvider.get(), (UserTileSpecRepository.Factory) this.referenceSysUIComponentImpl.factoryProvider4.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setZeroPageState /* 241 */:
                        LogBufferFactory logBufferFactory2 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        QSPipelineModule.Companion.getClass();
                        return (T) logBufferFactory2.create(KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED, "QSTileListLog", false);
                    case IKnoxCustomManager.Stub.TRANSACTION_getZeroPageState /* 242 */:
                        LogBufferFactory logBufferFactory3 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        QSAutoAddModule.Companion.getClass();
                        return (T) logBufferFactory3.create(100, "QSAutoAddableLog", false);
                    case IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentMode /* 243 */:
                        LogBufferFactory logBufferFactory4 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        QSPipelineModule.Companion.getClass();
                        return (T) logBufferFactory4.create(50, "QSRestoreLog", false);
                    case IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentMode /* 244 */:
                        return (T) new RetailModeSettingsRepository((GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setHomeScreenMode /* 245 */:
                        return (T) new UserTileSpecRepository.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.3
                            @Override // com.android.systemui.qs.pipeline.data.repository.UserTileSpecRepository.Factory
                            public final UserTileSpecRepository create(int i) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new UserTileSpecRepository(i, (DefaultTilesRepository) switchingProvider.referenceSysUIComponentImpl.defaultTilesQSHostRepositoryProvider.get(), (SecureSettings) switchingProvider.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), switchingProvider.referenceSysUIComponentImpl.qSPipelineLogger(), (CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                            }
                        };
                    case IKnoxCustomManager.Stub.TRANSACTION_getHomeScreenMode /* 246 */:
                        return (T) new DefaultTilesQSHostRepository(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl));
                    case IKnoxCustomManager.Stub.TRANSACTION_addDexShortcut /* 247 */:
                        return (T) new InstalledTilesComponentRepositoryImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (PackageChangeRepository) this.referenceSysUIComponentImpl.packageChangeRepositoryImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_removeDexShortcut /* 248 */:
                        return (T) new PackageChangeRepositoryImpl((PackageInstallerMonitor) this.referenceSysUIComponentImpl.packageInstallerMonitorProvider.get(), (PackageUpdateMonitor.Factory) this.referenceSysUIComponentImpl.factoryProvider5.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcut /* 249 */:
                        return (T) new PackageInstallerMonitor((Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.providePackageChangeRepoLogBufferProvider.get(), (PackageInstaller) this.referenceGlobalRootComponentImpl.providePackageInstallerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend /* 250 */:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "PackageChangeRepo");
                    case IKnoxCustomManager.Stub.TRANSACTION_removeDexURLShortcut /* 251 */:
                        return (T) new PackageUpdateMonitor.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.4
                            @Override // com.android.systemui.common.data.repository.PackageUpdateMonitor.Factory
                            public final com.android.systemui.common.data.repository.PackageUpdateMonitor create(UserHandle userHandle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new com.android.systemui.common.data.repository.PackageUpdateMonitor(userHandle, (CoroutineDispatcher) switchingProvider.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (Handler) switchingProvider.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (Context) switchingProvider.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (PackageUpdateLogger) switchingProvider.referenceSysUIComponentImpl.packageUpdateLoggerProvider.get(), (SystemClock) switchingProvider.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                            }
                        };
                    case IKnoxCustomManager.Stub.TRANSACTION_setDexForegroundModePackageList /* 252 */:
                        return (T) new PackageUpdateLogger((LogBuffer) this.referenceSysUIComponentImpl.providePackageChangeRepoLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getDexForegroundModePackageList /* 253 */:
                        return (T) new MinimumTilesResourceRepository(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl));
                    case 254:
                        return (T) new QSFactoryImpl(DoubleCheck.lazy(this.referenceSysUIComponentImpl.qSHostAdapterProvider), this.referenceSysUIComponentImpl.factoryProvider7, this.referenceSysUIComponentImpl.mapOfStringAndProviderOfQSTileImplOf());
                    case 255:
                        return (T) new AnonymousClass5();
                    case 256:
                        LogBufferFactory logBufferFactory5 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        ((QSPipelineFlagsRepository) this.referenceSysUIComponentImpl.qSPipelineFlagsRepositoryProvider.get()).getClass();
                        Flags.qsNewTiles();
                        return (T) logBufferFactory5.create(KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED, "QSLog", false);
                    case 257:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "QSConfigLog", true);
                    case 258:
                        return (T) new TileServices((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), this.referenceGlobalRootComponentImpl.provideMainHandlerProvider, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (TileLifecycleManager.Factory) this.referenceSysUIComponentImpl.factoryProvider6.get(), this.referenceSysUIComponentImpl.customTileAddedRepository(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 259:
                        return (T) new StatusBarIconControllerImpl(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (StatusBarIconList) this.referenceSysUIComponentImpl.provideStatusBarIconListProvider.get(), (StatusBarPipelineFlags) this.referenceSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (BindableIconsRegistry) this.referenceSysUIComponentImpl.bindableIconsRegistryImplProvider.get(), (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SubscriptionsOrder) this.referenceSysUIComponentImpl.subscriptionsOrderProvider.get());
                    case 260:
                        return (T) new StatusBarIconList(this.referenceGlobalRootComponentImpl.context.getResources().getStringArray(17236322));
                    case 261:
                        return (T) new StatusBarPipelineFlags(this.referenceGlobalRootComponentImpl.context, (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 262:
                        return (T) new BindableIconsRegistryImpl((DeviceBasedSatelliteBindableIcon) this.referenceSysUIComponentImpl.deviceBasedSatelliteBindableIconProvider.get());
                    case 263:
                        return (T) new DeviceBasedSatelliteBindableIcon(this.referenceGlobalRootComponentImpl.context, (DeviceBasedSatelliteViewModel) this.referenceSysUIComponentImpl.deviceBasedSatelliteViewModelImplProvider.get());
                    case 264:
                        return (T) new DeviceBasedSatelliteViewModelImpl(this.referenceGlobalRootComponentImpl.context, (DeviceBasedSatelliteInteractor) this.referenceSysUIComponentImpl.deviceBasedSatelliteInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (AirplaneModeRepository) this.referenceSysUIComponentImpl.airplaneModeRepositoryImplProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDeviceBasedSatelliteInputLogProvider.get());
                    case 265:
                        return (T) new DeviceBasedSatelliteInteractor((DeviceBasedSatelliteRepository) this.referenceSysUIComponentImpl.deviceBasedSatelliteRepositorySwitcherProvider.get(), (MobileIconsInteractor) this.referenceSysUIComponentImpl.mobileIconsInteractorImplProvider.get(), (WifiInteractor) this.referenceSysUIComponentImpl.wifiInteractorImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDeviceBasedSatelliteInputLogProvider.get());
                    case 266:
                        return (T) new DeviceBasedSatelliteRepositorySwitcher((RealDeviceBasedSatelliteRepository) this.referenceSysUIComponentImpl.deviceBasedSatelliteRepositoryImplProvider.get(), (DemoDeviceBasedSatelliteRepository) this.referenceSysUIComponentImpl.demoDeviceBasedSatelliteRepositoryProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 267:
                        return (T) new DeviceBasedSatelliteRepositoryImpl((Optional) this.referenceGlobalRootComponentImpl.provideSatelliteManagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDeviceBasedSatelliteInputLogProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideVerboseDeviceBasedSatelliteInputLogProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl));
                    case 268:
                        LogBufferFactory logBufferFactory6 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory6.create(200, "DeviceBasedSatelliteInputLog", true);
                    case 269:
                        LogBufferFactory logBufferFactory7 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory7.create(200, "VerboseDeviceBasedSatelliteInputLog", true);
                    case 270:
                        return (T) new DemoDeviceBasedSatelliteRepository((DemoDeviceBasedSatelliteDataSource) this.referenceSysUIComponentImpl.demoDeviceBasedSatelliteDataSourceProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl));
                    case 271:
                        return (T) new DemoDeviceBasedSatelliteDataSource((DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 272:
                        return (T) new MobileIconsInteractorImpl((MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get(), (CarrierConfigTracker) this.referenceSysUIComponentImpl.carrierConfigTrackerProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideMobileSummaryLogBufferProvider.get(), (ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (UserSetupRepository) this.referenceSysUIComponentImpl.userSetupRepositoryImplProvider.get(), (WifiRepository) this.referenceSysUIComponentImpl.wifiRepositorySwitcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), this.referenceSysUIComponentImpl.mobileDataIconResource(), this.referenceSysUIComponentImpl.mobileSignalIconResource(), this.referenceSysUIComponentImpl.mobileRoamingIconResource(), this.referenceSysUIComponentImpl.mobileDisabledDataIconResource(), new MobileMappingsProxyImpl(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get(), (SubscriptionsOrder) this.referenceSysUIComponentImpl.subscriptionsOrderProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastExternal /* 273 */:
                        return (T) new CarrierConfigTracker((CarrierConfigManager) this.referenceGlobalRootComponentImpl.provideCarrierConfigManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastInternal /* 274 */:
                        return (T) new UserSetupRepositoryImpl((DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentBroadcast /* 275 */:
                        ?? r0 = (T) ((DeviceProvisionedControllerImpl) this.referenceSysUIComponentImpl.deviceProvisionedControllerImplProvider.get());
                        ReferenceSystemUIModule_BindDeviceProvisionedControllerFactory.bindDeviceProvisionedController(r0);
                        return r0;
                    case IKnoxCustomManager.Stub.TRANSACTION_setForcedDisplaySizeDensity /* 276 */:
                        return (T) new DeviceProvisionedControllerImpl((SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_clearForcedDisplaySizeDensity /* 277 */:
                        return (T) new SubscriptionsOrder((SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_startSmartView /* 278 */:
                        return (T) new WifiInteractorImpl((ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (WifiRepository) this.referenceSysUIComponentImpl.wifiRepositorySwitcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ImsRegStateUtil) this.referenceSysUIComponentImpl.imsRegStateUtilProvider.get(), this.referenceSysUIComponentImpl.wifiSignalIconResource(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideWifiTableLogBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setForceSingleView /* 279 */:
                        return (T) new TileLifecycleManager.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.6
                            @Override // com.android.systemui.qs.external.TileLifecycleManager.Factory
                            public final TileLifecycleManager create(Intent intent, UserHandle userHandle) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new TileLifecycleManager((Handler) switchingProvider.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), switchingProvider.referenceGlobalRootComponentImpl.context, (IQSService) switchingProvider.referenceSysUIComponentImpl.tileServicesProvider.get(), switchingProvider.referenceSysUIComponentImpl.packageManagerAdapter(), (BroadcastDispatcher) switchingProvider.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), intent, userHandle, (ActivityManager) switchingProvider.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (IDeviceIdleController) switchingProvider.referenceGlobalRootComponentImpl.provideDeviceIdleControllerProvider.get(), (DelayableExecutor) switchingProvider.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                            }
                        };
                    case IKnoxCustomManager.Stub.TRANSACTION_getForceSingleView /* 280 */:
                        return (T) new CustomTileAddedSharedPrefsRepository((UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setBootingAnimationSub /* 281 */:
                        T t = (T) this.referenceSysUIComponentImpl.internetTile();
                        T t2 = (T) this.referenceSysUIComponentImpl.internetTileNewImpl();
                        FeatureFlags featureFlags = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        ConnectivityModule.Companion.getClass();
                        return ((FeatureFlagsClassicRelease) featureFlags).isEnabled(com.android.systemui.flags.Flags.SIGNAL_CALLBACK_DEPRECATION) ? t2 : t;
                    case IKnoxCustomManager.Stub.TRANSACTION_setShuttingDownAnimationSub /* 282 */:
                        return (T) new NetworkControllerImpl(this.referenceGlobalRootComponentImpl.context, (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get(), (CallbackHandler) this.referenceSysUIComponentImpl.callbackHandlerProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (TelephonyListenerManager) this.referenceSysUIComponentImpl.telephonyListenerManagerProvider.get(), (WifiManager) this.referenceGlobalRootComponentImpl.provideWifiManagerProvider.get(), (AccessPointControllerImpl) this.referenceSysUIComponentImpl.provideAccessPointControllerImplProvider.get(), (StatusBarPipelineFlags) this.referenceSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (CarrierConfigTracker) this.referenceSysUIComponentImpl.carrierConfigTrackerProvider.get(), this.referenceSysUIComponentImpl.wifiStatusTrackerFactory(), (MobileSignalControllerFactory) this.referenceSysUIComponentImpl.mobileSignalControllerFactoryProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (InternetDialogManager) this.referenceSysUIComponentImpl.internetDialogManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideStatusBarNetworkControllerBufferProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getLoadingLogoPath /* 283 */:
                        return (T) new CallbackHandler(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper());
                    case IKnoxCustomManager.Stub.TRANSACTION_registerSystemUiCallback /* 284 */:
                        return (T) new TelephonyListenerManager((TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), new TelephonyCallback());
                    case IKnoxCustomManager.Stub.TRANSACTION_startProKioskMode /* 285 */:
                        ?? r4 = (T) new AccessPointControllerImpl((UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (WifiPickerTrackerFactory) this.referenceSysUIComponentImpl.wifiPickerTrackerFactoryProvider.get());
                        if (r4.mWifiPickerTracker == null) {
                            r4.mWifiPickerTracker = r4.mWifiPickerTrackerFactory.create(r4.mLifecycle, r4, "AccessPointController");
                        }
                        return r4;
                    case IKnoxCustomManager.Stub.TRANSACTION_stopProKioskMode /* 286 */:
                        return (T) new MobileSignalControllerFactory(this.referenceGlobalRootComponentImpl.context, (CallbackHandler) this.referenceSysUIComponentImpl.callbackHandlerProvider.get(), (CarrierConfigTracker) this.referenceSysUIComponentImpl.carrierConfigTrackerProvider.get(), new MobileMappingsProxyImpl());
                    case IKnoxCustomManager.Stub.TRANSACTION_stayInDexForegroundMode /* 287 */:
                        return (T) new InternetDialogManager((DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (InternetDialogDelegate.Factory) this.referenceSysUIComponentImpl.factoryProvider9.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getAsoc /* 288 */:
                        return (T) new DialogTransitionAnimator((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), new CentralSurfacesDependenciesModule$1((IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider)), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (AnimationFeatureFlags) this.referenceSysUIComponentImpl.provideAnimationFeatureFlagsProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setAsoc /* 289 */:
                        return (T) new AnimationFeatureFlags() { // from class: com.android.systemui.statusbar.dagger.CentralSurfacesDependenciesModule$2
                        };
                    case IKnoxCustomManager.Stub.TRANSACTION_getBsoh /* 290 */:
                        return (T) new InternetDialogDelegate.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.7
                            @Override // com.android.systemui.qs.tiles.dialog.InternetDialogDelegate.Factory
                            public final InternetDialogDelegate create(boolean z, boolean z2, boolean z3, CoroutineScope coroutineScope) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new InternetDialogDelegate(switchingProvider.referenceGlobalRootComponentImpl.context, (InternetDialogManager) switchingProvider.referenceSysUIComponentImpl.internetDialogManagerProvider.get(), switchingProvider.referenceSysUIComponentImpl.internetDialogController(), z, z2, z3, coroutineScope, (UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (DialogTransitionAnimator) switchingProvider.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (Handler) switchingProvider.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) switchingProvider.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (KeyguardStateController) switchingProvider.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SystemUIDialog.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider8.get());
                            }
                        };
                    case IKnoxCustomManager.Stub.TRANSACTION_getBsohUnbiased /* 291 */:
                        return (T) new ToastFactory((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_startTcpDump /* 292 */:
                        return (T) new LocationControllerImpl(this.referenceGlobalRootComponentImpl.context, (AppOpsController) this.referenceSysUIComponentImpl.appOpsControllerImplProvider.get(), (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (BootCompleteCache) this.referenceSysUIComponentImpl.bootCompleteCacheImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_stopTcpDump /* 293 */:
                        return (T) new AppOpsControllerImpl(this.referenceGlobalRootComponentImpl.context, (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (IndividualSensorPrivacyController) this.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_getTcpDump /* 294 */:
                        return (T) ReferenceSystemUIModule_ProvideIndividualSensorPrivacyControllerFactory.provideIndividualSensorPrivacyController((SensorPrivacyManager) this.referenceGlobalRootComponentImpl.provideSensorPrivacyManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_readFile /* 295 */:
                        return (T) new WifiStateWorker((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (WifiManager) this.referenceGlobalRootComponentImpl.provideWifiManagerProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setApplicationRestrictionsInternal /* 296 */:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "StatusBarNetworkControllerLog");
                    case IKnoxCustomManager.Stub.TRANSACTION_getApplicationRestrictionsInternal /* 297 */:
                        return (T) new InternetTileViewModel((AirplaneModeRepository) this.referenceSysUIComponentImpl.airplaneModeRepositoryImplProvider.get(), (ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (EthernetInteractor) this.referenceSysUIComponentImpl.ethernetInteractorProvider.get(), (MobileIconsInteractor) this.referenceSysUIComponentImpl.mobileIconsInteractorImplProvider.get(), (WifiInteractor) this.referenceSysUIComponentImpl.wifiInteractorImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_setKeyedAppStatesReport /* 298 */:
                        return (T) new EthernetInteractor((ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get());
                    case IKnoxCustomManager.Stub.TRANSACTION_migrateApplicationRestrictions /* 299 */:
                        return (T) new ColorInversionTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get3() {
                switch (this.id) {
                    case 300:
                        return (T) new NightDisplayTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (LocationController) this.referenceSysUIComponentImpl.locationControllerImplProvider.get(), (ColorDisplayManager) this.referenceGlobalRootComponentImpl.provideColorDisplayManagerProvider.get(), this.referenceSysUIComponentImpl.nightDisplayListenerModuleBuilder());
                    case 301:
                        return (T) new ReduceBrightColorsTile(((Boolean) this.referenceSysUIComponentImpl.isReduceBrightColorsAvailableProvider.get()).booleanValue(), (ReduceBrightColorsController) this.referenceSysUIComponentImpl.reduceBrightColorsControllerImplProvider.get(), (QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 302:
                        return (T) Boolean.valueOf(QSFlagsModule.isReduceBrightColorsAvailable(this.referenceGlobalRootComponentImpl.context));
                    case 303:
                        return (T) new ReduceBrightColorsControllerImpl((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (ColorDisplayManager) this.referenceGlobalRootComponentImpl.provideColorDisplayManagerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 304:
                        return (T) new OneHandedModeTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 305:
                        return (T) new ColorCorrectionTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case VpnErrorValues.ERROR_STOPPING_CONNECTION_BEFORE_REMOVING /* 306 */:
                        return (T) new DreamTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceSysUIComponentImpl.namedBoolean2(), this.referenceSysUIComponentImpl.namedBoolean3());
                    case VpnErrorValues.ERROR_VPN_RECREATE_PROFILE_FAIL /* 307 */:
                        return (T) new FontScalingTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), this.referenceSysUIComponentImpl.fontScalingDialogDelegateProvider);
                    case 308:
                        return (T) new FontScalingDialogDelegate(this.referenceGlobalRootComponentImpl.context, (SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get(), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case 309:
                        return (T) new HearingDevicesTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (HearingDevicesDialogManager) this.referenceSysUIComponentImpl.hearingDevicesDialogManagerProvider.get(), (HearingDevicesChecker) this.referenceSysUIComponentImpl.hearingDevicesCheckerProvider.get(), (BluetoothController) this.referenceSysUIComponentImpl.bluetoothControllerImplProvider.get());
                    case 310:
                        return (T) new HearingDevicesDialogManager((DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (HearingDevicesDialogDelegate.Factory) this.referenceSysUIComponentImpl.factoryProvider10.get(), (HearingDevicesChecker) this.referenceSysUIComponentImpl.hearingDevicesCheckerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 311:
                        return (T) new HearingDevicesDialogDelegate.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.8
                            @Override // com.android.systemui.accessibility.hearingaid.HearingDevicesDialogDelegate.Factory
                            public final HearingDevicesDialogDelegate create(boolean z) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new HearingDevicesDialogDelegate((Context) switchingProvider.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), z, (SystemUIDialog.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider8.get(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (DialogTransitionAnimator) switchingProvider.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (LocalBluetoothManager) switchingProvider.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (Handler) switchingProvider.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (AudioManager) switchingProvider.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get());
                            }
                        };
                    case 312:
                        return (T) SettingsLibraryModule.provideLocalBluetoothController(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get());
                    case 313:
                        return (T) new HearingDevicesChecker(this.referenceGlobalRootComponentImpl.context, (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case 314:
                        return (T) new BluetoothControllerImpl(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BluetoothLogger) this.referenceSysUIComponentImpl.bluetoothLoggerProvider.get(), (BluetoothRepository) this.referenceSysUIComponentImpl.bluetoothRepositoryImplProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (BluetoothAdapter) this.referenceGlobalRootComponentImpl.provideBluetoothAdapterProvider.get());
                    case 315:
                        return (T) new BluetoothLogger((LogBuffer) this.referenceSysUIComponentImpl.providerBluetoothLogBufferProvider.get());
                    case 316:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "BluetoothLog");
                    case 317:
                        return (T) new BluetoothRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get());
                    case 318:
                        return (T) new ColorAdjustmentTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl());
                    case 319:
                        return (T) new HighContrastFontTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 320:
                        return (T) new ColorLensTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
                    case 321:
                        return (T) new WifiTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (AccessPointController) this.referenceSysUIComponentImpl.provideAccessPointControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (SatelliteModeObserverHelper) this.referenceSysUIComponentImpl.satelliteModeObserverHelperProvider.get());
                    case 322:
                        return (T) new SatelliteModeObserverHelper(this.referenceGlobalRootComponentImpl.context);
                    case 323:
                        return (T) new SBluetoothTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (SBluetoothController) this.referenceSysUIComponentImpl.sBluetoothControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (SatelliteModeObserverHelper) this.referenceSysUIComponentImpl.satelliteModeObserverHelperProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 324:
                        return (T) new SBluetoothControllerImpl(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BluetoothLogger) this.referenceSysUIComponentImpl.bluetoothLoggerProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (BluetoothAdapter) this.referenceGlobalRootComponentImpl.provideBluetoothAdapterProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get());
                    case 325:
                        return (T) new MobileDataTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (SatelliteModeObserverHelper) this.referenceSysUIComponentImpl.satelliteModeObserverHelperProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (SubscreenUtil) this.referenceSysUIComponentImpl.subscreenUtilProvider.get());
                    case 326:
                        return (T) new SubscreenUtil((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 327:
                        return (T) new CastTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (CastController) this.referenceSysUIComponentImpl.castControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (HotspotController) this.referenceSysUIComponentImpl.hotspotControllerImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (TileJavaAdapter) this.referenceSysUIComponentImpl.tileJavaAdapterProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 328:
                        return (T) new CastControllerImpl(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 329:
                        return (T) new HotspotControllerImpl(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 330:
                        return (T) new TileJavaAdapter();
                    case CustomDeviceManager.SOURCE_ADDRESS /* 331 */:
                        return (T) new HotspotTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (HotspotController) this.referenceSysUIComponentImpl.hotspotControllerImplProvider.get(), (DataSaverController) this.referenceSysUIComponentImpl.provideDataSaverControllerProvider.get(), (KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (SatelliteModeObserverHelper) this.referenceSysUIComponentImpl.satelliteModeObserverHelperProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case CustomDeviceManager.DESTINATION_ADDRESS /* 332 */:
                        T t = (T) ((NetworkControllerImpl) ((NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get())).mDataSaverController;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 333:
                        return (T) new AirplaneModeTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SatelliteModeObserverHelper) this.referenceSysUIComponentImpl.satelliteModeObserverHelperProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                    case 334:
                        return (T) new DataSaverTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (DataSaverController) this.referenceSysUIComponentImpl.provideDataSaverControllerProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get());
                    case 335:
                        return (T) new NfcTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 336:
                        return (T) new SecDeviceControlsTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (SecDeviceControlsController) this.referenceSysUIComponentImpl.secDeviceControlsControllerImplProvider.get(), (ControlsComponent) this.referenceSysUIComponentImpl.controlsComponentProvider.get());
                    case 337:
                        return (T) new DndTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.mainSharedPreferences(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl());
                    case 338:
                        return (T) new ZenModeControllerImpl(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 339:
                        return (T) new SWorkModeTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (ManagedProfileController) this.referenceSysUIComponentImpl.managedProfileControllerImplProvider.get());
                    case 340:
                        return (T) new ManagedProfileControllerImpl(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get());
                    case 341:
                        return (T) new FlashlightTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (FlashlightController) this.referenceSysUIComponentImpl.flashlightControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                    case 342:
                        return (T) new FlashlightControllerImpl(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CameraManager) this.referenceGlobalRootComponentImpl.provideCameraManagerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 343:
                        return (T) new BlueLightFilterTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case 344:
                        return (T) new LocationTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (LocationController) this.referenceSysUIComponentImpl.locationControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get());
                    case 345:
                        return (T) new CameraToggleTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (IndividualSensorPrivacyController) this.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SafetyCenterManager) this.referenceGlobalRootComponentImpl.provideSafetyCenterManagerProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case 346:
                        return (T) new MicrophoneToggleTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (IndividualSensorPrivacyController) this.referenceSysUIComponentImpl.provideIndividualSensorPrivacyControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SafetyCenterManager) this.referenceGlobalRootComponentImpl.provideSafetyCenterManagerProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case 347:
                        return (T) new AlarmTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (NextAlarmController) this.referenceSysUIComponentImpl.nextAlarmControllerImplProvider.get());
                    case 348:
                        return (T) new NextAlarmControllerImpl((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 349:
                        return (T) new UiModeNightTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), this.referenceSysUIComponentImpl.qSLogger(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (LocationController) this.referenceSysUIComponentImpl.locationControllerImplProvider.get());
                    case 350:
                        return (T) new SyncTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_SUCCESS /* 351 */:
                        return (T) new ScreenCaptureTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.panelInteractor());
                    case QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_EXCEPTION /* 352 */:
                        return (T) new QRCodeScannerTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (QRCodeScannerController) this.referenceSysUIComponentImpl.qRCodeScannerControllerProvider.get());
                    case QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_FAIL_TO_GET_KEY /* 353 */:
                        return (T) new QRCodeScannerController(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 354:
                        return (T) new RecordIssueTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardDismissUtil) this.referenceSysUIComponentImpl.keyguardDismissUtilProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (TraceurMessageSender) this.referenceSysUIComponentImpl.traceurMessageSenderProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (IssueRecordingState) this.referenceSysUIComponentImpl.issueRecordingStateProvider.get(), (RecordIssueDialogDelegate.Factory) this.referenceSysUIComponentImpl.factoryProvider11.get());
                    case 355:
                        return (T) new KeyguardDismissUtil((KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 356:
                        return (T) new TraceurMessageSender((Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get());
                    case 357:
                        return (T) new IssueRecordingState((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get());
                    case 358:
                        return (T) new RecordIssueDialogDelegate.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.9
                            @Override // com.android.systemui.recordissue.RecordIssueDialogDelegate.Factory
                            public final RecordIssueDialogDelegate create(Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new RecordIssueDialogDelegate((SystemUIDialog.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider8.get(), (UserTracker) switchingProvider.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (FeatureFlagsClassic) switchingProvider.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (Executor) switchingProvider.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) switchingProvider.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), DoubleCheck.lazy(switchingProvider.referenceSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider), (MediaProjectionMetricsLogger) switchingProvider.referenceSysUIComponentImpl.mediaProjectionMetricsLoggerProvider.get(), switchingProvider.referenceSysUIComponentImpl.screenCaptureDisabledDialogDelegate(), (IssueRecordingState) switchingProvider.referenceSysUIComponentImpl.issueRecordingStateProvider.get(), (TraceurMessageSender) switchingProvider.referenceSysUIComponentImpl.traceurMessageSenderProvider.get(), runnable);
                            }
                        };
                    case 359:
                        return (T) new ScreenCaptureDevicePolicyResolver((DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), this.referenceSysUIComponentImpl.personalProfileUserHandle(), this.referenceSysUIComponentImpl.workProfileUserHandle());
                    case 360:
                        this.referenceSysUIComponentImpl.sharedLibraryModule.getClass();
                        T t2 = (T) ActivityManagerWrapper.sInstance;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 361:
                        return (T) new MediaProjectionMetricsLogger((IMediaProjectionManager) this.referenceGlobalRootComponentImpl.provideIMediaProjectionManagerProvider.get());
                    case 362:
                        return (T) new ScreenRecordTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (RecordingController) this.referenceSysUIComponentImpl.recordingControllerProvider.get(), (KeyguardDismissUtil) this.referenceSysUIComponentImpl.keyguardDismissUtilProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), this.referenceSysUIComponentImpl.panelInteractor(), (MediaProjectionMetricsLogger) this.referenceSysUIComponentImpl.mediaProjectionMetricsLoggerProvider.get(), (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 363:
                        return (T) new RecordingController((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.screenCaptureDevicePolicyResolverProvider), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (MediaProjectionMetricsLogger) this.referenceSysUIComponentImpl.mediaProjectionMetricsLoggerProvider.get(), this.referenceSysUIComponentImpl.screenCaptureDisabledDialogDelegate(), (ScreenRecordDialogDelegate.Factory) this.referenceSysUIComponentImpl.factoryProvider12.get(), (ScreenRecordPermissionDialogDelegate.Factory) this.referenceSysUIComponentImpl.factoryProvider13.get());
                    case 364:
                        return (T) new ScreenRecordDialogDelegate.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.10
                            @Override // com.android.systemui.screenrecord.ScreenRecordDialogDelegate.Factory
                            public final ScreenRecordDialogDelegate create(RecordingController recordingController, Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ScreenRecordDialogDelegate((SystemUIDialog.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider8.get(), (UserContextProvider) switchingProvider.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), recordingController, runnable);
                            }
                        };
                    case 365:
                        return (T) new ScreenRecordPermissionDialogDelegate.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.11
                            @Override // com.android.systemui.screenrecord.ScreenRecordPermissionDialogDelegate.Factory
                            public final ScreenRecordPermissionDialogDelegate create(RecordingController recordingController, UserHandle userHandle, int i, Runnable runnable) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ScreenRecordPermissionDialogDelegate(userHandle, i, recordingController, (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (UserContextProvider) switchingProvider.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), runnable, (MediaProjectionMetricsLogger) switchingProvider.referenceSysUIComponentImpl.mediaProjectionMetricsLoggerProvider.get(), (SystemUIDialog.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider8.get(), (Context) switchingProvider.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                            }
                        };
                    case 366:
                        return (T) new QuickAccessWalletTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (QuickAccessWalletController) this.referenceSysUIComponentImpl.quickAccessWalletControllerProvider.get());
                    case 367:
                        return (T) new QuickAccessWalletController(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (QuickAccessWalletClient) this.referenceSysUIComponentImpl.provideQuickAccessWalletClientProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get());
                    case 368:
                        T t3 = (T) QuickAccessWalletClient.create(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 369:
                        return (T) new SoundModeTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get());
                    case 370:
                        return (T) new MediaOutputTile((QSHost) this.referenceSysUIComponentImpl.qSHostAdapterProvider.get(), (QsEventLogger) this.referenceSysUIComponentImpl.qsEventLoggerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.mediaOutputDetailAdapter(), this.referenceSysUIComponentImpl.qSLogger());
                    case 371:
                        return (T) new SecMediaHost(this.referenceGlobalRootComponentImpl.context, (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceSysUIComponentImpl.secMediaControlPanelProvider, this.referenceSysUIComponentImpl.secMediaPlayerDataProvider, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (MediaBluetoothHelper) this.referenceSysUIComponentImpl.mediaBluetoothHelperProvider.get(), (MediaLogger) this.referenceSysUIComponentImpl.providesMediaLoggerProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ColoredBGHelper) this.referenceSysUIComponentImpl.coloredBGHelperProvider.get());
                    case 372:
                        Provider provider = this.referenceSysUIComponentImpl.legacyMediaDataManagerImplProvider;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        Provider provider2 = referenceSysUIComponentImpl.mediaCarouselInteractorProvider;
                        MediaDomainModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj = provider.get();
                        Intrinsics.checkNotNull(obj);
                        return (T) ((MediaDataManager) obj);
                    case 373:
                        return (T) new LegacyMediaDataManagerImpl(this.referenceGlobalRootComponentImpl.context, ThreadFactoryImpl_Factory.newInstance(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), this.referenceSysUIComponentImpl.mediaControllerFactory(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (MediaTimeoutListener) this.referenceSysUIComponentImpl.mediaTimeoutListenerProvider.get(), (MediaResumeListener) this.referenceSysUIComponentImpl.mediaResumeListenerProvider.get(), this.referenceSysUIComponentImpl.mediaSessionBasedFilter(), this.referenceSysUIComponentImpl.mediaDeviceManager(), new MediaDataCombineLatest(), this.referenceSysUIComponentImpl.legacyMediaDataFilterImpl(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), new SmartspaceMediaDataProvider(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get(), (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get(), (SmartspaceManager) this.referenceGlobalRootComponentImpl.provideSmartspaceManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 374:
                        return (T) new MediaTimeoutListener(this.referenceSysUIComponentImpl.mediaControllerFactory(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (MediaTimeoutLogger) this.referenceSysUIComponentImpl.mediaTimeoutLoggerProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get());
                    case 375:
                        return (T) new MediaTimeoutLogger((LogBuffer) this.referenceSysUIComponentImpl.providesMediaTimeoutListenerLogBufferProvider.get());
                    case 376:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "MediaTimeout");
                    case 377:
                        return (T) new MediaFlags((FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 378:
                        return (T) new MediaResumeListener(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), this.referenceSysUIComponentImpl.resumeMediaBrowserFactory(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get());
                    case 379:
                        return (T) new ResumeMediaBrowserLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMediaBrowserBufferProvider.get());
                    case VolteConstants.ErrorCode.ALTERNATIVE_SERVICES /* 380 */:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "MediaBrowser");
                    case VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY /* 381 */:
                        return (T) new MediaMuteAwaitConnectionManagerFactory(this.referenceGlobalRootComponentImpl.context, (MediaMuteAwaitLogger) this.referenceSysUIComponentImpl.mediaMuteAwaitLoggerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY_CSFB /* 382 */:
                        return (T) new MediaMuteAwaitLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMediaMuteAwaitLogBufferProvider.get());
                    case 383:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "MediaMuteAwaitLog");
                    case 384:
                        return (T) new NotificationLockscreenUserManagerImpl(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), (NotificationClickNotifier) this.referenceSysUIComponentImpl.notificationClickNotifierProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.overviewProxyServiceProvider), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.settingsHelperProvider));
                    case 385:
                        return (T) new NotificationVisibilityProviderImpl((ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), (NotifLiveDataStore) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get());
                    case 386:
                        return (T) new ActiveNotificationsInteractor((ActiveNotificationListRepository) this.referenceSysUIComponentImpl.activeNotificationListRepositoryProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 387:
                        return (T) new ActiveNotificationListRepository();
                    case 388:
                        return (T) new NotifLiveDataStoreImpl((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 389:
                        return (T) new NotifPipeline((NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (ShadeListBuilder) this.referenceSysUIComponentImpl.shadeListBuilderProvider.get(), (RenderStageManager) this.referenceSysUIComponentImpl.renderStageManagerProvider.get());
                    case 390:
                        return (T) new NotifCollection((IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), this.referenceSysUIComponentImpl.notifPipelineFlags(), this.referenceSysUIComponentImpl.notifCollectionLogger(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (LogBufferEulogizer) this.referenceSysUIComponentImpl.logBufferEulogizerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotificationDismissibilityProvider) this.referenceSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get());
                    case 391:
                        return (T) new NotificationDismissibilityProviderImpl((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 392:
                        return (T) new ShadeListBuilder((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotifPipelineChoreographer) this.referenceSysUIComponentImpl.notifPipelineChoreographerImplProvider.get(), this.referenceSysUIComponentImpl.notifPipelineFlags(), (NotificationInteractionTracker) this.referenceSysUIComponentImpl.notificationInteractionTrackerProvider.get(), this.referenceSysUIComponentImpl.shadeListBuilderLogger(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get());
                    case 393:
                        return (T) new NotifPipelineChoreographerImpl((Choreographer) this.referenceGlobalRootComponentImpl.providesChoreographerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
                    case 394:
                        return (T) new NotificationInteractionTracker((NotificationClickNotifier) this.referenceSysUIComponentImpl.notificationClickNotifierProvider.get());
                    case 395:
                        return (T) new NotificationClickNotifier((IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get());
                    case 396:
                        return (T) new RenderStageManager();
                    case 397:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                        CommandQueue commandQueue = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        return (T) new OverviewProxyService(context, executor, commandQueue, referenceSysUIComponentImpl2.setShell, DoubleCheck.lazy(referenceSysUIComponentImpl2.navigationBarControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeSurfaceProvider), (ScreenPinningRequest) this.referenceSysUIComponentImpl.screenPinningRequestProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), this.referenceSysUIComponentImpl.sceneInteractorProvider, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (InWindowLauncherUnlockAnimationManager) this.referenceSysUIComponentImpl.inWindowLauncherUnlockAnimationManagerProvider.get(), (AssistUtils) this.referenceSysUIComponentImpl.provideAssistUtilsProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Optional) this.referenceGlobalRootComponentImpl.provideProgressForwarderProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (FgsManagerController) this.referenceSysUIComponentImpl.fgsManagerControllerImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (SearcleManager) this.referenceSysUIComponentImpl.provideSearcleManagerProvider.get(), this.referenceSysUIComponentImpl.samsungScreenPinningRequest(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get());
                    case 398:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        OverviewProxyService overviewProxyService = (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get();
                        NavigationModeController navigationModeController = (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get();
                        SysUiState sysUiState = (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get();
                        CommandQueue commandQueue2 = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                        Executor executor2 = (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        NavBarHelper navBarHelper = (NavBarHelper) this.referenceSysUIComponentImpl.navBarHelperProvider.get();
                        TaskbarDelegate taskbarDelegate = (TaskbarDelegate) this.referenceSysUIComponentImpl.secTaskBarManagerImplProvider.get();
                        NavigationBarComponentFactory navigationBarComponentFactory = new NavigationBarComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0);
                        DumpManager dumpManager = (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
                        AutoHideController autoHideController = (AutoHideController) this.referenceSysUIComponentImpl.autoHideControllerProvider.get();
                        LightBarController lightBarController = (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get();
                        TaskStackChangeListeners taskStackChangeListeners = (TaskStackChangeListeners) this.referenceSysUIComponentImpl.provideTaskStackChangeListenersProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl3 = this.referenceSysUIComponentImpl;
                        return (T) new NavigationBarControllerImpl(context2, overviewProxyService, navigationModeController, sysUiState, commandQueue2, executor2, configurationController, navBarHelper, taskbarDelegate, navigationBarComponentFactory, dumpManager, autoHideController, lightBarController, taskStackChangeListeners, referenceSysUIComponentImpl3.setPip, referenceSysUIComponentImpl3.setBackAnimation, (SecureSettings) referenceSysUIComponentImpl3.secureSettingsImplProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (NavBarStore) this.referenceSysUIComponentImpl.provideNavbarStoreProvider.get());
                    case 399:
                        return (T) new NavigationModeController(this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NavBarStore) this.referenceSysUIComponentImpl.provideNavbarStoreProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get4() {
                switch (this.id) {
                    case 400:
                        return (T) new NavBarStoreImpl(this.referenceGlobalRootComponentImpl.context, (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (LayoutProviderContainer) this.referenceSysUIComponentImpl.providesLayoutProviderContainerProvider.get(), this.referenceSysUIComponentImpl.navBarRemoteViewManager(), (BandAidPackFactoryBase) this.referenceSysUIComponentImpl.providesBandAidPackFactoryProvider.get(), (InteractorFactory) this.referenceSysUIComponentImpl.interactorFactoryProvider.get(), (StoreLogUtil) this.referenceSysUIComponentImpl.storeLogUtilProvider.get(), this.referenceSysUIComponentImpl.gestureHintAnimatorFactory(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (SPluginManager) this.referenceSysUIComponentImpl.provideSPluginManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 401:
                        return (T) new LayoutProviderContainerImpl(this.referenceGlobalRootComponentImpl.context);
                    case 402:
                        return (T) new BandAidPackFactory();
                    case 403:
                        return (T) new InteractorFactory(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (LogWrapper) this.referenceSysUIComponentImpl.providesNavBarLoggerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 404:
                        return (T) new LogWrapper(ModuleType.NAVBAR, (SamsungServiceLogger) this.referenceSysUIComponentImpl.provideNavBarServiceLoggerProvider.get());
                    case 405:
                        return (T) new SamsungServiceLoggerImpl("NavBarLogger", 200, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogcatEchoTracker) this.referenceSysUIComponentImpl.provideLogcatEchoTrackerProvider.get());
                    case VolteConstants.ErrorCode.NOT_ACCEPTABLE /* 406 */:
                        return (T) new StoreLogUtil((LogWrapper) this.referenceSysUIComponentImpl.providesNavBarLoggerProvider.get());
                    case 407:
                        return (T) new NavBarHelper(this.referenceGlobalRootComponentImpl.context, (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (AccessibilityButtonModeObserver) this.referenceSysUIComponentImpl.accessibilityButtonModeObserverProvider.get(), (AccessibilityButtonTargetsObserver) this.referenceSysUIComponentImpl.accessibilityButtonTargetsObserverProvider.get(), (SystemActions) this.referenceSysUIComponentImpl.systemActionsProvider.get(), (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), this.referenceSysUIComponentImpl.edgeBackGestureHandlerFactory(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (NavBarStore) this.referenceSysUIComponentImpl.provideNavbarStoreProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (CornerGestureHandler) this.referenceSysUIComponentImpl.cornerGestureHandlerProvider.get());
                    case VolteConstants.ErrorCode.REQUEST_TIMEOUT /* 408 */:
                        return (T) new AccessibilityButtonModeObserver(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 409:
                        return (T) new AccessibilityButtonTargetsObserver(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 410:
                        return (T) new SystemActions(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider), Optional.of((Recents) this.referenceSysUIComponentImpl.provideRecentsProvider.get()), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get());
                    case 411:
                        Provider unused = this.referenceSysUIComponentImpl.shadeControllerSceneImplProvider;
                        Provider provider = this.referenceSysUIComponentImpl.shadeControllerImplProvider;
                        ShadeModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj = provider.get();
                        Intrinsics.checkNotNull(obj);
                        return (T) ((ShadeController) obj);
                    case 412:
                        return (T) new ShadeControllerSceneImpl((CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (NotificationStackScrollLayout) this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider));
                    case 413:
                        return (T) new ShadeInteractorImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceProvisioningInteractor) this.referenceSysUIComponentImpl.deviceProvisioningInteractorProvider.get(), (DisableFlagsRepository) this.referenceSysUIComponentImpl.disableFlagsRepositoryImplProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (UserSetupRepository) this.referenceSysUIComponentImpl.userSetupRepositoryImplProvider.get(), (UserSwitcherInteractor) this.referenceSysUIComponentImpl.userSwitcherInteractorProvider.get(), (BaseShadeInteractor) this.referenceSysUIComponentImpl.provideBaseShadeInteractorProvider.get());
                    case 414:
                        return (T) new DeviceProvisioningInteractor(this.referenceSysUIComponentImpl.deviceProvisioningRepositoryImpl());
                    case VolteConstants.ErrorCode.UNSUPPORTED_MEDIA_TYPE /* 415 */:
                        return (T) new DisableFlagsRepositoryImpl((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (RemoteInputQuickSettingsDisabler) this.referenceSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDisableFlagsRepositoryLogBufferProvider.get(), (DisableFlagsLogger) this.referenceSysUIComponentImpl.disableFlagsLoggerProvider.get());
                    case VolteConstants.ErrorCode.UNSUPPORTED_URI_SCHEME /* 416 */:
                        return (T) new RemoteInputQuickSettingsDisabler(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 417:
                        return (T) new SplitShadeStateControllerImpl((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 418:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(40, "DisableFlagsRepository", false);
                    case 419:
                        return (T) new DisableFlagsLogger();
                    case VolteConstants.ErrorCode.BAD_EXTENSION /* 420 */:
                        return (T) new UserSwitcherInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (HeadlessSystemUserMode) this.referenceSysUIComponentImpl.headlessSystemUserModeImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (TelephonyInteractor) this.referenceSysUIComponentImpl.telephonyInteractorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (RefreshUsersScheduler) this.referenceSysUIComponentImpl.refreshUsersSchedulerProvider.get(), (GuestUserInteractor) this.referenceSysUIComponentImpl.guestUserInteractorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), new UserRestrictionChecker(), new ProcessWrapper());
                    case 421:
                        return (T) new HeadlessSystemUserModeImpl();
                    case VolteConstants.ErrorCode.SESSION_INTERVAL_TOO_SMALL /* 422 */:
                        return (T) new TelephonyInteractor((TelephonyRepository) this.referenceSysUIComponentImpl.telephonyRepositoryImplProvider.get());
                    case VolteConstants.ErrorCode.INTERVAL_TOO_BRIEF /* 423 */:
                        return (T) new TelephonyRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (TelephonyListenerManager) this.referenceSysUIComponentImpl.telephonyListenerManagerProvider.get(), (TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get());
                    case 424:
                        return (T) new RefreshUsersScheduler((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get());
                    case 425:
                        return (T) new GuestUserInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (RefreshUsersScheduler) this.referenceSysUIComponentImpl.refreshUsersSchedulerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (GuestResumeSessionReceiver) this.referenceSysUIComponentImpl.guestResumeSessionReceiverProvider.get(), this.referenceSysUIComponentImpl.guestResetOrExitSessionReceiver());
                    case 426:
                        return (T) new GuestResumeSessionReceiver((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), this.referenceSysUIComponentImpl.guestSessionNotification(), this.referenceSysUIComponentImpl.resetSessionDialogFactory());
                    case 427:
                        return (T) new GuestResetOrExitSessionReceiver.ResetSessionDialogClickListener.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.12
                            @Override // com.android.systemui.GuestResetOrExitSessionReceiver.ResetSessionDialogClickListener.Factory
                            public final GuestResetOrExitSessionReceiver.ResetSessionDialogClickListener create(int i, DialogInterface dialogInterface) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new GuestResetOrExitSessionReceiver.ResetSessionDialogClickListener((UserSwitcherController) switchingProvider.referenceSysUIComponentImpl.userSwitcherControllerProvider.get(), (UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), i, dialogInterface);
                            }
                        };
                    case 428:
                        return (T) new UserSwitcherController((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.userSwitcherInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.guestUserInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardInteractorProvider), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 429:
                        return (T) new GuestResetOrExitSessionReceiver.ExitSessionDialogClickListener.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.13
                            @Override // com.android.systemui.GuestResetOrExitSessionReceiver.ExitSessionDialogClickListener.Factory
                            public final GuestResetOrExitSessionReceiver.ExitSessionDialogClickListener create(boolean z, int i, DialogInterface dialogInterface) {
                                return new GuestResetOrExitSessionReceiver.ExitSessionDialogClickListener((UserSwitcherController) SwitchingProvider.this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get(), z, i, dialogInterface);
                            }
                        };
                    case 430:
                        Provider unused2 = this.referenceSysUIComponentImpl.shadeInteractorSceneContainerImplProvider;
                        Provider provider2 = this.referenceSysUIComponentImpl.shadeInteractorLegacyImplProvider;
                        ShadeModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj2 = provider2.get();
                        Intrinsics.checkNotNull(obj2);
                        return (T) ((BaseShadeInteractor) obj2);
                    case 431:
                        return (T) new ShadeInteractorSceneContainerImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (SharedNotificationContainerInteractor) this.referenceSysUIComponentImpl.sharedNotificationContainerInteractorProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 432:
                        return (T) new SharedNotificationContainerInteractor((ConfigurationRepository) this.referenceSysUIComponentImpl.configurationRepositoryImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.largeScreenHeaderHelperProvider));
                    case 433:
                        return (T) new DeviceEntryUdfpsInteractor((FingerprintPropertyInteractor) this.referenceSysUIComponentImpl.fingerprintPropertyInteractorProvider.get(), (DeviceEntryFingerprintAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get());
                    case 434:
                        return (T) new FingerprintPropertyInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (DisplayStateInteractor) this.referenceSysUIComponentImpl.providesDisplayStateInteractorProvider.get(), (UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get());
                    case 435:
                        return (T) new DisplayStateInteractorImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DisplayStateRepository) this.referenceSysUIComponentImpl.displayStateRepositoryImplProvider.get(), (DisplayRepository) this.referenceSysUIComponentImpl.displayRepositoryImplProvider.get());
                    case 436:
                        return (T) new UdfpsOverlayInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 437:
                        return (T) new LargeScreenHeaderHelper(this.referenceGlobalRootComponentImpl.context, (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get());
                    case 438:
                        return (T) new SecQSPanelResourcePicker();
                    case 439:
                        return (T) new ShadeInteractorLegacyImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (SharedNotificationContainerInteractor) this.referenceSysUIComponentImpl.sharedNotificationContainerInteractorProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 440:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((NotificationStackScrollLayout) notificationShadeWindowView.requireViewById(R.id.notification_stack_scroller));
                    case CustomDeviceManager.MULTI_WINDOW_FIXED_STATE /* 441 */:
                        ViewParent viewParent = (WindowRootView) this.referenceSysUIComponentImpl.providesWindowRootViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        Flags.sceneContainer();
                        return (T) ((NotificationShadeWindowView) viewParent);
                    case CustomDeviceManager.MULTI_WINDOW_PERCENTAGE /* 442 */:
                        LayoutInflater layoutInflater = (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get();
                        Provider unused3 = this.referenceSysUIComponentImpl.sceneContainerViewModelProvider;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        Provider provider3 = referenceSysUIComponentImpl.containerConfigProvider;
                        Provider provider4 = referenceSysUIComponentImpl.setOfSceneProvider;
                        Provider provider5 = this.referenceSysUIComponentImpl.providesSceneDataSourceDelegatorProvider;
                        ShadeViewProviderModule.Companion.getClass();
                        Flags.sceneContainer();
                        T t = (T) ((WindowRootView) layoutInflater.inflate(R.layout.super_notification_shade, (ViewGroup) null));
                        if (t != null) {
                            return t;
                        }
                        throw new IllegalStateException("Window root view could not be properly inflated");
                    case 443:
                        return (T) new SceneContainerViewModel((SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (FalsingInteractor) this.referenceSysUIComponentImpl.falsingInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (Set) this.referenceSysUIComponentImpl.setOfSceneProvider.get());
                    case 444:
                        return (T) new FalsingInteractor((FalsingCollector) this.referenceSysUIComponentImpl.falsingCollectorImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get());
                    case 445:
                        SetBuilder newSetBuilder = SetBuilder.newSetBuilder(9);
                        EmptySceneModule.INSTANCE.getClass();
                        EmptySet emptySet = EmptySet.INSTANCE;
                        Preconditions.checkNotNullFromProvides(emptySet);
                        newSetBuilder.addAll(emptySet);
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.bouncerSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.communalSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.goneSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.lockscreenSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.quickSettingsSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.shadeSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.quickSettingsShadeSceneProvider.get());
                        newSetBuilder.add((ComposableScene) this.referenceSysUIComponentImpl.notificationsShadeSceneProvider.get());
                        return (T) newSetBuilder.build();
                    case 446:
                        return (T) new BouncerScene((BouncerViewModel) this.referenceSysUIComponentImpl.viewModelProvider2.get(), (BouncerDialogFactory) this.referenceSysUIComponentImpl.bouncerDialogFactoryProvider.get());
                    case 447:
                        Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get();
                        BouncerInteractor bouncerInteractor = (BouncerInteractor) this.referenceSysUIComponentImpl.bouncerInteractorProvider.get();
                        InputMethodInteractor inputMethodInteractor = (InputMethodInteractor) this.referenceSysUIComponentImpl.inputMethodInteractorProvider.get();
                        SimBouncerInteractor simBouncerInteractor = (SimBouncerInteractor) this.referenceSysUIComponentImpl.simBouncerInteractorProvider.get();
                        BouncerActionButtonInteractor bouncerActionButtonInteractor = (BouncerActionButtonInteractor) this.referenceSysUIComponentImpl.bouncerActionButtonInteractorProvider.get();
                        AuthenticationInteractor authenticationInteractor = (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get();
                        SelectedUserInteractor selectedUserInteractor = (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get();
                        ComposeBouncerFlags composeBouncerFlags = (ComposeBouncerFlags) this.referenceSysUIComponentImpl.implProvider.get();
                        UserSwitcherViewModel userSwitcherViewModel = (UserSwitcherViewModel) this.referenceSysUIComponentImpl.userSwitcherViewModelProvider.get();
                        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get();
                        BouncerMessageViewModel bouncerMessageViewModel = (BouncerMessageViewModel) this.referenceSysUIComponentImpl.viewModelProvider.get();
                        BouncerViewModelModule.INSTANCE.getClass();
                        return (T) new BouncerViewModel(context, coroutineScope, coroutineDispatcher, bouncerInteractor, inputMethodInteractor, simBouncerInteractor, authenticationInteractor, selectedUserInteractor, devicePolicyManager, bouncerMessageViewModel, composeBouncerFlags, userSwitcherViewModel.selectedUser, userSwitcherViewModel.users, userSwitcherViewModel.menu, bouncerActionButtonInteractor.actionButton);
                    case 448:
                        return (T) new BouncerInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (BouncerRepository) this.referenceSysUIComponentImpl.bouncerRepositoryProvider.get(), (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (FalsingInteractor) this.referenceSysUIComponentImpl.falsingInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get(), (SceneBackInteractor) this.referenceSysUIComponentImpl.sceneBackInteractorProvider.get());
                    case 449:
                        return (T) new BouncerRepository((FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 450:
                        return (T) new SessionTracker((IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 451:
                        return (T) new SceneBackInteractor(this.referenceSysUIComponentImpl.sceneLogger(), (SceneContainerConfig) this.referenceSysUIComponentImpl.containerConfigProvider.get());
                    case 452:
                        return (T) new InputMethodInteractor((InputMethodRepository) this.referenceSysUIComponentImpl.inputMethodRepositoryImplProvider.get());
                    case 453:
                        return (T) new InputMethodRepositoryImpl((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (InputMethodManager) this.referenceGlobalRootComponentImpl.provideInputMethodManagerProvider.get());
                    case 454:
                        return (T) new SimBouncerInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (SimBouncerRepository) this.referenceSysUIComponentImpl.simBouncerRepositoryImplProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), this.referenceSysUIComponentImpl.euiccManager(), (MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get());
                    case 455:
                        return (T) new SimBouncerRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), this.referenceSysUIComponentImpl.subscriptionManagerProxyImpl(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.euiccManager());
                    case 456:
                        return (T) new BouncerActionButtonInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (EmergencyServicesRepository) this.referenceSysUIComponentImpl.emergencyServicesRepositoryProvider.get(), (MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get(), (TelephonyInteractor) this.referenceSysUIComponentImpl.telephonyInteractorProvider.get(), (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (ActivityTaskManager) this.referenceGlobalRootComponentImpl.provideActivityTaskManagerProvider.get(), (TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get(), (EmergencyAffordanceManager) this.referenceSysUIComponentImpl.emergencyAffordanceManagerProvider.get(), this.referenceSysUIComponentImpl.emergencyDialerIntentFactory(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), this.referenceSysUIComponentImpl.dozeLogger());
                    case 457:
                        return (T) new EmergencyServicesRepository((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (ConfigurationRepository) this.referenceSysUIComponentImpl.configurationRepositoryImplProvider.get());
                    case 458:
                        Context context2 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        BouncerInteractorModule.INSTANCE.getClass();
                        return (T) new EmergencyAffordanceManager(context2);
                    case 459:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(150, "DozeLog");
                    case 460:
                        ComposeBouncerFlagsModule.INSTANCE.getClass();
                        return (T) new ComposeBouncerFlagsImpl();
                    case 461:
                        return (T) new UserSwitcherViewModel((UserSwitcherInteractor) this.referenceSysUIComponentImpl.userSwitcherInteractorProvider.get(), (GuestUserInteractor) this.referenceSysUIComponentImpl.guestUserInteractorProvider.get());
                    case 462:
                        Context context3 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        CoroutineScope coroutineScope2 = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        BouncerInteractor bouncerInteractor2 = (BouncerInteractor) this.referenceSysUIComponentImpl.bouncerInteractorProvider.get();
                        SimBouncerInteractor simBouncerInteractor2 = (SimBouncerInteractor) this.referenceSysUIComponentImpl.simBouncerInteractorProvider.get();
                        AuthenticationInteractor authenticationInteractor2 = (AuthenticationInteractor) this.referenceSysUIComponentImpl.authenticationInteractorProvider.get();
                        SystemClock systemClock = (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get();
                        BiometricMessageInteractor biometricMessageInteractor = (BiometricMessageInteractor) this.referenceSysUIComponentImpl.biometricMessageInteractorProvider.get();
                        DeviceEntryFaceAuthInteractor deviceEntryFaceAuthInteractor = (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get();
                        DeviceEntryInteractor deviceEntryInteractor = (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get();
                        DeviceEntryFingerprintAuthInteractor deviceEntryFingerprintAuthInteractor = (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get();
                        ComposeBouncerFlags composeBouncerFlags2 = (ComposeBouncerFlags) this.referenceSysUIComponentImpl.implProvider.get();
                        UserSwitcherViewModel userSwitcherViewModel2 = (UserSwitcherViewModel) this.referenceSysUIComponentImpl.userSwitcherViewModelProvider.get();
                        BouncerMessageViewModelModule.INSTANCE.getClass();
                        return (T) new BouncerMessageViewModel(context3, coroutineScope2, bouncerInteractor2, simBouncerInteractor2, authenticationInteractor2, userSwitcherViewModel2.selectedUser, systemClock, biometricMessageInteractor, deviceEntryFaceAuthInteractor, deviceEntryInteractor, deviceEntryFingerprintAuthInteractor, composeBouncerFlags2);
                    case 463:
                        return (T) new BiometricMessageInteractor(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (FingerprintPropertyInteractor) this.referenceSysUIComponentImpl.fingerprintPropertyInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (DeviceEntryBiometricSettingsInteractor) this.referenceSysUIComponentImpl.deviceEntryBiometricSettingsInteractorProvider.get(), (FaceHelpMessageDeferralInteractor) this.referenceSysUIComponentImpl.faceHelpMessageDeferralInteractorProvider.get(), (DevicePostureInteractor) this.referenceSysUIComponentImpl.devicePostureInteractorProvider.get());
                    case 464:
                        return (T) new FaceHelpMessageDeferralInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (DeviceEntryBiometricSettingsInteractor) this.referenceSysUIComponentImpl.deviceEntryBiometricSettingsInteractorProvider.get(), (FaceHelpMessageDeferralFactory) this.referenceSysUIComponentImpl.faceHelpMessageDeferralFactoryProvider.get());
                    case 465:
                        return (T) new FaceHelpMessageDeferralFactory(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (LogBuffer) this.referenceSysUIComponentImpl.provideBiometricLogBufferProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 466:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(200, "BiometricLog");
                    case 467:
                        return (T) new DevicePostureInteractor((DevicePostureRepository) this.referenceSysUIComponentImpl.devicePostureRepositoryImplProvider.get());
                    case 468:
                        final Context context4 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        BouncerViewModule.Companion.getClass();
                        return (T) new BouncerDialogFactory(context4) { // from class: com.android.systemui.bouncer.ui.BouncerViewModule$Companion$bouncerDialogFactory$1
                            public final /* synthetic */ Context $context;
                        };
                    case 469:
                        return (T) new CommunalScene((CommunalViewModel) this.referenceSysUIComponentImpl.communalViewModelProvider.get(), this.referenceSysUIComponentImpl.systemUIDialogFactory(), (WidgetInteractionHandler) this.referenceSysUIComponentImpl.widgetInteractionHandlerProvider.get());
                    case 470:
                        return (T) new CommunalViewModel((CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (CommunalSettingsInteractor) this.referenceSysUIComponentImpl.communalSettingsInteractorProvider.get(), (CommunalTutorialInteractor) this.referenceSysUIComponentImpl.communalTutorialInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesCommunalMediaHostProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideCommunalLogBufferProvider.get());
                    case 471:
                        return (T) new CommunalSceneInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CommunalSceneRepository) this.referenceSysUIComponentImpl.communalSceneRepositoryImplProvider.get());
                    case 472:
                        return (T) new CommunalSceneRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (SceneDataSource) this.referenceSysUIComponentImpl.providesCommunalSceneDataSourceDelegatorProvider.get());
                    case 473:
                        return (T) CommunalModule_Companion_ProvidesCommunalSceneDataSourceDelegatorFactory.providesCommunalSceneDataSourceDelegator((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 474:
                        return (T) new CommunalSettingsInteractor((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (CommunalSettingsRepository) this.referenceSysUIComponentImpl.communalSettingsRepositoryImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideCommunalTableLogBufferProvider.get());
                    case 475:
                        return (T) new CommunalSettingsRepositoryImpl((CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get());
                    case 476:
                        return (T) ((TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "CommunalTableLog");
                    case 477:
                        return (T) new CommunalTutorialInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CommunalTutorialRepository) this.referenceSysUIComponentImpl.communalTutorialDisabledRepositoryImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (CommunalSettingsInteractor) this.referenceSysUIComponentImpl.communalSettingsInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideCommunalTableLogBufferProvider.get());
                    case 478:
                        return (T) new CommunalTutorialDisabledRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 479:
                        return (T) new MediaHost(new MediaHost.MediaHostStateHolder(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (MediaHostStatesManager) this.referenceSysUIComponentImpl.mediaHostStatesManagerProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get());
                    case VolteConstants.ErrorCode.TEMPORARILY_UNAVAILABLE /* 480 */:
                        return (T) new MediaHierarchyManager(this.referenceGlobalRootComponentImpl.context, (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (CommunalTransitionViewModel) this.referenceSysUIComponentImpl.communalTransitionViewModelProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (MediaViewLogger) this.referenceSysUIComponentImpl.mediaViewLoggerProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get());
                    case 481:
                        Context context5 = this.referenceGlobalRootComponentImpl.context;
                        Provider provider6 = this.referenceSysUIComponentImpl.mediaControlPanelProvider;
                        VisualStabilityProvider visualStabilityProvider = (VisualStabilityProvider) this.referenceSysUIComponentImpl.visualStabilityProvider.get();
                        MediaHostStatesManager mediaHostStatesManager = (MediaHostStatesManager) this.referenceSysUIComponentImpl.mediaHostStatesManagerProvider.get();
                        ActivityStarter activityStarter = (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get();
                        SystemClock systemClock2 = (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get();
                        CoroutineDispatcher coroutineDispatcher2 = (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get();
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get();
                        Executor executor = (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get();
                        CoroutineDispatcher coroutineDispatcher3 = (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get();
                        MediaDataManager mediaDataManager = (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        FalsingManager falsingManager = (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get();
                        DumpManager dumpManager = (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
                        MediaUiEventLogger mediaUiEventLogger = (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get();
                        MediaCarouselControllerLogger mediaCarouselControllerLogger = (MediaCarouselControllerLogger) this.referenceSysUIComponentImpl.mediaCarouselControllerLoggerProvider.get();
                        MediaFlags mediaFlags = (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        KeyguardTransitionInteractor keyguardTransitionInteractor = (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get();
                        GlobalSettings globalSettings = (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl();
                        SecureSettings secureSettings = (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get();
                        MediaCarouselViewModel mediaCarouselViewModel = (MediaCarouselViewModel) this.referenceSysUIComponentImpl.mediaCarouselViewModelProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        return (T) new MediaCarouselController(context5, provider6, visualStabilityProvider, mediaHostStatesManager, activityStarter, systemClock2, coroutineDispatcher2, delayableExecutor, executor, coroutineDispatcher3, mediaDataManager, configurationController, falsingManager, dumpManager, mediaUiEventLogger, mediaCarouselControllerLogger, mediaFlags, keyguardUpdateMonitor, keyguardTransitionInteractor, globalSettings, secureSettings, mediaCarouselViewModel, referenceSysUIComponentImpl2.mediaViewControllerProvider, (SceneInteractor) referenceSysUIComponentImpl2.sceneInteractorProvider.get());
                    case 482:
                        return (T) new MediaControlPanel(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get(), (MediaViewController) this.referenceSysUIComponentImpl.mediaViewControllerProvider.get(), this.referenceSysUIComponentImpl.seekBarViewModel(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesMediaDataManagerProvider), this.referenceSysUIComponentImpl.mediaOutputDialogManager(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ActivityIntentHelper) this.referenceSysUIComponentImpl.activityIntentHelperProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (BroadcastDialogController) this.referenceSysUIComponentImpl.broadcastDialogControllerProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get());
                    case 483:
                        return (T) new MediaViewController(this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (MediaHostStatesManager) this.referenceSysUIComponentImpl.mediaHostStatesManagerProvider.get(), (MediaViewLogger) this.referenceSysUIComponentImpl.mediaViewLoggerProvider.get(), this.referenceSysUIComponentImpl.seekBarViewModel(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl());
                    case VolteConstants.ErrorCode.ADDRESS_INCOMPLETE /* 484 */:
                        return (T) new MediaHostStatesManager();
                    case 485:
                        return (T) new MediaViewLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMediaViewLogBufferProvider.get());
                    case VolteConstants.ErrorCode.BUSY_HERE /* 486 */:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "MediaView");
                    case VolteConstants.ErrorCode.REQUEST_TERMINATED /* 487 */:
                        return (T) SysUIConcurrencyModule_ProvideBackgroundRepeatableExecutorFactory.provideBackgroundRepeatableExecutor((DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get());
                    case VolteConstants.ErrorCode.NOT_ACCEPTABLE_HERE /* 488 */:
                        return (T) new MediaOutputController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.14
                            @Override // com.android.systemui.media.dialog.MediaOutputController.Factory
                            public final com.android.systemui.media.dialog.MediaOutputController create(String str, UserHandle userHandle, MediaSession.Token token) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                Context context6 = switchingProvider.referenceGlobalRootComponentImpl.context;
                                return new com.android.systemui.media.dialog.MediaOutputController(context6, str, userHandle, token, FrameworkServicesModule_ProvideMediaSessionManagerFactory.provideMediaSessionManager(context6), (LocalBluetoothManager) switchingProvider.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (CommonNotifCollection) switchingProvider.referenceSysUIComponentImpl.notifPipelineProvider.get(), (DialogTransitionAnimator) switchingProvider.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (NearbyMediaDevicesManager) switchingProvider.referenceSysUIComponentImpl.nearbyMediaDevicesManagerProvider.get(), (AudioManager) switchingProvider.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (PowerExemptionManager) switchingProvider.referenceGlobalRootComponentImpl.providePowerExemptionManagerProvider.get(), (KeyguardManager) switchingProvider.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (FeatureFlags) switchingProvider.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (UserTracker) switchingProvider.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                            }
                        };
                    case 489:
                        return (T) new NearbyMediaDevicesManager((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (NearbyMediaDevicesLogger) this.referenceSysUIComponentImpl.nearbyMediaDevicesLoggerProvider.get());
                    case 490:
                        return (T) new NearbyMediaDevicesLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNearbyMediaDevicesLogBufferProvider.get());
                    case 491:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "NearbyMediaDevicesLog");
                    case 492:
                        return (T) new MediaUiEventLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 493:
                        return (T) new ActivityIntentHelper(this.referenceGlobalRootComponentImpl.context);
                    case 494:
                        return (T) new BroadcastDialogController((DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (BroadcastDialogDelegate.Factory) this.referenceSysUIComponentImpl.factoryProvider17.get());
                    case 495:
                        return (T) new BroadcastDialogDelegate.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.15
                            @Override // com.android.systemui.bluetooth.BroadcastDialogDelegate.Factory
                            public final BroadcastDialogDelegate create(String str, String str2) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new BroadcastDialogDelegate(switchingProvider.referenceGlobalRootComponentImpl.context, switchingProvider.referenceSysUIComponentImpl.mediaOutputDialogManager(), (LocalBluetoothManager) switchingProvider.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (Executor) switchingProvider.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (BroadcastSender) switchingProvider.referenceSysUIComponentImpl.broadcastSenderProvider.get(), (SystemUIDialog.Factory) switchingProvider.referenceSysUIComponentImpl.factoryProvider8.get(), str, str2);
                            }
                        };
                    case 496:
                        return (T) new VisualStabilityProvider();
                    case 497:
                        return (T) new MediaCarouselControllerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMediaCarouselControllerBufferProvider.get());
                    case 498:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "MediaCarouselCtlrLog");
                    case 499:
                        return (T) new MediaCarouselViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (VisualStabilityProvider) this.referenceSysUIComponentImpl.visualStabilityProvider.get(), (MediaCarouselInteractor) this.referenceSysUIComponentImpl.mediaCarouselInteractorProvider.get(), (MediaControlInteractorFactory) this.referenceSysUIComponentImpl.mediaControlInteractorFactoryProvider.get(), (MediaRecommendationsViewModel) this.referenceSysUIComponentImpl.mediaRecommendationsViewModelProvider.get(), (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get5() {
                switch (this.id) {
                    case 500:
                        return (T) new MediaCarouselInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (MediaDataProcessor) this.referenceSysUIComponentImpl.mediaDataProcessorProvider.get(), (MediaTimeoutListener) this.referenceSysUIComponentImpl.mediaTimeoutListenerProvider.get(), (MediaResumeListener) this.referenceSysUIComponentImpl.mediaResumeListenerProvider.get(), this.referenceSysUIComponentImpl.mediaSessionBasedFilter(), this.referenceSysUIComponentImpl.mediaDeviceManager(), new MediaDataCombineLatest(), (MediaDataFilterImpl) this.referenceSysUIComponentImpl.mediaDataFilterImplProvider.get(), (MediaFilterRepository) this.referenceSysUIComponentImpl.mediaFilterRepositoryProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get());
                    case 501:
                        return (T) new MediaDataProcessor(this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), ThreadFactoryImpl_Factory.newInstance(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceSysUIComponentImpl.mediaControllerFactory(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), new SmartspaceMediaDataProvider(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get(), (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get(), (SmartspaceManager) this.referenceGlobalRootComponentImpl.provideSmartspaceManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (MediaDataRepository) this.referenceSysUIComponentImpl.mediaDataRepositoryProvider.get());
                    case 502:
                        return (T) new MediaDataRepository((MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 503:
                        return (T) new MediaDataFilterImpl(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get(), (MediaFlags) this.referenceSysUIComponentImpl.mediaFlagsProvider.get(), (MediaFilterRepository) this.referenceSysUIComponentImpl.mediaFilterRepositoryProvider.get(), (MediaLoadingLogger) this.referenceSysUIComponentImpl.mediaLoadingLoggerProvider.get());
                    case 504:
                        return (T) new MediaFilterRepository((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 505:
                        return (T) new MediaLoadingLogger((LogBuffer) this.referenceSysUIComponentImpl.providesMediaLoadingLogBufferProvider.get());
                    case 506:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(20, "MediaLoadingLog");
                    case 507:
                        return (T) new MediaControlInteractorFactory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.16
                            @Override // com.android.systemui.media.controls.domain.pipeline.interactor.factory.MediaControlInteractorFactory
                            public final MediaControlInteractor create(InstanceId instanceId) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new MediaControlInteractor((Context) switchingProvider.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), instanceId, (MediaFilterRepository) switchingProvider.referenceSysUIComponentImpl.mediaFilterRepositoryProvider.get(), (MediaDataProcessor) switchingProvider.referenceSysUIComponentImpl.mediaDataProcessorProvider.get(), (KeyguardStateController) switchingProvider.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ActivityStarter) switchingProvider.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (ActivityIntentHelper) switchingProvider.referenceSysUIComponentImpl.activityIntentHelperProvider.get(), (NotificationLockscreenUserManager) switchingProvider.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), switchingProvider.referenceSysUIComponentImpl.mediaOutputDialogManager(), (BroadcastDialogController) switchingProvider.referenceSysUIComponentImpl.broadcastDialogControllerProvider.get());
                            }
                        };
                    case 508:
                        return (T) new MediaRecommendationsViewModel((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (MediaRecommendationsInteractor) this.referenceSysUIComponentImpl.mediaRecommendationsInteractorProvider.get(), (MediaUiEventLogger) this.referenceSysUIComponentImpl.mediaUiEventLoggerProvider.get());
                    case 509:
                        return (T) new MediaRecommendationsInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (MediaFilterRepository) this.referenceSysUIComponentImpl.mediaFilterRepositoryProvider.get(), (MediaDataProcessor) this.referenceSysUIComponentImpl.mediaDataProcessorProvider.get(), (BroadcastSender) this.referenceSysUIComponentImpl.broadcastSenderProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 510:
                        return (T) new DreamOverlayStateController((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceSysUIComponentImpl.namedBoolean4().booleanValue(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.provideDreamLogBufferProvider.get(), new WeakReferenceFactoryImpl());
                    case 511:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "DreamLog");
                    case 512:
                        return (T) new CommunalTransitionViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CommunalColors) this.referenceSysUIComponentImpl.communalColorsImplProvider.get(), (GlanceableHubToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.glanceableHubToLockscreenTransitionViewModelProvider.get(), (LockscreenToGlanceableHubTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToGlanceableHubTransitionViewModelProvider.get(), (DreamingToGlanceableHubTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToGlanceableHubTransitionViewModelProvider.get(), (GlanceableHubToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.glanceableHubToDreamingTransitionViewModelProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (CommunalSceneInteractor) this.referenceSysUIComponentImpl.communalSceneInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 513:
                        return (T) new CommunalColorsImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get());
                    case 514:
                        return (T) new GlanceableHubToLockscreenTransitionViewModel((ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 515:
                        return (T) new KeyguardTransitionAnimationFlow((KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), this.referenceSysUIComponentImpl.keyguardTransitionAnimationLogger());
                    case 516:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "KeyguardTransitionAnimationLog");
                    case 517:
                        return (T) new LockscreenToGlanceableHubTransitionViewModel((ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 518:
                        return (T) new DreamingToGlanceableHubTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get());
                    case 519:
                        return (T) new GlanceableHubToDreamingTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get());
                    case 520:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "CommunalLog");
                    case 521:
                        return (T) new GoneScene(DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get(), (GoneSceneViewModel) this.referenceSysUIComponentImpl.goneSceneViewModelProvider.get());
                    case 522:
                        return (T) new NotificationsPlaceholderViewModel((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotificationStackAppearanceInteractor) this.referenceSysUIComponentImpl.notificationStackAppearanceInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get());
                    case 523:
                        return (T) new NotificationStackAppearanceInteractor((NotificationViewHeightRepository) this.referenceSysUIComponentImpl.notificationViewHeightRepositoryProvider.get(), (NotificationPlaceholderRepository) this.referenceSysUIComponentImpl.notificationPlaceholderRepositoryProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 524:
                        return (T) new NotificationViewHeightRepository();
                    case 525:
                        return (T) new NotificationPlaceholderRepository();
                    case 526:
                        return (T) new GoneSceneViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 527:
                        return (T) new LockscreenScene((LockscreenSceneViewModel) this.referenceSysUIComponentImpl.lockscreenSceneViewModelProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesLockscreenContentProvider));
                    case 528:
                        return (T) new LockscreenSceneViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (KeyguardLongPressViewModel) this.referenceSysUIComponentImpl.keyguardLongPressViewModelProvider.get(), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get());
                    case 529:
                        return (T) new KeyguardLongPressViewModel((KeyguardLongPressInteractor) this.referenceSysUIComponentImpl.keyguardLongPressInteractorProvider.get());
                    case 530:
                        return (T) new KeyguardLongPressInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (AccessibilityManagerWrapper) this.referenceSysUIComponentImpl.accessibilityManagerWrapperProvider.get());
                    case 531:
                        return (T) new AccessibilityManagerWrapper((AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get());
                    case 532:
                        LockscreenContentViewModel lockscreenContentViewModel = (LockscreenContentViewModel) this.referenceSysUIComponentImpl.lockscreenContentViewModelProvider.get();
                        Set<ComposableLockscreenSceneBlueprint> ofComposableLockscreenSceneBlueprint = this.referenceSysUIComponentImpl.setOfComposableLockscreenSceneBlueprint();
                        KeyguardClockInteractor keyguardClockInteractor = (KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get();
                        LockscreenSceneModule.Companion.getClass();
                        return (T) new LockscreenContent(lockscreenContentViewModel, ofComposableLockscreenSceneBlueprint, keyguardClockInteractor);
                    case 533:
                        return (T) new LockscreenContentViewModel((KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (KeyguardBlueprintInteractor) this.referenceSysUIComponentImpl.keyguardBlueprintInteractorProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (KeyguardLongPressViewModel) this.referenceSysUIComponentImpl.keyguardLongPressViewModelProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (UnfoldTransitionInteractor) this.referenceSysUIComponentImpl.unfoldTransitionInteractorProvider.get());
                    case 534:
                        return (T) new KeyguardClockInteractor((MediaCarouselInteractor) this.referenceSysUIComponentImpl.mediaCarouselInteractorProvider.get(), (ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), this.referenceSysUIComponentImpl.headsUpNotificationInteractor(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardClockRepository) this.referenceSysUIComponentImpl.keyguardClockRepositoryImplProvider.get());
                    case 535:
                        return (T) new HeadsUpManagerPhone(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.headsUpManagerLogger(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get(), (VisualStabilityProvider) this.referenceSysUIComponentImpl.visualStabilityProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (AccessibilityManagerWrapper) this.referenceSysUIComponentImpl.accessibilityManagerWrapperProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (AvalancheController) this.referenceSysUIComponentImpl.avalancheControllerProvider.get());
                    case 536:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(1000, "NotifHeadsUpLog");
                    case 537:
                        return (T) new GroupMembershipManagerImpl();
                    case 538:
                        return (T) new AvalancheController((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 539:
                        return (T) new NotificationsKeyguardViewStateRepository();
                    case 540:
                        return (T) new KeyguardClockRepositoryImpl((SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (ClockRegistry) this.referenceSysUIComponentImpl.getClockRegistryProvider.get(), this.referenceSysUIComponentImpl.clockEventController(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 541:
                        return (T) ClockRegistryModule_GetClockRegistryFactory.getClockRegistry((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), this.referenceSysUIComponentImpl.clockMessageBuffers());
                    case 542:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "KeyguardSmallClockLog");
                    case 543:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "KeyguardLargeClockLog");
                    case 544:
                        return (T) new KeyguardBlueprintInteractor((KeyguardBlueprintRepository) this.referenceSysUIComponentImpl.keyguardBlueprintRepositoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (FingerprintPropertyInteractor) this.referenceSysUIComponentImpl.fingerprintPropertyInteractorProvider.get(), (SmartspaceSection) this.referenceSysUIComponentImpl.smartspaceSectionProvider.get(), (ClockSection) this.referenceSysUIComponentImpl.clockSectionProvider.get());
                    case 545:
                        return (T) new KeyguardBlueprintRepository(this.referenceSysUIComponentImpl.setOfKeyguardBlueprint(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ThreadAssert) this.referenceSysUIComponentImpl.providesThreadAssertProvider.get());
                    case 546:
                        return (T) new DefaultKeyguardBlueprint(this.referenceSysUIComponentImpl.accessibilityActionsSection(), this.referenceSysUIComponentImpl.defaultIndicationAreaSection(), this.referenceSysUIComponentImpl.defaultDeviceEntrySection(), this.referenceSysUIComponentImpl.defaultShortcutsSection(), Optional.empty(), this.referenceSysUIComponentImpl.defaultSettingsPopupMenuSection(), this.referenceSysUIComponentImpl.defaultStatusViewSection(), this.referenceSysUIComponentImpl.defaultStatusBarSection(), this.referenceSysUIComponentImpl.defaultNotificationStackScrollLayoutSection(), this.referenceSysUIComponentImpl.aodNotificationIconsSection(), this.referenceSysUIComponentImpl.aodBurnInSection(), this.referenceSysUIComponentImpl.communalTutorialIndicatorSection(), (ClockSection) this.referenceSysUIComponentImpl.clockSectionProvider.get(), (SmartspaceSection) this.referenceSysUIComponentImpl.smartspaceSectionProvider.get(), this.referenceSysUIComponentImpl.keyguardSliceViewSection(), this.referenceSysUIComponentImpl.defaultUdfpsAccessibilityOverlaySection());
                    case 547:
                        return (T) new KeyguardBottomAreaInteractor((KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get());
                    case 548:
                        return (T) new KeyguardQuickAffordanceInteractor((KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardQuickAffordanceRepositoryProvider), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), new KeyguardQuickAffordancesMetricsLoggerImpl(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.sceneInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardShortcutManagerProvider));
                    case 549:
                        return (T) new KeyguardQuickAffordanceRepository((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardQuickAffordanceLocalUserSelectionManager) this.referenceSysUIComponentImpl.keyguardQuickAffordanceLocalUserSelectionManagerProvider.get(), (KeyguardQuickAffordanceRemoteUserSelectionManager) this.referenceSysUIComponentImpl.keyguardQuickAffordanceRemoteUserSelectionManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardQuickAffordanceLegacySettingSyncer) this.referenceSysUIComponentImpl.keyguardQuickAffordanceLegacySettingSyncerProvider.get(), this.referenceSysUIComponentImpl.setOfKeyguardQuickAffordanceConfig(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), new UserHandle(UserHandle.myUserId()));
                    case 550:
                        return (T) new KeyguardQuickAffordanceLocalUserSelectionManager((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 551:
                        return (T) new KeyguardQuickAffordanceRemoteUserSelectionManager((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), this.referenceSysUIComponentImpl.keyguardQuickAffordanceProviderClientFactoryImpl(), new UserHandle(UserHandle.myUserId()));
                    case 552:
                        return (T) new KeyguardQuickAffordanceLegacySettingSyncer((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (KeyguardQuickAffordanceLocalUserSelectionManager) this.referenceSysUIComponentImpl.keyguardQuickAffordanceLocalUserSelectionManagerProvider.get());
                    case 553:
                        return (T) new CameraQuickAffordanceConfig((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.cameraGestureHelperProvider), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 554:
                        return (T) new CameraGestureHelper(this.referenceGlobalRootComponentImpl.context, (CentralSurfaces) this.referenceSysUIComponentImpl.centralSurfacesImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (ActivityIntentHelper) this.referenceSysUIComponentImpl.activityIntentHelperProvider.get(), (IActivityTaskManager) this.referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), this.referenceSysUIComponentImpl.cameraIntentsWrapper(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 555:
                        return (T) new DoNotDisturbQuickAffordanceConfig(this.referenceGlobalRootComponentImpl.context, (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 556:
                        return (T) new FlashlightQuickAffordanceConfig((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (FlashlightController) this.referenceSysUIComponentImpl.flashlightControllerImplProvider.get());
                    case 557:
                        return (T) new GlanceableHubQuickAffordanceConfig((CommunalSceneRepository) this.referenceSysUIComponentImpl.communalSceneRepositoryImplProvider.get());
                    case 558:
                        return (T) new HomeControlsKeyguardQuickAffordanceConfig((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (ControlsComponent) this.referenceSysUIComponentImpl.controlsComponentProvider.get());
                    case 559:
                        return (T) new MuteQuickAffordanceConfig(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (UserFileManager) this.referenceSysUIComponentImpl.userFileManagerImplProvider.get(), (RingerModeTracker) this.referenceSysUIComponentImpl.ringerModeTrackerImplProvider.get(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 560:
                        return (T) new RingerModeTrackerImpl((AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get());
                    case 561:
                        return (T) new QuickAccessWalletKeyguardQuickAffordanceConfig((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (QuickAccessWalletController) this.referenceSysUIComponentImpl.quickAccessWalletControllerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 562:
                        return (T) new QrCodeScannerKeyguardQuickAffordanceConfig((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (QRCodeScannerController) this.referenceSysUIComponentImpl.qRCodeScannerControllerProvider.get());
                    case 563:
                        return (T) new VideoCameraQuickAffordanceConfig((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), this.referenceSysUIComponentImpl.cameraIntentsWrapper(), (ActivityIntentHelper) this.referenceSysUIComponentImpl.activityIntentHelperProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 564:
                        return (T) new NoteTaskController(this.referenceGlobalRootComponentImpl.context, (RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get(), (ShortcutManager) this.referenceGlobalRootComponentImpl.provideShortcutManagerProvider.get(), this.referenceSysUIComponentImpl.noteTaskInfoResolver(), this.referenceSysUIComponentImpl.noteTaskEventLogger(), (NoteTaskBubblesController) this.referenceSysUIComponentImpl.noteTaskBubblesControllerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), this.referenceSysUIComponentImpl.noteTaskEnabledKeyBoolean(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case 565:
                        return (T) new NoteTaskBubblesController((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 566:
                        return (T) new StylusManager(this.referenceGlobalRootComponentImpl.context, (InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get(), (BluetoothAdapter) this.referenceGlobalRootComponentImpl.provideBluetoothAdapterProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 567:
                        return (T) new KeyguardShortcutManager(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.setOfKeyguardQuickAffordanceConfig(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get(), (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get());
                    case 568:
                        return (T) new BurnInInteractor(this.referenceGlobalRootComponentImpl.context, new BurnInHelperWrapper(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get());
                    case 569:
                        return (T) new AodToLockscreenTransitionViewModel((ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 570:
                        return (T) new DozingToLockscreenTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 571:
                        return (T) new DreamingHostedToLockscreenTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 572:
                        return (T) new DreamingToLockscreenTransitionViewModel((FromDreamingTransitionInteractor) this.referenceSysUIComponentImpl.fromDreamingTransitionInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 573:
                        return (T) new FromDreamingTransitionInteractor((KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), this.referenceSysUIComponentImpl.glanceableHubTransitions(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardOcclusionInteractor) this.referenceSysUIComponentImpl.keyguardOcclusionInteractorProvider.get());
                    case 574:
                        return (T) new KeyguardOcclusionInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardOcclusionRepository) this.referenceSysUIComponentImpl.keyguardOcclusionRepositoryProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceUnlockedInteractorProvider));
                    case 575:
                        return (T) new KeyguardOcclusionRepository();
                    case 576:
                        return (T) new GoneToLockscreenTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 577:
                        return (T) new OccludedToLockscreenTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 578:
                        return (T) new OffToLockscreenTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 579:
                        return (T) new PrimaryBouncerToLockscreenTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case VolteConstants.ErrorCode.PRECONDITION_FAILURE /* 580 */:
                        return (T) new LockscreenToAodTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), this.referenceSysUIComponentImpl.shadeDependentFlows(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 581:
                        return (T) new LockscreenToDozingTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 582:
                        return (T) new LockscreenToDreamingHostedTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 583:
                        return (T) new LockscreenToDreamingTransitionViewModel(this.referenceSysUIComponentImpl.shadeDependentFlows(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 584:
                        return (T) new LockscreenToGoneTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 585:
                        return (T) new LockscreenToOccludedTransitionViewModel(this.referenceSysUIComponentImpl.shadeDependentFlows(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 586:
                        return (T) new LockscreenToPrimaryBouncerTransitionViewModel(this.referenceSysUIComponentImpl.shadeDependentFlows(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 587:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        Looper provideMainLooper = GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper();
                        WakeLock.Builder wakeLockBuilder = this.referenceSysUIComponentImpl.wakeLockBuilder();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        StatusBarStateController statusBarStateController = (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        DockManager dockManager = (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get();
                        BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get();
                        DevicePolicyManager devicePolicyManager = (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get();
                        IBatteryStats iBatteryStats = (IBatteryStats) this.referenceGlobalRootComponentImpl.provideIBatteryStatsProvider.get();
                        UserManager userManager = (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get();
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get();
                        DelayableExecutor delayableExecutor2 = (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get();
                        FalsingManager falsingManager = (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get();
                        AuthController authController = (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get();
                        LockPatternUtils lockPatternUtils = (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get();
                        ScreenLifecycle screenLifecycle = (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get();
                        return (T) new KeyguardSecIndicationController(context, provideMainLooper, wakeLockBuilder, keyguardStateController, statusBarStateController, keyguardUpdateMonitor, dockManager, broadcastDispatcher, devicePolicyManager, iBatteryStats, userManager, delayableExecutor, delayableExecutor2, falsingManager, authController, lockPatternUtils, screenLifecycle, (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (FaceHelpMessageDeferralFactory) this.referenceSysUIComponentImpl.faceHelpMessageDeferralFactoryProvider.get(), this.referenceSysUIComponentImpl.keyguardLogger(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (BouncerMessageInteractor) this.referenceSysUIComponentImpl.bouncerMessageInteractorProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (IndicationHelper) this.referenceSysUIComponentImpl.indicationHelperProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (BiometricMessageInteractor) this.referenceSysUIComponentImpl.biometricMessageInteractorProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (SecRotationWatcher) this.referenceSysUIComponentImpl.secRotationWatcherProvider.get(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockData) this.referenceSysUIComponentImpl.pluginLockDataImplProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get());
                    case 588:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "KeyguardLog");
                    case 589:
                        return (T) new BouncerMessageInteractor((BouncerMessageRepository) this.referenceSysUIComponentImpl.bouncerMessageRepositoryImplProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), (CountDownTimerUtil) this.referenceSysUIComponentImpl.countDownTimerUtilProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (TrustRepository) this.referenceSysUIComponentImpl.trustRepositoryImplProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (SystemPropertiesHelper) this.referenceGlobalRootComponentImpl.systemPropertiesHelperProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (DeviceEntryFaceAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFaceAuthRepositoryImplProvider.get(), (KeyguardSecurityModel) this.referenceSysUIComponentImpl.keyguardSecurityModelProvider.get());
                    case 590:
                        return (T) new BouncerMessageRepositoryImpl();
                    case 591:
                        return (T) new CountDownTimerUtil();
                    case 592:
                        return (T) new IndicationHelper((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 593:
                        return (T) new SecRotationWatcher(this.referenceGlobalRootComponentImpl.context);
                    case 594:
                        return (T) new PluginLockDataImpl(this.referenceGlobalRootComponentImpl.context, (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 595:
                        return (T) new PluginLockStarManager(this.referenceGlobalRootComponentImpl.context, (SPluginManager) this.referenceSysUIComponentImpl.provideSPluginManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), (GoodLockLifecycle) this.referenceSysUIComponentImpl.provideGoodLockLifecycleProvider.get());
                    case 596:
                        return (T) new GoodLockLifecycle(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 597:
                        return (T) new KeyguardEditModeControllerImpl(false, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.referenceSysUIComponentImpl.wallpaperImageInjectCreator(), (PluginWallpaperManager) this.referenceSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
                    case 598:
                        return (T) new CoverWallpaperController(this.referenceGlobalRootComponentImpl.context, ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (WallpaperLogger) this.referenceSysUIComponentImpl.provideWallpaperLoggerProvider.get(), (PluginWallpaperManager) this.referenceSysUIComponentImpl.pluginWallpaperManagerImplProvider.get(), (PluginLockUtils) this.referenceSysUIComponentImpl.pluginLockUtilsProvider.get(), (SubScreenManager) this.referenceSysUIComponentImpl.subScreenManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (WallpaperChangeNotifier) this.referenceSysUIComponentImpl.wallpaperChangeNotifierProvider.get());
                    case 599:
                        return (T) new WallpaperLoggerImpl("Wallpaper", 1000, (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get6() {
                switch (this.id) {
                    case VolteConstants.ErrorCode.BUSY_EVERYWHERE /* 600 */:
                        return (T) new PluginLockUtils(this.referenceGlobalRootComponentImpl.context, (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), this.referenceSysUIComponentImpl.dumpUtils(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 601:
                        return (T) new SubScreenManager(this.referenceGlobalRootComponentImpl.context, (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (DisplayLifecycle) this.referenceSysUIComponentImpl.displayLifecycleProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginFaceWidgetManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.settingsHelperProvider), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (DismissCallbackRegistry) this.referenceSysUIComponentImpl.dismissCallbackRegistryProvider.get(), (TaskStackChangeListeners) this.referenceSysUIComponentImpl.provideTaskStackChangeListenersProvider.get());
                    case 602:
                        this.referenceSysUIComponentImpl.sharedLibraryModule.getClass();
                        T t = (T) TaskStackChangeListeners.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case VolteConstants.ErrorCode.DECLINE /* 603 */:
                        return (T) new WallpaperChangeNotifier(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case VolteConstants.ErrorCode.DOES_NOT_EXIST_ANYWHERE /* 604 */:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((NotificationPanelView) notificationShadeWindowView.requireViewById(R.id.notification_panel));
                    case 605:
                        DoubleCheck.lazy(this.referenceSysUIComponentImpl.secLockIconViewControllerProvider);
                        Lazy lazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.emptyLockIconViewControllerProvider);
                        DeviceEntryModule.Companion.getClass();
                        Flags.deviceEntryUdfpsRefactor();
                        Object obj = lazy.get();
                        Intrinsics.checkNotNull(obj);
                        return (T) ((LockIconViewController) obj);
                    case VolteConstants.ErrorCode.NOT_ACCEPTABLE2 /* 606 */:
                        return (T) new SecLockIconViewController((SecLockIconView) this.referenceSysUIComponentImpl.providesSecLockIconViewProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (AuthRippleController) this.referenceSysUIComponentImpl.authRippleControllerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), this.referenceGlobalRootComponentImpl.context, DoubleCheck.lazy(this.referenceSysUIComponentImpl.deviceEntryInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesViewMediatorCallbackProvider), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (PluginLockData) this.referenceSysUIComponentImpl.pluginLockDataImplProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get());
                    case 607:
                        NotificationShadeWindowView notificationShadeWindowView2 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((SecLockIconView) notificationShadeWindowView2.requireViewById(R.id.sec_lock_icon_view));
                    case 608:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        AuthController authController = (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        WakefulnessLifecycle wakefulnessLifecycle = (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get();
                        CommandRegistry commandRegistry = (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get();
                        NotificationShadeWindowController notificationShadeWindowController = (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) new AuthRippleController(context, authController, configurationController, keyguardUpdateMonitor, keyguardStateController, wakefulnessLifecycle, commandRegistry, notificationShadeWindowController, referenceSysUIComponentImpl.udfpsControllerProvider, (StatusBarStateController) referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.displayMetrics(), this.referenceSysUIComponentImpl.keyguardLogger(), (BiometricUnlockController) this.referenceSysUIComponentImpl.biometricUnlockControllerProvider.get(), (LightRevealScrim) this.referenceSysUIComponentImpl.providesLightRevealScrimProvider.get(), (AuthRippleInteractor) this.referenceSysUIComponentImpl.authRippleInteractorProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get(), (AuthRippleView) this.referenceSysUIComponentImpl.providesAuthRippleViewProvider.get());
                    case 609:
                        return (T) new BiometricUnlockController(DoubleCheck.lazy(this.referenceSysUIComponentImpl.secLockIconViewControllerProvider), (DozeScrimController) this.referenceSysUIComponentImpl.dozeScrimControllerProvider.get(), (KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (BiometricUnlockLogger) this.referenceSysUIComponentImpl.biometricUnlockLoggerProvider.get(), (NotificationMediaManager) this.referenceSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SessionTracker) this.referenceSysUIComponentImpl.sessionTrackerProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.selectedUserInteractorProvider), (BiometricUnlockInteractor) this.referenceSysUIComponentImpl.biometricUnlockInteractorProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (VibrationUtil) this.referenceGlobalRootComponentImpl.vibrationUtilProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 610:
                        return (T) new DozeScrimController((DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 611:
                        return (T) new DozeLog((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceSysUIComponentImpl.dozeLogger());
                    case 612:
                        return (T) new BiometricUnlockLogger((LogBuffer) this.referenceSysUIComponentImpl.provideBiometricLogBufferProvider.get());
                    case 613:
                        return (T) new NotificationMediaManager(this.referenceGlobalRootComponentImpl.context, (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 614:
                        return (T) new BiometricUnlockInteractor((KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get());
                    case 615:
                        NotificationShadeWindowView notificationShadeWindowView3 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ScrimLogger scrimLogger = this.referenceSysUIComponentImpl.scrimLogger();
                        ShadeViewProviderModule.Companion.getClass();
                        ?? r1 = (T) ((LightRevealScrim) notificationShadeWindowView3.requireViewById(R.id.light_reveal_scrim));
                        r1.scrimLogger = scrimLogger;
                        return r1;
                    case 616:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "ScrimLog");
                    case 617:
                        return (T) new AuthRippleInteractor((DeviceEntrySourceInteractor) this.referenceSysUIComponentImpl.deviceEntrySourceInteractorProvider.get(), (DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get());
                    case 618:
                        return (T) new DeviceEntrySourceInteractor((KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get());
                    case 619:
                        ShadeViewProviderModule.Companion companion = ShadeViewProviderModule.Companion;
                        NotificationShadeWindowView notificationShadeWindowView4 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        companion.getClass();
                        return (T) ShadeViewProviderModule.Companion.providesAuthRippleView(notificationShadeWindowView4);
                    case 620:
                        T t2 = (T) ((KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get()).getViewMediatorCallback();
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 621:
                        return (T) new EmptyLockIconViewController(DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesKeyguardRootViewProvider));
                    case 622:
                        NotificationShadeWindowView notificationShadeWindowView5 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((KeyguardRootView) notificationShadeWindowView5.requireViewById(R.id.keyguard_root_view));
                    case 623:
                        return (T) new DeviceEntryIconViewModel(this.referenceSysUIComponentImpl.setOfDeviceEntryIconTransition(), (BurnInInteractor) this.referenceSysUIComponentImpl.burnInInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (AodToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.aodToLockscreenTransitionViewModelProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get(), (DeviceEntrySourceInteractor) this.referenceSysUIComponentImpl.deviceEntrySourceInteractorProvider.get(), (AccessibilityInteractor) this.referenceSysUIComponentImpl.accessibilityInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 624:
                        return (T) new AlternateBouncerToAodTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 625:
                        return (T) new AlternateBouncerToDozingTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 626:
                        return (T) new AlternateBouncerToGoneTransitionViewModel(this.referenceSysUIComponentImpl.bouncerToGoneFlows(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 627:
                        return (T) new KeyguardDismissActionInteractor((KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardDismissInteractor) this.referenceSysUIComponentImpl.keyguardDismissInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get());
                    case 628:
                        return (T) new KeyguardDismissInteractor((TrustRepository) this.referenceSysUIComponentImpl.trustRepositoryImplProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 629:
                        return (T) new AlternateBouncerToOccludedTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 630:
                        return (T) new AlternateBouncerToPrimaryBouncerTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 631:
                        return (T) new AodToGoneTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 632:
                        return (T) new AodToOccludedTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 633:
                        return (T) new AodToPrimaryBouncerTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 634:
                        return (T) new DozingToGoneTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 635:
                        return (T) new DozingToOccludedTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 636:
                        return (T) new DozingToPrimaryBouncerTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 637:
                        return (T) new DreamingToAodTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 638:
                        return (T) new GoneToAodTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 639:
                        return (T) new GoneToDozingTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 640:
                        return (T) new OccludedToAodTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 641:
                        return (T) new PrimaryBouncerToAodTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 642:
                        return (T) new PrimaryBouncerToDozingTransitionViewModel((DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 643:
                        return (T) new GlanceableHubToOccludedTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 644:
                        return (T) new OccludedToGlanceableHubTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 645:
                        return (T) new GoneToGlanceableHubTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 646:
                        return (T) new AccessibilityInteractor(this.referenceSysUIComponentImpl.accessibilityRepository());
                    case 647:
                        return (T) new DeviceEntryForegroundViewModel(this.referenceGlobalRootComponentImpl.context, (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (DeviceEntryUdfpsInteractor) this.referenceSysUIComponentImpl.deviceEntryUdfpsInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DeviceEntryIconViewModel) this.referenceSysUIComponentImpl.deviceEntryIconViewModelProvider.get(), (UdfpsOverlayInteractor) this.referenceSysUIComponentImpl.udfpsOverlayInteractorProvider.get());
                    case 648:
                        return (T) new DeviceEntryBackgroundViewModel(this.referenceGlobalRootComponentImpl.context, (DeviceEntryIconViewModel) this.referenceSysUIComponentImpl.deviceEntryIconViewModelProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (LockscreenToAodTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToAodTransitionViewModelProvider.get(), (AodToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.aodToLockscreenTransitionViewModelProvider.get(), (GoneToAodTransitionViewModel) this.referenceSysUIComponentImpl.goneToAodTransitionViewModelProvider.get(), (PrimaryBouncerToAodTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToAodTransitionViewModelProvider.get(), (OccludedToAodTransitionViewModel) this.referenceSysUIComponentImpl.occludedToAodTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.occludedToLockscreenTransitionViewModelProvider.get(), (DreamingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (AlternateBouncerToAodTransitionViewModel) this.referenceSysUIComponentImpl.alternateBouncerToAodTransitionViewModelProvider.get(), (GoneToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.goneToLockscreenTransitionViewModelProvider.get(), (GoneToDozingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDozingTransitionViewModelProvider.get(), (PrimaryBouncerToDozingTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToDozingTransitionViewModelProvider.get(), (LockscreenToDozingTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToDozingTransitionViewModelProvider.get(), (DozingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dozingToLockscreenTransitionViewModelProvider.get(), (AlternateBouncerToDozingTransitionViewModel) this.referenceSysUIComponentImpl.alternateBouncerToDozingTransitionViewModelProvider.get(), (DreamingToAodTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToAodTransitionViewModelProvider.get(), (PrimaryBouncerToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToLockscreenTransitionViewModelProvider.get());
                    case 649:
                        return (T) new KeyguardRootViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DeviceEntryInteractor) this.referenceSysUIComponentImpl.deviceEntryInteractorProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), this.referenceSysUIComponentImpl.notificationsKeyguardInteractor(), (AlternateBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.alternateBouncerToGoneTransitionViewModelProvider.get(), (AodToGoneTransitionViewModel) this.referenceSysUIComponentImpl.aodToGoneTransitionViewModelProvider.get(), (AodToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.aodToLockscreenTransitionViewModelProvider.get(), (AodToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.aodToOccludedTransitionViewModelProvider.get(), (DozingToGoneTransitionViewModel) this.referenceSysUIComponentImpl.dozingToGoneTransitionViewModelProvider.get(), (DozingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dozingToLockscreenTransitionViewModelProvider.get(), (DozingToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.dozingToOccludedTransitionViewModelProvider.get(), (DreamingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (DreamingToGoneTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToGoneTransitionViewModelProvider.get(), (GlanceableHubToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.glanceableHubToLockscreenTransitionViewModelProvider.get(), (GoneToAodTransitionViewModel) this.referenceSysUIComponentImpl.goneToAodTransitionViewModelProvider.get(), (GoneToDozingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDozingTransitionViewModelProvider.get(), (GoneToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDreamingTransitionViewModelProvider.get(), (GoneToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.goneToLockscreenTransitionViewModelProvider.get(), (LockscreenToAodTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToAodTransitionViewModelProvider.get(), (LockscreenToDozingTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToDozingTransitionViewModelProvider.get(), (LockscreenToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToDreamingTransitionViewModelProvider.get(), (LockscreenToGlanceableHubTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToGlanceableHubTransitionViewModelProvider.get(), (LockscreenToGoneTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToGoneTransitionViewModelProvider.get(), (LockscreenToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToOccludedTransitionViewModelProvider.get(), (LockscreenToPrimaryBouncerTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToPrimaryBouncerTransitionViewModelProvider.get(), (OccludedToAodTransitionViewModel) this.referenceSysUIComponentImpl.occludedToAodTransitionViewModelProvider.get(), (OccludedToDozingTransitionViewModel) this.referenceSysUIComponentImpl.occludedToDozingTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.occludedToLockscreenTransitionViewModelProvider.get(), (PrimaryBouncerToAodTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToAodTransitionViewModelProvider.get(), (PrimaryBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (PrimaryBouncerToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToLockscreenTransitionViewModelProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (AodBurnInViewModel) this.referenceSysUIComponentImpl.aodBurnInViewModelProvider.get(), (AodAlphaViewModel) this.referenceSysUIComponentImpl.aodAlphaViewModelProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 650:
                        return (T) new DreamingToGoneTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 651:
                        return (T) new GoneToDreamingTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 652:
                        return (T) new OccludedToDozingTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 653:
                        return (T) new PrimaryBouncerToGoneTransitionViewModel((SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardDismissActionInteractorProvider), this.referenceSysUIComponentImpl.bouncerToGoneFlows(), (KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 654:
                        return (T) new AodBurnInViewModel((BurnInInteractor) this.referenceSysUIComponentImpl.burnInInteractorProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (GoneToAodTransitionViewModel) this.referenceSysUIComponentImpl.goneToAodTransitionViewModelProvider.get(), (AodToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.aodToLockscreenTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.occludedToLockscreenTransitionViewModelProvider.get(), (KeyguardClockViewModel) this.referenceSysUIComponentImpl.keyguardClockViewModelProvider.get());
                    case 655:
                        return (T) new KeyguardClockViewModel((KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (NotificationIconContainerAlwaysOnDisplayViewModel) this.referenceSysUIComponentImpl.notificationIconContainerAlwaysOnDisplayViewModelProvider.get(), this.referenceSysUIComponentImpl.notificationsKeyguardInteractor(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), this.referenceSysUIComponentImpl.systemBarUtilsProxyImpl(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl));
                    case 656:
                        return (T) new NotificationIconContainerAlwaysOnDisplayViewModel((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), this.referenceSysUIComponentImpl.alwaysOnDisplayNotificationIconsInteractor(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 657:
                        return (T) new HeadsUpNotificationIconViewStateRepository();
                    case 658:
                        return (T) new OngoingCallController((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (OngoingCallRepository) this.referenceSysUIComponentImpl.ongoingCallRepositoryProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (OngoingCallLogger) this.referenceSysUIComponentImpl.ongoingCallLoggerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (SwipeStatusBarAwayGestureHandler) this.referenceSysUIComponentImpl.swipeStatusBarAwayGestureHandlerProvider.get(), (StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get(), new KeyguardCallChipController(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 659:
                        return (T) new OngoingCallRepository();
                    case 660:
                        return (T) new OngoingCallLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 661:
                        return (T) new SwipeStatusBarAwayGestureHandler(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (SwipeUpGestureLogger) this.referenceSysUIComponentImpl.swipeUpGestureLoggerProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get());
                    case 662:
                        return (T) new SwipeUpGestureLogger((LogBuffer) this.referenceSysUIComponentImpl.provideSwipeUpLogBufferProvider.get());
                    case 663:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(30, "SwipeUpLog");
                    case 664:
                        return (T) new StatusBarModeRepositoryImpl(ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), (StatusBarModePerDisplayRepositoryFactory) this.referenceSysUIComponentImpl.statusBarModePerDisplayRepositoryFactoryProvider.get());
                    case 665:
                        return (T) new StatusBarModePerDisplayRepositoryFactory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.17
                            @Override // com.android.systemui.statusbar.data.repository.StatusBarModePerDisplayRepositoryFactory
                            public final StatusBarModePerDisplayRepositoryImpl create(int i) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new StatusBarModePerDisplayRepositoryImpl((CoroutineScope) switchingProvider.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), i, (CommandQueue) switchingProvider.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (LetterboxAppearanceCalculator) switchingProvider.referenceSysUIComponentImpl.letterboxAppearanceCalculatorProvider.get(), (OngoingCallRepository) switchingProvider.referenceSysUIComponentImpl.ongoingCallRepositoryProvider.get());
                            }
                        };
                    case 666:
                        return (T) new LetterboxAppearanceCalculator(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LetterboxBackgroundProvider) this.referenceSysUIComponentImpl.letterboxBackgroundProvider.get());
                    case 667:
                        return (T) new LetterboxBackgroundProvider((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 668:
                        return (T) new AodAlphaViewModel((KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (GoneToAodTransitionViewModel) this.referenceSysUIComponentImpl.goneToAodTransitionViewModelProvider.get(), (GoneToDozingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDozingTransitionViewModelProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get());
                    case 669:
                        return (T) new KeyguardViewConfigurator((KeyguardRootView) this.referenceSysUIComponentImpl.providesKeyguardRootViewProvider.get(), (KeyguardRootViewModel) this.referenceSysUIComponentImpl.keyguardRootViewModelProvider.get(), this.referenceSysUIComponentImpl.keyguardIndicationAreaViewModel(), (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (KeyguardIndicationController) this.referenceSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (OccludingAppDeviceEntryMessageViewModel) this.referenceSysUIComponentImpl.occludingAppDeviceEntryMessageViewModelProvider.get(), (ChipbarCoordinator) this.referenceSysUIComponentImpl.chipbarCoordinatorProvider.get(), this.referenceSysUIComponentImpl.keyguardBlueprintViewModel(), new KeyguardStatusViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0), this.referenceSysUIComponentImpl.configurationState(), this.referenceGlobalRootComponentImpl.context, (KeyguardIndicationController) this.referenceSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secLockIconViewControllerProvider), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (DeviceEntryHapticsInteractor) this.referenceSysUIComponentImpl.deviceEntryHapticsInteractorProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (KeyguardClockViewModel) this.referenceSysUIComponentImpl.keyguardClockViewModelProvider.get(), (KeyguardSmartspaceViewModel) this.referenceSysUIComponentImpl.keyguardSmartspaceViewModelProvider.get(), (LockscreenContentViewModel) this.referenceSysUIComponentImpl.lockscreenContentViewModelProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesLockscreenBlueprintsProvider), (KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (KeyguardViewMediator) this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider.get(), Optional.empty());
                    case 670:
                        return (T) new OccludingAppDeviceEntryMessageViewModel((OccludingAppDeviceEntryInteractor) this.referenceSysUIComponentImpl.occludingAppDeviceEntryInteractorProvider.get());
                    case 671:
                        return (T) new OccludingAppDeviceEntryInteractor((BiometricMessageInteractor) this.referenceSysUIComponentImpl.biometricMessageInteractorProvider.get(), (DeviceEntryFingerprintAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthRepositoryImplProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get());
                    case 672:
                        return (T) new ChipbarCoordinator(this.referenceGlobalRootComponentImpl.context, (ChipbarLogger) this.referenceSysUIComponentImpl.chipbarLoggerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (ChipbarAnimator) this.referenceSysUIComponentImpl.chipbarAnimatorProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (SwipeChipbarAwayGestureHandler) this.referenceSysUIComponentImpl.swipeChipbarAwayGestureHandlerProvider.get(), (ViewUtil) this.referenceSysUIComponentImpl.viewUtilProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), this.referenceSysUIComponentImpl.wakeLockBuilder(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (TemporaryViewUiEventLogger) this.referenceSysUIComponentImpl.temporaryViewUiEventLoggerProvider.get());
                    case 673:
                        return (T) new ChipbarLogger((LogBuffer) this.referenceSysUIComponentImpl.provideChipbarLogBufferProvider.get());
                    case 674:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        TemporaryDisplayModule.Companion.getClass();
                        return (T) logBufferFactory.create(40, "ChipbarLog", true);
                    case 675:
                        return (T) new ChipbarAnimator();
                    case 676:
                        return (T) new SwipeChipbarAwayGestureHandler(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (SwipeUpGestureLogger) this.referenceSysUIComponentImpl.swipeUpGestureLoggerProvider.get());
                    case 677:
                        return (T) new ViewUtil();
                    case 678:
                        return (T) new TemporaryViewUiEventLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 679:
                        return (T) new DeviceEntryHapticsInteractor((DeviceEntrySourceInteractor) this.referenceSysUIComponentImpl.deviceEntrySourceInteractorProvider.get(), (DeviceEntryFingerprintAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryFingerprintAuthInteractorProvider.get(), (DeviceEntryBiometricAuthInteractor) this.referenceSysUIComponentImpl.deviceEntryBiometricAuthInteractorProvider.get(), (FingerprintPropertyRepository) this.referenceSysUIComponentImpl.fingerprintPropertyRepositoryImplProvider.get(), (BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (KeyEventInteractor) this.referenceSysUIComponentImpl.keyEventInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (BiometricUnlockLogger) this.referenceSysUIComponentImpl.biometricUnlockLoggerProvider.get());
                    case 680:
                        return (T) new DeviceEntryBiometricAuthInteractor((BiometricSettingsRepository) this.referenceSysUIComponentImpl.biometricSettingsRepositoryImplProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get());
                    case 681:
                        return (T) new KeyEventInteractor((KeyEventRepository) this.referenceSysUIComponentImpl.keyEventRepositoryImplProvider.get());
                    case 682:
                        return (T) new KeyEventRepositoryImpl((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 683:
                        return (T) new KeyguardSmartspaceViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (LockscreenSmartspaceController) this.referenceSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (KeyguardClockViewModel) this.referenceSysUIComponentImpl.keyguardClockViewModelProvider.get(), (KeyguardSmartspaceInteractor) this.referenceSysUIComponentImpl.keyguardSmartspaceInteractorProvider.get());
                    case 684:
                        return (T) new LockscreenSmartspaceController(this.referenceGlobalRootComponentImpl.context, (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (SmartspaceManager) this.referenceGlobalRootComponentImpl.provideSmartspaceManagerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SmartspaceViewModel.Factory) this.referenceSysUIComponentImpl.factoryProvider18.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
                    case 685:
                        return (T) new SmartspaceViewModel.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.18
                            public final SmartspaceViewModel create(String str) {
                                return new SmartspaceViewModel((PowerInteractor) SwitchingProvider.this.referenceSysUIComponentImpl.powerInteractorProvider.get(), str);
                            }
                        };
                    case 686:
                        return (T) new KeyguardSmartspaceInteractor((KeyguardSmartspaceRepository) this.referenceSysUIComponentImpl.keyguardSmartspaceRepositoryImplProvider.get());
                    case 687:
                        return (T) new KeyguardSmartspaceRepositoryImpl(this.referenceGlobalRootComponentImpl.context, (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 688:
                        Set<ComposableLockscreenSceneBlueprint> ofComposableLockscreenSceneBlueprint = this.referenceSysUIComponentImpl.setOfComposableLockscreenSceneBlueprint();
                        LockscreenSceneModule.Companion.getClass();
                        return (T) ofComposableLockscreenSceneBlueprint;
                    case 689:
                        return (T) new KeyguardSecLegacyUnlockAnimationControllerImpl(this.referenceGlobalRootComponentImpl.context, (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideKeyguardUnlockAnimationExecutorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), (KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardSurfaceControllerImplProvider), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.shadeInteractorImplProvider), (AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get());
                    case 690:
                        return (T) new KeyguardSurfaceControllerImpl((KeyguardViewController) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardVisibilityMonitor) this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 691:
                        return (T) new MediaHost(new MediaHost.MediaHostStateHolder(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (MediaHostStatesManager) this.referenceSysUIComponentImpl.mediaHostStatesManagerProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get());
                    case 692:
                        return (T) new NotificationSection(DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get(), (AodBurnInViewModel) this.referenceSysUIComponentImpl.aodBurnInViewModelProvider.get(), (SharedNotificationContainer) this.referenceSysUIComponentImpl.providesSharedNotificationContainerProvider.get(), (SharedNotificationContainerViewModel) this.referenceSysUIComponentImpl.sharedNotificationContainerViewModelProvider.get(), (NotificationStackScrollLayout) this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider.get(), (SharedNotificationContainerBinder) this.referenceSysUIComponentImpl.sharedNotificationContainerBinderProvider.get(), (LockscreenContentViewModel) this.referenceSysUIComponentImpl.lockscreenContentViewModelProvider.get());
                    case 693:
                        NotificationShadeWindowView notificationShadeWindowView6 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((SharedNotificationContainer) notificationShadeWindowView6.requireViewById(R.id.shared_notification_container));
                    case 694:
                        return (T) new SharedNotificationContainerViewModel((SharedNotificationContainerInteractor) this.referenceSysUIComponentImpl.sharedNotificationContainerInteractorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (NotificationStackAppearanceInteractor) this.referenceSysUIComponentImpl.notificationStackAppearanceInteractorProvider.get(), (AlternateBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.alternateBouncerToGoneTransitionViewModelProvider.get(), (AodToGoneTransitionViewModel) this.referenceSysUIComponentImpl.aodToGoneTransitionViewModelProvider.get(), (AodToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.aodToLockscreenTransitionViewModelProvider.get(), (AodToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.aodToOccludedTransitionViewModelProvider.get(), (DozingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dozingToLockscreenTransitionViewModelProvider.get(), (DozingToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.dozingToOccludedTransitionViewModelProvider.get(), (DreamingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (GlanceableHubToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.glanceableHubToLockscreenTransitionViewModelProvider.get(), (GoneToAodTransitionViewModel) this.referenceSysUIComponentImpl.goneToAodTransitionViewModelProvider.get(), (GoneToDozingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDozingTransitionViewModelProvider.get(), (GoneToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDreamingTransitionViewModelProvider.get(), (GoneToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.goneToLockscreenTransitionViewModelProvider.get(), (LockscreenToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToDreamingTransitionViewModelProvider.get(), (LockscreenToGlanceableHubTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToGlanceableHubTransitionViewModelProvider.get(), (LockscreenToGoneTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToGoneTransitionViewModelProvider.get(), (LockscreenToPrimaryBouncerTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToPrimaryBouncerTransitionViewModelProvider.get(), (LockscreenToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToOccludedTransitionViewModelProvider.get(), (OccludedToAodTransitionViewModel) this.referenceSysUIComponentImpl.occludedToAodTransitionViewModelProvider.get(), (OccludedToGoneTransitionViewModel) this.referenceSysUIComponentImpl.occludedToGoneTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.occludedToLockscreenTransitionViewModelProvider.get(), (PrimaryBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (PrimaryBouncerToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToLockscreenTransitionViewModelProvider.get(), (AodBurnInViewModel) this.referenceSysUIComponentImpl.aodBurnInViewModelProvider.get(), (UnfoldTransitionInteractor) this.referenceSysUIComponentImpl.unfoldTransitionInteractorProvider.get());
                    case 695:
                        return (T) new OccludedToGoneTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 696:
                        return (T) new UnfoldTransitionInteractor(this.referenceGlobalRootComponentImpl.unfoldTransitionRepositoryImpl(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get());
                    case 697:
                        return (T) new SharedNotificationContainerBinder((NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (NotificationStackSizeCalculator) this.referenceSysUIComponentImpl.notificationStackSizeCalculatorProvider.get(), (NotificationScrollViewBinder) this.referenceSysUIComponentImpl.notificationScrollViewBinderProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
                    case 698:
                        return (T) new NotificationStackScrollLayoutController((NotificationStackScrollLayout) this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider.get(), ((Boolean) this.referenceSysUIComponentImpl.provideAllowNotificationLongPressProvider.get()).booleanValue(), (NotificationGutsManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), (NotificationsController) this.referenceSysUIComponentImpl.provideNotificationsControllerProvider.get(), (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (NotificationRoundnessManager) this.referenceSysUIComponentImpl.notificationRoundnessManagerProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (DynamicPrivacyController) this.referenceSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardMediaController) this.referenceSysUIComponentImpl.keyguardMediaControllerProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (KeyguardTransitionRepository) this.referenceSysUIComponentImpl.keyguardTransitionRepositoryImplProvider.get(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (ColorUpdateLogger) this.referenceSysUIComponentImpl.colorUpdateLoggerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (NotificationSwipeHelper.Builder) this.referenceSysUIComponentImpl.notificationSwipeHelperBuilder(), (GroupExpansionManager) this.referenceSysUIComponentImpl.groupExpansionManagerImplProvider.get(), this.referenceSysUIComponentImpl.silentHeaderSectionHeaderController(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (VisibilityLocationProviderDelegator) this.referenceSysUIComponentImpl.visibilityLocationProviderDelegatorProvider.get(), (SeenNotificationsInteractor) this.referenceSysUIComponentImpl.seenNotificationsInteractorProvider.get(), this.referenceSysUIComponentImpl.notificationListViewBinder(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), this.referenceSysUIComponentImpl.providesWindowRootViewProvider, (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), this.referenceSysUIComponentImpl.stackStateLogger(), this.referenceSysUIComponentImpl.notificationStackScrollLogger(), (NotificationStackSizeCalculator) this.referenceSysUIComponentImpl.notificationStackSizeCalculatorProvider.get(), (NotificationTargetsHelper) this.referenceSysUIComponentImpl.notificationTargetsHelperProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (NotificationDismissibilityProvider) this.referenceSysUIComponentImpl.notificationDismissibilityProviderImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (SensitiveNotificationProtectionController) this.referenceSysUIComponentImpl.sensitiveNotificationProtectionControllerImplProvider.get(), (NotificationShelfManager) this.referenceSysUIComponentImpl.notificationShelfManagerProvider.get(), (LockscreenNotificationManager) this.referenceSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.biometricUnlockControllerProvider), (AppLockNotificationController) this.referenceSysUIComponentImpl.appLockNotificationControllerImplProvider.get());
                    case 699:
                        return (T) Boolean.TRUE;
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get7() {
                int i = 0;
                switch (this.id) {
                    case KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED /* 700 */:
                        return (T) new NotificationGutsManager(this.referenceGlobalRootComponentImpl.context, (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (HighPriorityProvider) this.referenceSysUIComponentImpl.highPriorityProvider.get(), (INotificationManager) this.referenceGlobalRootComponentImpl.provideINotificationManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (PeopleSpaceWidgetManager) this.referenceSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get(), (LauncherApps) this.referenceGlobalRootComponentImpl.provideLauncherAppsProvider.get(), (ShortcutManager) this.referenceGlobalRootComponentImpl.provideShortcutManagerProvider.get(), (ChannelEditorDialogController) this.referenceSysUIComponentImpl.channelEditorDialogControllerProvider.get(), (UserContextProvider) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (AssistantFeedbackController) this.referenceSysUIComponentImpl.assistantFeedbackControllerProvider.get(), (Optional) this.referenceSysUIComponentImpl.provideBubblesManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (OnUserInteractionCallback) this.referenceSysUIComponentImpl.onUserInteractionCallbackImplProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (WindowRootViewVisibilityInteractor) this.referenceSysUIComponentImpl.windowRootViewVisibilityInteractorProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SecQpBlurController) this.referenceSysUIComponentImpl.secQpBlurControllerProvider.get());
                    case 701:
                        return (T) new HighPriorityProvider((PeopleNotificationIdentifier) this.referenceSysUIComponentImpl.peopleNotificationIdentifierImplProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get());
                    case 702:
                        return (T) new PeopleNotificationIdentifierImpl((NotificationPersonExtractor) this.referenceSysUIComponentImpl.notificationPersonExtractorPluginBoundaryProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get());
                    case KnoxEnterpriseLicenseManager.ERROR_LICENSE_ACTIVATION_NOT_FOUND /* 703 */:
                        return (T) new NotificationPersonExtractorPluginBoundary((ExtensionController) this.referenceSysUIComponentImpl.extensionControllerImplProvider.get());
                    case KnoxEnterpriseLicenseManager.ERROR_LICENSE_QUANTITY_EXHAUSTED_ON_AUTO_RELEASE /* 704 */:
                        return (T) new ExtensionControllerImpl(this.referenceGlobalRootComponentImpl.context, (LeakDetector) this.referenceSysUIComponentImpl.providesLeakDetectorProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 705:
                        return (T) new PeopleSpaceWidgetManager(this.referenceGlobalRootComponentImpl.context, (LauncherApps) this.referenceGlobalRootComponentImpl.provideLauncherAppsProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), this.referenceSysUIComponentImpl.setBubbles, (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 706:
                        return (T) new ChannelEditorDialogController(this.referenceGlobalRootComponentImpl.context, (INotificationManager) this.referenceGlobalRootComponentImpl.provideINotificationManagerProvider.get(), new ChannelEditorDialog.Builder());
                    case 707:
                        return (T) new AssistantFeedbackController((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceGlobalRootComponentImpl.context, (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get());
                    case 708:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        Optional optional = this.referenceSysUIComponentImpl.setBubbles;
                        T t = (T) Optional.ofNullable(optional.isPresent() ? new BubblesManager(context, (Bubbles) optional.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (INotificationManager) this.referenceGlobalRootComponentImpl.provideINotificationManagerProvider.get(), (IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (VisualInterruptionDecisionProvider) this.referenceSysUIComponentImpl.provideVisualInterruptionDecisionProvider.get(), (ZenModeController) this.referenceSysUIComponentImpl.zenModeControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SensitiveNotificationProtectionController) this.referenceSysUIComponentImpl.sensitiveNotificationProtectionControllerImplProvider.get(), (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), this.referenceSysUIComponentImpl.notifPipelineFlags(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get()) : null);
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 709:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        Provider provider = referenceSysUIComponentImpl.notificationInterruptStateProviderImplProvider;
                        Provider unused = referenceSysUIComponentImpl.visualInterruptionDecisionProviderImplProvider;
                        int i2 = VisualInterruptionRefactor.$r8$clinit;
                        return (T) new NotificationInterruptStateProviderWrapper((NotificationInterruptStateProvider) provider.get());
                    case 710:
                        return (T) new NotificationInterruptStateProviderImpl((PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), this.referenceSysUIComponentImpl.notificationInterruptLogger(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceSysUIComponentImpl.notifPipelineFlags(), (KeyguardNotificationVisibilityProvider) this.referenceSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (EventLog) this.referenceSysUIComponentImpl.bindEventLogProvider.get(), this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.setBubbles);
                    case 711:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "NotifInterruptLog");
                    case 712:
                        return (T) new KeyguardNotificationVisibilityProviderImpl((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (HighPriorityProvider) this.referenceSysUIComponentImpl.highPriorityProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (INotificationManager) this.referenceGlobalRootComponentImpl.provideINotificationManagerProvider.get());
                    case 713:
                        return (T) new EventLogImpl();
                    case 714:
                        return (T) new VisualInterruptionDecisionProviderImpl(this.referenceGlobalRootComponentImpl.ambientDisplayConfiguration(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (EventLog) this.referenceSysUIComponentImpl.bindEventLogProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (KeyguardNotificationVisibilityProvider) this.referenceSysUIComponentImpl.keyguardNotificationVisibilityProviderImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.visualInterruptionDecisionLogger(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (AvalancheProvider) this.referenceSysUIComponentImpl.avalancheProvider.get(), (SystemSettings) this.referenceSysUIComponentImpl.systemSettingsImpl(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), this.referenceSysUIComponentImpl.setBubbles);
                    case 715:
                        return (T) new AvalancheProvider((BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), this.referenceSysUIComponentImpl.visualInterruptionDecisionLogger(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 716:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        GlobalSettings globalSettings = (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl();
                        MediaProjectionManager mediaProjectionManager = (MediaProjectionManager) this.referenceGlobalRootComponentImpl.context.getSystemService(MediaProjectionManager.class);
                        Preconditions.checkNotNullFromProvides(mediaProjectionManager);
                        return (T) new SensitiveNotificationProtectionControllerImpl(context2, globalSettings, mediaProjectionManager, (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), this.referenceSysUIComponentImpl.sensitiveNotificationProtectionControllerLogger());
                    case 717:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(10, "SensitiveNotificationProtectionLog");
                    case 718:
                        return (T) new OnUserInteractionCallbackImpl((NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (VisualStabilityCoordinator) this.referenceSysUIComponentImpl.visualStabilityCoordinatorProvider.get());
                    case 719:
                        return (T) new VisualStabilityCoordinator((DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (ShadeAnimationInteractor) this.referenceSysUIComponentImpl.provideShadeAnimationInteractorProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (SeenNotificationsInteractor) this.referenceSysUIComponentImpl.seenNotificationsInteractorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (VisibilityLocationProvider) this.referenceSysUIComponentImpl.visibilityLocationProviderDelegatorProvider.get(), (VisualStabilityProvider) this.referenceSysUIComponentImpl.visualStabilityProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get());
                    case DeviceState.CAPTURED_BLUR_THRESHOLD_WIDTH /* 720 */:
                        Provider unused2 = this.referenceSysUIComponentImpl.shadeAnimationInteractorSceneContainerImplProvider;
                        Provider provider2 = this.referenceSysUIComponentImpl.shadeAnimationInteractorLegacyImplProvider;
                        ShadeModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj = provider2.get();
                        Intrinsics.checkNotNull(obj);
                        return (T) ((ShadeAnimationInteractor) obj);
                    case 721:
                        return (T) new ShadeAnimationInteractorSceneContainerImpl((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (ShadeAnimationRepository) this.referenceSysUIComponentImpl.shadeAnimationRepositoryProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get());
                    case 722:
                        return (T) new ShadeAnimationRepository();
                    case 723:
                        return (T) new ShadeAnimationInteractorLegacyImpl((ShadeAnimationRepository) this.referenceSysUIComponentImpl.shadeAnimationRepositoryProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 724:
                        return (T) new SeenNotificationsInteractor((ActiveNotificationListRepository) this.referenceSysUIComponentImpl.activeNotificationListRepositoryProvider.get());
                    case 725:
                        return (T) new VisibilityLocationProviderDelegator();
                    case 726:
                        return (T) new WindowRootViewVisibilityInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (WindowRootViewVisibilityRepository) this.referenceSysUIComponentImpl.windowRootViewVisibilityRepositoryProvider.get(), (KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), this.referenceSysUIComponentImpl.sceneInteractorProvider);
                    case 727:
                        return (T) new WindowRootViewVisibilityRepository((IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get());
                    case 728:
                        return (T) new SecQpBlurController(this.referenceGlobalRootComponentImpl.context, (SecPanelBackgroundController) this.referenceSysUIComponentImpl.secPanelBackgroundControllerProvider.get(), (CapturedBlurContainerController) this.referenceSysUIComponentImpl.capturedBlurContainerControllerProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (Choreographer) this.referenceGlobalRootComponentImpl.providesChoreographerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (ShadeControllerImpl) this.referenceSysUIComponentImpl.shadeControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 729:
                        return (T) new SecPanelBackgroundController((SecPanelBackground) this.referenceSysUIComponentImpl.providesSecPanelBackgroundProvider.get());
                    case 730:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((SecPanelBackground) notificationShadeWindowView.requireViewById(R.id.notification_panel_background));
                    case 731:
                        return (T) new CapturedBlurContainerController((CapturedBlurContainer) this.referenceSysUIComponentImpl.providesCaptruedBlurContainerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SecPanelBackgroundController) this.referenceSysUIComponentImpl.secPanelBackgroundControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get());
                    case 732:
                        NotificationShadeWindowView notificationShadeWindowView2 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((CapturedBlurContainer) notificationShadeWindowView2.requireViewById(R.id.captured_blur_container));
                    case 733:
                        return (T) new ShadeControllerImpl(DoubleCheck.lazy(this.referenceSysUIComponentImpl.newKeyguardViewMediatorProvider), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (WindowRootViewVisibilityInteractor) this.referenceSysUIComponentImpl.windowRootViewVisibilityInteractorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationGutsManagerProvider));
                    case 734:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl2 = this.referenceSysUIComponentImpl;
                        DcmMascotViewContainer dcmMascotViewContainer = (DcmMascotViewContainer) referenceSysUIComponentImpl2.dcmMascotViewContainerProvider.get();
                        PluginLockMediator pluginLockMediator = (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get();
                        NotificationPanelView notificationPanelView = (NotificationPanelView) this.referenceSysUIComponentImpl.providesNotificationPanelViewProvider.get();
                        KeyguardTouchAnimator keyguardTouchAnimator = (KeyguardTouchAnimator) this.referenceSysUIComponentImpl.keyguardTouchAnimatorProvider.get();
                        Lazy lazy = DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider);
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        LayoutInflater layoutInflater = (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get();
                        FeatureFlags featureFlags = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        NotificationWakeUpCoordinator notificationWakeUpCoordinator = (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get();
                        PulseExpansionHandler pulseExpansionHandler = (PulseExpansionHandler) this.referenceSysUIComponentImpl.pulseExpansionHandlerProvider.get();
                        DynamicPrivacyController dynamicPrivacyController = (DynamicPrivacyController) this.referenceSysUIComponentImpl.dynamicPrivacyControllerProvider.get();
                        KeyguardBypassController keyguardBypassController = (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get();
                        FalsingManager falsingManager = (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get();
                        FalsingCollector falsingCollector = (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get();
                        KeyguardStateController keyguardStateController = (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get();
                        StatusBarStateController statusBarStateController = (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        StatusBarWindowStateController statusBarWindowStateController = (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get();
                        NotificationShadeWindowController notificationShadeWindowController = (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get();
                        DozeLog dozeLog = (DozeLog) this.referenceSysUIComponentImpl.dozeLogProvider.get();
                        DozeParameters dozeParameters = (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get();
                        CommandQueue commandQueue = (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get();
                        VibratorHelper vibratorHelper = (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get();
                        LatencyTracker latencyTracker = (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get();
                        AccessibilityManager accessibilityManager = (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get();
                        int m1001$$Nest$mdisplayIdInteger = ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl);
                        KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get();
                        MetricsLogger metricsLogger = (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get();
                        ShadeLogger shadeLogger = this.referenceSysUIComponentImpl.shadeLogger();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl3 = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl2.injectNotificationPanelViewController(new NotificationPanelViewController(dcmMascotViewContainer, pluginLockMediator, notificationPanelView, keyguardTouchAnimator, lazy, handler, layoutInflater, featureFlags, notificationWakeUpCoordinator, pulseExpansionHandler, dynamicPrivacyController, keyguardBypassController, falsingManager, falsingCollector, keyguardStateController, statusBarStateController, statusBarWindowStateController, notificationShadeWindowController, dozeLog, dozeParameters, commandQueue, vibratorHelper, latencyTracker, accessibilityManager, m1001$$Nest$mdisplayIdInteger, keyguardUpdateMonitor, metricsLogger, shadeLogger, configurationController, referenceSysUIComponentImpl3.builderProvider, (StatusBarTouchableRegionManager) referenceSysUIComponentImpl3.statusBarTouchableRegionManagerProvider.get(), (ConversationNotificationManager) this.referenceSysUIComponentImpl.conversationNotificationManagerProvider.get(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (NotificationGutsManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), (NotificationsQSContainerController) this.referenceSysUIComponentImpl.notificationsQSContainerControllerProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), new KeyguardStatusViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), new KeyguardQsUserSwitchComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), new KeyguardUserSwitcherComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), new KeyguardStatusBarViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (AuthController) this.referenceSysUIComponentImpl.authControllerProvider.get(), (ScrimController) this.referenceSysUIComponentImpl.scrimControllerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (NotificationShadeDepthController) this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get(), (SecLockIconViewController) this.referenceSysUIComponentImpl.secLockIconViewControllerProvider.get(), (KeyguardMediaController) this.referenceSysUIComponentImpl.keyguardMediaControllerProvider.get(), (TapAgainViewController) this.referenceSysUIComponentImpl.tapAgainViewControllerProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), (NavigationBarController) this.referenceSysUIComponentImpl.navigationBarControllerImplProvider.get(), (QuickSettingsControllerImpl) this.referenceSysUIComponentImpl.quickSettingsControllerImplProvider.get(), (FragmentService) this.referenceSysUIComponentImpl.fragmentServiceProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (LockscreenGestureLogger) this.referenceSysUIComponentImpl.lockscreenGestureLoggerProvider.get(), (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get(), (SysUiState) this.referenceSysUIComponentImpl.provideSysUiStateProvider.get(), this.referenceSysUIComponentImpl.keyguardSecBottomAreaViewControllerProvider, (KeyguardWallpaperController) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), this.referenceSysUIComponentImpl.wallpaperImageInjectCreator(), this.referenceSysUIComponentImpl.emergencyButtonControllerFactory(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (KeyguardIndicationController) this.referenceSysUIComponentImpl.provideKeyguardIndicationControllerProvider.get(), (NotificationListContainer) this.referenceSysUIComponentImpl.provideListContainerProvider.get(), (NotificationStackSizeCalculator) this.referenceSysUIComponentImpl.notificationStackSizeCalculatorProvider.get(), (UnlockedScreenOffAnimationController) this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), this.referenceSysUIComponentImpl.keyguardBottomAreaViewModel(), (KeyguardBottomAreaInteractor) this.referenceSysUIComponentImpl.keyguardBottomAreaInteractorProvider.get(), (KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get(), (DreamingToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.dreamingToLockscreenTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.referenceSysUIComponentImpl.occludedToLockscreenTransitionViewModelProvider.get(), (LockscreenToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToDreamingTransitionViewModelProvider.get(), (GoneToDreamingTransitionViewModel) this.referenceSysUIComponentImpl.goneToDreamingTransitionViewModelProvider.get(), (GoneToDreamingLockscreenHostedTransitionViewModel) this.referenceSysUIComponentImpl.goneToDreamingLockscreenHostedTransitionViewModelProvider.get(), (LockscreenToOccludedTransitionViewModel) this.referenceSysUIComponentImpl.lockscreenToOccludedTransitionViewModelProvider.get(), (PrimaryBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (KeyguardLongPressViewModel) this.referenceSysUIComponentImpl.keyguardLongPressViewModelProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SharedNotificationContainerInteractor) this.referenceSysUIComponentImpl.sharedNotificationContainerInteractorProvider.get(), (ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), this.referenceSysUIComponentImpl.headsUpNotificationInteractor(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.subScreenManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.coverScreenManagerProvider), (ShadeAnimationInteractor) this.referenceSysUIComponentImpl.provideShadeAnimationInteractorProvider.get(), (KeyguardViewConfigurator) this.referenceSysUIComponentImpl.keyguardViewConfiguratorProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (KeyguardClockPositionAlgorithm) this.referenceSysUIComponentImpl.faceWidgetPositionAlgorithmWrapperProvider.get(), (NaturalScrollingSettingObserver) this.referenceSysUIComponentImpl.naturalScrollingSettingObserverProvider.get(), (PrivacyDialogController) this.referenceSysUIComponentImpl.privacyDialogControllerProvider.get(), this.referenceSysUIComponentImpl.keyguardPunchHoleVIViewControllerFactory(), (NotificationShelfManager) this.referenceSysUIComponentImpl.notificationShelfManagerProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (KeyguardClickController) this.referenceSysUIComponentImpl.provideKeyguardClickControllerProvider.get(), (PluginLockData) this.referenceSysUIComponentImpl.pluginLockDataImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginLockStarManagerProvider), (IndicatorTouchHandler) this.referenceSysUIComponentImpl.indicatorTouchHandlerProvider.get(), (LockscreenNotificationManager) this.referenceSysUIComponentImpl.lockscreenNotificationManagerProvider.get(), (LockscreenNotificationIconsOnlyController) this.referenceSysUIComponentImpl.lockscreenNotificationIconsOnlyControllerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.dataUsageLabelManagerProvider), (QsStatusEventLog) this.referenceSysUIComponentImpl.qsStatusEventLogProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get()));
                    case 735:
                        return (T) new DcmMascotViewContainer(this.referenceGlobalRootComponentImpl.context, (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 736:
                        return (T) new KeyguardTouchAnimator(this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardTouchDymLockInjector) this.referenceSysUIComponentImpl.keyguardTouchDymLockInjectorProvider.get(), (KeyguardTouchLoggingInjector) this.referenceSysUIComponentImpl.keyguardTouchLoggingInjectorProvider.get(), (KeyguardTouchSecurityInjector) this.referenceSysUIComponentImpl.keyguardTouchSecurityInjectorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardEditModeController) this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider.get(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (SecRotationWatcher) this.referenceSysUIComponentImpl.secRotationWatcherProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (KeyguardStatusViewAlphaChangeControllerWrapper) this.referenceSysUIComponentImpl.keyguardStatusViewAlphaChangeControllerWrapperProvider.get(), (KeyguardClickController) this.referenceSysUIComponentImpl.provideKeyguardClickControllerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 737:
                        return (T) new KeyguardTouchDymLockInjector((PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 738:
                        return (T) new KeyguardTouchLoggingInjector();
                    case 739:
                        return (T) new KeyguardTouchSecurityInjector((KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (FingerprintManager) this.referenceGlobalRootComponentImpl.providesFingerprintManagerProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get());
                    case 740:
                        return (T) new LockscreenShadeTransitionController((MdmOverlayContainer) this.referenceSysUIComponentImpl.mdmOverlayContainerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideKeyguardEditModeControllerProvider), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.lSShadeTransitionLogger(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (FalsingCollector) this.referenceSysUIComponentImpl.providesFalsingCollectorLegacyProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), this.referenceSysUIComponentImpl.lockscreenShadeScrimTransitionController(), (LockscreenShadeKeyguardTransitionController.Factory) this.referenceSysUIComponentImpl.factoryProvider21.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardTouchSecurityInjector) this.referenceSysUIComponentImpl.keyguardTouchSecurityInjectorProvider.get(), (NotificationShadeDepthController) this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), this.referenceGlobalRootComponentImpl.context, (SplitShadeLockScreenOverScroller.Factory) this.referenceSysUIComponentImpl.factoryProvider22.get(), (SingleShadeLockScreenOverScroller.Factory) this.referenceSysUIComponentImpl.factoryProvider23.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LockscreenShadeQsTransitionController.Factory) this.referenceSysUIComponentImpl.factoryProvider24.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideShadeLockscreenInteractorProvider), (NaturalScrollingSettingObserver) this.referenceSysUIComponentImpl.naturalScrollingSettingObserverProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.qSSceneAdapterImplProvider), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get());
                    case 741:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "LSShadeTransitionLog");
                    case 742:
                        return (T) new LockscreenGestureLogger((MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get());
                    case 743:
                        return (T) new AmbientState(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (StackScrollAlgorithm.SectionProvider) this.referenceSysUIComponentImpl.notificationSectionsManagerProvider.get(), (StackScrollAlgorithm.BypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (LargeScreenShadeInterpolator) this.referenceSysUIComponentImpl.largeScreenShadeInterpolatorImplProvider.get(), (AvalancheController) this.referenceSysUIComponentImpl.avalancheControllerProvider.get());
                    case 744:
                        return (T) new NotificationSectionsManager((ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (KeyguardMediaController) this.referenceSysUIComponentImpl.keyguardMediaControllerProvider.get(), (NotificationSectionsFeatureManager) this.referenceSysUIComponentImpl.notificationSectionsFeatureManagerProvider.get(), (MediaContainerController) this.referenceSysUIComponentImpl.mediaContainerControllerProvider.get(), (NotificationRoundnessManager) this.referenceSysUIComponentImpl.notificationRoundnessManagerProvider.get(), this.referenceSysUIComponentImpl.incomingHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.peopleHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.alertingHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.silentHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.favoriteHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.ongoingActivityHeaderSectionHeaderController(), this.referenceSysUIComponentImpl.highlightsHeaderSectionHeaderController());
                    case 745:
                        return (T) new KeyguardMediaController((MediaHost) this.referenceSysUIComponentImpl.providesKeyguardMediaHostProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), this.referenceSysUIComponentImpl.keyguardMediaControllerLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 746:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "KeyguardMediaControllerLog", false);
                    case 747:
                        return (T) new NotificationSectionsFeatureManager((DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 748:
                        return (T) new MediaContainerController((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get());
                    case 749:
                        return (T) new NotificationRoundnessManager((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 750:
                        return (T) NotificationSectionHeadersModule_ProvidesIncomingHeaderSubcomponentFactory.providesIncomingHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 751:
                        return (T) new SectionHeaderControllerSubcomponentBuilder(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i);
                    case 752:
                        return (T) NotificationSectionHeadersModule_ProvidesPeopleHeaderSubcomponentFactory.providesPeopleHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 753:
                        return (T) NotificationSectionHeadersModule_ProvidesAlertingHeaderSubcomponentFactory.providesAlertingHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 754:
                        return (T) NotificationSectionHeadersModule_ProvidesSilentHeaderSubcomponentFactory.providesSilentHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 755:
                        return (T) NotificationSectionHeadersModule_ProvidesFavoriteHeaderSubcomponentFactory.providesFavoriteHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 756:
                        return (T) NotificationSectionHeadersModule_ProvidesOngoingActivityHeaderSubcomponentFactory.providesOngoingActivityHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 757:
                        return (T) NotificationSectionHeadersModule_ProvidesHighlightsHeaderSubcomponentFactory.providesHighlightsHeaderSubcomponent(this.referenceSysUIComponentImpl.sectionHeaderControllerSubcomponentBuilderProvider);
                    case 758:
                        return (T) new LargeScreenShadeInterpolatorImpl((ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.context, new SplitShadeInterpolator(), new LargeScreenPortraitShadeInterpolator(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get());
                    case 759:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl4 = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl4.injectScrimController(new ScrimController((LightBarController) referenceSysUIComponentImpl4.lightBarControllerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DelayedWakeLock.Factory) this.referenceSysUIComponentImpl.factoryProvider20.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DockManager) this.referenceSysUIComponentImpl.dockManagerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (PrimaryBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.primaryBouncerToGoneTransitionViewModelProvider.get(), (AlternateBouncerToGoneTransitionViewModel) this.referenceSysUIComponentImpl.alternateBouncerToGoneTransitionViewModelProvider.get(), (KeyguardTransitionInteractor) this.referenceSysUIComponentImpl.keyguardTransitionInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (WallpaperRepository) this.referenceSysUIComponentImpl.wallpaperRepositoryImplProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (LargeScreenShadeInterpolator) this.referenceSysUIComponentImpl.largeScreenShadeInterpolatorImplProvider.get()));
                    case 760:
                        return (T) new LightBarController(this.referenceGlobalRootComponentImpl.context, (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), (StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.referenceSysUIComponentImpl.samsungLightBarControlHelper(), (SamsungStatusBarGrayIconHelper) this.referenceSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get());
                    case 761:
                        return (T) new DarkIconDispatcherImpl(this.referenceGlobalRootComponentImpl.context, (LightBarTransitionsController.Factory) this.referenceSysUIComponentImpl.factoryProvider19.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SamsungStatusBarGrayIconHelper) this.referenceSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get());
                    case 762:
                        return (T) new LightBarTransitionsController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.19
                            @Override // com.android.systemui.statusbar.phone.LightBarTransitionsController.Factory
                            public final LightBarTransitionsController create(LightBarTransitionsController.DarkIntensityApplier darkIntensityApplier) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LightBarTransitionsController(switchingProvider.referenceGlobalRootComponentImpl.context, (Handler) switchingProvider.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), darkIntensityApplier, (CommandQueue) switchingProvider.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (KeyguardStateController) switchingProvider.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) switchingProvider.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                            }
                        };
                    case 763:
                        return (T) new SamsungStatusBarGrayIconHelper(this.referenceGlobalRootComponentImpl.context);
                    case 764:
                        return (T) new DelayedWakeLock.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.20
                            @Override // com.android.systemui.util.wakelock.DelayedWakeLock.Factory
                            public final DelayedWakeLock create(String str) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new DelayedWakeLock(DoubleCheck.lazy(switchingProvider.referenceSysUIComponentImpl.provideBgHandlerProvider), DoubleCheck.lazy(switchingProvider.referenceGlobalRootComponentImpl.provideMainHandlerProvider), switchingProvider.referenceGlobalRootComponentImpl.context, switchingProvider.referenceSysUIComponentImpl.wakeLockLogger(), str);
                            }
                        };
                    case 765:
                        return (T) new WallpaperRepositoryImpl((CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), this.referenceGlobalRootComponentImpl.context);
                    case 766:
                        return (T) new SecLsScrimControlHelper(DoubleCheck.lazy(this.referenceSysUIComponentImpl.dozeParametersProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AODAmbientWallpaperHelper) this.referenceSysUIComponentImpl.aODAmbientWallpaperHelperProvider.get(), (KeyguardFoldController) this.referenceSysUIComponentImpl.keyguardFoldControllerImplProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), DoubleCheck.lazy(this.referenceSysUIComponentImpl.coverHostImplProvider), (KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (KeyguardVisibilityMonitor) this.referenceSysUIComponentImpl.keyguardVisibilityMonitorProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 767:
                        return (T) new LockscreenShadeKeyguardTransitionController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.21
                            @Override // com.android.systemui.statusbar.LockscreenShadeKeyguardTransitionController.Factory
                            public final LockscreenShadeKeyguardTransitionController create(ShadeLockscreenInteractor shadeLockscreenInteractor) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LockscreenShadeKeyguardTransitionController((MediaHierarchyManager) switchingProvider.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), shadeLockscreenInteractor, switchingProvider.referenceGlobalRootComponentImpl.context, (ConfigurationController) switchingProvider.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) switchingProvider.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SplitShadeStateController) switchingProvider.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get());
                            }
                        };
                    case 768:
                        return (T) new NotificationShadeDepthController((KeyguardFastBioUnlockController) this.referenceSysUIComponentImpl.keyguardFastBioUnlockControllerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (BlurUtils) this.referenceSysUIComponentImpl.blurUtilsProvider.get(), (BiometricUnlockController) this.referenceSysUIComponentImpl.biometricUnlockControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (Choreographer) this.referenceGlobalRootComponentImpl.providesChoreographerProvider.get(), (WallpaperController) this.referenceSysUIComponentImpl.wallpaperControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), this.referenceGlobalRootComponentImpl.context, (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 769:
                        return (T) new BlurUtils(ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (CrossWindowBlurListeners) this.referenceGlobalRootComponentImpl.provideCrossWindowBlurListenersProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 770:
                        return (T) new WallpaperController(ReferenceGlobalRootComponentImpl.m1005$$Nest$mwallpaperManager(this.referenceGlobalRootComponentImpl), (WallpaperRepository) this.referenceSysUIComponentImpl.wallpaperRepositoryImplProvider.get());
                    case 771:
                        return (T) new SplitShadeLockScreenOverScroller.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.22
                            @Override // com.android.systemui.statusbar.SplitShadeLockScreenOverScroller.Factory
                            public final SplitShadeLockScreenOverScroller create(Function0 function0, Function0 function02) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new SplitShadeLockScreenOverScroller((ConfigurationController) switchingProvider.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) switchingProvider.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), switchingProvider.referenceGlobalRootComponentImpl.context, (ScrimController) switchingProvider.referenceSysUIComponentImpl.scrimControllerProvider.get(), (SysuiStatusBarStateController) switchingProvider.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), function0, function02);
                            }
                        };
                    case 772:
                        return (T) new SingleShadeLockScreenOverScroller.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.23
                            @Override // com.android.systemui.statusbar.SingleShadeLockScreenOverScroller.Factory
                            public final SingleShadeLockScreenOverScroller create(NotificationStackScrollLayoutController notificationStackScrollLayoutController) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new SingleShadeLockScreenOverScroller((ConfigurationController) switchingProvider.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), switchingProvider.referenceGlobalRootComponentImpl.context, (SysuiStatusBarStateController) switchingProvider.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), notificationStackScrollLayoutController);
                            }
                        };
                    case 773:
                        return (T) new LockscreenShadeQsTransitionController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.24
                            @Override // com.android.systemui.statusbar.LockscreenShadeQsTransitionController.Factory
                            public final LockscreenShadeQsTransitionController create(Function0 function0) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new LockscreenShadeQsTransitionController(switchingProvider.referenceGlobalRootComponentImpl.context, (ConfigurationController) switchingProvider.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) switchingProvider.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), function0, (SplitShadeStateController) switchingProvider.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get());
                            }
                        };
                    case 774:
                        Provider unused3 = this.referenceSysUIComponentImpl.shadeLockscreenInteractorImplProvider;
                        Provider provider3 = this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider;
                        ShadeModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj2 = provider3.get();
                        Intrinsics.checkNotNull(obj2);
                        return (T) ((ShadeLockscreenInteractor) obj2);
                    case 775:
                        return (T) new ShadeLockscreenInteractorImpl((CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (SecLockIconViewController) this.referenceSysUIComponentImpl.secLockIconViewControllerProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get());
                    case 776:
                        return (T) new NaturalScrollingSettingObserver((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 777:
                        QSSceneComponentFactory qSSceneComponentFactory = new QSSceneComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i);
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl5 = this.referenceSysUIComponentImpl;
                        return (T) new QSSceneAdapterImpl(qSSceneComponentFactory, referenceSysUIComponentImpl5.qSImplProvider, (ShadeInteractor) referenceSysUIComponentImpl5.shadeInteractorImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get());
                    case 778:
                        return (T) new QSImpl((RemoteInputQuickSettingsDisabler) this.referenceSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQSMediaHostProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQuickQSMediaHostProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), this.referenceSysUIComponentImpl.qSDisableFlagsLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceSysUIComponentImpl.qSLogger(), (FooterActionsController) this.referenceSysUIComponentImpl.footerActionsControllerProvider.get(), (FooterActionsViewModel.Factory) this.referenceSysUIComponentImpl.factoryProvider25.get(), (LargeScreenShadeInterpolator) this.referenceSysUIComponentImpl.largeScreenShadeInterpolatorImplProvider.get(), (SecPanelSplitHelper) this.referenceSysUIComponentImpl.secPanelSplitHelperProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 779:
                        return (T) new MediaHost(new MediaHost.MediaHostStateHolder(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (MediaHostStatesManager) this.referenceSysUIComponentImpl.mediaHostStatesManagerProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get());
                    case 780:
                        return (T) new MediaHost(new MediaHost.MediaHostStateHolder(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (MediaHostStatesManager) this.referenceSysUIComponentImpl.mediaHostStatesManagerProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get());
                    case 781:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(10, "QSFragmentDisableFlagsLog", false);
                    case 782:
                        return (T) new FooterActionsController((FgsManagerController) this.referenceSysUIComponentImpl.fgsManagerControllerImplProvider.get());
                    case 783:
                        return (T) new FgsManagerControllerImpl(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (JobScheduler) this.referenceGlobalRootComponentImpl.provideJobSchedulerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SystemUIDialog.Factory) this.referenceSysUIComponentImpl.factoryProvider8.get());
                    case 784:
                        Context context3 = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        FalsingManager falsingManager2 = (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get();
                        FooterActionsInteractor footerActionsInteractor = (FooterActionsInteractor) this.referenceSysUIComponentImpl.footerActionsInteractorImplProvider.get();
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl6 = this.referenceSysUIComponentImpl;
                        return (T) new FooterActionsViewModel.Factory(context3, falsingManager2, footerActionsInteractor, referenceSysUIComponentImpl6.globalActionsDialogLiteProvider, (ActivityStarter) referenceSysUIComponentImpl6.activityStarterImplProvider.get(), ((Boolean) this.referenceSysUIComponentImpl.isPMLiteEnabledProvider.get()).booleanValue());
                    case 785:
                        return (T) new FooterActionsInteractorImpl((ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), (QSSecurityFooterUtils) this.referenceSysUIComponentImpl.qSSecurityFooterUtilsProvider.get(), (FgsManagerController) this.referenceSysUIComponentImpl.fgsManagerControllerImplProvider.get(), (UserSwitcherInteractor) this.referenceSysUIComponentImpl.userSwitcherInteractorProvider.get(), (SecurityRepository) this.referenceSysUIComponentImpl.securityRepositoryImplProvider.get(), (ForegroundServicesRepository) this.referenceSysUIComponentImpl.foregroundServicesRepositoryImplProvider.get(), (UserSwitcherRepository) this.referenceSysUIComponentImpl.userSwitcherRepositoryImplProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 786:
                        return (T) new QSSecurityFooterUtils((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SecurityController) this.referenceSysUIComponentImpl.securityControllerImplProvider.get(), (Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get());
                    case 787:
                        return (T) new SecurityControllerImpl(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 788:
                        return (T) new SecurityRepositoryImpl((SecurityController) this.referenceSysUIComponentImpl.securityControllerImplProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 789:
                        return (T) new ForegroundServicesRepositoryImpl((FgsManagerController) this.referenceSysUIComponentImpl.fgsManagerControllerImplProvider.get());
                    case 790:
                        return (T) new UserSwitcherRepositoryImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (UserSwitcherController) this.referenceSysUIComponentImpl.userSwitcherControllerProvider.get(), (UserInfoController) this.referenceSysUIComponentImpl.userInfoControllerImplProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get());
                    case 791:
                        return (T) new UserInfoControllerImpl(this.referenceGlobalRootComponentImpl.context, (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 792:
                        return (T) new GlobalActionsDialogLite(this.referenceGlobalRootComponentImpl.context, (GlobalActions.GlobalActionsManager) this.referenceSysUIComponentImpl.globalActionsComponentProvider.get(), (AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (TelephonyListenerManager) this.referenceSysUIComponentImpl.telephonyListenerManagerProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (VibratorHelper) this.referenceSysUIComponentImpl.vibratorHelperProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (TrustManager) this.referenceGlobalRootComponentImpl.provideTrustManagerProvider.get(), (IActivityManager) this.referenceGlobalRootComponentImpl.provideIActivityManagerProvider.get(), (TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (SysuiColorExtractor) this.referenceSysUIComponentImpl.sysuiColorExtractorProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (RingerModeTracker) this.referenceSysUIComponentImpl.ringerModeTrackerImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (GlobalActionsInteractor) this.referenceSysUIComponentImpl.globalActionsInteractorProvider.get());
                    case 793:
                        return (T) new GlobalActionsComponent((CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (ExtensionController) this.referenceSysUIComponentImpl.extensionControllerImplProvider.get(), this.referenceSysUIComponentImpl.globalActionsImplProvider, (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get());
                    case 794:
                        return (T) new GlobalActionsImpl(this.referenceGlobalRootComponentImpl.context, (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.globalActionsDialogLiteProvider), (BlurUtils) this.referenceSysUIComponentImpl.blurUtilsProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), this.referenceSysUIComponentImpl.shutdownUi());
                    case 795:
                        return (T) new SysuiColorExtractor(this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.selectedUserInteractorProvider));
                    case 796:
                        return (T) new GlobalActionsInteractor((GlobalActionsRepository) this.referenceSysUIComponentImpl.globalActionsRepositoryProvider.get());
                    case 797:
                        return (T) new GlobalActionsRepository();
                    case 798:
                        return (T) Boolean.valueOf(QSFlagsModule.isPMLiteEnabled((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl()));
                    case 799:
                        return (T) new SecPanelSplitHelper(this.referenceGlobalRootComponentImpl.context, (ShadeExpansionStateManager) this.referenceSysUIComponentImpl.shadeExpansionStateManagerProvider.get(), (QuickSettingsControllerImpl) this.referenceSysUIComponentImpl.quickSettingsControllerImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get8() {
                int i = 0;
                switch (this.id) {
                    case 800:
                        return (T) new QuickSettingsControllerImpl(DoubleCheck.lazy(this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider), (NotificationPanelView) this.referenceSysUIComponentImpl.providesNotificationPanelViewProvider.get(), (QsFrameTranslateController) this.referenceSysUIComponentImpl.qsFrameTranslateImplProvider.get(), (PulseExpansionHandler) this.referenceSysUIComponentImpl.pulseExpansionHandlerProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (LightBarController) this.referenceSysUIComponentImpl.lightBarControllerProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (NotificationShadeDepthController) this.referenceSysUIComponentImpl.notificationShadeDepthControllerProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (StatusBarTouchableRegionManager) this.referenceSysUIComponentImpl.statusBarTouchableRegionManagerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (ScrimController) this.referenceSysUIComponentImpl.scrimControllerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), (MediaHierarchyManager) this.referenceSysUIComponentImpl.mediaHierarchyManagerProvider.get(), (AmbientState) this.referenceSysUIComponentImpl.ambientStateProvider.get(), (RecordingController) this.referenceSysUIComponentImpl.recordingControllerProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get(), (LockscreenGestureLogger) this.referenceSysUIComponentImpl.lockscreenGestureLoggerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider), this.referenceSysUIComponentImpl.shadeLogger(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DeviceEntryFaceAuthInteractor) this.referenceSysUIComponentImpl.providesFaceAuthInteractorInstanceProvider.get(), (ShadeRepository) this.referenceSysUIComponentImpl.shadeRepositoryImplProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (CastController) this.referenceSysUIComponentImpl.castControllerImplProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.communalTransitionViewModelProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.largeScreenHeaderHelperProvider), (PluginLockMediator) this.referenceSysUIComponentImpl.pluginLockMediatorImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 801:
                        return (T) new QsFrameTranslateImpl((DisplayMetricsRepository) this.referenceSysUIComponentImpl.displayMetricsRepositoryProvider.get());
                    case 802:
                        return (T) new DisplayMetricsRepository((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.displayMetrics(), this.referenceGlobalRootComponentImpl.context, (LogBuffer) this.referenceSysUIComponentImpl.provideDisplayMetricsRepoLogBufferProvider.get());
                    case VpnErrorValues.ERROR_STORING_PROXY_PASSWORD /* 803 */:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "DisplayMetricsRepo");
                    case VpnErrorValues.ERROR_INVALID_PROXY_CONFIGURATION /* 804 */:
                        return (T) new PulseExpansionHandler(this.referenceGlobalRootComponentImpl.context, (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (FalsingManager) this.referenceSysUIComponentImpl.falsingManagerProxyProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case VpnErrorValues.ERROR_INVALID_IPV6_CONFIGURATION /* 805 */:
                        return (T) new NotificationWakeUpCoordinator((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorLogger(), this.referenceSysUIComponentImpl.notificationsKeyguardInteractor(), (CommunalInteractor) this.referenceSysUIComponentImpl.communalInteractorProvider.get());
                    case 806:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NotifLockscreenLog", false);
                    case 807:
                        return (T) new NotificationRemoteInputManager(this.referenceGlobalRootComponentImpl.context, this.referenceSysUIComponentImpl.notifPipelineFlags(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SmartReplyController) this.referenceSysUIComponentImpl.provideSmartReplyControllerProvider.get(), (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (RemoteInputUriController) this.referenceSysUIComponentImpl.remoteInputUriControllerProvider.get(), (RemoteInputControllerLogger) this.referenceSysUIComponentImpl.remoteInputControllerLoggerProvider.get(), (NotificationClickNotifier) this.referenceSysUIComponentImpl.notificationClickNotifierProvider.get(), this.referenceSysUIComponentImpl.actionClickLogger(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get());
                    case 808:
                        return (T) new SmartReplyController((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get(), (NotificationClickNotifier) this.referenceSysUIComponentImpl.notificationClickNotifierProvider.get());
                    case 809:
                        return (T) new RemoteInputUriController((IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get());
                    case 810:
                        return (T) new RemoteInputControllerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideNotificationRemoteInputLogBufferProvider.get());
                    case 811:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NotifRemoteInputLog", false);
                    case 812:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(50, "NotifInteractionLog");
                    case 813:
                        return (T) new ShadeHeaderController((MotionLayout) this.referenceSysUIComponentImpl.providesShadeHeaderViewProvider.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), this.referenceSysUIComponentImpl.headerPrivacyIconsController(), (StatusBarContentInsetsProvider) this.referenceSysUIComponentImpl.statusBarContentInsetsProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceSysUIComponentImpl.variableDateViewControllerFactory(), (BatteryMeterViewController) this.referenceSysUIComponentImpl.providesBatteryMeterViewControllerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), this.referenceSysUIComponentImpl.shadeCarrierGroupControllerBuilder(), (CombinedShadeHeadersConstraintManager) this.referenceSysUIComponentImpl.providesCombinedShadeHeadersConstraintManagerProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), this.referenceSysUIComponentImpl.qsBatteryModeController(), (NextAlarmController) this.referenceSysUIComponentImpl.nextAlarmControllerImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.referenceSysUIComponentImpl.statusOverlayHoverListenerFactory(), (SecQSPanelResourcePicker) this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider.get(), (StatusIconContainerController) this.referenceSysUIComponentImpl.provideStatusIconContainerControllerProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), this.referenceSysUIComponentImpl.shadeHeaderColorPicker(), (NetspeedViewController) this.referenceSysUIComponentImpl.provideNetspeedViewControllerProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get());
                    case 814:
                        NotificationShadeWindowView notificationShadeWindowView = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        ViewStub viewStub = (ViewStub) notificationShadeWindowView.requireViewById(R.id.qs_header_stub);
                        viewStub.setLayoutResource(R.layout.combined_qs_header);
                        return (T) ((MotionLayout) viewStub.inflate());
                    case 815:
                        return (T) new TintedIconManager.Factory((WifiUiAdapter) this.referenceSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileUiAdapter) this.referenceSysUIComponentImpl.mobileUiAdapterProvider.get(), (MobileContextProvider) this.referenceSysUIComponentImpl.mobileContextProvider.get(), this.referenceSysUIComponentImpl.bTTetherUiAdapter());
                    case 816:
                        return (T) new WifiUiAdapter((StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (WifiViewModel) this.referenceSysUIComponentImpl.wifiViewModelProvider.get(), (StatusBarPipelineFlags) this.referenceSysUIComponentImpl.statusBarPipelineFlagsProvider.get());
                    case 817:
                        AirplaneModeViewModel airplaneModeViewModel = (AirplaneModeViewModel) this.referenceSysUIComponentImpl.airplaneModeViewModelImplProvider.get();
                        Supplier supplier = (Supplier) this.referenceSysUIComponentImpl.provideFirstMobileSubShowingNetworkTypeIconProvider.get();
                        ConnectivityConstants connectivityConstants = (ConnectivityConstants) this.referenceSysUIComponentImpl.connectivityConstantsProvider.get();
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        TableLogBuffer tableLogBuffer = (TableLogBuffer) this.referenceSysUIComponentImpl.provideWifiTableLogBufferProvider.get();
                        WifiInteractor wifiInteractor = (WifiInteractor) this.referenceSysUIComponentImpl.wifiInteractorImplProvider.get();
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
                        WifiConstants wifiConstants = (WifiConstants) this.referenceSysUIComponentImpl.wifiConstantsProvider.get();
                        DesktopManager desktopManager = (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get();
                        SemWifiManager semWifiManager = (SemWifiManager) this.referenceGlobalRootComponentImpl.context.getSystemService(WiFiManagerExt.SEM_WIFI_SERVICE);
                        Preconditions.checkNotNullFromProvides(semWifiManager);
                        return (T) new WifiViewModel(airplaneModeViewModel, supplier, connectivityConstants, context, tableLogBuffer, wifiInteractor, coroutineScope, wifiConstants, desktopManager, semWifiManager);
                    case 818:
                        return (T) new AirplaneModeViewModelImpl((AirplaneModeInteractor) this.referenceSysUIComponentImpl.airplaneModeInteractorProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.provideAirplaneTableLogBufferProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 819:
                        return (T) new AirplaneModeInteractor((AirplaneModeRepository) this.referenceSysUIComponentImpl.airplaneModeRepositoryImplProvider.get(), (ConnectivityRepository) this.referenceSysUIComponentImpl.connectivityRepositoryImplProvider.get(), (MobileConnectionsRepository) this.referenceSysUIComponentImpl.mobileRepositorySwitcherProvider.get());
                    case 820:
                        final MobileIconsViewModel mobileIconsViewModel = (MobileIconsViewModel) this.referenceSysUIComponentImpl.mobileIconsViewModelProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) new Supplier() { // from class: com.android.systemui.statusbar.pipeline.dagger.StatusBarPipelineModule$Companion$provideFirstMobileSubShowingNetworkTypeIconProvider$1
                            @Override // java.util.function.Supplier
                            public final Object get() {
                                return MobileIconsViewModel.this.firstMobileSubShowingNetworkTypeIcon;
                            }
                        };
                    case 821:
                        return (T) new MobileIconsViewModel((MobileViewLogger) this.referenceSysUIComponentImpl.mobileViewLoggerProvider.get(), (VerboseMobileViewLogger) this.referenceSysUIComponentImpl.verboseMobileViewLoggerProvider.get(), (MobileIconsInteractor) this.referenceSysUIComponentImpl.mobileIconsInteractorImplProvider.get(), (AirplaneModeInteractor) this.referenceSysUIComponentImpl.airplaneModeInteractorProvider.get(), (ConnectivityConstants) this.referenceSysUIComponentImpl.connectivityConstantsProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (DesktopManager) this.referenceSysUIComponentImpl.provideDesktopManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                    case 822:
                        return (T) new MobileViewLogger((LogBuffer) this.referenceSysUIComponentImpl.provideMobileViewLogBufferProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 823:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory.create(100, "MobileViewLog", true);
                    case 824:
                        return (T) new VerboseMobileViewLogger((LogBuffer) this.referenceSysUIComponentImpl.provideVerboseMobileViewLogBufferProvider.get());
                    case 825:
                        LogBufferFactory logBufferFactory2 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        StatusBarPipelineModule.Companion.getClass();
                        return (T) logBufferFactory2.create(100, "VerboseMobileViewLog", true);
                    case 826:
                        return (T) new ConnectivityConstants(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get());
                    case 827:
                        return (T) new WifiConstants(this.referenceGlobalRootComponentImpl.context, (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 828:
                        return (T) new MobileUiAdapter((StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (MobileIconsViewModel) this.referenceSysUIComponentImpl.mobileIconsViewModelProvider.get(), (MobileViewLogger) this.referenceSysUIComponentImpl.mobileViewLoggerProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 829:
                        return (T) new MobileContextProvider((NetworkController) this.referenceSysUIComponentImpl.networkControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get());
                    case 830:
                        return (T) new PrivacyItemController((DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (PrivacyConfig) this.referenceSysUIComponentImpl.privacyConfigProvider.get(), this.referenceSysUIComponentImpl.setOfPrivacyItemMonitor(), this.referenceSysUIComponentImpl.privacyLogger(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 831:
                        return (T) new PrivacyConfig((DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 832:
                        return (T) new AppOpsPrivacyItemMonitor((AppOpsController) this.referenceSysUIComponentImpl.appOpsControllerImplProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (PrivacyConfig) this.referenceSysUIComponentImpl.privacyConfigProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), this.referenceSysUIComponentImpl.privacyLogger());
                    case 833:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "PrivacyLog");
                    case 834:
                        MotionLayout motionLayout = (MotionLayout) this.referenceSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((OngoingPrivacyChip) motionLayout.requireViewById(R.id.privacy_chip));
                    case 835:
                        return (T) new PrivacyDialogController((PermissionManager) this.referenceGlobalRootComponentImpl.providePermissionManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (LocationManager) this.referenceGlobalRootComponentImpl.provideLocationManagerProvider.get(), (PrivacyItemController) this.referenceSysUIComponentImpl.privacyItemControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceSysUIComponentImpl.privacyLogger(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AppOpsController) this.referenceSysUIComponentImpl.appOpsControllerImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get());
                    case 836:
                        return (T) new PrivacyDialogControllerV2((PermissionManager) this.referenceGlobalRootComponentImpl.providePermissionManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (LocationManager) this.referenceGlobalRootComponentImpl.provideLocationManagerProvider.get(), (PrivacyItemController) this.referenceSysUIComponentImpl.privacyItemControllerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceSysUIComponentImpl.privacyLogger(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (AppOpsController) this.referenceSysUIComponentImpl.appOpsControllerImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get());
                    case 837:
                        MotionLayout motionLayout2 = (MotionLayout) this.referenceSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((StatusIconContainer) motionLayout2.requireViewById(R.id.statusIcons));
                    case 838:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(500, "ShadeLog", false);
                    case 839:
                        return (T) SysUIConcurrencyModule_ProvideTimeTickHandlerFactory.provideTimeTickHandler();
                    case 840:
                        BatteryMeterView batteryMeterView = (BatteryMeterView) this.referenceSysUIComponentImpl.providesBatteryMeterViewProvider.get();
                        UserTracker userTracker = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                        ConfigurationController configurationController = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        TunerService tunerService = (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get();
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
                        ContentResolver contentResolver = (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get();
                        FeatureFlags featureFlags = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        BatteryController batteryController = (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get();
                        SettingsHelper settingsHelper = (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get();
                        IndicatorScaleGardener indicatorScaleGardener = (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get();
                        SlimIndicatorViewMediator slimIndicatorViewMediator = (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) new BatteryMeterViewController(batteryMeterView, StatusBarLocation.QS, userTracker, configurationController, tunerService, handler, contentResolver, featureFlags, batteryController, settingsHelper, indicatorScaleGardener, slimIndicatorViewMediator);
                    case 841:
                        MotionLayout motionLayout3 = (MotionLayout) this.referenceSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((BatteryMeterView) motionLayout3.requireViewById(R.id.batteryRemainingIcon));
                    case 842:
                        return (T) new SlimIndicatorViewMediatorImpl(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get());
                    case 843:
                        return (T) new ShadeCarrierGroupControllerLogger((LogBuffer) this.referenceSysUIComponentImpl.provideShadeCarrierLogProvider.get());
                    case 844:
                        LogBufferFactory logBufferFactory3 = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        ShadeModule.Companion.getClass();
                        return (T) logBufferFactory3.create(400, "ShadeCarrierGroupControllerLog", true);
                    case 845:
                        return (T) new CarrierTextUtil(this.referenceGlobalRootComponentImpl.context, (CarrierInfraMediator) this.referenceSysUIComponentImpl.fakeCarrierInfraMediatorImplProvider.get());
                    case 846:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(400, "CarrierTextManagerLog");
                    case 847:
                        return (T) new WifiTextManager(this.referenceGlobalRootComponentImpl.context, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (WifiInteractor) this.referenceSysUIComponentImpl.wifiInteractorImplProvider.get());
                    case 848:
                        return (T) new ShadeCarrierGroupController.SubscriptionManagerSlotIndexResolver();
                    case 849:
                        ShadeViewProviderModule.Companion.getClass();
                        T t = (T) CombinedShadeHeadersConstraintManagerImpl.INSTANCE;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 850:
                        StatusIconContainer statusIconContainer = (StatusIconContainer) this.referenceSysUIComponentImpl.providesStatusIconContainerProvider.get();
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        ConfigurationController configurationController2 = (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get();
                        IndicatorScaleGardener indicatorScaleGardener2 = (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get();
                        IndicatorGardenPresenter indicatorGardenPresenter = (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get();
                        IndicatorCutoutUtil indicatorCutoutUtil = (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) new StatusIconContainerController(statusIconContainer, context2, configurationController2, indicatorScaleGardener2, indicatorGardenPresenter, indicatorCutoutUtil);
                    case 851:
                        ShadeViewProviderModule.Companion companion = ShadeViewProviderModule.Companion;
                        MotionLayout motionLayout4 = (MotionLayout) this.referenceSysUIComponentImpl.providesShadeHeaderViewProvider.get();
                        IndicatorScaleGardener indicatorScaleGardener3 = (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get();
                        IndicatorCutoutUtil indicatorCutoutUtil2 = (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get();
                        UserTracker userTracker2 = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                        WakefulnessLifecycle wakefulnessLifecycle = (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get();
                        companion.getClass();
                        return (T) ShadeViewProviderModule.Companion.provideNetspeedViewController(motionLayout4, indicatorScaleGardener3, indicatorCutoutUtil2, userTracker2, wakefulnessLifecycle);
                    case 852:
                        return (T) new StatusBarTouchableRegionManager(this.referenceGlobalRootComponentImpl.context, (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), this.referenceSysUIComponentImpl.sceneInteractorProvider, (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), (UnlockedScreenOffAnimationController) this.referenceSysUIComponentImpl.unlockedScreenOffAnimationControllerProvider.get(), (PrimaryBouncerInteractor) this.referenceSysUIComponentImpl.primaryBouncerInteractorProvider.get(), (AlternateBouncerInteractor) this.referenceSysUIComponentImpl.alternateBouncerInteractorProvider.get());
                    case 853:
                        return (T) new KeyguardStatusViewAlphaChangeControllerWrapper();
                    case 854:
                        return (T) new KeyguardClickControllerImpl();
                    case 855:
                        return (T) new DynamicPrivacyController((NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 856:
                        return (T) new StatusBarWindowStateController(ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 857:
                        return (T) new FlingAnimationUtils.Builder(this.referenceGlobalRootComponentImpl.displayMetrics());
                    case 858:
                        return (T) new ConversationNotificationManager((BindEventManager) this.referenceSysUIComponentImpl.bindEventManagerImplProvider.get(), this.referenceGlobalRootComponentImpl.context, (CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
                    case 859:
                        return (T) new BindEventManagerImpl();
                    case 860:
                        return (T) new NotificationsQSContainerController((NotificationsQuickSettingsContainer) this.referenceSysUIComponentImpl.providesNotificationsQuickSettingsContainerProvider.get(), (NavigationModeController) this.referenceSysUIComponentImpl.navigationModeControllerProvider.get(), (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get(), (ShadeHeaderController) this.referenceSysUIComponentImpl.shadeHeaderControllerProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (FragmentService) this.referenceSysUIComponentImpl.fragmentServiceProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.largeScreenHeaderHelperProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.secQSPanelResourcePickerProvider));
                    case 861:
                        NotificationShadeWindowView notificationShadeWindowView2 = (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((NotificationsQuickSettingsContainer) notificationShadeWindowView2.requireViewById(R.id.notification_container_parent));
                    case 862:
                        return (T) new TapAgainViewController((TapAgainView) this.referenceSysUIComponentImpl.providesTapAgainViewProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), 1200L);
                    case 863:
                        NotificationPanelView notificationPanelView = (NotificationPanelView) this.referenceSysUIComponentImpl.providesNotificationPanelViewProvider.get();
                        ShadeViewProviderModule.Companion.getClass();
                        return (T) ((TapAgainView) notificationPanelView.requireViewById(R.id.shade_falsing_tap_again));
                    case 864:
                        return (T) new KeyguardSecBottomAreaViewController((ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.centralSurfacesImplProvider), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), (KeyguardQuickAffordanceInteractor) this.referenceSysUIComponentImpl.keyguardQuickAffordanceInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideQuickSettingsControllerProvider), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardShortcutManagerProvider), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), this.referenceSysUIComponentImpl.keyguardBottomAreaView(), (LockscreenSmartspaceController) this.referenceSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 865:
                        Provider unused = this.referenceSysUIComponentImpl.quickSettingsControllerSceneImplProvider;
                        Provider provider = this.referenceSysUIComponentImpl.quickSettingsControllerImplProvider;
                        ShadeModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj = provider.get();
                        Intrinsics.checkNotNull(obj);
                        return (T) ((QuickSettingsController) obj);
                    case 866:
                        return (T) new QuickSettingsControllerSceneImpl((ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (QSSceneAdapter) this.referenceSysUIComponentImpl.qSSceneAdapterImplProvider.get());
                    case 867:
                        T t2 = (T) ((NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get()).mNotificationListContainer;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 868:
                        return (T) new NotificationStackSizeCalculator((SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (MediaDataManager) this.referenceSysUIComponentImpl.providesMediaDataManagerProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), (SplitShadeStateController) this.referenceSysUIComponentImpl.splitShadeStateControllerImplProvider.get());
                    case 869:
                        return (T) new GoneToDreamingLockscreenHostedTransitionViewModel((KeyguardTransitionAnimationFlow) this.referenceSysUIComponentImpl.keyguardTransitionAnimationFlowProvider.get());
                    case 870:
                        return (T) new CoverScreenManager(this.referenceGlobalRootComponentImpl.context, (CoverHost) this.referenceSysUIComponentImpl.coverHostImplProvider.get(), (KeyguardUpdateMonitor) this.referenceSysUIComponentImpl.keyguardSecUpdateMonitorImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginAODManagerProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.pluginFaceWidgetManagerProvider), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (DelayableExecutor) this.referenceSysUIComponentImpl.provideBackgroundDelayableExecutorProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (CoverWindowDelegate) this.referenceSysUIComponentImpl.coverWindowDelegateProvider.get());
                    case 871:
                        return (T) new CoverWindowDelegate(this.referenceGlobalRootComponentImpl.context, (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
                    case 872:
                        return (T) new NotificationShelfManager((SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 873:
                        return (T) new IndicatorTouchHandler((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (OngoingCallController) this.referenceSysUIComponentImpl.ongoingCallControllerProvider.get(), (KnoxStateMonitor) this.referenceSysUIComponentImpl.providesKnoxStateMonitorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get());
                    case 874:
                        return (T) new LockscreenNotificationIconsOnlyController(this.referenceGlobalRootComponentImpl.context, (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (KeyguardWallpaper) this.referenceSysUIComponentImpl.keyguardWallpaperControllerProvider.get(), (PluginLockData) this.referenceSysUIComponentImpl.pluginLockDataImplProvider.get(), (FaceWidgetNotificationControllerWrapper) this.referenceSysUIComponentImpl.faceWidgetNotificationControllerWrapperProvider.get(), (KeyguardTouchAnimator) this.referenceSysUIComponentImpl.keyguardTouchAnimatorProvider.get(), (PluginLockStarManager) this.referenceSysUIComponentImpl.pluginLockStarManagerProvider.get());
                    case 875:
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        return (T) referenceSysUIComponentImpl.injectFaceWidgetNotificationControllerWrapper(new FaceWidgetNotificationControllerWrapper((NotifCollection) referenceSysUIComponentImpl.notifCollectionProvider.get()));
                    case 876:
                        return (T) new DataUsageLabelManager((NotificationPanelViewController) this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
                    case 877:
                        return (T) new QsStatusEventLog(this.referenceGlobalRootComponentImpl.context, (QSTileHost) this.referenceSysUIComponentImpl.qSTileHostProvider.get());
                    case 878:
                        return (T) new AssistManager((DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get(), this.referenceGlobalRootComponentImpl.context, (AssistUtils) this.referenceSysUIComponentImpl.provideAssistUtilsProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (PhoneStateMonitor) this.referenceSysUIComponentImpl.phoneStateMonitorProvider.get(), (OverviewProxyService) this.referenceSysUIComponentImpl.overviewProxyServiceProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.provideSysUiStateProvider), (DefaultUiController) this.referenceSysUIComponentImpl.defaultUiControllerProvider.get(), (AssistLogger) this.referenceSysUIComponentImpl.assistLoggerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (SelectedUserInteractor) this.referenceSysUIComponentImpl.selectedUserInteractorProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), (AssistInteractor) this.referenceSysUIComponentImpl.assistInteractorProvider.get());
                    case 879:
                        return (T) new AssistUtils(this.referenceGlobalRootComponentImpl.context);
                    case 880:
                        return (T) new PhoneStateMonitor(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfCentralSurfacesProvider), (BootCompleteCache) this.referenceSysUIComponentImpl.bootCompleteCacheImplProvider.get(), (Handler) this.referenceSysUIComponentImpl.provideBgHandlerProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 881:
                        return (T) new DefaultUiController(this.referenceGlobalRootComponentImpl.context, (AssistLogger) this.referenceSysUIComponentImpl.assistLoggerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), (NavigationBarController) this.referenceSysUIComponentImpl.navigationBarControllerImplProvider.get());
                    case 882:
                        return (T) new AssistLogger(this.referenceGlobalRootComponentImpl.context, (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (AssistUtils) this.referenceSysUIComponentImpl.provideAssistUtilsProvider.get(), (PhoneStateMonitor) this.referenceSysUIComponentImpl.phoneStateMonitorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get());
                    case 883:
                        return (T) new AssistInteractor((AssistRepository) this.referenceSysUIComponentImpl.assistRepositoryProvider.get());
                    case 884:
                        return (T) new AssistRepository();
                    case 885:
                        T t3 = this.referenceGlobalRootComponentImpl.context.getResources().getBoolean(R.bool.config_renderNotifications) ? (T) ((NotificationsController) this.referenceSysUIComponentImpl.notificationsControllerImplProvider.get()) : (T) ((NotificationsController) this.referenceSysUIComponentImpl.notificationsControllerStubProvider.get());
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 886:
                        return (T) new NotificationsControllerImpl((NotificationListener) this.referenceSysUIComponentImpl.notificationListenerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider), (NotifLiveDataStore) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (TargetSdkResolver) this.referenceSysUIComponentImpl.targetSdkResolverProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineInitializerProvider), this.referenceSysUIComponentImpl.notifBindPipelineInitializer(), (Optional) this.referenceSysUIComponentImpl.provideLegacyLoggerOptionalProvider.get(), (NotificationRowBinderImpl) this.referenceSysUIComponentImpl.notificationRowBinderImplProvider.get(), (NotificationMediaManager) this.referenceSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (HeadsUpViewBinder) this.referenceSysUIComponentImpl.headsUpViewBinderProvider.get(), this.referenceSysUIComponentImpl.notificationClickerBuilder(), (AnimatedImageNotificationManager) this.referenceSysUIComponentImpl.animatedImageNotificationManagerProvider.get(), (PeopleSpaceWidgetManager) this.referenceSysUIComponentImpl.peopleSpaceWidgetManagerProvider.get(), this.referenceSysUIComponentImpl.setBubbles);
                    case 887:
                        return (T) new NotificationListener(this.referenceGlobalRootComponentImpl.context, (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), this.referenceSysUIComponentImpl.silentNotificationStatusIconsVisibilityInteractor(), (SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get());
                    case 888:
                        return (T) new NotificationListenerSettingsRepository();
                    case 889:
                        return (T) new TargetSdkResolver(this.referenceGlobalRootComponentImpl.context);
                    case 890:
                        return (T) new NotifPipelineInitializer((NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), this.referenceSysUIComponentImpl.groupCoalescer(), (NotifCollection) this.referenceSysUIComponentImpl.notifCollectionProvider.get(), (ShadeListBuilder) this.referenceSysUIComponentImpl.shadeListBuilderProvider.get(), (RenderStageManager) this.referenceSysUIComponentImpl.renderStageManagerProvider.get(), (NotifCoordinators) this.referenceSysUIComponentImpl.notifCoordinatorsProvider.get(), (NotifInflaterImpl) this.referenceSysUIComponentImpl.notifInflaterImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ShadeViewManagerFactory) this.referenceSysUIComponentImpl.shadeViewManagerFactoryProvider.get());
                    case 891:
                        return (T) CoordinatorsModule_NotifCoordinatorsFactory.notifCoordinators(new CoordinatorsSubcomponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, i));
                    case 892:
                        return (T) new NotifInflaterImpl((NotifInflationErrorManager) this.referenceSysUIComponentImpl.notifInflationErrorManagerProvider.get(), this.referenceSysUIComponentImpl.notifInflaterLogger());
                    case 893:
                        return (T) new NotifInflationErrorManager();
                    case 894:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend, "NotifInflationLog");
                    case 895:
                        return (T) new ShadeViewManagerFactory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.25
                            @Override // com.android.systemui.statusbar.notification.collection.render.ShadeViewManagerFactory
                            public final ShadeViewManager create(NotificationListContainer notificationListContainer, NotifStackController notifStackController) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new ShadeViewManager(switchingProvider.referenceGlobalRootComponentImpl.context, notificationListContainer, notifStackController, (MediaContainerController) switchingProvider.referenceSysUIComponentImpl.mediaContainerControllerProvider.get(), (NotificationSectionsFeatureManager) switchingProvider.referenceSysUIComponentImpl.notificationSectionsFeatureManagerProvider.get(), (SectionHeaderVisibilityProvider) switchingProvider.referenceSysUIComponentImpl.sectionHeaderVisibilityProvider.get(), switchingProvider.referenceSysUIComponentImpl.nodeSpecBuilderLogger(), switchingProvider.referenceSysUIComponentImpl.shadeViewDifferLogger(), (NotifViewBarn) switchingProvider.referenceSysUIComponentImpl.notifViewBarnProvider.get());
                            }
                        };
                    case 896:
                        return (T) new SectionHeaderVisibilityProvider(this.referenceGlobalRootComponentImpl.context);
                    case 897:
                        return (T) new NotifViewBarn();
                    case 898:
                        return (T) new NotifBindPipeline((CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), this.referenceSysUIComponentImpl.notifBindPipelineLogger(), this.referenceSysUIComponentImpl.notificationEntryProcessorFactoryLooperImpl());
                    case 899:
                        return (T) new RowContentBindStage((NotificationRowContentBinder) this.referenceSysUIComponentImpl.provideNotificationRowContentBinderProvider.get(), (NotifInflationErrorManager) this.referenceSysUIComponentImpl.notifInflationErrorManagerProvider.get(), this.referenceSysUIComponentImpl.rowContentBindStageLogger());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            public final T get9() {
                switch (this.id) {
                    case 900:
                        Provider provider = this.referenceSysUIComponentImpl.notificationContentInflaterProvider;
                        Provider unused = this.referenceSysUIComponentImpl.notificationRowContentBinderImplProvider;
                        int i = NotificationRowContentBinderRefactor.$r8$clinit;
                        Flags.FEATURE_FLAGS.getClass();
                        T t = (T) ((NotificationRowContentBinder) provider.get());
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 901:
                        return (T) new NotificationContentInflater((NotifRemoteViewCache) this.referenceSysUIComponentImpl.provideNotifRemoteViewCacheProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), this.referenceSysUIComponentImpl.conversationNotificationProcessor(), this.referenceSysUIComponentImpl.mediaFeatureFlag(), (Executor) this.referenceSysUIComponentImpl.provideNotifInflationExecutorProvider.get(), this.referenceSysUIComponentImpl.smartReplyStateInflaterImpl(), (NotifLayoutInflaterFactory.Provider) this.referenceSysUIComponentImpl.providerProvider.get(), (HeadsUpStyleProvider) this.referenceSysUIComponentImpl.provideHeadsUpStyleManagerProvider.get(), this.referenceSysUIComponentImpl.notificationRowContentBinderLogger());
                    case VpnErrorValues.ERROR_USB_TETHERING_FAILED /* 902 */:
                        return (T) new NotifRemoteViewCacheImpl((CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get());
                    case 903:
                        return (T) SysUIConcurrencyModule_ProvideNotifInflationExecutorFactory.provideNotifInflationExecutor((Looper) this.referenceSysUIComponentImpl.provideNotifInflationLooperProvider.get());
                    case 904:
                        return (T) SysUIConcurrencyModule_ProvideNotifInflationLooperFactory.provideNotifInflationLooper((Looper) this.referenceSysUIComponentImpl.provideBgLooperProvider.get());
                    case 905:
                        return (T) new SmartReplyConstants((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceGlobalRootComponentImpl.context, (DeviceConfigProxy) this.referenceSysUIComponentImpl.deviceConfigProxyProvider.get());
                    case 906:
                        this.referenceSysUIComponentImpl.sharedLibraryModule.getClass();
                        T t2 = (T) DevicePolicyManagerWrapper.sInstance;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 907:
                        return (T) new NotifLayoutInflaterFactory.Provider() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentImpl.SwitchingProvider.26
                            @Override // com.android.systemui.statusbar.notification.row.NotifLayoutInflaterFactory.Provider
                            public final NotifLayoutInflaterFactory provide(ExpandableNotificationRow expandableNotificationRow, int i2) {
                                return new NotifLayoutInflaterFactory(expandableNotificationRow, i2, (NotifRemoteViewsFactoryContainer) SwitchingProvider.this.referenceSysUIComponentImpl.provideNotifRemoteViewsFactoryContainerProvider.get());
                            }
                        };
                    case 908:
                        return (T) new NotifRemoteViewsFactoryContainerImpl((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), new PrecomputedTextViewFactory(), new BigPictureLayoutInflaterFactory(), new NotificationOptimizedLinearLayoutFactory(), this.referenceSysUIComponentImpl.notificationViewFlipperFactoryProvider);
                    case 909:
                        return (T) new NotificationViewFlipperFactory((NotificationViewFlipperViewModel) this.referenceSysUIComponentImpl.notificationViewFlipperViewModelProvider.get());
                    case 910:
                        return (T) new NotificationViewFlipperViewModel((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotificationStackInteractor) this.referenceSysUIComponentImpl.notificationStackInteractorProvider.get());
                    case 911:
                        return (T) new NotificationStackInteractor((KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 912:
                        return (T) new HeadsUpStyleProviderImpl((StatusBarModeRepositoryStore) this.referenceSysUIComponentImpl.statusBarModeRepositoryImplProvider.get());
                    case 913:
                        return (T) new NotificationRowContentBinderImpl((NotifRemoteViewCache) this.referenceSysUIComponentImpl.provideNotifRemoteViewCacheProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), this.referenceSysUIComponentImpl.conversationNotificationProcessor(), (Executor) this.referenceSysUIComponentImpl.provideNotifInflationExecutorProvider.get(), this.referenceSysUIComponentImpl.smartReplyStateInflaterImpl(), (NotifLayoutInflaterFactory.Provider) this.referenceSysUIComponentImpl.providerProvider.get(), (HeadsUpStyleProvider) this.referenceSysUIComponentImpl.provideHeadsUpStyleManagerProvider.get(), this.referenceSysUIComponentImpl.notificationRowContentBinderLogger());
                    case 914:
                        NotificationListener notificationListener = (NotificationListener) this.referenceSysUIComponentImpl.notificationListenerProvider.get();
                        Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get();
                        NotifLiveDataStore notifLiveDataStore = (NotifLiveDataStore) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get();
                        NotificationVisibilityProvider notificationVisibilityProvider = (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get();
                        NotifPipeline notifPipeline = (NotifPipeline) this.referenceSysUIComponentImpl.notifPipelineProvider.get();
                        StatusBarStateController statusBarStateController = (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get();
                        WindowRootViewVisibilityInteractor windowRootViewVisibilityInteractor = (WindowRootViewVisibilityInteractor) this.referenceSysUIComponentImpl.windowRootViewVisibilityInteractorProvider.get();
                        JavaAdapter javaAdapter = (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get();
                        NotificationLogger.ExpansionStateLogger expansionStateLogger = this.referenceSysUIComponentImpl.expansionStateLogger();
                        NotificationPanelLogger notificationPanelLogger = (NotificationPanelLogger) this.referenceSysUIComponentImpl.provideNotificationPanelLoggerProvider.get();
                        NotificationStatsLoggerModule.Companion.getClass();
                        Flags.notificationsLiveDataStoreRefactor();
                        T t3 = (T) Optional.of(new NotificationLogger(notificationListener, executor, notifLiveDataStore, notificationVisibilityProvider, notifPipeline, statusBarStateController, windowRootViewVisibilityInteractor, javaAdapter, expansionStateLogger, notificationPanelLogger));
                        Intrinsics.checkNotNull(t3);
                        return t3;
                    case 915:
                        return (T) new NotificationPanelLoggerImpl();
                    case 916:
                        return (T) new NotificationRowBinderImpl(this.referenceGlobalRootComponentImpl.context, this.referenceGlobalRootComponentImpl.notificationMessagingUtil(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (NotifBindPipeline) this.referenceSysUIComponentImpl.notifBindPipelineProvider.get(), (RowContentBindStage) this.referenceSysUIComponentImpl.rowContentBindStageProvider.get(), this.referenceSysUIComponentImpl.rowInflaterTaskProvider, new ExpandableNotificationRowComponentBuilder(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0), (IconManager) this.referenceSysUIComponentImpl.iconManagerProvider.get(), this.referenceSysUIComponentImpl.notificationRowBinderLogger(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 917:
                        return (T) new RowInflaterTask((SystemClock) this.referenceSysUIComponentImpl.bindSystemClockProvider.get(), this.referenceSysUIComponentImpl.rowInflaterTaskLogger());
                    case 918:
                        return (T) new IconManager((CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (LauncherApps) this.referenceGlobalRootComponentImpl.provideLauncherAppsProvider.get(), this.referenceSysUIComponentImpl.iconBuilder(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get());
                    case 919:
                        return (T) new HeadsUpViewBinder(this.referenceGlobalRootComponentImpl.notificationMessagingUtil(), (RowContentBindStage) this.referenceSysUIComponentImpl.rowContentBindStageProvider.get(), this.referenceSysUIComponentImpl.headsUpViewBinderLogger());
                    case 920:
                        return (T) new AnimatedImageNotificationManager((CommonNotifCollection) this.referenceSysUIComponentImpl.notifPipelineProvider.get(), (BindEventManager) this.referenceSysUIComponentImpl.bindEventManagerImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 921:
                        return (T) new NotificationsControllerStub((NotificationListener) this.referenceSysUIComponentImpl.notificationListenerProvider.get());
                    case 922:
                        return (T) new ColorUpdateLogger((FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
                    case 923:
                        return (T) new GroupExpansionManagerImpl((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (GroupMembershipManager) this.referenceSysUIComponentImpl.groupMembershipManagerImplProvider.get());
                    case 924:
                        return (T) new NotificationShelfViewModel((NotificationShelfInteractor) this.referenceSysUIComponentImpl.notificationShelfInteractorProvider.get(), this.referenceSysUIComponentImpl.activatableNotificationViewModel());
                    case 925:
                        return (T) new NotificationShelfInteractor((KeyguardRepository) this.referenceSysUIComponentImpl.keyguardRepositoryImplProvider.get(), (DeviceEntryFaceAuthRepository) this.referenceSysUIComponentImpl.deviceEntryFaceAuthRepositoryImplProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (StatusBarStateControllerImpl) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (ShadeControllerImpl) this.referenceSysUIComponentImpl.shadeControllerImplProvider.get());
                    case 926:
                        return (T) new HideListViewModel(this.referenceSysUIComponentImpl.hideNotificationsInteractorProvider);
                    case 927:
                        return (T) new HideNotificationsInteractor((UnfoldTransitionInteractor) this.referenceSysUIComponentImpl.unfoldTransitionInteractorProvider.get(), (ConfigurationInteractor) this.referenceSysUIComponentImpl.configurationInteractorProvider.get(), this.referenceSysUIComponentImpl.animationStatusRepositoryImpl(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get());
                    case 928:
                        Provider unused2 = this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider;
                        Provider unused3 = this.referenceSysUIComponentImpl.provideNotificationSettingsInteractorProvider;
                        ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
                        Provider provider2 = referenceSysUIComponentImpl.seenNotificationsInteractorProvider;
                        Provider unused4 = referenceSysUIComponentImpl.shadeInteractorImplProvider;
                        FooterViewModelModule.INSTANCE.getClass();
                        Flags.notificationsFooterViewRefactor();
                        T t4 = (T) Optional.empty();
                        Intrinsics.checkNotNull(t4);
                        return t4;
                    case 929:
                        NotificationSettingsRepository notificationSettingsRepository = (NotificationSettingsRepository) this.referenceSysUIComponentImpl.provideNotificationSettingsRepositoryProvider.get();
                        NotificationSettingsInteractorModule.INSTANCE.getClass();
                        return (T) new NotificationSettingsInteractor(notificationSettingsRepository);
                    case 930:
                        CoroutineScope coroutineScope = (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get();
                        CoroutineDispatcher coroutineDispatcher = (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get();
                        SecureSettingsRepository secureSettingsRepository = (SecureSettingsRepository) this.referenceSysUIComponentImpl.provideSecureSettingsRepositoryProvider.get();
                        NotificationSettingsRepositoryModule.INSTANCE.getClass();
                        return (T) new NotificationSettingsRepository(coroutineScope, coroutineDispatcher, secureSettingsRepository);
                    case 931:
                        ContentResolver contentResolver = (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get();
                        CoroutineDispatcher coroutineDispatcher2 = (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get();
                        int i2 = SecureSettingsRepositoryModule.$r8$clinit;
                        return (T) new SecureSettingsRepositoryImpl(contentResolver, coroutineDispatcher2);
                    case 932:
                        return (T) new NotificationLoggerViewModel((ActiveNotificationsInteractor) this.referenceSysUIComponentImpl.activeNotificationsInteractorProvider.get(), (KeyguardInteractor) this.referenceSysUIComponentImpl.keyguardInteractorProvider.get(), (WindowRootViewVisibilityInteractor) this.referenceSysUIComponentImpl.windowRootViewVisibilityInteractorProvider.get());
                    case 933:
                        return (T) new RemoteInputInteractor((RemoteInputRepository) this.referenceSysUIComponentImpl.remoteInputRepositoryImplProvider.get());
                    case 934:
                        return (T) new RemoteInputRepositoryImpl((NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get());
                    case 935:
                        return (T) new LegacyNotificationIconAreaControllerImpl((SecUnlockedScreenOffAnimationHelper) this.referenceSysUIComponentImpl.secUnlockedScreenOffAnimationHelperProvider.get(), this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotificationMediaManager) this.referenceSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (NotificationListener) this.referenceSysUIComponentImpl.notificationListenerProvider.get(), (DozeParameters) this.referenceSysUIComponentImpl.dozeParametersProvider.get(), (SectionStyleProvider) this.referenceSysUIComponentImpl.sectionStyleProvider.get(), this.referenceSysUIComponentImpl.setBubbles, (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get(), (ScreenOffAnimationController) this.referenceSysUIComponentImpl.screenOffAnimationControllerProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (OngoingCallController) this.referenceSysUIComponentImpl.ongoingCallControllerProvider.get());
                    case 936:
                        return (T) new SectionStyleProvider((HighPriorityProvider) this.referenceSysUIComponentImpl.highPriorityProvider.get());
                    case 937:
                        return (T) new NotificationIconAreaControllerViewBinderWrapperImpl();
                    case 938:
                        return (T) new NotificationStatsLoggerImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (NotificationListenerService) this.referenceSysUIComponentImpl.notificationListenerProvider.get(), (NotificationPanelLogger) this.referenceSysUIComponentImpl.provideNotificationPanelLoggerProvider.get(), (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get());
                    case 939:
                        return (T) new StatusBarIconViewBindingFailureTracker();
                    case 940:
                        return (T) new StatusBarNotificationActivityStarter(this.referenceGlobalRootComponentImpl.context, ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), (NotificationVisibilityProvider) this.referenceSysUIComponentImpl.notificationVisibilityProviderImplProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (NotificationClickNotifier) this.referenceSysUIComponentImpl.notificationClickNotifierProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get(), (IDreamManager) this.referenceGlobalRootComponentImpl.provideIDreamManagerProvider.get(), (Optional) this.referenceSysUIComponentImpl.provideBubblesManagerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.assistManagerProvider), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (StatusBarRemoteInputCallback) this.referenceSysUIComponentImpl.statusBarRemoteInputCallbackProvider.get(), (ActivityIntentHelper) this.referenceSysUIComponentImpl.activityIntentHelperProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), this.referenceSysUIComponentImpl.statusBarNotificationActivityStarterLogger(), (OnUserInteractionCallback) this.referenceSysUIComponentImpl.onUserInteractionCallbackImplProvider.get(), (NotificationPresenter) this.referenceSysUIComponentImpl.statusBarNotificationPresenterProvider.get(), (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (ActivityTransitionAnimator) this.referenceSysUIComponentImpl.provideActivityTransitionAnimatorProvider.get(), (ShadeAnimationInteractor) this.referenceSysUIComponentImpl.provideShadeAnimationInteractorProvider.get(), (NotificationLaunchAnimatorControllerProvider) this.referenceSysUIComponentImpl.provideNotificationTransitionAnimatorControllerProvider.get(), (LaunchFullScreenIntentProvider) this.referenceSysUIComponentImpl.launchFullScreenIntentProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 941:
                        return (T) new StatusBarRemoteInputCallback(this.referenceGlobalRootComponentImpl.context, (GroupExpansionManager) this.referenceSysUIComponentImpl.groupExpansionManagerImplProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), this.referenceSysUIComponentImpl.actionClickLogger(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 942:
                        return (T) new StatusBarNotificationPresenter(this.referenceGlobalRootComponentImpl.context, (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get(), (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get(), (QuickSettingsController) this.referenceSysUIComponentImpl.provideQuickSettingsControllerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (DozeScrimController) this.referenceSysUIComponentImpl.dozeScrimControllerProvider.get(), (NotificationShadeWindowController) this.referenceSysUIComponentImpl.notificationShadeWindowControllerImplProvider.get(), (DynamicPrivacyController) this.referenceSysUIComponentImpl.dynamicPrivacyControllerProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (NotificationAlertsInteractor) this.referenceSysUIComponentImpl.notificationAlertsInteractorProvider.get(), (LockscreenShadeTransitionController) this.referenceSysUIComponentImpl.lockscreenShadeTransitionControllerProvider.get(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (NotificationLockscreenUserManager) this.referenceSysUIComponentImpl.notificationLockscreenUserManagerImplProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (NotifShadeEventSource) this.referenceSysUIComponentImpl.shadeEventCoordinatorProvider.get(), (NotificationMediaManager) this.referenceSysUIComponentImpl.provideNotificationMediaManagerProvider.get(), (NotificationGutsManager) this.referenceSysUIComponentImpl.notificationGutsManagerProvider.get(), (InitController) this.referenceSysUIComponentImpl.initControllerProvider.get(), (VisualInterruptionDecisionProvider) this.referenceSysUIComponentImpl.provideVisualInterruptionDecisionProvider.get(), (NotificationRemoteInputManager) this.referenceSysUIComponentImpl.notificationRemoteInputManagerProvider.get(), (NotificationRemoteInputManager.Callback) this.referenceSysUIComponentImpl.statusBarRemoteInputCallbackProvider.get(), (NotificationListContainer) this.referenceSysUIComponentImpl.provideListContainerProvider.get());
                    case 943:
                        Provider unused5 = this.referenceSysUIComponentImpl.shadeSurfaceImplProvider;
                        Provider provider3 = this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider;
                        int i3 = SceneContainerFlag.$r8$clinit;
                        Flags.sceneContainer();
                        T t5 = (T) ((ShadeSurface) provider3.get());
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 944:
                        return (T) new ShadeSurfaceImpl();
                    case 945:
                        Provider unused6 = this.referenceSysUIComponentImpl.panelExpansionInteractorImplProvider;
                        Provider provider4 = this.referenceSysUIComponentImpl.notificationPanelViewControllerProvider;
                        ShadeModule.Companion.getClass();
                        Flags.sceneContainer();
                        Object obj = provider4.get();
                        Intrinsics.checkNotNull(obj);
                        return (T) ((PanelExpansionInteractor) obj);
                    case 946:
                        return (T) new PanelExpansionInteractorImpl((SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (ShadeAnimationInteractor) this.referenceSysUIComponentImpl.provideShadeAnimationInteractorProvider.get(), (SysuiStatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get());
                    case 947:
                        return (T) new NotificationAlertsInteractor((DisableFlagsRepository) this.referenceSysUIComponentImpl.disableFlagsRepositoryImplProvider.get());
                    case 948:
                        return (T) new ShadeEventCoordinator((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), this.referenceSysUIComponentImpl.shadeEventCoordinatorLogger());
                    case 949:
                        return (T) new InitController();
                    case 950:
                        return (T) new ActivityTransitionAnimator((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
                    case 951:
                        return (T) new NotificationLaunchAnimatorControllerProvider((NotificationLaunchAnimationInteractor) this.referenceSysUIComponentImpl.notificationLaunchAnimationInteractorProvider.get(), (NotificationListContainer) this.referenceSysUIComponentImpl.provideListContainerProvider.get(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get());
                    case 952:
                        return (T) new NotificationLaunchAnimationInteractor((NotificationLaunchAnimationRepository) this.referenceSysUIComponentImpl.notificationLaunchAnimationRepositoryProvider.get());
                    case 953:
                        return (T) new NotificationLaunchAnimationRepository();
                    case 954:
                        return (T) new LaunchFullScreenIntentProvider();
                    case 955:
                        return (T) ((LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get()).create(100, "NotifRenderLog");
                    case 956:
                        return (T) new NotificationTargetsHelper((FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
                    case 957:
                        return (T) new AppLockNotificationControllerImpl(this.referenceGlobalRootComponentImpl.context, (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceSysUIComponentImpl.provideBackgroundExecutorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.notifPipelineProvider));
                    case 958:
                        return (T) new NotificationScrollViewBinder((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get(), (NotificationScrollView) this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider.get(), (NotificationScrollViewModel) this.referenceSysUIComponentImpl.notificationScrollViewModelProvider.get(), this.referenceSysUIComponentImpl.configurationState());
                    case 959:
                        return (T) new NotificationScrollViewModel((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (NotificationStackAppearanceInteractor) this.referenceSysUIComponentImpl.notificationStackAppearanceInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardInteractorProvider));
                    case 960:
                        return (T) new ClockSection((KeyguardClockInteractor) this.referenceSysUIComponentImpl.keyguardClockInteractorProvider.get(), (KeyguardClockViewModel) this.referenceSysUIComponentImpl.keyguardClockViewModelProvider.get(), this.referenceGlobalRootComponentImpl.context, (KeyguardSmartspaceViewModel) this.referenceSysUIComponentImpl.keyguardSmartspaceViewModelProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardBlueprintInteractorProvider), (KeyguardRootViewModel) this.referenceSysUIComponentImpl.keyguardRootViewModelProvider.get());
                    case 961:
                        return (T) new SmartspaceSection(this.referenceGlobalRootComponentImpl.context, (KeyguardClockViewModel) this.referenceSysUIComponentImpl.keyguardClockViewModelProvider.get(), (KeyguardSmartspaceViewModel) this.referenceSysUIComponentImpl.keyguardSmartspaceViewModelProvider.get(), (KeyguardSmartspaceInteractor) this.referenceSysUIComponentImpl.keyguardSmartspaceInteractorProvider.get(), (LockscreenSmartspaceController) this.referenceSysUIComponentImpl.lockscreenSmartspaceControllerProvider.get(), (KeyguardUnlockAnimationController) this.referenceSysUIComponentImpl.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardBlueprintInteractorProvider));
                    case 962:
                        return (T) new SplitShadeKeyguardBlueprint(this.referenceSysUIComponentImpl.accessibilityActionsSection(), this.referenceSysUIComponentImpl.defaultIndicationAreaSection(), this.referenceSysUIComponentImpl.defaultDeviceEntrySection(), this.referenceSysUIComponentImpl.defaultShortcutsSection(), Optional.empty(), this.referenceSysUIComponentImpl.defaultSettingsPopupMenuSection(), this.referenceSysUIComponentImpl.defaultStatusViewSection(), this.referenceSysUIComponentImpl.defaultStatusBarSection(), this.referenceSysUIComponentImpl.splitShadeNotificationStackScrollLayoutSection(), new SplitShadeGuidelines(), this.referenceSysUIComponentImpl.aodNotificationIconsSection(), this.referenceSysUIComponentImpl.aodBurnInSection(), this.referenceSysUIComponentImpl.communalTutorialIndicatorSection(), (ClockSection) this.referenceSysUIComponentImpl.clockSectionProvider.get(), (SmartspaceSection) this.referenceSysUIComponentImpl.smartspaceSectionProvider.get(), this.referenceSysUIComponentImpl.splitShadeMediaSection());
                    case 963:
                        return (T) new ShortcutsBesideUdfpsKeyguardBlueprint(this.referenceSysUIComponentImpl.accessibilityActionsSection(), this.referenceSysUIComponentImpl.alignShortcutsToUdfpsSection(), this.referenceSysUIComponentImpl.defaultIndicationAreaSection(), this.referenceSysUIComponentImpl.defaultDeviceEntrySection(), Optional.empty(), this.referenceSysUIComponentImpl.defaultSettingsPopupMenuSection(), this.referenceSysUIComponentImpl.defaultStatusViewSection(), this.referenceSysUIComponentImpl.defaultStatusBarSection(), this.referenceSysUIComponentImpl.defaultNotificationStackScrollLayoutSection(), this.referenceSysUIComponentImpl.aodNotificationIconsSection(), this.referenceSysUIComponentImpl.aodBurnInSection(), this.referenceSysUIComponentImpl.communalTutorialIndicatorSection(), (ClockSection) this.referenceSysUIComponentImpl.clockSectionProvider.get(), (SmartspaceSection) this.referenceSysUIComponentImpl.smartspaceSectionProvider.get(), this.referenceSysUIComponentImpl.keyguardSliceViewSection(), this.referenceSysUIComponentImpl.defaultUdfpsAccessibilityOverlaySection());
                    case 964:
                        return (T) new ThreadAssert();
                    case 965:
                        return (T) new QuickSettingsScene((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceSysUIComponentImpl.saveableSession(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider), (QuickSettingsSceneViewModel) this.referenceSysUIComponentImpl.quickSettingsSceneViewModelProvider.get(), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), (BatteryMeterViewController.Factory) this.referenceSysUIComponentImpl.factoryProvider27.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQSMediaHostProvider.get());
                    case 966:
                        NotificationsShadeSessionModule.INSTANCE.getClass();
                        return (T) new SessionStorage();
                    case 967:
                        return (T) new QuickSettingsSceneViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (BrightnessMirrorViewModel) this.referenceSysUIComponentImpl.brightnessMirrorViewModelProvider.get(), (ShadeHeaderViewModel) this.referenceSysUIComponentImpl.shadeHeaderViewModelProvider.get(), (QSSceneAdapter) this.referenceSysUIComponentImpl.qSSceneAdapterImplProvider.get(), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get(), (FooterActionsViewModel.Factory) this.referenceSysUIComponentImpl.factoryProvider25.get(), (FooterActionsController) this.referenceSysUIComponentImpl.footerActionsControllerProvider.get(), (SceneBackInteractor) this.referenceSysUIComponentImpl.sceneBackInteractorProvider.get(), (MediaCarouselInteractor) this.referenceSysUIComponentImpl.mediaCarouselInteractorProvider.get());
                    case 968:
                        return (T) new BrightnessMirrorViewModel((BrightnessMirrorShowingInteractor) this.referenceSysUIComponentImpl.brightnessMirrorShowingInteractorProvider.get(), ReferenceGlobalRootComponentImpl.m1003$$Nest$mmainResources(this.referenceGlobalRootComponentImpl), this.referenceSysUIComponentImpl.brightnessSliderControllerFactory());
                    case 969:
                        return (T) new BrightnessMirrorShowingInteractor((BrightnessMirrorShowingRepository) this.referenceSysUIComponentImpl.brightnessMirrorShowingRepositoryProvider.get());
                    case 970:
                        return (T) new BrightnessMirrorShowingRepository();
                    case 971:
                        return (T) new ShadeHeaderViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (MobileIconsInteractor) this.referenceSysUIComponentImpl.mobileIconsInteractorImplProvider.get(), (MobileIconsViewModel) this.referenceSysUIComponentImpl.mobileIconsViewModelProvider.get(), (PrivacyChipInteractor) this.referenceSysUIComponentImpl.privacyChipInteractorProvider.get(), (ShadeHeaderClockInteractor) this.referenceSysUIComponentImpl.shadeHeaderClockInteractorProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get());
                    case 972:
                        return (T) new PrivacyChipInteractor((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (PrivacyChipRepository) this.referenceSysUIComponentImpl.privacyChipRepositoryImplProvider.get(), (PrivacyDialogController) this.referenceSysUIComponentImpl.privacyDialogControllerProvider.get(), (PrivacyDialogControllerV2) this.referenceSysUIComponentImpl.privacyDialogControllerV2Provider.get(), (DeviceProvisionedController) this.referenceSysUIComponentImpl.bindDeviceProvisionedControllerProvider.get());
                    case 973:
                        return (T) new PrivacyChipRepositoryImpl((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (PrivacyConfig) this.referenceSysUIComponentImpl.privacyConfigProvider.get(), (PrivacyItemController) this.referenceSysUIComponentImpl.privacyItemControllerProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get(), (BroadcastDispatcher) this.referenceSysUIComponentImpl.broadcastDispatcherProvider.get(), (SafetyCenterManager) this.referenceGlobalRootComponentImpl.provideSafetyCenterManagerProvider.get());
                    case 974:
                        return (T) new ShadeHeaderClockInteractor((ShadeHeaderClockRepository) this.referenceSysUIComponentImpl.shadeHeaderClockRepositoryProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 975:
                        return (T) new ShadeHeaderClockRepository((NextAlarmController) this.referenceSysUIComponentImpl.nextAlarmControllerImplProvider.get());
                    case 976:
                        return (T) new BatteryMeterViewController.Factory((UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
                    case 977:
                        return (T) new ShadeScene(this.referenceSysUIComponentImpl.saveableSession(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.providesNotificationStackScrollLayoutProvider), (ShadeSceneViewModel) this.referenceSysUIComponentImpl.shadeSceneViewModelProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), (BatteryMeterViewController.Factory) this.referenceSysUIComponentImpl.factoryProvider27.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (MediaCarouselController) this.referenceSysUIComponentImpl.mediaCarouselControllerProvider.get(), (MediaHost) this.referenceSysUIComponentImpl.providesQuickQSMediaHostProvider.get());
                    case 978:
                        return (T) new ShadeSceneViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (QSSceneAdapter) this.referenceSysUIComponentImpl.qSSceneAdapterImplProvider.get(), (ShadeHeaderViewModel) this.referenceSysUIComponentImpl.shadeHeaderViewModelProvider.get(), (NotificationsPlaceholderViewModel) this.referenceSysUIComponentImpl.notificationsPlaceholderViewModelProvider.get(), (BrightnessMirrorViewModel) this.referenceSysUIComponentImpl.brightnessMirrorViewModelProvider.get(), (MediaCarouselInteractor) this.referenceSysUIComponentImpl.mediaCarouselInteractorProvider.get(), (ShadeInteractor) this.referenceSysUIComponentImpl.shadeInteractorImplProvider.get(), (FooterActionsViewModel.Factory) this.referenceSysUIComponentImpl.factoryProvider25.get(), (FooterActionsController) this.referenceSysUIComponentImpl.footerActionsControllerProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get(), (UnfoldTransitionInteractor) this.referenceSysUIComponentImpl.unfoldTransitionInteractorProvider.get());
                    case 979:
                        return (T) new QuickSettingsShadeScene((QuickSettingsShadeSceneViewModel) this.referenceSysUIComponentImpl.quickSettingsShadeSceneViewModelProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.optionalOfLockscreenContentProvider), (ShadeHeaderViewModel) this.referenceSysUIComponentImpl.shadeHeaderViewModelProvider.get(), (TintedIconManager.Factory) this.referenceSysUIComponentImpl.factoryProvider26.get(), (BatteryMeterViewController.Factory) this.referenceSysUIComponentImpl.factoryProvider27.get(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get());
                    case 980:
                        return (T) new QuickSettingsShadeSceneViewModel((OverlayShadeViewModel) this.referenceSysUIComponentImpl.overlayShadeViewModelProvider.get(), (BrightnessSliderViewModel) this.referenceSysUIComponentImpl.brightnessSliderViewModelProvider.get(), (TileGridViewModel) this.referenceSysUIComponentImpl.tileGridViewModelProvider.get(), (EditModeViewModel) this.referenceSysUIComponentImpl.editModeViewModelProvider.get(), (QSSceneAdapter) this.referenceSysUIComponentImpl.qSSceneAdapterImplProvider.get());
                    case 981:
                        return (T) new OverlayShadeViewModel((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (SceneInteractor) this.referenceSysUIComponentImpl.sceneInteractorProvider.get());
                    case 982:
                        return (T) new BrightnessSliderViewModel((ScreenBrightnessInteractor) this.referenceSysUIComponentImpl.screenBrightnessInteractorProvider.get(), (BrightnessPolicyEnforcementInteractor) this.referenceSysUIComponentImpl.brightnessPolicyEnforcementInteractorProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 983:
                        return (T) new ScreenBrightnessInteractor((ScreenBrightnessRepository) this.referenceSysUIComponentImpl.screenBrightnessDisplayManagerRepositoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.providesBrightnessTableLogProvider.get());
                    case 984:
                        return (T) new ScreenBrightnessDisplayManagerRepository(ReferenceGlobalRootComponentImpl.m1001$$Nest$mdisplayIdInteger(this.referenceGlobalRootComponentImpl), (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get(), (LogBuffer) this.referenceSysUIComponentImpl.providesBrightnessLogProvider.get(), (TableLogBuffer) this.referenceSysUIComponentImpl.providesBrightnessTableLogProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get());
                    case 985:
                        LogBufferFactory logBufferFactory = (LogBufferFactory) this.referenceSysUIComponentImpl.logBufferFactoryProvider.get();
                        ScreenBrightnessModule.Companion.getClass();
                        return (T) logBufferFactory.create(50, "BrightnessLog", true);
                    case 986:
                        TableLogBufferFactory tableLogBufferFactory = (TableLogBufferFactory) this.referenceSysUIComponentImpl.tableLogBufferFactoryProvider.get();
                        ScreenBrightnessModule.Companion.getClass();
                        return (T) tableLogBufferFactory.create(50, "BrightnessTableLog");
                    case 987:
                        return (T) new BrightnessPolicyEnforcementInteractor((BrightnessPolicyRepository) this.referenceSysUIComponentImpl.brightnessPolicyRepositoryImplProvider.get(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get());
                    case 988:
                        return (T) new BrightnessPolicyRepositoryImpl((UserRepository) this.referenceSysUIComponentImpl.userRepositoryImplProvider.get(), new UserRestrictionChecker(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.referenceSysUIComponentImpl.bgDispatcherProvider.get());
                    case 989:
                        return (T) new TileGridViewModel((GridLayoutTypeInteractor) this.referenceSysUIComponentImpl.gridLayoutTypeInteractorProvider.get(), this.referenceSysUIComponentImpl.mapOfGridLayoutTypeAndGridLayout(), (CurrentTilesInteractor) this.referenceSysUIComponentImpl.currentTilesInteractorImplProvider.get(), (GridLayout) this.referenceSysUIComponentImpl.partitionedGridLayoutProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
                    case 990:
                        return (T) new GridLayoutTypeInteractor((GridLayoutTypeRepository) this.referenceSysUIComponentImpl.gridLayoutTypeRepositoryImplProvider.get());
                    case 991:
                        return (T) new GridLayoutTypeRepositoryImpl();
                    case 992:
                        return (T) new InfiniteGridLayout((IconTilesViewModel) this.referenceSysUIComponentImpl.iconTilesViewModelImplProvider.get(), (InfiniteGridSizeViewModel) this.referenceSysUIComponentImpl.infiniteGridSizeViewModelImplProvider.get());
                    case 993:
                        return (T) new IconTilesViewModelImpl((IconTilesInteractor) this.referenceSysUIComponentImpl.iconTilesInteractorProvider.get());
                    case 994:
                        return (T) new IconTilesInteractor((IconTilesRepository) this.referenceSysUIComponentImpl.iconTilesRepositoryImplProvider.get());
                    case 995:
                        return (T) new IconTilesRepositoryImpl();
                    case 996:
                        return (T) new InfiniteGridSizeViewModelImpl((InfiniteGridSizeInteractor) this.referenceSysUIComponentImpl.infiniteGridSizeInteractorProvider.get());
                    case 997:
                        return (T) new InfiniteGridSizeInteractor((InfiniteGridSizeRepository) this.referenceSysUIComponentImpl.infiniteGridSizeRepositoryProvider.get());
                    case 998:
                        return (T) new InfiniteGridSizeRepository();
                    case 999:
                        return (T) new StretchedGridLayout((IconTilesViewModel) this.referenceSysUIComponentImpl.iconTilesViewModelImplProvider.get(), (InfiniteGridSizeViewModel) this.referenceSysUIComponentImpl.infiniteGridSizeViewModelImplProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ ReferenceSysUIComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional optional, Optional optional2, Optional optional3, Optional optional4, Optional optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional optional6, Optional optional7, Optional optional8, Optional optional9, Optional optional10, Optional optional11, Optional optional12, Optional optional13, int i) {
            this(referenceGlobalRootComponentImpl, dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
        }

        public final AccessibilityActionsSection accessibilityActionsSection() {
            return new AccessibilityActionsSection(this.referenceGlobalRootComponentImpl.context, accessibilityActionsViewModel());
        }

        public final AccessibilityActionsViewModel accessibilityActionsViewModel() {
            return new AccessibilityActionsViewModel((CommunalInteractor) this.communalInteractorProvider.get(), (KeyguardInteractor) this.keyguardInteractorProvider.get(), (KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get());
        }

        public final AccessibilityLogger accessibilityLogger() {
            return new AccessibilityLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (SystemClock) this.bindSystemClockProvider.get());
        }

        public final AccessibilityRepository accessibilityRepository() {
            AccessibilityManager accessibilityManager = (AccessibilityManager) this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider.get();
            AccessibilityRepositoryModule.INSTANCE.getClass();
            AccessibilityRepository.Companion.getClass();
            return new AccessibilityRepositoryImpl(accessibilityManager);
        }

        public final ActionClickLogger actionClickLogger() {
            return new ActionClickLogger((LogBuffer) this.provideNotifInteractionLogBufferProvider.get());
        }

        public final ActivatableNotificationViewModel activatableNotificationViewModel() {
            AccessibilityInteractor accessibilityInteractor = (AccessibilityInteractor) this.accessibilityInteractorProvider.get();
            ActivatableNotificationViewModelModule.INSTANCE.getClass();
            ActivatableNotificationViewModel.Companion.getClass();
            return new ActivatableNotificationViewModelImpl(accessibilityInteractor);
        }

        public final ActivityLauncher activityLauncher() {
            return new ActivityLauncher((DesktopManager) this.provideDesktopManagerProvider.get(), (DisplayLifecycle) this.displayLifecycleProvider.get(), (KeyguardManager) this.referenceGlobalRootComponentImpl.provideKeyguardManagerProvider.get());
        }

        public final AirplaneModeMapper airplaneModeMapper() {
            return new AirplaneModeMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final AirplaneModeTileDataInteractor airplaneModeTileDataInteractor() {
            return new AirplaneModeTileDataInteractor((AirplaneModeRepository) this.airplaneModeRepositoryImplProvider.get());
        }

        public final AirplaneModeTileUserActionInteractor airplaneModeTileUserActionInteractor() {
            return new AirplaneModeTileUserActionInteractor((AirplaneModeInteractor) this.airplaneModeInteractorProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final AlarmTileDataInteractor alarmTileDataInteractor() {
            return new AlarmTileDataInteractor((NextAlarmController) this.nextAlarmControllerImplProvider.get(), dateFormatUtil());
        }

        public final AlarmTileMapper alarmTileMapper() {
            return new AlarmTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme(), (SystemClock) this.bindSystemClockProvider.get());
        }

        public final AlarmTileUserActionInteractor alarmTileUserActionInteractor() {
            return new AlarmTileUserActionInteractor((QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final NodeController alertingHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesAlertingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController alertingHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesAlertingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final AlignShortcutsToUdfpsSection alignShortcutsToUdfpsSection() {
            return new AlignShortcutsToUdfpsSection(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), keyguardQuickAffordancesCombinedViewModel(), (KeyguardRootViewModel) this.keyguardRootViewModelProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (KeyguardIndicationController) this.provideKeyguardIndicationControllerProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get());
        }

        public final AlternateBouncerMessageAreaViewModel alternateBouncerMessageAreaViewModel() {
            return new AlternateBouncerMessageAreaViewModel((BiometricMessageInteractor) this.biometricMessageInteractorProvider.get(), (AlternateBouncerInteractor) this.alternateBouncerInteractorProvider.get(), (SystemClock) this.bindSystemClockProvider.get());
        }

        public final AlternateBouncerUdfpsIconViewModel alternateBouncerUdfpsIconViewModel() {
            return new AlternateBouncerUdfpsIconViewModel(this.referenceGlobalRootComponentImpl.context, (ConfigurationInteractor) this.configurationInteractorProvider.get(), (DeviceEntryUdfpsInteractor) this.deviceEntryUdfpsInteractorProvider.get(), (DeviceEntryBackgroundViewModel) this.deviceEntryBackgroundViewModelProvider.get(), (FingerprintPropertyInteractor) this.fingerprintPropertyInteractorProvider.get(), (UdfpsOverlayInteractor) this.udfpsOverlayInteractorProvider.get(), alternateBouncerViewModel());
        }

        public final AlternateBouncerViewModel alternateBouncerViewModel() {
            return new AlternateBouncerViewModel((StatusBarKeyguardViewManager) this.provideStatusBarKeyguardViewManagerProvider.get(), (KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get());
        }

        public final AlwaysOnDisplayNotificationIconViewStore alwaysOnDisplayNotificationIconViewStore() {
            return new AlwaysOnDisplayNotificationIconViewStore((NotifCollection) this.notifCollectionProvider.get());
        }

        public final AlwaysOnDisplayNotificationIconsInteractor alwaysOnDisplayNotificationIconsInteractor() {
            return new AlwaysOnDisplayNotificationIconsInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), (DeviceEntryInteractor) this.deviceEntryInteractorProvider.get(), notificationIconsInteractor());
        }

        public final AmbientStatusBarSection ambientStatusBarSection() {
            return new AmbientStatusBarSection(new AmbientStatusBarComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0));
        }

        public final AnimationStatusRepositoryImpl animationStatusRepositoryImpl() {
            return new AnimationStatusRepositoryImpl((ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (Handler) this.provideBgHandlerProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get());
        }

        public final AnnouncementResolver announcementResolver() {
            return new AnnouncementResolver((Messages) this.messagesProvider.get(), (ProfileTypeRepository) this.bindProfileTypeRepositoryProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
        }

        public final AodBurnInSection aodBurnInSection() {
            return new AodBurnInSection(this.referenceGlobalRootComponentImpl.context, (KeyguardRootView) this.providesKeyguardRootViewProvider.get(), (KeyguardClockViewModel) this.keyguardClockViewModelProvider.get());
        }

        public final AodNotificationIconsSection aodNotificationIconsSection() {
            return new AodNotificationIconsSection(this.referenceGlobalRootComponentImpl.context, configurationState(), (StatusBarIconViewBindingFailureTracker) this.statusBarIconViewBindingFailureTrackerProvider.get(), (NotificationIconContainerAlwaysOnDisplayViewModel) this.notificationIconContainerAlwaysOnDisplayViewModelProvider.get(), alwaysOnDisplayNotificationIconViewStore(), notificationIconAreaController(), systemBarUtilsState(), (KeyguardRootViewModel) this.keyguardRootViewModelProvider.get());
        }

        public final Object appClipsViewModelFactory() {
            return new AppClipsViewModel.Factory((AppClipsCrossProcessHelper) this.appClipsCrossProcessHelperProvider.get(), imageExporter(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final AppControlActionInteractor appControlActionInteractor() {
            return new AppControlActionInteractor(this.referenceGlobalRootComponentImpl.context, (AppController) this.appControllerProvider.get(), new MWBixbyController());
        }

        public final AssistantAttentionCallback assistantAttentionCallback() {
            return new AssistantAttentionCallback((DreamOverlayStateController) this.dreamOverlayStateControllerProvider.get());
        }

        public final AssistantAttentionCondition assistantAttentionCondition() {
            return new AssistantAttentionCondition((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (AssistManager) this.assistManagerProvider.get());
        }

        public final AsyncActivityLauncher asyncActivityLauncher() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new AsyncActivityLauncher(referenceGlobalRootComponentImpl.context, (IActivityTaskManager) referenceGlobalRootComponentImpl.provideIActivityTaskManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
        }

        public final AuracastDeviceController auracastDeviceController() {
            return new AuracastDeviceController((AudioManager) this.referenceGlobalRootComponentImpl.provideAudioManagerProvider.get(), (LocalBluetoothManager) this.provideLocalBluetoothControllerProvider.get());
        }

        public final AuthDialogPanelInteractionDetector authDialogPanelInteractionDetector() {
            return new AuthDialogPanelInteractionDetector((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), DoubleCheck.lazy(this.shadeInteractorImplProvider));
        }

        public final AuthorizedPanelsRepositoryImpl authorizedPanelsRepositoryImpl() {
            return new AuthorizedPanelsRepositoryImpl(this.referenceGlobalRootComponentImpl.context, (UserFileManager) this.userFileManagerImplProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final BTTetherUiAdapter bTTetherUiAdapter() {
            return new BTTetherUiAdapter((StatusBarIconController) this.statusBarIconControllerImplProvider.get(), (ConnectivityRepository) this.connectivityRepositoryImplProvider.get());
        }

        public final BackPanelController.Factory backPanelControllerFactory() {
            return new BackPanelController.Factory((WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (ViewConfiguration) this.referenceGlobalRootComponentImpl.provideViewConfigurationProvider.get(), (UiThreadContext) this.provideBackPanelUiThreadContextProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get());
        }

        public final BatterySaverTileDataInteractor batterySaverTileDataInteractor() {
            return new BatterySaverTileDataInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), (BatteryController) this.provideBatteryControllerProvider.get());
        }

        public final BatterySaverTileMapper batterySaverTileMapper() {
            return new BatterySaverTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final BatterySaverTileUserActionInteractor batterySaverTileUserActionInteractor() {
            return new BatterySaverTileUserActionInteractor((QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get(), (BatteryController) this.provideBatteryControllerProvider.get());
        }

        public final BatteryStateNotifier batteryStateNotifier() {
            return new BatteryStateNotifier((BatteryController) this.provideBatteryControllerProvider.get(), (NotificationManager) this.referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get(), (DelayableExecutor) this.provideBackgroundDelayableExecutorProvider.get(), this.referenceGlobalRootComponentImpl.context);
        }

        public final BluetoothAdapterWrapper bluetoothAdapterWrapper() {
            return new BluetoothAdapterWrapper(this.referenceGlobalRootComponentImpl.context);
        }

        public final BluetoothDialogDelegate bluetoothDialogDelegate() {
            return new BluetoothDialogDelegate((SystemUIDialog.Factory) this.factoryProvider8.get());
        }

        public final BottomAreaSection bottomAreaSection() {
            return new BottomAreaSection(keyguardQuickAffordancesCombinedViewModel(), (FalsingManager) this.falsingManagerProxyProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), (KeyguardIndicationController) this.provideKeyguardIndicationControllerProvider.get(), keyguardIndicationAreaViewModel());
        }

        public final BouncerScrimController bouncerScrimController() {
            return new BouncerScrimController((StatusBarKeyguardViewManager) this.provideStatusBarKeyguardViewManagerProvider.get());
        }

        public final BouncerToGoneFlows bouncerToGoneFlows() {
            return new BouncerToGoneFlows((SysuiStatusBarStateController) this.statusBarStateControllerImplProvider.get(), (PrimaryBouncerInteractor) this.primaryBouncerInteractorProvider.get(), DoubleCheck.lazy(this.keyguardDismissActionInteractorProvider), (ShadeInteractor) this.shadeInteractorImplProvider.get(), (KeyguardTransitionAnimationFlow) this.keyguardTransitionAnimationFlowProvider.get());
        }

        public final BrightnessSliderController.Factory brightnessSliderControllerFactory() {
            return new BrightnessSliderController.Factory((FalsingManager) this.falsingManagerProxyProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final BroadcastDispatcherLogger broadcastDispatcherLogger() {
            return new BroadcastDispatcherLogger((LogBuffer) this.provideBroadcastDispatcherLogBufferProvider.get());
        }

        public final BroadcastReceiverManager broadcastReceiverManager() {
            return new BroadcastReceiverManager(this.referenceGlobalRootComponentImpl.context, (LogWrapper) this.provideVolumeLogWrapperProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get());
        }

        public final ThresholdSensorImpl.BuilderFactory builderFactory() {
            return ThresholdSensorImpl_BuilderFactory_Factory.newInstance(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (AsyncSensorManager) this.asyncSensorManagerProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get());
        }

        public final CameraIntentsWrapper cameraIntentsWrapper() {
            return new CameraIntentsWrapper(this.referenceGlobalRootComponentImpl.context);
        }

        public final CameraProtectionLoaderImpl cameraProtectionLoaderImpl() {
            return new CameraProtectionLoaderImpl(this.referenceGlobalRootComponentImpl.context);
        }

        public final CarrierHomeLogoViewController.Factory carrierHomeLogoViewControllerFactory() {
            return new CarrierHomeLogoViewController.Factory((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (DarkIconDispatcher) this.darkIconDispatcherImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SettingsHelper) this.settingsHelperProvider.get(), (SlimIndicatorViewMediator) this.slimIndicatorViewMediatorImplProvider.get(), (SimCardInfoUtil) this.simCardInfoUtilProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.indicatorScaleGardenerProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (CarrierConfigTracker) this.carrierConfigTrackerProvider.get(), (DeviceProvisionedController) this.bindDeviceProvisionedControllerProvider.get());
        }

        public final CarrierTextManager.Builder carrierTextManagerBuilder() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            return new CarrierTextManager.Builder(context, FrameworkServicesModule_ProvideResourcesFactory.provideResources(context), (WifiRepository) this.wifiRepositorySwitcherProvider.get(), (DeviceBasedSatelliteViewModel) this.deviceBasedSatelliteViewModelImplProvider.get(), (JavaAdapter) this.javaAdapterProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (TelephonyListenerManager) this.telephonyListenerManagerProvider.get(), (CarrierTextUtil) this.carrierTextUtilProvider.get(), (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (SubscriptionsOrder) this.subscriptionsOrderProvider.get(), carrierTextManagerLogger(), (SettingsHelper) this.settingsHelperProvider.get(), (WifiTextManager) this.wifiTextManagerProvider.get());
        }

        public final CarrierTextManagerLogger carrierTextManagerLogger() {
            return new CarrierTextManagerLogger((LogBuffer) this.provideCarrierTextManagerLogProvider.get());
        }

        public final ClipboardImageLoader clipboardImageLoader() {
            return new ClipboardImageLoader(this.referenceGlobalRootComponentImpl.context, (CoroutineDispatcher) this.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
        }

        public final Object clipboardOverlayUtils() {
            return new ClipboardOverlayUtils((TextClassificationManager) this.referenceGlobalRootComponentImpl.provideTextClassificationManagerProvider.get());
        }

        public final ClipboardOverlayView clipboardOverlayView() {
            Context overlayWindowContextContext = overlayWindowContextContext();
            Flags.screenshotShelfUi2();
            ClipboardOverlayView clipboardOverlayView = (ClipboardOverlayView) LayoutInflater.from(overlayWindowContextContext).inflate(R.layout.clipboard_overlay2, (ViewGroup) null);
            Preconditions.checkNotNullFromProvides(clipboardOverlayView);
            return clipboardOverlayView;
        }

        public final ClipboardOverlayWindow clipboardOverlayWindow() {
            return new ClipboardOverlayWindow(overlayWindowContextContext());
        }

        public final Object clipboardToast() {
            return new ClipboardToast(this.referenceGlobalRootComponentImpl.context);
        }

        public final ClipboardTransitionExecutor clipboardTransitionExecutor() {
            return new ClipboardTransitionExecutor(this.referenceGlobalRootComponentImpl.context, (DisplayTracker) this.provideDisplayTrackerProvider.get());
        }

        public final ClockEventController clockEventController() {
            KeyguardInteractor keyguardInteractor = (KeyguardInteractor) this.keyguardInteractorProvider.get();
            KeyguardTransitionInteractor keyguardTransitionInteractor = (KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get();
            BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.broadcastDispatcherProvider.get();
            BatteryController batteryController = (BatteryController) this.provideBatteryControllerProvider.get();
            KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get();
            ConfigurationController configurationController = (ConfigurationController) this.configurationControllerImplProvider.get();
            Resources displaySpecificResources = displaySpecificResources();
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new ClockEventController(keyguardInteractor, keyguardTransitionInteractor, broadcastDispatcher, batteryController, keyguardUpdateMonitor, configurationController, displaySpecificResources, referenceGlobalRootComponentImpl.context, (DelayableExecutor) referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), clockMessageBuffers(), (FeatureFlagsClassic) this.featureFlagsClassicReleaseProvider.get(), (ZenModeController) this.zenModeControllerImplProvider.get());
        }

        public final ClockMessageBuffers clockMessageBuffers() {
            return new ClockMessageBuffers((LogBuffer) this.provideKeyguardClockLogProvider.get(), (LogBuffer) this.provideKeyguardSmallClockLogProvider.get(), (LogBuffer) this.provideKeyguardLargeClockLogProvider.get());
        }

        public final CollapsedStatusBarFragmentLogger collapsedStatusBarFragmentLogger() {
            return new CollapsedStatusBarFragmentLogger((LogBuffer) this.provideCollapsedSbFragmentLogBufferProvider.get(), (DisableFlagsLogger) this.disableFlagsLoggerProvider.get());
        }

        public final ColorCorrectionTileDataInteractor colorCorrectionTileDataInteractor() {
            return new ColorCorrectionTileDataInteractor((ColorCorrectionRepository) this.colorCorrectionRepositoryImplProvider.get());
        }

        public final ColorCorrectionTileMapper colorCorrectionTileMapper() {
            return new ColorCorrectionTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final ColorCorrectionUserActionInteractor colorCorrectionUserActionInteractor() {
            return new ColorCorrectionUserActionInteractor((ColorCorrectionRepository) this.colorCorrectionRepositoryImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final ColorInversionTileDataInteractor colorInversionTileDataInteractor() {
            return new ColorInversionTileDataInteractor((ColorInversionRepository) this.colorInversionRepositoryImplProvider.get());
        }

        public final ColorInversionTileMapper colorInversionTileMapper() {
            return new ColorInversionTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final ColorInversionUserActionInteractor colorInversionUserActionInteractor() {
            return new ColorInversionUserActionInteractor((ColorInversionRepository) this.colorInversionRepositoryImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final CommunalBlueprint communalBlueprint() {
            return new CommunalBlueprint((LockscreenContentViewModel) this.lockscreenContentViewModelProvider.get());
        }

        public final CommunalContent communalContent() {
            return new CommunalContent((CommunalViewModel) this.communalViewModelProvider.get(), smartspaceInteractionHandler(), systemUIDialogFactory(), lockSection(), ambientStatusBarSection());
        }

        public final CommunalTutorialIndicatorSection communalTutorialIndicatorSection() {
            return new CommunalTutorialIndicatorSection(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), communalTutorialIndicatorViewModel(), (CommunalInteractor) this.communalInteractorProvider.get());
        }

        public final CommunalTutorialIndicatorViewModel communalTutorialIndicatorViewModel() {
            return new CommunalTutorialIndicatorViewModel((CommunalTutorialInteractor) this.communalTutorialInteractorProvider.get(), (KeyguardBottomAreaInteractor) this.keyguardBottomAreaInteractorProvider.get());
        }

        public final ConditionalRestarter conditionalRestarter() {
            SystemExitRestarter systemExitRestarter = systemExitRestarter();
            Set<ConditionalRestarter.Condition> ofCondition = setOfCondition();
            FlagsModule.Companion.getClass();
            return new ConditionalRestarter(systemExitRestarter, ofCondition, 30L, (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineContext) this.bgCoroutineContextProvider.get());
        }

        public final ConfigurationState configurationState() {
            return new ConfigurationState((ConfigurationController) this.configurationControllerImplProvider.get(), (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get());
        }

        public final ControlsUtil controlsUtil() {
            return new ControlsUtil((KeyguardStateController) this.keyguardStateControllerImplProvider.get());
        }

        public final ConversationNotificationProcessor conversationNotificationProcessor() {
            return new ConversationNotificationProcessor((LauncherApps) this.referenceGlobalRootComponentImpl.provideLauncherAppsProvider.get(), (ConversationNotificationManager) this.conversationNotificationManagerProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Dependency createDependency() {
            return (Dependency) this.dependencyProvider2.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final DumpManager createDumpManager() {
            return (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
        }

        public final InjectionInflationController.ViewInstanceCreator.Factory createViewInstanceCreatorFactory() {
            return new ViewInstanceCreatorFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0);
        }

        public final CustomTileAddedRepository customTileAddedRepository() {
            QSTileHost qSTileHost = (QSTileHost) this.qSTileHostProvider.get();
            QSHostModule.Companion.getClass();
            Flags.qsNewPipeline();
            return qSTileHost;
        }

        public final CustomTileStatePersisterImpl customTileStatePersisterImpl() {
            return new CustomTileStatePersisterImpl(this.referenceGlobalRootComponentImpl.context);
        }

        public final DarkIconInteractor darkIconInteractor() {
            return new DarkIconInteractor((DarkIconRepository) this.darkIconRepositoryImplProvider.get());
        }

        public final DataConnectionViewModel dataConnectionViewModel() {
            return new DataConnectionViewModel(this.referenceGlobalRootComponentImpl.context, popupUIToastWrapper(), (LogWrapper) this.providesPopupUILogWrapperProvider.get(), popupUIIntentWrapper(), new PopupUIUtil(), popupUIAlertDialogFactory());
        }

        public final DataSaverTileDataInteractor dataSaverTileDataInteractor() {
            return new DataSaverTileDataInteractor((DataSaverController) this.provideDataSaverControllerProvider.get());
        }

        public final DataSaverTileMapper dataSaverTileMapper() {
            return new DataSaverTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final DataSaverTileUserActionInteractor dataSaverTileUserActionInteractor() {
            return new DataSaverTileUserActionInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (CoroutineContext) this.bgCoroutineContextProvider.get(), (DataSaverController) this.provideDataSaverControllerProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get(), (SystemUIDialog.Factory) this.factoryProvider8.get(), (UserFileManager) this.userFileManagerImplProvider.get());
        }

        public final DateFormatUtil dateFormatUtil() {
            return new DateFormatUtil(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final DdmHandleMotionTool ddmHandleMotionTool() {
            return MotionToolModule_Companion_ProvideDdmHandleMotionToolFactory.provideDdmHandleMotionTool(motionToolManager());
        }

        public final DefaultBlueprint defaultBlueprint() {
            return new DefaultBlueprint((LockscreenContentViewModel) this.lockscreenContentViewModelProvider.get(), statusBarSection(), lockSection(), Optional.empty(), bottomAreaSection(), settingsMenuSection(), topAreaSection(), (NotificationSection) this.notificationSectionProvider.get());
        }

        public final DefaultClockSection defaultClockSection() {
            return new DefaultClockSection((KeyguardClockViewModel) this.keyguardClockViewModelProvider.get(), (AodBurnInViewModel) this.aodBurnInViewModelProvider.get());
        }

        public final DefaultDeviceEntrySection defaultDeviceEntrySection() {
            return new DefaultDeviceEntrySection((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (AuthController) this.authControllerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), this.referenceGlobalRootComponentImpl.context, (NotificationPanelView) this.providesNotificationPanelViewProvider.get(), (FeatureFlags) this.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.provideLockIconViewControllerProvider), DoubleCheck.lazy(this.deviceEntryIconViewModelProvider), DoubleCheck.lazy(this.deviceEntryForegroundViewModelProvider), DoubleCheck.lazy(this.deviceEntryBackgroundViewModelProvider), DoubleCheck.lazy(this.falsingManagerProxyProvider), DoubleCheck.lazy(this.vibratorHelperProvider));
        }

        public final DefaultIndicationAreaSection defaultIndicationAreaSection() {
            return new DefaultIndicationAreaSection(this.referenceGlobalRootComponentImpl.context, keyguardIndicationAreaViewModel(), (KeyguardIndicationController) this.provideKeyguardIndicationControllerProvider.get());
        }

        public final DefaultNotificationStackScrollLayoutSection defaultNotificationStackScrollLayoutSection() {
            return new DefaultNotificationStackScrollLayoutSection(this.referenceGlobalRootComponentImpl.context, (NotificationPanelView) this.providesNotificationPanelViewProvider.get(), (SharedNotificationContainer) this.providesSharedNotificationContainerProvider.get(), (SharedNotificationContainerViewModel) this.sharedNotificationContainerViewModelProvider.get(), (SharedNotificationContainerBinder) this.sharedNotificationContainerBinderProvider.get(), DoubleCheck.lazy(this.largeScreenHeaderHelperProvider));
        }

        public final DefaultSettingsPopupMenuSection defaultSettingsPopupMenuSection() {
            return new DefaultSettingsPopupMenuSection(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), keyguardSettingsMenuViewModel(), (KeyguardLongPressViewModel) this.keyguardLongPressViewModelProvider.get(), (KeyguardRootViewModel) this.keyguardRootViewModelProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final DefaultShortcutsSection defaultShortcutsSection() {
            return new DefaultShortcutsSection(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), keyguardQuickAffordancesCombinedViewModel(), (KeyguardRootViewModel) this.keyguardRootViewModelProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (KeyguardIndicationController) this.provideKeyguardIndicationControllerProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), DoubleCheck.lazy(this.keyguardBlueprintInteractorProvider));
        }

        public final DefaultStatusBarSection defaultStatusBarSection() {
            return new DefaultStatusBarSection(this.referenceGlobalRootComponentImpl.context, (NotificationPanelView) this.providesNotificationPanelViewProvider.get(), new KeyguardStatusBarViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0));
        }

        public final DefaultStatusViewSection defaultStatusViewSection() {
            return new DefaultStatusViewSection(this.referenceGlobalRootComponentImpl.context, (NotificationPanelView) this.providesNotificationPanelViewProvider.get(), new KeyguardStatusViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0), DoubleCheck.lazy(this.keyguardViewConfiguratorProvider), DoubleCheck.lazy(this.notificationPanelViewControllerProvider), (KeyguardMediaController) this.keyguardMediaControllerProvider.get(), (SplitShadeStateController) this.splitShadeStateControllerImplProvider.get());
        }

        public final DefaultUdfpsAccessibilityOverlaySection defaultUdfpsAccessibilityOverlaySection() {
            return new DefaultUdfpsAccessibilityOverlaySection(this.referenceGlobalRootComponentImpl.context, deviceEntryUdfpsAccessibilityOverlayViewModel());
        }

        public final DefaultWidgetPopulation defaultWidgetPopulation() {
            return new DefaultWidgetPopulation((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), (CommunalWidgetHost) this.provideCommunalWidgetHostProvider.get(), this.provideCommunalWidgetDaoProvider, namedStringArray2(), (LogBuffer) this.provideCommunalLogBufferProvider.get());
        }

        public final DemoMobileConnectionsRepository demoMobileConnectionsRepository() {
            return new DemoMobileConnectionsRepository((DemoModeMobileConnectionDataSource) this.demoModeMobileConnectionDataSourceProvider.get(), (DemoModeWifiDataSource) this.demoModeWifiDataSourceProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), this.referenceGlobalRootComponentImpl.context, (TableLogBufferFactory) this.tableLogBufferFactoryProvider.get());
        }

        public final DemoWifiRepository demoWifiRepository() {
            return new DemoWifiRepository((DemoModeWifiDataSource) this.demoModeWifiDataSourceProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
        }

        public final DeviceControlActionInteractor deviceControlActionInteractor() {
            return new DeviceControlActionInteractor(this.referenceGlobalRootComponentImpl.context, (DeviceController) this.deviceControllerProvider.get());
        }

        public final DeviceEntryUdfpsAccessibilityOverlayViewModel deviceEntryUdfpsAccessibilityOverlayViewModel() {
            return new DeviceEntryUdfpsAccessibilityOverlayViewModel((UdfpsOverlayInteractor) this.udfpsOverlayInteractorProvider.get(), (AccessibilityInteractor) this.accessibilityInteractorProvider.get(), (DeviceEntryIconViewModel) this.deviceEntryIconViewModelProvider.get(), (DeviceEntryForegroundViewModel) this.deviceEntryForegroundViewModelProvider.get());
        }

        public final DeviceProvisioningRepositoryImpl deviceProvisioningRepositoryImpl() {
            return new DeviceProvisioningRepositoryImpl((DeviceProvisionedController) this.bindDeviceProvisionedControllerProvider.get());
        }

        public final Object deviceStateHelper() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new KeyguardDisplayManager.DeviceStateHelper(referenceGlobalRootComponentImpl.context, (DeviceStateManager) referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
        }

        public final DeviceStateManagerWrapper deviceStateManagerWrapper() {
            return new DeviceStateManagerWrapper(this.referenceGlobalRootComponentImpl.context);
        }

        public final com.android.systemui.display.data.repository.DeviceStateRepositoryImpl deviceStateRepositoryImpl() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new com.android.systemui.display.data.repository.DeviceStateRepositoryImpl(referenceGlobalRootComponentImpl.context, (DeviceStateManager) referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (CoroutineScope) this.bgApplicationScopeProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final DeviceStateRotationLockSettingControllerLogger deviceStateRotationLockSettingControllerLogger() {
            return new DeviceStateRotationLockSettingControllerLogger((LogBuffer) this.provideDeviceStateAutoRotationLogBufferProvider.get(), this.referenceGlobalRootComponentImpl.context);
        }

        public final Object diagonalClassifier() {
            return new DiagonalClassifier((FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        public final Context displaySpecificContext() {
            return KeyguardDisplayModule_Companion_GetDisplayContextFactory.getDisplayContext(this.referenceGlobalRootComponentImpl.context, Optional.empty());
        }

        public final Resources displaySpecificResources() {
            Context displaySpecificContext = displaySpecificContext();
            KeyguardDisplayModule.Companion.getClass();
            return displaySpecificContext.getResources();
        }

        public final DisplaySwitchNotificationsHiderTracker displaySwitchNotificationsHiderTracker() {
            return new DisplaySwitchNotificationsHiderTracker((ShadeInteractor) this.shadeInteractorImplProvider.get(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get());
        }

        public final Object distanceClassifier() {
            return new DistanceClassifier((FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        public final DoubleTapClassifier doubleTapClassifier() {
            return new DoubleTapClassifier((FalsingDataProvider) this.falsingDataProvider.get(), singleTapClassifier(), namedFloat3(), 1200L);
        }

        public final DozeLogger dozeLogger() {
            return new DozeLogger((LogBuffer) this.provideDozeLogBufferProvider.get());
        }

        public final DreamCondition dreamCondition() {
            return new DreamCondition((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), dreamManager(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get());
        }

        public final DreamManager dreamManager() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            LowLightDreamModule.INSTANCE.getClass();
            Object systemService = context.getSystemService((Class<Object>) DreamManager.class);
            if (systemService != null) {
                return (DreamManager) systemService;
            }
            throw new IllegalArgumentException("Required value was null.".toString());
        }

        public final DreamStatusBarStateCallback dreamStatusBarStateCallback() {
            return new DreamStatusBarStateCallback((SysuiStatusBarStateController) this.statusBarStateControllerImplProvider.get());
        }

        public final DummyMobileConnectionRepository.Factory dummyMobileConnectionRepositoryFactory() {
            return new DummyMobileConnectionRepository.Factory((BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (MobileInputLogger) this.mobileInputLoggerProvider.get(), (CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get());
        }

        public final DumpHandler dumpHandler() {
            return new DumpHandler((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (LogBufferEulogizer) this.logBufferEulogizerProvider.get(), (SystemUIConfigDumpable) this.systemUIConfigDumpableProvider.get());
        }

        public final DumpUtils dumpUtils() {
            return new DumpUtils(this.referenceGlobalRootComponentImpl.context);
        }

        public final EdgeBackGestureHandler.Factory edgeBackGestureHandlerFactory() {
            return new EdgeBackGestureHandler.Factory((OverviewProxyService) this.overviewProxyServiceProvider.get(), (SysUiState) this.provideSysUiStateProvider.get(), (PluginManager) this.referenceGlobalRootComponentImpl.providesPluginManagerProvider.get(), (UiThreadContext) this.provideBackPanelUiThreadContextProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (Handler) this.provideBgHandlerProvider.get(), (UserTracker) this.provideUserTrackerProvider.get(), (NavigationModeController) this.navigationModeControllerProvider.get(), backPanelControllerFactory(), (ViewConfiguration) this.referenceGlobalRootComponentImpl.provideViewConfigurationProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (InputManager) this.referenceGlobalRootComponentImpl.provideInputManagerProvider.get(), this.setPip, this.setDesktopMode, (FalsingManager) this.falsingManagerProxyProvider.get(), this.providsBackGestureTfClassifierProvider, this.lightBarControllerProvider);
        }

        public final EditWidgetsActivityStarterImpl editWidgetsActivityStarterImpl() {
            return new EditWidgetsActivityStarterImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final EmergencyButtonController.Factory emergencyButtonControllerFactory() {
            return new EmergencyButtonController.Factory((ConfigurationController) this.configurationControllerImplProvider.get(), (InputMethodManager) this.referenceGlobalRootComponentImpl.provideInputMethodManagerProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (PowerManager) this.referenceGlobalRootComponentImpl.providePowerManagerProvider.get(), (ActivityTaskManager) this.referenceGlobalRootComponentImpl.provideActivityTaskManagerProvider.get(), (ShadeController) this.provideShadeControllerProvider.get(), (TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (LockPatternUtils) this.referenceGlobalRootComponentImpl.provideLockPatternUtilsProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (SelectedUserInteractor) this.selectedUserInteractorProvider.get());
        }

        public final EmergencyDialerIntentFactory emergencyDialerIntentFactory() {
            TelecomManager telecomManager = (TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get();
            BouncerInteractorModule.INSTANCE.getClass();
            return new BouncerInteractorModule$emergencyDialerIntentFactory$1(telecomManager);
        }

        public final EmergencyGestureModule.EmergencyGestureIntentFactory emergencyGestureIntentFactory() {
            PackageManager packageManager = (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get();
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            EmergencyGestureModule.INSTANCE.getClass();
            return new EmergencyGestureModule$emergencyGestureIntentFactory$1(packageManager, provideResources);
        }

        public final EuiccManager euiccManager() {
            BouncerInteractorModule bouncerInteractorModule = BouncerInteractorModule.INSTANCE;
            Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
            bouncerInteractorModule.getClass();
            return (EuiccManager) context.getSystemService("euicc");
        }

        public final GuestResetOrExitSessionReceiver.ExitSessionDialogFactory exitSessionDialogFactory() {
            return new GuestResetOrExitSessionReceiver.ExitSessionDialogFactory((SystemUIDialog.Factory) this.factoryProvider8.get(), (GuestResetOrExitSessionReceiver.ExitSessionDialogClickListener.Factory) this.factoryProvider15.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
        }

        public final NotificationLogger.ExpansionStateLogger expansionStateLogger() {
            return new NotificationLogger.ExpansionStateLogger((Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get());
        }

        public final NodeController favoriteHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesFavoriteHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController favoriteHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesFavoriteHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final FlashlightMapper flashlightMapper() {
            return new FlashlightMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final FlashlightTileDataInteractor flashlightTileDataInteractor() {
            return new FlashlightTileDataInteractor((FlashlightController) this.flashlightControllerImplProvider.get());
        }

        public final FlashlightTileUserActionInteractor flashlightTileUserActionInteractor() {
            return new FlashlightTileUserActionInteractor((FlashlightController) this.flashlightControllerImplProvider.get());
        }

        public final FontScalingTileMapper fontScalingTileMapper() {
            return new FontScalingTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final FontScalingTileUserActionInteractor fontScalingTileUserActionInteractor() {
            return new FontScalingTileUserActionInteractor((CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get(), this.fontScalingDialogDelegateProvider, (KeyguardStateController) this.keyguardStateControllerImplProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final FullMobileConnectionRepository.Factory fullMobileConnectionRepositoryFactory() {
            return new FullMobileConnectionRepository.Factory((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (TableLogBufferFactory) this.tableLogBufferFactoryProvider.get(), mobileConnectionRepositoryImplFactory(), (CarrierMergedConnectionRepository.Factory) this.factoryProvider2.get(), dummyMobileConnectionRepositoryFactory());
        }

        public final Function<Integer, KeyguardSecurityModel.SecurityMode> functionOfIntegerAndSecurityMode() {
            final KeyguardSecurityModel keyguardSecurityModel = (KeyguardSecurityModel) this.keyguardSecurityModelProvider.get();
            AuthenticationModule.INSTANCE.getClass();
            return new Function() { // from class: com.android.systemui.authentication.AuthenticationModule$getSecurityMode$1
                @Override // java.util.function.Function
                public final Object apply(Object obj) {
                    return KeyguardSecurityModel.this.getSecurityMode(((Number) obj).intValue());
                }
            };
        }

        public final GestureHintAnimator.Factory gestureHintAnimatorFactory() {
            return new GestureHintAnimator.Factory((LogWrapper) this.providesNavBarLoggerProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final ConfigurationController getConfigurationController() {
            return (ConfigurationController) this.configurationControllerImplProvider.get();
        }

        public final ContextComponentHelper getContextComponentHelper() {
            return (ContextComponentHelper) this.contextComponentResolverProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final InitController getInitController() {
            return (InitController) this.initControllerProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, javax.inject.Provider> getPerUserStartables() {
            return Collections.singletonMap(NotificationChannels.class, this.notificationChannelsProvider);
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, javax.inject.Provider> getPostStartables() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(24);
            newMapBuilder.contributions.put(BiometricNotificationService.class, this.biometricNotificationServiceProvider);
            newMapBuilder.contributions.put(ClipboardListener.class, this.clipboardListenerProvider);
            newMapBuilder.contributions.put(GlobalActionsComponent.class, this.globalActionsComponentProvider);
            newMapBuilder.contributions.put(InstantAppNotifier.class, this.instantAppNotifierProvider);
            newMapBuilder.contributions.put(KeyboardUI.class, this.keyboardUIProvider);
            newMapBuilder.contributions.put(LatencyTester.class, this.latencyTesterProvider);
            newMapBuilder.contributions.put(RingtonePlayer.class, this.ringtonePlayerProvider);
            newMapBuilder.contributions.put(SessionTracker.class, this.sessionTrackerProvider);
            newMapBuilder.contributions.put(ShortcutKeyDispatcher.class, this.shortcutKeyDispatcherProvider);
            newMapBuilder.contributions.put(StorageNotification.class, this.storageNotificationProvider);
            newMapBuilder.contributions.put(ThemeOverlayController.class, this.themeOverlayControllerProvider);
            newMapBuilder.contributions.put(MediaOutputSwitcherDialogUI.class, this.mediaOutputSwitcherDialogUIProvider);
            newMapBuilder.contributions.put(PopupUI.class, this.popupUIProvider);
            newMapBuilder.contributions.put(MediaTttSenderCoordinator.class, this.mediaTttSenderCoordinatorProvider);
            newMapBuilder.contributions.put(MediaTttChipControllerReceiver.class, this.mediaTttChipControllerReceiverProvider);
            newMapBuilder.contributions.put(MediaTttCommandLineHelper.class, this.mediaTttCommandLineHelperProvider);
            newMapBuilder.contributions.put(ChipbarCoordinator.class, this.chipbarCoordinatorProvider);
            newMapBuilder.contributions.put(StylusUsiPowerStartable.class, this.stylusUsiPowerStartableProvider);
            newMapBuilder.contributions.put(PhysicalKeyboardCoreStartable.class, this.physicalKeyboardCoreStartableProvider);
            newMapBuilder.contributions.put(MuteQuickAffordanceCoreStartable.class, this.muteQuickAffordanceCoreStartableProvider);
            newMapBuilder.contributions.put(DreamMonitor.class, this.dreamMonitorProvider);
            newMapBuilder.contributions.put(AssistantAttentionMonitor.class, this.assistantAttentionMonitorProvider);
            newMapBuilder.contributions.put(FlexModePanel.class, this.flexModePanelProvider);
            newMapBuilder.contributions.put(ScreenDecorationsController.class, this.screenDecorationsControllerProvider);
            return newMapBuilder.build();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, javax.inject.Provider> getPreStartables() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(5);
            newMapBuilder.contributions.put(KeyguardBiometricLockoutLogger.class, this.keyguardBiometricLockoutLoggerProvider);
            newMapBuilder.contributions.put(KeyguardViewMediator.class, this.newKeyguardViewMediatorProvider);
            newMapBuilder.contributions.put(SliceBroadcastRelayHandler.class, this.sliceBroadcastRelayHandlerProvider);
            newMapBuilder.contributions.put(WMShell.class, this.wMShellProvider);
            newMapBuilder.contributions.put(VendorServices.class, this.secVendorServicesProvider);
            return newMapBuilder.build();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, javax.inject.Provider> getSafeUIStartables() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(3);
            newMapBuilder.contributions.put(SafeUIStatusBarWindowController.class, this.safeUIStatusBarWindowControllerProvider);
            newMapBuilder.contributions.put(KeyguardViewMediator.class, this.newKeyguardViewMediatorProvider);
            newMapBuilder.contributions.put(SafeUINavigationBar.class, this.safeUINavigationBarProvider);
            return newMapBuilder.build();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, Set<Class<? extends CoreStartable>>> getStartableDependencies() {
            Set of = Set.of(CentralSurfaces.class);
            Preconditions.checkNotNullFromProvides(of);
            return Collections.singletonMap(SysuiStatusBarStateController.class, of);
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final Map<Class<?>, javax.inject.Provider> getStartables() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(83);
            newMapBuilder.contributions.put(NotificationLogger.class, this.provideCoreStartableProvider);
            newMapBuilder.contributions.put(ShortcutHelperActivityStarter.class, this.starterProvider);
            newMapBuilder.contributions.put(ShortcutHelperRepository.class, this.repoProvider);
            newMapBuilder.contributions.put(BroadcastDispatcherStartable.class, this.broadcastDispatcherStartableProvider);
            newMapBuilder.contributions.put(Recents.class, this.provideRecentsProvider);
            newMapBuilder.contributions.put(ScreenPinningRequest.class, this.screenPinningRequestProvider);
            newMapBuilder.contributions.put(NotificationRemoteInputManager.class, this.notificationRemoteInputManagerProvider);
            newMapBuilder.contributions.put(SysuiStatusBarStateController.class, this.statusBarStateControllerImplProvider);
            newMapBuilder.contributions.put(NotificationGutsManager.class, this.notificationGutsManagerProvider);
            newMapBuilder.contributions.put(VisualInterruptionDecisionProvider.class, this.provideVisualInterruptionDecisionProvider);
            newMapBuilder.contributions.put(KeyguardNotificationVisibilityProvider.class, this.keyguardNotificationVisibilityProviderImplProvider);
            newMapBuilder.contributions.put(NotificationMemoryMonitor.class, this.notificationMemoryMonitorProvider);
            newMapBuilder.contributions.put(KeyguardUpdateMonitor.class, this.keyguardSecUpdateMonitorImplProvider);
            newMapBuilder.contributions.put(FalsingCoreStartable.class, this.falsingCoreStartableProvider);
            newMapBuilder.contributions.put(SideFpsProgressBarViewBinder.class, this.sideFpsProgressBarViewBinderProvider);
            newMapBuilder.contributions.put(BouncerMessageAuditLogger.class, this.bouncerMessageAuditLoggerProvider);
            newMapBuilder.contributions.put(DeviceEntryFaceAuthInteractor.class, this.providesFaceAuthInteractorInstanceProvider);
            newMapBuilder.contributions.put(LiftToRunFaceAuthBinder.class, this.liftToRunFaceAuthBinderProvider);
            newMapBuilder.contributions.put(KeyguardTransitionCoreStartable.class, this.keyguardTransitionCoreStartableProvider);
            newMapBuilder.contributions.put(LockscreenSceneTransitionInteractor.class, this.lockscreenSceneTransitionInteractorProvider);
            newMapBuilder.contributions.put(ResourceTrimmer.class, this.resourceTrimmerProvider);
            newMapBuilder.contributions.put(BouncerLoggerStartable.class, this.bouncerLoggerStartableProvider);
            newMapBuilder.contributions.put(AuthController.class, this.authControllerProvider);
            newMapBuilder.contributions.put(SideFpsOverlayViewBinder.class, this.sideFpsOverlayViewBinderProvider);
            newMapBuilder.contributions.put(AlternateBouncerViewBinder.class, this.alternateBouncerViewBinderProvider);
            newMapBuilder.contributions.put(ConfigurationControllerStartable.class, this.configurationControllerStartableProvider);
            newMapBuilder.contributions.put(FeatureFlagsReleaseStartable.class, this.featureFlagsReleaseStartableProvider);
            newMapBuilder.contributions.put(FlagDependencies.class, this.flagDependenciesProvider);
            newMapBuilder.contributions.put(LetterboxBackgroundProvider.class, this.letterboxBackgroundProvider);
            newMapBuilder.contributions.put(MotionToolStartable.class, this.motionToolStartableProvider);
            newMapBuilder.contributions.put(QSFragmentStartable.class, this.qSFragmentStartableProvider);
            newMapBuilder.contributions.put(OngoingCallController.class, this.ongoingCallControllerProvider);
            newMapBuilder.contributions.put(OngoingActivityController.class, this.provideOngoingActivityControllerProvider);
            newMapBuilder.contributions.put(LightBarController.class, this.lightBarControllerProvider);
            newMapBuilder.contributions.put(StatusBarModeRepositoryStore.class, this.statusBarModeRepositoryImplProvider);
            newMapBuilder.contributions.put(MobileUiAdapter.class, this.mobileUiAdapterProvider);
            newMapBuilder.contributions.put(CarrierConfigCoreStartable.class, this.carrierConfigCoreStartableProvider);
            newMapBuilder.contributions.put(StatusBarIconViewBindingFailureTracker.class, this.statusBarIconViewBindingFailureTrackerProvider);
            newMapBuilder.contributions.put(UserSwitcherDialogCoordinator.class, this.userSwitcherDialogCoordinatorProvider);
            newMapBuilder.contributions.put(MediaProjectionTaskSwitcherCoreStartable.class, this.mediaProjectionTaskSwitcherCoreStartableProvider);
            newMapBuilder.contributions.put(DisplaySwitchLatencyTracker.class, this.displaySwitchLatencyTrackerProvider);
            newMapBuilder.contributions.put(ImmersiveModeConfirmation.class, this.immersiveModeConfirmationProvider);
            newMapBuilder.contributions.put(GesturePointerEventListener.class, this.gesturePointerEventListenerProvider);
            newMapBuilder.contributions.put(Magnification.class, this.magnificationProvider);
            newMapBuilder.contributions.put(KeyguardViewConfigurator.class, this.keyguardViewConfiguratorProvider);
            newMapBuilder.contributions.put(ScrimController.class, this.scrimControllerProvider);
            newMapBuilder.contributions.put(StatusBarHeadsUpChangeListener.class, this.statusBarHeadsUpChangeListenerProvider);
            newMapBuilder.contributions.put(BackActionInteractor.class, this.backActionInteractorProvider);
            newMapBuilder.contributions.put(KeyguardDismissActionBinder.class, this.keyguardDismissActionBinderProvider);
            newMapBuilder.contributions.put(KeyguardDismissBinder.class, this.keyguardDismissBinderProvider);
            newMapBuilder.contributions.put(CommunalLoggerStartable.class, this.communalLoggerStartableProvider);
            newMapBuilder.contributions.put(CommunalSceneStartable.class, this.communalSceneStartableProvider);
            newMapBuilder.contributions.put(CommunalDreamStartable.class, this.communalDreamStartableProvider);
            newMapBuilder.contributions.put(CommunalAppWidgetHostStartable.class, this.communalAppWidgetHostStartableProvider);
            newMapBuilder.contributions.put(CommunalBackupRestoreStartable.class, this.communalBackupRestoreStartableProvider);
            newMapBuilder.contributions.put(HomeControlsDreamStartable.class, this.homeControlsDreamStartableProvider);
            newMapBuilder.contributions.put(BatteryControllerStartable.class, this.batteryControllerStartableProvider);
            newMapBuilder.contributions.put(QSGuideDialog.class, this.qSGuideDialogProvider);
            newMapBuilder.contributions.put(UserFileManagerImpl.class, this.userFileManagerImplProvider);
            newMapBuilder.contributions.put(ControlsStartable.class, this.controlsStartableProvider);
            newMapBuilder.contributions.put(CollapsedStatusBarFragmentStartable.class, this.collapsedStatusBarFragmentStartableProvider);
            newMapBuilder.contributions.put(ConnectingDisplayViewModel.class, this.connectingDisplayViewModelProvider);
            newMapBuilder.contributions.put(KeyguardBlueprintInteractor.class, this.keyguardBlueprintInteractorProvider);
            newMapBuilder.contributions.put(KeyguardBlueprintCommandListener.class, this.keyguardBlueprintCommandListenerProvider);
            newMapBuilder.contributions.put(MediaCarouselInteractor.class, this.mediaCarouselInteractorProvider);
            newMapBuilder.contributions.put(MediaDataProcessor.class, this.mediaDataProcessorProvider);
            newMapBuilder.contributions.put(MediaMuteAwaitConnectionCli.class, this.mediaMuteAwaitConnectionCliProvider);
            newMapBuilder.contributions.put(NearbyMediaDevicesManager.class, this.nearbyMediaDevicesManagerProvider);
            newMapBuilder.contributions.put(SecPowerUI.class, this.secPowerUIProvider);
            newMapBuilder.contributions.put(QSPipelineCoreStartable.class, this.qSPipelineCoreStartableProvider);
            newMapBuilder.contributions.put(RearDisplayDialogController.class, this.rearDisplayDialogControllerProvider);
            newMapBuilder.contributions.put(SystemActions.class, this.systemActionsProvider);
            newMapBuilder.contributions.put(ShadeController.class, this.provideShadeControllerProvider);
            newMapBuilder.contributions.put(AuthRippleController.class, this.authRippleControllerProvider);
            newMapBuilder.contributions.put(ShadeStartable.class, this.shadeStartableProvider);
            newMapBuilder.contributions.put(CentralSurfaces.class, this.centralSurfacesImplProvider);
            newMapBuilder.contributions.put(SceneContainerStartable.class, this.sceneContainerStartableProvider);
            newMapBuilder.contributions.put(ScrimStartable.class, this.scrimStartableProvider);
            newMapBuilder.contributions.put(WindowRootViewVisibilityInteractor.class, this.windowRootViewVisibilityInteractorProvider);
            newMapBuilder.contributions.put(UnfoldInitializationStartable.class, this.unfoldInitializationStartableProvider);
            newMapBuilder.contributions.put(UnfoldTraceLogger.class, this.unfoldTraceLoggerProvider);
            newMapBuilder.contributions.put(ToastUI.class, this.toastUIProvider);
            newMapBuilder.contributions.put(VolumeUI.class, this.volumeUIProvider);
            return newMapBuilder.build();
        }

        public final GlanceableHubTransitions glanceableHubTransitions() {
            return new GlanceableHubTransitions((KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get(), (KeyguardTransitionRepository) this.keyguardTransitionRepositoryImplProvider.get(), (CommunalInteractor) this.communalInteractorProvider.get());
        }

        public final Object globalSettingsImpl() {
            return GlobalSettingsImpl_Factory.newInstance((ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get());
        }

        public final GroupCoalescer groupCoalescer() {
            return new GroupCoalescer((DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), groupCoalescerLogger());
        }

        public final GroupCoalescerLogger groupCoalescerLogger() {
            return new GroupCoalescerLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final GuestResetOrExitSessionReceiver guestResetOrExitSessionReceiver() {
            return new GuestResetOrExitSessionReceiver((UserTracker) this.provideUserTrackerProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), resetSessionDialogFactory(), exitSessionDialogFactory());
        }

        public final GuestSessionNotification guestSessionNotification() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new GuestSessionNotification(referenceGlobalRootComponentImpl.context, (NotificationManager) referenceGlobalRootComponentImpl.provideNotificationManagerProvider.get());
        }

        public final HeaderPrivacyIconsController headerPrivacyIconsController() {
            return new HeaderPrivacyIconsController((PrivacyItemController) this.privacyItemControllerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (OngoingPrivacyChip) this.providesOngoingPrivacyChipProvider.get(), (PrivacyDialogController) this.privacyDialogControllerProvider.get(), (PrivacyDialogControllerV2) this.privacyDialogControllerV2Provider.get(), privacyLogger(), (StatusIconContainer) this.providesStatusIconContainerProvider.get(), (PermissionManager) this.referenceGlobalRootComponentImpl.providePermissionManagerProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (AppOpsController) this.appOpsControllerImplProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (SafetyCenterManager) this.referenceGlobalRootComponentImpl.provideSafetyCenterManagerProvider.get(), (DeviceProvisionedController) this.bindDeviceProvisionedControllerProvider.get(), (FeatureFlags) this.featureFlagsClassicReleaseProvider.get());
        }

        public final HeadlessScreenshotHandler headlessScreenshotHandler() {
            return new HeadlessScreenshotHandler(imageExporter(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ImageCapture) this.imageCaptureImplProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (ScreenshotNotificationsController.Factory) this.factoryProvider39.get());
        }

        public final HeadsUpManagerLogger headsUpManagerLogger() {
            return new HeadsUpManagerLogger((LogBuffer) this.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final HeadsUpNotificationIconInteractor headsUpNotificationIconInteractor() {
            return new HeadsUpNotificationIconInteractor((HeadsUpNotificationIconViewStateRepository) this.headsUpNotificationIconViewStateRepositoryProvider.get());
        }

        public final HeadsUpNotificationInteractor headsUpNotificationInteractor() {
            return new HeadsUpNotificationInteractor((HeadsUpRepository) this.headsUpManagerPhoneProvider.get(), (DeviceEntryFaceAuthInteractor) this.providesFaceAuthInteractorInstanceProvider.get(), (KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get(), notificationsKeyguardInteractor(), (ShadeInteractor) this.shadeInteractorImplProvider.get());
        }

        public final HeadsUpNotificationViewBinder headsUpNotificationViewBinder() {
            return new HeadsUpNotificationViewBinder(notificationListViewModel());
        }

        public final HeadsUpViewBinderLogger headsUpViewBinderLogger() {
            return new HeadsUpViewBinderLogger((LogBuffer) this.provideNotificationHeadsUpLogBufferProvider.get());
        }

        public final NodeController highlightsHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesHighlightsHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController highlightsHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesHighlightsHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final IconBuilder iconBuilder() {
            return new IconBuilder(this.referenceGlobalRootComponentImpl.context);
        }

        public final IconProvider iconProvider() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            BiometricsModule.Companion.getClass();
            return new IconProvider(context);
        }

        public final ImageExporter imageExporter() {
            return new ImageExporter((ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (FeatureFlags) this.featureFlagsClassicReleaseProvider.get());
        }

        public final Object imageTileSet() {
            return new ImageTileSet(GlobalConcurrencyModule_ProvideHandlerFactory.provideHandler());
        }

        public final NodeController incomingHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesIncomingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController incomingHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesIncomingHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final IndicatorGardenAlgorithmCenterCutout indicatorGardenAlgorithmCenterCutout() {
            return new IndicatorGardenAlgorithmCenterCutout(this.referenceGlobalRootComponentImpl.context, (IndicatorGardenInputProperties) this.indicatorGardenInputPropertiesProvider.get());
        }

        public final IndicatorGardenAlgorithmNoCutout indicatorGardenAlgorithmNoCutout() {
            return new IndicatorGardenAlgorithmNoCutout(this.referenceGlobalRootComponentImpl.context, (IndicatorGardenInputProperties) this.indicatorGardenInputPropertiesProvider.get());
        }

        public final IndicatorGardenAlgorithmSidelingCenterCutout indicatorGardenAlgorithmSidelingCenterCutout() {
            return new IndicatorGardenAlgorithmSidelingCenterCutout(this.referenceGlobalRootComponentImpl.context, (IndicatorGardenInputProperties) this.indicatorGardenInputPropertiesProvider.get(), (IndicatorCutoutUtil) this.indicatorCutoutUtilProvider.get());
        }

        public final IndicatorLogger indicatorLogger() {
            return new IndicatorLogger((LogBuffer) this.provideIndicatorLogBufferProvider.get());
        }

        public final void initialize(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.bootCompleteCacheImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0));
            this.configurationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1));
            this.provideBroadcastRunningLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 6));
            this.provideBroadcastRunningExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 7));
            this.bgDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 12));
            this.commandRegistryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 13));
            this.logcatEchoTrackerDebugProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 11);
            this.provideLogcatEchoTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 10));
            this.logBufferFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 9));
            this.provideBroadcastDispatcherLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 8));
            this.deviceConfigProxyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 17));
            this.provideBgLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 19));
            this.provideBackgroundExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 18));
            this.bindsReaderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 16));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 22);
            this.systemClockImplProvider = switchingProvider;
            this.bindSystemClockProvider = DoubleCheck.provider(switchingProvider);
            this.broadcastDispatcherProvider = new DelegateFactory();
            this.powerRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 21));
            this.enhancedEstimatesImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 26));
            this.provideDemoModeControllerProvider = new DelegateFactory();
            this.provideBatteryControllerLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 28));
            this.batteryControllerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 27));
            this.provideBgHandlerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 29);
            this.provideBatteryControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 25));
            this.dockManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 30));
            this.falsingDataProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 24));
            this.historyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 33));
            this.provideDisplayTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 37));
            this.provideBinderCallMonitorLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 39));
            this.binderCallMonitorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 38));
            this.settingsHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 40));
            this.javaAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 42));
            this.statusBarStateControllerImplProvider = new DelegateFactory();
            this.keyguardStateControllerImplProvider = new DelegateFactory();
            this.keyguardSecUpdateMonitorImplProvider = new DelegateFactory();
            this.dozeTransitionListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 45));
            this.filesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 49));
            this.logBufferEulogizerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 48));
            this.systemUIConfigDumpableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 50));
            this.powerInteractorProvider = new DelegateFactory();
            this.provideCommandQueueProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 47));
            this.bouncerViewImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 54));
            this.tableLogBufferFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 58));
            this.provideBouncerLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 57));
            this.keyguardBouncerRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 56));
            this.keyguardSecurityModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 59));
            this.primaryBouncerCallbackInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 60));
            this.falsingCollectorImplProvider = new DelegateFactory();
            this.falsingCollectorNoOpProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 62));
            this.providesFalsingCollectorLegacyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 61));
            this.dismissCallbackRegistryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 63));
            this.provideUserTrackerProvider = new DelegateFactory();
            this.userRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 65));
            this.provideKeyguardUpdateMonitorLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 67));
            this.trustRepositoryLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 66));
            this.trustRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 64));
            this.selectedUserInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 68));
            this.providesLeakDetectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 74));
            this.provideStatusBarKeyguardViewManagerProvider = new DelegateFactory();
            this.systemUIDialogManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 76));
            this.containerConfigProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 81);
            this.providesSceneDataSourceDelegatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 82));
            this.sceneContainerRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 80));
            this.provideSceneFrameworkLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 83));
            this.keyguardBypassControllerProvider = new DelegateFactory();
            this.deviceEntryRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 87));
            this.connectivitySlotsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 93));
            this.provideSharedConnectivityTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 95));
            this.connectivityInputLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 94));
            this.tunerServiceImplProvider = new DelegateFactory();
            this.connectivityRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 92));
            this.provideMobileInputLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 97));
            this.mobileInputLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 96));
            this.provideMobileSummaryLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 98));
            this.bgCoroutineContextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 100));
            this.provideAirplaneTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 101));
            this.airplaneModeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 99));
            this.disabledWifiRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 104));
            this.featureFlagsClassicReleaseProvider = new DelegateFactory();
            this.wifiPickerTrackerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 106));
            this.provideWifiLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 107));
            this.provideWifiTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 108));
            this.factoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 105));
            this.provideRealWifiRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 103));
            this.demoModeWifiDataSourceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 109));
            this.wifiRepositorySwitcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 102));
            this.carrierConfigRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 110));
            this.systemPropertiesWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 114));
            this.commonUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 113));
            this.mobileSignalUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 115));
            this.carrierInfoUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 116));
            this.mobileDataUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 117));
            this.mobileRoamingUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 118));
            this.carrierInfraMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 112));
            this.fakeCarrierInfraMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 111));
            this.simCardInfoUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 119));
            this.imsRegStateUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 120));
            this.factoryProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 121));
            this.mobileConnectionsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 91));
            this.demoModeMobileConnectionDataSourceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 122));
        }

        public final void initialize10(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.headsUpViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 919));
            this.animatedImageNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 920));
            this.notificationsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 886));
            this.notificationsControllerStubProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 921);
            this.provideNotificationsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 885));
            this.colorUpdateLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 922));
            this.groupExpansionManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 923));
            this.notificationShelfInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 925));
            this.notificationShelfViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 924));
            this.hideNotificationsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 927));
            this.hideListViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 926));
            this.provideSecureSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 931));
            this.provideNotificationSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 930));
            this.provideNotificationSettingsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 929));
            this.provideOptionalProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 928));
            this.notificationLoggerViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 932);
            this.remoteInputRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 934));
            this.remoteInputInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 933));
            this.secUnlockedScreenOffAnimationHelperProvider = new DelegateFactory();
            this.sectionStyleProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 936));
            this.legacyNotificationIconAreaControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 935));
            this.notificationIconAreaControllerViewBinderWrapperImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 937));
            this.notificationStatsLoggerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 938));
            this.statusBarIconViewBindingFailureTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 939));
            this.statusBarRemoteInputCallbackProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 941));
            this.shadeSurfaceImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 944);
            this.provideShadeSurfaceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 943));
            this.panelExpansionInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 946));
            this.providePanelExpansionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 945));
            this.notificationAlertsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 947));
            this.shadeEventCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 948));
            this.initControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 949));
            this.statusBarNotificationPresenterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 942));
            this.provideActivityTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 950));
            this.notificationLaunchAnimationRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 953));
            this.notificationLaunchAnimationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 952));
            this.provideNotificationTransitionAnimatorControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 951));
            this.launchFullScreenIntentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 954));
            this.statusBarNotificationActivityStarterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 940));
            this.providesWindowRootViewProvider = new DelegateFactory();
            this.provideNotificationRenderLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 955));
            this.notificationTargetsHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 956));
            this.appLockNotificationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 957));
            DelegateFactory.setDelegate(this.notificationStackScrollLayoutControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 698)));
            this.notificationScrollViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 959));
            this.notificationScrollViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 958));
            this.sharedNotificationContainerBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 697));
            this.notificationSectionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 692));
            this.providesLockscreenBlueprintsProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 688);
            DelegateFactory.setDelegate(this.keyguardViewConfiguratorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 669)));
            this.clockSectionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 960));
            this.smartspaceSectionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 961));
            this.defaultKeyguardBlueprintProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 546));
            this.splitShadeKeyguardBlueprintProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 962));
            this.shortcutsBesideUdfpsKeyguardBlueprintProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 963));
            this.providesThreadAssertProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 964));
            this.keyguardBlueprintRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 545));
            DelegateFactory.setDelegate(this.keyguardBlueprintInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 544)));
            DelegateFactory.setDelegate(this.lockscreenContentViewModelProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 533)));
            this.providesLockscreenContentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 532);
            this.lockscreenSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 527));
            this.provideShadeSessionStorageProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 966));
            this.brightnessMirrorShowingRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 970));
            this.brightnessMirrorShowingInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 969));
            this.brightnessMirrorViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 968));
            this.privacyChipRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 973));
            this.privacyChipInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 972));
            this.shadeHeaderClockRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 975));
            this.shadeHeaderClockInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 974));
            this.shadeHeaderViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 971));
            this.quickSettingsSceneViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 967));
            this.factoryProvider27 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 976));
            this.quickSettingsSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 965));
            this.shadeSceneViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 978));
            this.shadeSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 977));
            this.overlayShadeViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 981));
            this.providesBrightnessLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 985));
            this.providesBrightnessTableLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 986));
            this.screenBrightnessDisplayManagerRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 984));
            this.screenBrightnessInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 983));
            this.brightnessPolicyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 988));
            this.brightnessPolicyEnforcementInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 987));
            this.brightnessSliderViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 982));
            this.gridLayoutTypeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 991));
            this.gridLayoutTypeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 990));
            this.iconTilesRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 995));
            this.iconTilesInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 994));
            this.iconTilesViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 993));
            this.infiniteGridSizeRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 998));
            this.infiniteGridSizeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 997));
            this.infiniteGridSizeViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 996));
            this.infiniteGridLayoutProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 992));
            this.stretchedGridLayoutProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 999));
            this.qSPreferencesRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1005));
            this.qSPreferencesInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CLIENT_ERROR_NOT_ALLOWED_URI));
            this.providesIconTileLabelVisibilityLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1006));
            this.iconLabelVisibilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1003));
            this.iconLabelVisibilityViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1002));
            this.partitionedGridViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1001));
            this.partitionedGridLayoutProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1000));
        }

        public final void initialize11(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.currentTilesInteractorImplProvider = new DelegateFactory();
            this.tileGridViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 989));
            this.stockTilesRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_PACKAGE_UNINSTALL_FAILURE));
            this.iconAndNameCustomRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_MOUNT_STATUS));
            this.editTilesListInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_PACKAGE_UNINSTALL_SUCCESS));
            this.factoryProvider28 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_CHANGE_PWD_FAILED));
            this.colorCorrectionRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_VERIFY_PWD_SUCCESSFUL));
            this.oneHandedModeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_VERIFY_PWD_FAILED));
            this.screenRecordRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_CANCELLED));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1018);
            this.rotationPolicyWrapperImplProvider = switchingProvider;
            this.bindRotationPolicyWrapperProvider = DoubleCheck.provider(switchingProvider);
            this.provideAutoRotateSettingsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1020));
            this.provideDeviceStateAutoRotationLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1021));
            this.deviceStateRotationLockSettingControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1019));
            this.rotationLockControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1017));
            this.cameraAutoRotateRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1022));
            this.cameraSensorPrivacyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1023));
            this.newTilesAvailabilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_CHANGE_PWD_SUCCESSFUL));
            this.qSFactoryImplProvider = new DelegateFactory();
            this.tilesAvailabilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, EnterpriseContainerCallback.CONTAINER_PACKAGE_INFORMATION));
            this.editModeViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1007));
            this.quickSettingsShadeSceneViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 980));
            this.optionalOfLockscreenContentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1024);
            this.quickSettingsShadeSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 979));
            this.notificationsShadeSceneViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1026));
            this.notificationsShadeSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1025));
            this.setOfSceneProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 445);
            this.sceneContainerViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 443));
            this.notificationInsetsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1027));
            DelegateFactory.setDelegate(this.providesWindowRootViewProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, CustomDeviceManager.MULTI_WINDOW_PERCENTAGE)));
            DelegateFactory.setDelegate(this.providesNotificationShadeWindowViewProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, CustomDeviceManager.MULTI_WINDOW_FIXED_STATE)));
            DelegateFactory.setDelegate(this.providesNotificationStackScrollLayoutProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 440)));
            this.shadeControllerSceneImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 412));
            DelegateFactory.setDelegate(this.provideShadeControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 411)));
            this.contextComponentResolverProvider = new DelegateFactory();
            this.provideRecentsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1028));
            this.systemActionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 410));
            this.provideBackPanelUiThreadContextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1029));
            this.providsBackGestureTfClassifierProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1030);
            this.cornerGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1031));
            this.navBarHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 407));
            this.secTaskBarManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1032));
            this.autoHideControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1033));
            DelegateFactory.setDelegate(this.navigationBarControllerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 398)));
            this.screenPinningRequestProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1034));
            this.inWindowLauncherUnlockAnimationRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1037));
            this.keyguardSurfaceBehindRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1038));
            this.inWindowLauncherUnlockAnimationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1036));
            this.inWindowLauncherAnimationViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1039));
            this.inWindowLauncherUnlockAnimationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1035));
            this.provideSearcleManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1040));
            this.providesPopupUILogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1041));
            DelegateFactory.setDelegate(this.overviewProxyServiceProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 397)));
            DelegateFactory.setDelegate(this.notificationLockscreenUserManagerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 384)));
            this.legacyMediaDataManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 373));
            DelegateFactory.setDelegate(this.providesMediaDataManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 372)));
            this.secMediaHostProvider = new DelegateFactory();
            this.coloredBGHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1045));
            this.secQSDetailControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1044));
            this.mediaOutputHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1043));
            this.provideMediaLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1047));
            this.providesMediaLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1046));
            this.secMediaControlPanelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1042);
            this.secMediaPlayerDataProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1048);
            this.mediaBluetoothHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1049));
            DelegateFactory.setDelegate(this.secMediaHostProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 371)));
            this.provideDataStoreProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1052));
            this.mediaSessionViewModelFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1051));
            this.builtInDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1054);
            this.bluetoothDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1055);
            this.chromeCastDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1056);
            this.audioMirroringDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1057);
            this.disconnectedDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1058);
            this.musicShareDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1059);
            this.provideVolumePanelLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1063));
            this.provideVolumeLogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1062));
            this.displayManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1061));
            this.wifiDisplayDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1060);
            this.smartMirroringDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1064);
            this.remoteDeviceControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1065);
            this.sessionAudioPathViewModelFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1053));
            this.mediaDeviceViewModelFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1066));
            this.deviceAudioPathViewModelFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1067));
            this.settingViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1068);
            this.labsViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1069);
            this.provideMediaOutputViewProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1050);
            this.mediaOutputTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 370);
            this.batterySaverTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1070);
            this.sRotationLockTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1071);
            DelegateFactory.setDelegate(this.qSFactoryImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 254)));
            DelegateFactory.setDelegate(this.currentTilesInteractorImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getFavoriteAppsMaxCount)));
            this.builderProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1072));
            DelegateFactory.setDelegate(this.qSHostAdapterProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeFavoriteApp)));
            this.factoryProvider29 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setFavoriteApp));
            this.disabledByPolicyInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1074));
            this.qSTileAnalyticsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1075));
            this.qSTileLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1076));
            this.qSTileIntentUserInputHandlerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1077));
            this.provideColorCorrectionTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1073);
            this.colorInversionRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1079));
        }

        public final void initialize12(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.provideColorInversionTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1078);
            this.provideFontScalingTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1080);
            this.provideReduceBrightColorsTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1081);
            this.provideOneHandedModeTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1082);
            this.provideNightDisplayTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1083);
            this.provideAirplaneModeTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1084);
            this.provideDataSaverTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1085);
            this.provideInternetTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1086);
            this.provideFlashlightTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1087);
            this.provideLocationTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1088);
            this.provideAlarmTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1089);
            this.provideUiModeNightTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1090);
            this.provideWorkModeTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1091);
            this.factoryProvider30 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1093));
            this.factoryProvider31 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1094));
            this.provideCameraToggleTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1092);
            this.provideMicrophoneToggleTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1095);
            this.provideQRCodeScannerTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1096);
            this.provideScreenRecordTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1097);
            this.provideBatterySaverTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1098);
            this.provideRotationTileViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1099);
            DelegateFactory.setDelegate(this.newQSTileFactoryProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_deleteHomeScreenPage)));
            this.builderProvider3 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_SESSION_ABORT));
            this.secAutoTileManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1100);
            this.bootAnimationFinishedCacheImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_SESSION_TERMINATED));
            DelegateFactory.setDelegate(this.qSTileHostProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeWidget)));
            this.panelInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_SESSION_TIMEOUT));
            this.controlsActivityStarterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeShortcut));
            this.badgeProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_STATUS_CONF_START_SESSION_FAILURE));
            this.secControlsUiControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addAutoCallNumber));
            this.factoryProvider32 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_STATUS_CONF_REMOVE_USER_FROM_SESSION_FAILURE));
            this.controlsBindingControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_STATUS_CONF_ADD_USER_TO_SESSION_FAILURE));
            DelegateFactory.setDelegate(this.controlsControllerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getWifiHotspotEnabledState)));
            DelegateFactory.setDelegate(this.controlsComponentProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getVibrationIntensity)));
            DelegateFactory.setDelegate(this.secDeviceControlsControllerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 208)));
            DelegateFactory.setDelegate(this.provideDesktopManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 205)));
            DelegateFactory.setDelegate(this.statusBarWindowControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 194)));
            DelegateFactory.setDelegate(this.aODAmbientWallpaperHelperProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 193)));
            this.providesKeyguardLogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_REJECT_REASON_USR_BUSY_CS_CALL));
            this.lsRuneWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_SWITCH_FAILURE));
            this.deviceTypeWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_SWITCH_REJECTED));
            this.keyguardViewMediatorHelperImplProvider = new DelegateFactory();
            this.aODTouchModeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_END_CALL_NW_HANDOVER));
            DelegateFactory.setDelegate(this.secUnlockedScreenOffAnimationHelperProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 192)));
            DelegateFactory.setDelegate(this.unlockedScreenOffAnimationControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 191)));
            DelegateFactory.setDelegate(this.screenOffAnimationControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 188)));
            this.dozeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_HOLD_FAILED));
            DelegateFactory.setDelegate(this.dozeParametersProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 186)));
            DelegateFactory.setDelegate(this.pluginLockMediatorImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 184)));
            this.pluginLockDelegateAppProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_RESUME_FAILED));
            DelegateFactory.setDelegate(this.pluginWallpaperManagerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 183)));
            this.wallpaperEventNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_TEMP_UNAVAILABLE_415_CAUSE));
            DelegateFactory.setDelegate(this.keyguardWallpaperControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 182)));
            this.faceWidgetWallpaperUtilsWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 181));
            this.faceWidgetPluginLockManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_INVITE_TIMEOUT));
            this.faceWidgetLockscreenShadeTransitionControllerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_END_REASON_IMS_DEREGISTRATION));
            this.mediaOutputControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_BARRED_DUE_TO_SSAC);
            this.modelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_END_REASON_TELEPHONY_NOT_RESPONDING));
            this.soundCraftSettingsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_CANCEL_MODIFY_REQUESTED));
            this.wearableManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_CANCEL_TRANSFER_FAILED));
            this.routineManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_18X_RETRANSMISSION_TIMEOUT));
            this.bluetoothDeviceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_INVITE_TIMEOUT_NR));
            this.audioPlaybackManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1126));
            this.soundAliveManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1127));
            this.volumeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1128));
            this.soundAliveIntentFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1131));
            this.soundCraftQpDetailAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1130));
            this.soundCraftManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1129));
            this.soundCraftViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_CANCEL_TRANSFER_SUCCESS);
            this.soundCraftNowBarControllerProvider = new DelegateFactory();
            this.soundCraftActionBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1132));
            this.noiseControlBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1133));
            this.budsSettingIntentFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1135));
            this.audioEffectBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1134));
            this.volumeBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1136));
            this.audioEffectHeaderViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1137));
            this.dolbyViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1138));
            this.spatialAudioViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1139));
            this.equalizerViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1140));
            this.voiceBoostViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1141));
            this.volumeNormalizationViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1142));
            this.activeNoiseCancelingViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1143));
            this.adaptiveViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1144));
            this.ambientSoundViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1145));
            this.noiseCancelingLevelViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1146));
            this.noiseControlEffectBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1147));
            this.noiseControlOffViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1148));
            this.noiseCancelingSwitchBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1149));
            this.ambientVolumeViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1150));
            this.batteryInfoBoxViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1151));
            this.routineTestViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1152));
            this.soundCraftViewModelFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_TRANSFER_FAILED));
            this.providesSoundCraftNowBarViewProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_TRANSFER_SUCCESS);
            DelegateFactory.setDelegate(this.soundCraftNowBarControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.CALL_ENDED_BY_NW_HANDOVER_BEFORE_100_TRYING)));
            DelegateFactory.setDelegate(this.pluginFaceWidgetManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 170)));
            this.dozeServiceHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1153));
            this.provideAODLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1154));
            this.injectionInflationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1157));
            this.providerSubscreenQsPanelControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1156));
            this.screenRecordingStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1158));
        }

        public final void initialize13(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.subScreenQuickPanelWindowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1155));
            DelegateFactory.setDelegate(this.pluginAODManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 167)));
            this.secNotificationShadeWindowControllerHelperImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 157));
            this.provideShadeWindowLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1159));
            DelegateFactory.setDelegate(this.notificationShadeWindowControllerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 156)));
            this.keyguardPresentationDisablerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1161));
            this.factoryProvider33 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1162));
            this.keyguardDisplayManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1160));
            this.keyguardSysDumpTriggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1163));
            this.pickupControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1164));
            this.dreamViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1165));
            this.provideKeyguardLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1166));
            this.provideSecurityLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1167));
            this.keyguardFixedRotationMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1168));
            this.carLifeManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1169));
            this.provideAiBriefLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1172));
            this.briefLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1171));
            this.briefViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1173));
            this.briefNowBarControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1170));
            DelegateFactory.setDelegate(this.keyguardViewMediatorHelperImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 154)));
            this.screenOnCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1174));
            this.swipeToDismissInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1178));
            this.keyguardSurfaceBehindInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1177));
            this.keyguardSurfaceBehindParamsApplierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1176));
            this.windowManagerLockscreenVisibilityManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1175));
            this.windowManagerOcclusionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1179));
            DelegateFactory.setDelegate(this.newKeyguardViewMediatorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 153)));
            this.pluginLockInstancePolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1181));
            this.pluginLockDelegateSysUiProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1182));
            this.pluginLockManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1180));
            DelegateFactory.setDelegate(this.coverHostImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 152)));
            this.appControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1184));
            this.deviceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1185));
            this.notificationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1186));
            this.screenControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1187));
            this.debugModeFilterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1189));
            this.subscreenNotificationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1188));
            this.systemUICommandActionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1183));
            this.provideOngoingActivityControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1192));
            this.connectedDisplayInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1195));
            this.systemEventCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1194));
            this.provideSystemStatusAnimationSchedulerLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1197));
            this.systemStatusAnimationSchedulerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1196));
            this.headerBatteryStatusChipControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1198));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1193);
            this.systemStatusAnimationSchedulerImplProvider = switchingProvider;
            this.bindSystemStatusAnimationSchedulerProvider = DoubleCheck.provider(switchingProvider);
            this.statusBarLocationPublisherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1199));
            this.factoryProvider34 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1200));
            this.lightsOutInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.QOS_NW_UNAWARE));
            this.activityTaskManagerTasksRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1207));
            this.mediaProjectionManagerRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1206));
            this.screenRecordChipInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1205));
            this.endMediaProjectionDialogHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1208));
            this.screenRecordChipViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.QOS_INCALL_UNAWARE));
            this.mediaProjectionChipInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1210));
            this.shareToAppChipViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1209));
            this.castToOtherDeviceChipViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1211));
            this.callChipInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1213));
            this.callChipViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1212));
            this.ongoingActivityChipsViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.QOS_INCALL_SUSPEND));
            this.collapsedStatusBarViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.QOS_FAILURE));
            this.collapsedStatusBarViewBinderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1214));
            this.statusBarHideIconsForBouncerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1215));
            this.darkIconRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1216));
            this.provideCollapsedSbFragmentLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1217));
            this.collapsedStatusBarFragmentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1191);
            this.statusBarInitializerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1190));
            this.subRoomNetworkInfoProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1220));
            this.coverScreenIconControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1219));
            this.statusBarSignalPolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1218));
            this.accessibilityFloatingMenuControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1221));
            this.pulsingGestureListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1223));
            this.lockscreenHostedDreamGestureListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1224));
            this.glanceableHubContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1225));
            this.backActionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1227));
            this.mediaSessionLegacyHelperWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1229));
            this.keyguardKeyEventInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1228));
            this.sysUIKeyEventHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1226));
            this.legacyBouncerDependenciesProvider = new DelegateFactory();
            this.composeBouncerDependenciesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1231));
            this.bouncerViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1230));
            this.notificationShadeWindowViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1222));
            this.volumeDependencyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1234));
            this.volumeDialogControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1233));
            this.volumePanelFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1236));
            this.volumePanelGlobalStateRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1238));
            this.volumePanelGlobalStateInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1237));
            this.volumeNavigatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1235));
            this.factoryProvider35 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1239));
            this.volumeDialogRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1241));
            this.volumeDialogInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1240));
            this.samsungVolumeDialogImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1242));
            this.volumeDialogComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1232));
            this.cameraLauncherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1244));
            this.centralSurfacesCommandQueueCallbacksProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1243));
            this.provideSensorPrivacyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1245));
            this.wiredChargingRippleControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1246));
            this.lightRevealScrimRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1249));
            this.lightRevealScrimInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1248));
            this.lightRevealScrimViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1247);
        }

        public final void initialize14(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.sBlueLightFilterSWTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1250);
            this.provideAiAgentEffectProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1251));
            this.secLightRevealScrimHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1252));
            DelegateFactory.setDelegate(this.centralSurfacesImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 150)));
            DelegateFactory.setDelegate(this.optionalOfCentralSurfacesProvider, new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 149));
            this.legacyActivityStarterInternalImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 148));
            DelegateFactory.setDelegate(this.activityStarterImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 147)));
            DelegateFactory.setDelegate(this.widgetInteractionHandlerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 146)));
            this.provideCommunalAppWidgetHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 145));
            this.provideAppWidgetManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1254));
            this.provideCommunalWidgetHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1253));
            this.provideCommunalWidgetDaoProvider = new DelegateFactory();
            this.provideCommunalDatabaseProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1256));
            DelegateFactory.setDelegate(this.provideCommunalWidgetDaoProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1255)));
            this.provideBackupManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1257));
            this.providesCommunalBackupUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1258));
            this.communalWidgetRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 144));
            this.communalPrefsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1259));
            this.communalMediaRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1260));
            this.communalSmartspaceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1262));
            this.smartspaceRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1261));
            DelegateFactory.setDelegate(this.communalInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 143)));
            this.keyguardEnabledInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1263));
            this.fromGoneTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 141));
            this.fromLockscreenTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1264));
            DelegateFactory.setDelegate(this.keyguardInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 138)));
            DelegateFactory.setDelegate(this.alternateBouncerInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 137)));
            DelegateFactory.setDelegate(this.deviceEntryInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 86)));
            this.homeSceneFamilyResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 85));
            this.notifShadeSceneFamilyResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1265));
            this.quickSettingsSceneFamilyResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1266));
            this.provideResolverMapProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 84);
            DelegateFactory.setDelegate(this.sceneInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 79)));
            this.sceneContainerOcclusionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1267));
            this.sceneContainerPluginProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 78));
            DelegateFactory.setDelegate(this.provideSysUiStateProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 77)));
            DelegateFactory.setDelegate(this.factoryProvider8, new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 75));
            DelegateFactory.setDelegate(this.tunerServiceImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 73)));
            DelegateFactory.setDelegate(this.keyguardBypassControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 72)));
            this.provideFaceAuthLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1269));
            this.faceAuthenticationLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1268));
            this.provideFaceDetectTableLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1270));
            this.provideFaceAuthTableLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1271));
            DelegateFactory.setDelegate(this.deviceEntryFaceAuthRepositoryImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 71)));
            this.faceWakeUpTriggersConfigImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1272));
            this.systemUIDeviceEntryFaceAuthInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 70));
            this.noopDeviceEntryFaceAuthInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1273));
            DelegateFactory.setDelegate(this.providesFaceAuthInteractorInstanceProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 69)));
            DelegateFactory.setDelegate(this.primaryBouncerInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 55)));
            this.provideBouncerLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1275));
            this.bouncerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1274));
            DelegateFactory.setDelegate(this.legacyBouncerDependenciesProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 53)));
            this.fromPrimaryBouncerTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1277));
            this.fromAlternateBouncerTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1278));
            this.windowManagerLockscreenVisibilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1276));
            this.statusBarKeyguardViewManagerInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1279));
            DelegateFactory.setDelegate(this.provideStatusBarKeyguardViewManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 52)));
            this.udfpsHapticsSimulatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, PeripheralConstants.ErrorCode.ERROR_PLUGIN_CUSTOM_BASE));
            this.udfpsShellProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1281));
            this.providesPluginExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1282));
            this.providesOverlapDetectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1284));
            this.singlePointerTouchProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1283));
            this.udfpsKeyguardAccessibilityDelegateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1285));
            this.provideDeviceEntryIconLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1288));
            this.deviceEntryIconLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1287));
            this.deviceEntryUdfpsTouchOverlayViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1286);
            this.defaultUdfpsTouchOverlayViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1289);
            DelegateFactory.setDelegate(this.udfpsControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 51)));
            this.provideUdfpsLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1291));
            this.udfpsLoggerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1290);
            this.logContextInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1292));
            this.faceSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1295));
            this.promptRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1294));
            this.promptSelectorInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1293));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1297);
            this.credentialInteractorImplProvider = switchingProvider;
            this.providesCredentialInteractorProvider = DoubleCheck.provider(switchingProvider);
            this.credentialViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1296);
            this.biometricStatusRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1300));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1299);
            this.biometricStatusInteractorImplProvider = switchingProvider2;
            this.providesBiometricStatusInteractorProvider = DoubleCheck.provider(switchingProvider2);
            this.promptViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1298);
            DelegateFactory.setDelegate(this.authControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 46)));
            this.dreamOverlayCallbackControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.PPP_STATUS_CLOSE_EVENT));
            DelegateFactory.setDelegate(this.keyguardRepositoryImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 44)));
            this.fromAodTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.PPP_OPEN_FAILURE));
            this.fromDozingTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1303));
            DelegateFactory.setDelegate(this.keyguardTransitionInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 43)));
            DelegateFactory.setDelegate(this.statusBarStateControllerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 41)));
            this.surfaceVisibilityControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1304));
            this.windowVisibilityControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1305));
            DelegateFactory.setDelegate(this.keyguardFastBioUnlockControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 36)));
            this.activeUnlockConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1306));
            DelegateFactory.setDelegate(this.keyguardSecUpdateMonitorImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 35)));
            DelegateFactory.setDelegate(this.keyguardStateControllerImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 34)));
            this.brightLineFalsingManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 32);
            DelegateFactory.setDelegate(this.falsingManagerProxyProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 31)));
            this.asyncSensorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1308));
            this.postureDependentProximitySensorProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1307);
            this.proximitySensorImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1309);
            DelegateFactory.setDelegate(this.falsingCollectorImplProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 23)));
        }

        public final void initialize15(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            DelegateFactory.setDelegate(this.powerInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 20)));
            DelegateFactory.setDelegate(this.featureFlagsClassicReleaseProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 15)));
            DelegateFactory.setDelegate(this.provideUserTrackerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 14)));
            DelegateFactory.setDelegate(this.broadcastDispatcherProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 5)));
            DelegateFactory.setDelegate(this.provideDemoModeControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 4)));
            this.tunerActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 3);
            this.foregroundServicesDialogProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1310);
            this.workLockActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1311);
            this.factoryProvider36 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1313));
            this.brightnessDialogProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1312);
            this.usbDebuggingActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1314);
            this.usbDebuggingSecondaryUserActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1315);
            this.usbPermissionActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1316);
            this.usbConfirmActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1317);
            this.usbAccessoryUriActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1318);
            this.createUserActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1319);
            this.peopleTileRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1321));
            this.peopleWidgetRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1322));
            this.peopleSpaceActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1320);
            this.longScreenshotDataProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1324));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1326);
            this.systemUiProxyClientProvider = switchingProvider;
            this.bindSystemUiProxyProvider = DoubleCheck.provider(switchingProvider);
            this.actionIntentExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1325));
            this.longScreenshotActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1323);
            this.appClipsTrampolineActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1327);
            this.appClipsCrossProcessHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1329));
            this.appClipsActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1328);
            this.launchConversationActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1330);
            this.sensorUseStartedActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1331);
            this.communalEditModeViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1333));
            this.factoryProvider37 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1334));
            this.editWidgetsActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1332);
            this.coverHomeActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1335);
            this.switchToManagedProfileForCallActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1336);
            this.touchpadTutorialActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1337);
            this.subscreenNotificationReplyActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1338);
            this.subscreenNotificationIntelligenceStartActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1339);
            this.subHomeActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1340);
            this.subScreenFallbackProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1341);
            this.controlsRequestDialogProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1342);
            this.mediaProjectionAppSelectorActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1343);
            this.mediaProjectionPermissionActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1344);
            this.launchNoteTaskActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1345);
            this.launchNotesRoleSettingsTrampolineActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1346);
            this.createNoteTaskShortcutActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1347);
            this.walletActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1348);
            this.secControlsProviderSelectorActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1349);
            this.secControlsFavoritingActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1350);
            this.controlsFragmentFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1352));
            this.blurFacadeImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1353));
            this.secControlsActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1351);
            this.secControlsReorderActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1354);
            this.controlsSettingActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1355);
            this.mediaOutputActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1356);
            this.shortcutHelperRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1359));
            this.shortcutHelperInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1358));
            this.shortcutHelperActivityProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1357);
            this.dozeServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1360);
            this.provideLongRunningLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1363));
            this.provideLongRunningDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1362));
            this.pluginWallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1364));
            this.imageWallpaperProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1361);
            this.keyguardLifecyclesDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1366));
            this.windowManagerLockscreenVisibilityViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1367));
            this.keyguardSurfaceBehindViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1368));
            this.keyguardServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1365);
            this.bouncerlessScrimControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1370));
            this.dreamOverlayServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1369);
            this.notificationListenerWithPluginsProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1371);
            this.provideBinderProxyDumpHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1373));
            this.heapDumpHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1375));
            this.memoryMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1374));
            this.systemUIServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1372);
            this.systemUIAuxiliaryDumpServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1376);
            this.provideLongRunningExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1378));
            this.recordingServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1377);
            this.issueRecordingServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1379);
            this.sysUICoverServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1380);
            this.systemUISecondaryUserServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1381);
            this.factoryProvider38 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1383));
            this.packageChangeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1385));
            this.homeControlsComponentInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1384));
            this.homeControlsDreamServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1382);
            this.factoryProvider39 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1387));
            this.providesScreenshotViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1391));
            this.factoryProvider40 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1390));
            this.factoryProvider41 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1392));
            this.providesScrnshtNotifSmartActionsProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1394);
            this.screenshotSmartActionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1393));
            this.imageCaptureImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1395));
            this.semImageCaptureImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1396));
            this.factoryProvider42 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1398));
            this.factoryProvider43 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1397));
            this.factoryProvider44 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1399));
            this.assistContentRequesterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1400));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.RTP_TIME_OUT);
            this.packageLabelIconProviderImplProvider = switchingProvider2;
            this.bindPackageLabelIconProvider = DoubleCheck.provider(switchingProvider2);
            SwitchingProvider switchingProvider3 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1402);
            this.profileFirstRunFileResourcesImplProvider = switchingProvider3;
            this.bindProfileFirstRunResourcesProvider = DoubleCheck.provider(switchingProvider3);
            this.profileFirstRunSettingsImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1403);
        }

        public final void initialize16(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.bindProfileFirstRunSettingsProvider = DoubleCheck.provider(this.profileFirstRunSettingsImplProvider);
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1404);
            this.profileTypeRepositoryImplProvider = switchingProvider;
            this.bindProfileTypeRepositoryProvider = DoubleCheck.provider(switchingProvider);
            this.screenshotSoundProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1406));
            this.screenshotSoundControllerImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1405);
            this.messagesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1407));
            this.factoryProvider45 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1389));
            this.screenshotPolicyImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1409));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1410);
            this.displayContentRepositoryImplProvider = switchingProvider2;
            this.bindDisplayContentRepositoryProvider = DoubleCheck.provider(switchingProvider2);
            this.bindCapturePolicyListProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1411));
            this.bindScreenshotRequestProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1408));
            this.takeScreenshotExecutorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1388));
            this.takeScreenshotServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1386);
            this.appClipsScreenshotHelperServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1412);
            this.appClipsServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1413);
            this.screenshotProxyServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1414);
            this.noteTaskControllerUpdateServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1415);
            this.noteTaskBubblesServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1416);
            this.walletContextualSuggestionsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1418));
            this.walletContextualLocationsServiceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1417);
            this.overviewProxyRecentsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1419));
            this.smartActionsReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1420);
            this.mediaOutputDialogReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1421);
            this.peopleSpaceWidgetPinnedReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1422);
            this.peopleSpaceWidgetProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1423);
            this.guestResetOrExitSessionReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1424);
            this.hearingDevicesDialogReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1425);
            this.controlsRequestReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1426);
            this.encryptDecryptWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1428));
            this.controlsBackupRestoreReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1427);
            this.keyboardShortcutsReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1429);
            this.volumePanelDialogReceiverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1430);
            DelegateFactory.setDelegate(this.contextComponentResolverProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 2)));
            this.subscreenMusicWidgetControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1432));
            this.tunablePaddingServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1433));
            this.uiOffloadThreadProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1434));
            this.qSClockBellAlternateCalendarUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1436));
            this.qSClockBellTowerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1435));
            this.secHideNotificationShadeInMirrorInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1437));
            this.secNotificationShadeWindowStateInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1438));
            this.secPanelExpansionStateInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1439));
            this.provideQuickPanelLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1441));
            this.quickPanelExternalLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1440));
            this.secQSExpansionStateInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1442));
            this.secPanelTouchBlockHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1443));
            this.secPanelTouchProximityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1444));
            this.providesBehindScrimViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1446));
            this.providesFrontScrimViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1447));
            this.qSScrimViewSwitchProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1445));
            this.secPanelSAStatusLogInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1448));
            this.secQSCoverResourcePickerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1449));
            this.providerQsResetSettingsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1450));
            this.qSBackupRestoreManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1451);
            this.systemUIIndexMediatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1452));
            this.factoryProvider46 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1454));
            this.multiSIMControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1453));
            this.provideNavbarBgHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1455));
            this.secQuickSettingsAffordanceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1456));
            this.fullExpansionPanelNotiAlphaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1457));
            this.faceWidgetPluginControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1458));
            this.sPluginDependencyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1459));
            this.providePanelScreenShotLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1461));
            this.panelScreenShotBufferLoggerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1460);
            this.notiCinemaLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1462));
            this.notificationBackupRestoreManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1463);
            this.shelfToolTipManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1464));
            this.notificationColorPickerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1465);
            this.briefNotificationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1467));
            this.aiBriefManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1466));
            this.secSTQuickControlRequestReceiverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1468));
            this.summarizeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1469));
            this.notificationHighlightDpPreferenceProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1470);
            this.dependencyProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1431));
            this.provideCoreStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1471);
            this.shortcutHelperActivityStarterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1473));
            this.starterProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1472);
            this.repoProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1474);
            this.broadcastDispatcherStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1475);
            this.notificationMemoryDumperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1477));
            this.notificationMemoryLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1478));
            this.notificationMemoryMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1476));
            this.falsingCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1479));
            this.sideFpsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1483));
            this.sideFpsSensorInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1482));
            this.sideFpsProgressBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1481));
            this.sideFpsProgressBarProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1484));
            this.sideFpsProgressBarViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1480));
            this.bouncerMessageAuditLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1485));
            this.liftToRunFaceAuthBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1486));
            this.fromDreamingLockscreenHostedTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1488));
            this.fromOccludedTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1489));
            this.fromGlanceableHubTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1490));
            this.keyguardTransitionAuditLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1491));
            this.keyguardTransitionBootInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1492));
            this.keyguardTransitionCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1487));
            this.lockscreenSceneTransitionRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1494));
            this.lockscreenSceneTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1493));
            this.resourceTrimmerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1495));
            this.bouncerLoggerStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1496);
        }

        public final void initialize17(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.deviceEntrySideFpsOverlayInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1498));
            this.sideFpsOverlayViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1497));
            this.alternateBouncerWindowViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1500);
            this.swipeUpAnywhereGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.SERVER_ERROR));
            this.tapGestureDetectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DNS_FAILURE_HOST));
            this.alternateBouncerUdfpsAccessibilityOverlayViewModelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DNS_FAILURE_NAPTR);
            this.alternateBouncerDependenciesProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.SERVER_UNREACHABLE);
            this.alternateBouncerViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1499));
            this.secPowerNotificationWarningsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.VONR_NOT_POSSIBLE));
            this.dozeChargingHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DSDA_FALLBACK_DSDS));
            this.secPowerUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.SDP_PROCESSING_FAILED));
            this.rearDisplayDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1509));
            this.provideToastLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1511));
            this.toastUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1510));
            this.volumeUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1512));
            this.configurationControllerStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DNS_FAILURE_SVC));
            this.featureFlagsReleaseStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1513);
            this.flagDependenciesNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1515));
            this.flagDependenciesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1514));
            this.motionToolStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1516));
            this.qSFragmentLegacyProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1518);
            this.qSFragmentStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1517));
            this.carrierConfigCoreStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1519);
            this.adapterProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1521);
            this.userSwitcherDialogCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1520));
            this.taskSwitchInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1524));
            this.taskSwitcherNotificationCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1523));
            this.mediaProjectionTaskSwitcherCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1522));
            this.displaySwitchLatencyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1525));
            this.immersiveModeConfirmationProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1526);
            this.gesturePointerEventDetectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1528));
            this.gesturePointerEventListenerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1527);
            this.modeSwitchesControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1530));
            this.magnificationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1529));
            this.statusBarHeadsUpChangeListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1531));
            this.keyguardDismissActionBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1532));
            this.keyguardDismissBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1533));
            this.communalLoggerStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1534));
            this.communalSceneStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1535));
            this.communalDreamStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1536));
            this.communalAppWidgetHostStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1537));
            this.communalBackupRestoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1538));
            this.homeControlsDreamStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1539);
            this.batteryControllerStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1540));
            this.qSGuideDialogProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1541);
            this.controlsStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1542));
            this.collapsedStatusBarFragmentStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1543));
            this.limitedEdgeToEdgeProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1545);
            this.connectingDisplayViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1544));
            this.keyguardBlueprintCommandListenerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1546);
            this.mediaMuteAwaitConnectionCliProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1547));
            this.factoryProvider47 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1551));
            this.accessibilityQsShortcutsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1550));
            this.accessibilityTilesInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1549));
            this.factoryProvider48 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1553));
            this.factoryProvider49 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1554));
            this.castAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1555));
            this.dataSaverAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1556));
            this.hotspotAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1557));
            this.nightDisplayAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1558));
            this.reduceBrightColorsAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1559));
            this.walletControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1561));
            this.walletAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1560));
            this.workTileRestoreProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1563));
            this.workTileAutoAddableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1562));
            this.factoryProvider50 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1565));
            this.autoAddSettingRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1564));
            this.autoAddInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1552));
            this.qSSettingsRestoredBroadcastRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1567));
            this.restoreReconciliationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1566));
            this.infiniteGridConsistencyInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1569));
            this.noopGridConsistencyInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1570));
            this.providesGridConsistencyLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1571));
            this.gridConsistencyInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1568));
            this.qSPipelineCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1548));
            this.provideShadeTouchLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1573));
            this.scrimShadeTransitionControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1574));
            this.shadeStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1572));
            this.sceneContainerStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1575));
            this.scrimStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1576));
            this.unfoldInitializationStartableProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1577);
            this.unfoldTraceLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1578));
            this.notificationChannelsProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1579);
            this.keyguardBiometricLockoutLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1580));
            this.sliceBroadcastRelayHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1581));
            this.wMShellProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1582));
            this.uiThreadMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1584));
            this.secVendorServicesProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1583);
            this.biometricNotificationDialogFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1587));
            this.biometricNotificationBroadcastReceiverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1586));
            this.biometricNotificationServiceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1585));
            this.clipboardOverlayControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1589);
            this.semClipboardToastControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1590);
            this.clipboardListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1588));
            this.instantAppNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1591));
            this.keyboardUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1592));
            this.latencyTesterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1593));
            this.ringtonePlayerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1594));
            this.shortcutKeyDispatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1595));
            this.storageNotificationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1596));
        }

        public final void initialize18(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.themeOverlayApplierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1598));
            this.themeOverlayControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1597));
            this.mediaOutputSwitcherDialogUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1599));
            this.providesPopupUIViewModelListProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.SIP_REG_FAILURE));
            this.popupUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1600));
            this.provideMediaTttSenderLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DEREG_SUCCEEDED));
            this.mediaTttSenderLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1603));
            this.mediaTttFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1605));
            this.mediaTttSenderUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1606));
            this.mediaTttSenderCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1602));
            this.provideMediaTttReceiverLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1609));
            this.mediaTttReceiverLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1608));
            this.mediaTttReceiverUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1610));
            this.mediaTttChipControllerReceiverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1607));
            this.mediaTttCommandLineHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1611));
            this.stylusUsiPowerUIProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1613));
            this.stylusUsiPowerStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1612));
            this.keyboardRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1618));
            this.keyboardBacklightInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1617));
            this.backlightDialogViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1616));
            this.keyboardBacklightDialogCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1615));
            this.stickyKeyDialogFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1620));
            this.userAwareSecureSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1622));
            this.provideKeyboardLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1623));
            this.stickyKeysRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1621));
            this.stickyKeysIndicatorCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1619));
            this.keyboardDockingIndicationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1626));
            this.keyboardDockingIndicationViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1625));
            this.keyboardDockingIndicationViewBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1624));
            this.physicalKeyboardCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1614));
            this.muteQuickAffordanceCoreStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1627));
            this.provideMonitorTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1630));
            this.provideSystemUserMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1629));
            this.restartDozeListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1631));
            this.dreamMonitorProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1628);
            this.assistantAttentionMonitorProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1632);
            this.flexModePanelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1633));
            this.privacyDotViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1635));
            this.coverPrivacyDotViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1636));
            this.privacyDotDecorProviderFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1637));
            this.coverPrivacyDotDecorProviderFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1638));
            this.screenDecorationsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1634));
            this.safeUIStatusBarWindowControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1639);
            this.safeUINavigationBarProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1640);
            this.providesPlankFeatureEnabledProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1642));
            this.provideTestInputMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1644));
            this.provideProtocolProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1645));
            this.provideApiLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1646));
            this.providePlankDispatcherFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1647));
            this.protocolManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1643));
            this.plankComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1641));
            this.keyguardPreviewRendererFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1649));
            this.keyguardRemotePreviewManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1648));
            this.toAodFoldTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1650));
            this.customTileMapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1651));
            this.provideUnseenNotificationLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1652));
            this.notifUiAdjustmentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1653));
            this.remoteInputNotificationRebuilderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1654));
            this.notificationSettingsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1655));
            this.imageLoaderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1656));
            this.bigPictureStatsManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1657));
            this.barOrderRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1659));
            this.barOrderInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1658));
            this.providesQSCMainViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1661));
            this.secQSSettingEditResourcesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1662));
            this.qSCPopupButtonControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1663));
            this.qSCMainViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1660));
            this.providesQSGradationDrawableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1665));
            this.secQSGradationDrawableControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1664));
            this.userSwitchDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1666));
            this.keyguardStatusBarRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1669));
            this.keyguardStatusBarInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1668));
            this.keyguardStatusBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1667));
            this.twoPhoneModeIconControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1670));
            this.knoxStatusBarControlRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1672));
            this.knoxStatusBarControlInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1671));
            this.provideNavBarButtonClickLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1673));
            this.provideNavbarOrientationTrackingLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1674));
            this.indicatorGardenViewTreeLogHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1675));
            this.keyguardKeyboardInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1676));
            this.faceAuthAccessibilityDelegateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1677));
            this.providesDreamOverlayNotificationCountProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1678));
            this.dreamOverlayStatusBarItemsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1679));
            this.provideAudioManagerIntentsReceiverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1681));
            this.provideAudioRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1680));
            this.provideAudioModeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1682));
            this.localMediaRepositoryFactoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1683));
            this.provideMediaDeviceSessionRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1684));
            this.mediaControllerInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1685));
            this.provideAudioSharingRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1686));
            this.factoryProvider51 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1688));
            this.provideAncSliceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1687));
            this.provideSpatializerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1691));
            this.provdieSpatializerRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1690));
            this.provideSpatializerInetractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1689));
            this.provideCaptioningRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1693));
            this.provideCaptioningInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1692));
            this.provideNotificationsSoundPolicyRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1696));
            this.provideNotificationsSoundPolicyInteractrorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1695));
            this.provideAudioVolumeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1694));
        }

        public final void initialize19(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.provideScreenDecorationsLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1699));
            this.screenDecorationsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1698));
            this.faceScanningProviderFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 1697));
        }

        public final void initialize2(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.mobileRepositorySwitcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 90));
            this.authenticationRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 89));
            this.authenticationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 88));
            this.sceneInteractorProvider = new DelegateFactory();
            this.providesFaceAuthInteractorInstanceProvider = new DelegateFactory();
            this.authControllerProvider = new DelegateFactory();
            this.deviceEntryFingerprintAuthRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 124));
            this.devicePostureControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 128));
            this.devicePostureRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 127));
            this.bgApplicationScopeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 131));
            this.displayRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 132));
            this.displayStateRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 130));
            this.configurationRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 133));
            this.facePropertyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 129));
            this.fingerprintPropertyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 134));
            this.biometricSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 126));
            this.deviceEntryBiometricSettingsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 125));
            this.deviceEntryFingerprintAuthInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 123));
            this.trustInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 135));
            this.deviceUnlockedInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 136));
            this.keyguardRepositoryImplProvider = new DelegateFactory();
            this.configurationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 139));
            this.shadeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 140));
            this.keyguardTransitionInteractorProvider = new DelegateFactory();
            this.keyguardTransitionRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 142));
            this.keyguardInteractorProvider = new DelegateFactory();
            this.mdmOverlayContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 151));
            this.centralSurfacesImplProvider = new DelegateFactory();
            this.provideKeyguardUnlockAnimationExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 155));
            this.newKeyguardViewMediatorProvider = new DelegateFactory();
            this.keyguardFoldControllerConfigImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 160));
            this.keyguardFoldControllerDependencyImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 161));
            this.wakefulnessLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 162));
            this.looperSlowLogControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 163));
            this.keyguardFoldControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 159));
            this.displayLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 158));
            this.keyguardFastBioUnlockControllerProvider = new DelegateFactory();
            this.shadeExpansionStateManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 165));
            this.keyguardVisibilityMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 164));
            this.engineeringModeManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 166));
            this.provideNotificationsLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 169));
            this.lockscreenNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 168));
            this.provideKeyguardClockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 172));
            this.faceWidgetPositionAlgorithmWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 171));
            this.faceWidgetContainerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 173));
            this.faceWidgetKeyguardStatusCallbackWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 174));
            this.faceWidgetKeyguardUpdateMonitorWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 175));
            this.faceWidgetDisplayLifeCycleWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 176));
            this.faceWidgetWakefulnessLifecycleWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 177));
            this.providesKnoxStateMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 179));
            this.faceWidgetKnoxStateMonitorWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 178));
            this.faceWidgetLockPatternUtilsWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 180));
            this.provideSPluginManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 185));
            this.pluginAODManagerProvider = new DelegateFactory();
            this.alwaysOnDisplayPolicyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 187));
            this.provideSysUIUnfoldComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 190));
            this.sysUiUnfoldComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 189));
            this.providesStatusBarWindowViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 195));
            this.sysUICutoutProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 197));
            this.indicatorGardenInputPropertiesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 201));
            this.indicatorCutoutUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 200));
            this.indicatorGardenAlgorithmFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 199));
            this.indicatorGardenPresenterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 198));
            this.indicatorScaleGardenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 202));
            this.statusBarContentInsetsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 196));
            this.fragmentServiceProvider = new DelegateFactory();
            this.factoryProvider3 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 204));
            DelegateFactory.setDelegate(this.fragmentServiceProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 203)));
            this.provideDesktopSystemUiBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 206));
            this.provideIndicatorLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 207));
            this.providesControlsFeatureEnabledProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 210));
            this.provideBackgroundDelayableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getWifiState));
            this.controlsControllerImplProvider = new DelegateFactory();
            this.activityTaskManagerProxyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberDelay));
            this.userFileManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberList));
            this.secSelectedComponentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallNumberAnswerMode));
            this.controlsListingControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeAutoCallNumber));
            this.activityStarterImplProvider = new DelegateFactory();
            this.provideWakeLockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 220));
            this.broadcastSenderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAutoCallPickupState));
            this.controlsMetricsLoggerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 221));
            this.vibratorHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 222));
            this.secureSettingsImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setUsbConnectionType);
            this.controlsSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getLockScreenShortcut));
            this.systemUIAnalyticsWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionTypeInternal));
            this.sALoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getUsbConnectionType));
            this.provideDesktopManagerProvider = new DelegateFactory();
            this.aUIFacadeImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setForceAutoShutDownState));
            this.controlActionCoordinatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setAutoCallPickupState));
            this.selectedComponentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getForceAutoShutDownState));
            this.provideControlsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 230));
            this.provideControlsLogWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setBrightness));
            this.controlsComponentProvider = new DelegateFactory();
            this.qSPipelineFlagsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addWidget));
            this.qsEventLoggerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAppsButtonState));
            this.qSTileConfigProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setAppsButtonState));
            this.qSTileHostProvider = new DelegateFactory();
            this.provideQSTileListLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setZeroPageState));
            this.provideQSAutoAddLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getZeroPageState));
            this.providesQSRestoreLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentMode));
        }

        public final void initialize3(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.retailModeSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentMode));
            this.defaultTilesQSHostRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getHomeScreenMode));
            this.factoryProvider4 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHomeScreenMode));
            this.tileSpecSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getFavoriteApp));
            this.providePackageChangeRepoLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcutExtend));
            this.packageInstallerMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addDexURLShortcut));
            this.packageUpdateLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setDexForegroundModePackageList));
            this.factoryProvider5 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeDexURLShortcut));
            this.packageChangeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_removeDexShortcut));
            this.installedTilesComponentRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_addDexShortcut));
            this.minimumTilesResourceRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getDexForegroundModePackageList));
            this.newQSTileFactoryProvider = new DelegateFactory();
            this.qSHostAdapterProvider = new DelegateFactory();
            this.falsingManagerProxyProvider = new DelegateFactory();
            this.provideQuickSettingsLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 256));
            this.provideQSConfigLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 257));
            this.provideStatusBarIconListProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 260));
            this.statusBarPipelineFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 261));
            this.provideDeviceBasedSatelliteInputLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 268));
            this.provideVerboseDeviceBasedSatelliteInputLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 269));
            this.deviceBasedSatelliteRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 267));
            this.demoDeviceBasedSatelliteDataSourceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 271));
            this.demoDeviceBasedSatelliteRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 270));
            this.deviceBasedSatelliteRepositorySwitcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 266));
            this.carrierConfigTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastExternal));
            this.deviceProvisionedControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setForcedDisplaySizeDensity));
            this.bindDeviceProvisionedControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getHardKeyIntentBroadcast));
            this.userSetupRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setHardKeyIntentBroadcastInternal));
            this.subscriptionsOrderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_clearForcedDisplaySizeDensity));
            this.mobileIconsInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 272));
            this.wifiInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_startSmartView));
            this.deviceBasedSatelliteInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 265));
            this.deviceBasedSatelliteViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 264));
            this.deviceBasedSatelliteBindableIconProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 263));
            this.bindableIconsRegistryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 262));
            this.statusBarIconControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 259));
            this.tileServicesProvider = new DelegateFactory();
            this.factoryProvider6 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setForceSingleView));
            this.customTileAddedSharedPrefsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getForceSingleView));
            DelegateFactory.setDelegate(this.tileServicesProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 258)));
            this.factoryProvider7 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 255));
            this.callbackHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getLoadingLogoPath));
            this.telephonyListenerManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_registerSystemUiCallback));
            this.provideAccessPointControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_startProKioskMode));
            this.mobileSignalControllerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_stopProKioskMode));
            this.alternateBouncerInteractorProvider = new DelegateFactory();
            this.provideAnimationFeatureFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setAsoc));
            this.provideDialogTransitionAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getAsoc));
            this.internetDialogManagerProvider = new DelegateFactory();
            this.toastFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getBsohUnbiased));
            this.provideIndividualSensorPrivacyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getTcpDump));
            this.appOpsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_stopTcpDump));
            this.locationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_startTcpDump));
            this.wifiStateWorkerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_readFile));
            this.factoryProvider8 = new DelegateFactory();
            this.factoryProvider9 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getBsoh));
            DelegateFactory.setDelegate(this.internetDialogManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_stayInDexForegroundMode)));
            this.provideStatusBarNetworkControllerBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setApplicationRestrictionsInternal));
            this.networkControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setShuttingDownAnimationSub));
            this.ethernetInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setKeyedAppStatesReport));
            this.internetTileViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_getApplicationRestrictionsInternal));
            this.bindInternetTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_setBootingAnimationSub);
            this.colorInversionTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, IKnoxCustomManager.Stub.TRANSACTION_migrateApplicationRestrictions);
            this.nightDisplayTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 300);
            this.isReduceBrightColorsAvailableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 302));
            this.reduceBrightColorsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 303));
            this.reduceBrightColorsTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 301);
            this.oneHandedModeTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 304);
            this.colorCorrectionTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 305);
            this.dreamTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VpnErrorValues.ERROR_STOPPING_CONNECTION_BEFORE_REMOVING);
            this.fontScalingDialogDelegateProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 308);
            this.fontScalingTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VpnErrorValues.ERROR_VPN_RECREATE_PROFILE_FAIL);
            this.provideLocalBluetoothControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 312));
            this.factoryProvider10 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 311));
            this.hearingDevicesCheckerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 313));
            this.hearingDevicesDialogManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 310));
            this.providerBluetoothLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 316));
            this.bluetoothLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 315));
            this.bluetoothRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 317));
            this.bluetoothControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 314));
            this.hearingDevicesTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 309);
            this.colorAdjustmentTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 318);
            this.highContrastFontTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 319);
            this.colorLensTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 320);
            this.satelliteModeObserverHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 322));
            this.wifiTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 321);
            this.sBluetoothControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 324));
            this.sBluetoothTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 323);
            this.subscreenUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 326));
            this.mobileDataTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 325);
            this.castControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 328));
            this.hotspotControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 329));
            this.tileJavaAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 330));
            this.castTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 327);
            this.provideDataSaverControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, CustomDeviceManager.DESTINATION_ADDRESS));
            this.hotspotTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, CustomDeviceManager.SOURCE_ADDRESS);
            this.airplaneModeTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 333);
            this.dataSaverTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 334);
            this.nfcTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 335);
            this.secDeviceControlsControllerImplProvider = new DelegateFactory();
        }

        public final void initialize4(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.secDeviceControlsTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 336);
            this.zenModeControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 338));
            this.dndTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 337);
            this.managedProfileControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 340));
            this.sWorkModeTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 339);
            this.flashlightControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 342));
            this.flashlightTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 341);
            this.blueLightFilterTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 343);
            this.locationTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 344);
            this.cameraToggleTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 345);
            this.microphoneToggleTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 346);
            this.nextAlarmControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 348));
            this.alarmTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 347);
            this.uiModeNightTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 349);
            this.syncTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 350);
            this.screenCaptureTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_SUCCESS);
            this.qRCodeScannerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_FAIL_TO_GET_KEY));
            this.qRCodeScannerTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, QuantumSecurityInfo.QUANTUM_KEY_STATUS.KEY_STATUS_EXCEPTION);
            this.keyguardDismissUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 355));
            this.traceurMessageSenderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 356));
            this.issueRecordingStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 357));
            this.provideActivityManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 360));
            this.screenCaptureDevicePolicyResolverProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 359);
            this.mediaProjectionMetricsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 361));
            this.factoryProvider11 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 358));
            this.recordIssueTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 354);
            this.factoryProvider12 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 364));
            this.factoryProvider13 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 365));
            this.recordingControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 363));
            this.screenRecordTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 362);
            this.provideQuickAccessWalletClientProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 368));
            this.quickAccessWalletControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 367));
            this.quickAccessWalletTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 366);
            this.soundModeTileProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 369);
            this.providesMediaTimeoutListenerLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 376));
            this.mediaTimeoutLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 375));
            this.mediaFlagsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 377));
            this.mediaTimeoutListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 374));
            this.provideMediaBrowserBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.ALTERNATIVE_SERVICES));
            this.resumeMediaBrowserLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 379));
            this.mediaResumeListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 378));
            this.provideMediaMuteAwaitLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 383));
            this.mediaMuteAwaitLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY_CSFB));
            this.mediaMuteAwaitConnectionManagerFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.ALTERNATIVE_SERVICES_EMERGENCY));
            this.activeNotificationListRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 387));
            this.activeNotificationsInteractorProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 386);
            this.notifLiveDataStoreImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 388));
            this.notificationDismissibilityProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 391));
            this.notifCollectionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 390));
            this.notifPipelineChoreographerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 393));
            this.notificationClickNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 395));
            this.notificationInteractionTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 394));
            this.shadeListBuilderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 392));
            this.renderStageManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 396));
            this.notifPipelineProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 389));
            this.notificationVisibilityProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 385));
            this.overviewProxyServiceProvider = new DelegateFactory();
            this.providesLayoutProviderContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 401));
            this.providesBandAidPackFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 402));
            this.provideNavBarServiceLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 405));
            this.providesNavBarLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 404));
            this.interactorFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 403));
            this.storeLogUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.NOT_ACCEPTABLE));
            this.provideSysUiStateProvider = new DelegateFactory();
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 400);
            this.navBarStoreImplProvider = switchingProvider;
            this.provideNavbarStoreProvider = DoubleCheck.provider(switchingProvider);
            this.navigationModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 399));
            this.accessibilityButtonModeObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.REQUEST_TIMEOUT));
            this.accessibilityButtonTargetsObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 409));
            this.notificationShadeWindowControllerImplProvider = new DelegateFactory();
            this.deviceProvisioningInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 414));
            this.splitShadeStateControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 417));
            this.remoteInputQuickSettingsDisablerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.UNSUPPORTED_URI_SCHEME));
            this.provideDisableFlagsRepositoryLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 418));
            this.disableFlagsLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 419));
            this.disableFlagsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.UNSUPPORTED_MEDIA_TYPE));
            this.dozeParametersProvider = new DelegateFactory();
            this.headlessSystemUserModeImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 421));
            this.telephonyRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.INTERVAL_TOO_BRIEF));
            this.telephonyInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.SESSION_INTERVAL_TOO_SMALL));
            this.refreshUsersSchedulerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 424));
            this.userSwitcherInteractorProvider = new DelegateFactory();
            this.guestUserInteractorProvider = new DelegateFactory();
            this.userSwitcherControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 428));
            this.factoryProvider14 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 427));
            this.guestResumeSessionReceiverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 426));
            this.factoryProvider15 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 429));
            DelegateFactory.setDelegate(this.guestUserInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 425)));
            DelegateFactory.setDelegate(this.userSwitcherInteractorProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.BAD_EXTENSION)));
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 435);
            this.displayStateInteractorImplProvider = switchingProvider2;
            this.providesDisplayStateInteractorProvider = DoubleCheck.provider(switchingProvider2);
            this.udfpsOverlayInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 436));
            this.fingerprintPropertyInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 434));
            this.deviceEntryUdfpsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 433));
            this.secQSPanelResourcePickerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 438));
            this.largeScreenHeaderHelperProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 437);
            this.sharedNotificationContainerInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 432));
            this.shadeInteractorSceneContainerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 431));
            this.shadeInteractorLegacyImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 439));
            this.provideBaseShadeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 430));
        }

        public final void initialize5(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.shadeInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 413));
            this.falsingInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 444));
            this.bouncerRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 449));
            this.sessionTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 450));
            this.sceneBackInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 451));
            this.bouncerInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 448));
            this.inputMethodRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 453));
            this.inputMethodInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 452));
            this.simBouncerRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 455));
            this.simBouncerInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 454));
            this.emergencyServicesRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 457));
            this.emergencyAffordanceManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 458));
            this.provideDozeLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 459));
            this.bouncerActionButtonInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 456));
            this.implProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 460));
            this.userSwitcherViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 461));
            this.provideBiometricLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 466));
            this.faceHelpMessageDeferralFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 465));
            this.faceHelpMessageDeferralInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 464));
            this.devicePostureInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 467));
            this.biometricMessageInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 463));
            this.deviceEntryInteractorProvider = new DelegateFactory();
            this.viewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 462));
            this.viewModelProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 447));
            this.bouncerDialogFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 468));
            this.bouncerSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 446));
            this.providesCommunalSceneDataSourceDelegatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 473));
            this.communalSceneRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 472));
            this.communalSceneInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 471));
            this.communalInteractorProvider = new DelegateFactory();
            this.communalSettingsRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 475));
            this.provideCommunalTableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 476));
            this.communalSettingsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 474));
            this.communalTutorialDisabledRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 478));
            this.communalTutorialInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 477));
            this.mediaHostStatesManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.ADDRESS_INCOMPLETE));
            this.provideMediaViewLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.BUSY_HERE));
            this.mediaViewLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 485));
            this.provideBackgroundRepeatableExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.REQUEST_TERMINATED));
            this.mediaViewControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 483);
            this.providesMediaDataManagerProvider = new DelegateFactory();
            this.provideNearbyMediaDevicesLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 491));
            this.nearbyMediaDevicesLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 490));
            this.nearbyMediaDevicesManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 489));
            this.factoryProvider16 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.NOT_ACCEPTABLE_HERE));
            this.mediaCarouselControllerProvider = new DelegateFactory();
            this.mediaUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 492));
            this.activityIntentHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 493));
            this.notificationLockscreenUserManagerImplProvider = new DelegateFactory();
            this.factoryProvider17 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 495));
            this.broadcastDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 494));
            this.mediaControlPanelProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 482);
            this.visualStabilityProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 496));
            this.provideMediaCarouselControllerBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 498));
            this.mediaCarouselControllerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 497));
            this.mediaDataRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 502));
            this.mediaDataProcessorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 501));
            this.mediaFilterRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 504));
            this.providesMediaLoadingLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 506));
            this.mediaLoadingLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 505));
            this.mediaDataFilterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 503));
            this.mediaCarouselInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 500));
            this.mediaControlInteractorFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 507));
            this.mediaRecommendationsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 509));
            this.mediaRecommendationsViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 508));
            this.mediaCarouselViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 499));
            DelegateFactory.setDelegate(this.mediaCarouselControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 481)));
            this.provideDreamLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 511));
            this.dreamOverlayStateControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 510));
            this.communalColorsImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 513));
            this.provideKeyguardTransitionAnimationLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 516));
            this.keyguardTransitionAnimationFlowProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 515));
            this.glanceableHubToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 514));
            this.lockscreenToGlanceableHubTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 517));
            this.dreamingToGlanceableHubTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 518));
            this.glanceableHubToDreamingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 519));
            this.communalTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 512));
            this.mediaHierarchyManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.TEMPORARILY_UNAVAILABLE));
            this.providesCommunalMediaHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 479));
            this.provideCommunalLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 520));
            this.communalViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 470));
            this.widgetInteractionHandlerProvider = new DelegateFactory();
            this.communalSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 469));
            this.providesNotificationStackScrollLayoutProvider = new DelegateFactory();
            this.notificationViewHeightRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 524));
            this.notificationPlaceholderRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 525));
            this.notificationStackAppearanceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 523));
            this.notificationsPlaceholderViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 522));
            this.goneSceneViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 526));
            this.goneSceneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 521));
            this.accessibilityManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 531));
            this.keyguardLongPressInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 530));
            this.keyguardLongPressViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 529));
            this.lockscreenSceneViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 528));
            this.provideNotificationHeadsUpLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 536));
            this.groupMembershipManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 537));
            this.avalancheControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 538));
            this.headsUpManagerPhoneProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 535));
            this.notificationsKeyguardViewStateRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 539));
            this.provideKeyguardSmallClockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 542));
        }

        public final void initialize6(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.provideKeyguardLargeClockLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 543));
            this.getClockRegistryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 541));
            this.keyguardClockRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 540));
            this.keyguardClockInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 534));
            this.keyguardBottomAreaInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 547));
            this.keyguardQuickAffordanceLocalUserSelectionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 550));
            this.keyguardQuickAffordanceRemoteUserSelectionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 551));
            this.keyguardQuickAffordanceLegacySettingSyncerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 552));
            this.cameraGestureHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 554));
            this.cameraQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 553));
            this.doNotDisturbQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 555));
            this.flashlightQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 556));
            this.glanceableHubQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 557));
            this.homeControlsKeyguardQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 558));
            this.ringerModeTrackerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 560));
            this.muteQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 559));
            this.quickAccessWalletKeyguardQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 561));
            this.qrCodeScannerKeyguardQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 562));
            this.videoCameraQuickAffordanceConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 563));
            this.noteTaskBubblesControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 565));
            this.noteTaskControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 564));
            this.stylusManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 566));
            DelegateFactory delegateFactory = new DelegateFactory();
            this.keyguardQuickAffordanceRepositoryProvider = delegateFactory;
            DelegateFactory.setDelegate(delegateFactory, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 549)));
            this.keyguardShortcutManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 567));
            this.keyguardQuickAffordanceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 548));
            this.burnInInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 568));
            this.aodToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 569));
            this.dozingToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 570));
            this.dreamingHostedToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 571));
            this.keyguardOcclusionRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 575));
            this.keyguardOcclusionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 574));
            this.fromDreamingTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 573));
            this.dreamingToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 572));
            this.goneToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 576));
            this.occludedToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 577));
            this.offToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 578));
            this.primaryBouncerToLockscreenTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 579));
            this.lockscreenToAodTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.PRECONDITION_FAILURE));
            this.lockscreenToDozingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 581));
            this.lockscreenToDreamingHostedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 582));
            this.lockscreenToDreamingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 583));
            this.lockscreenToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 584));
            this.lockscreenToOccludedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 585));
            this.lockscreenToPrimaryBouncerTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 586));
            this.provideKeyguardLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 588));
            this.bouncerMessageRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 590));
            this.countDownTimerUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 591));
            this.primaryBouncerInteractorProvider = new DelegateFactory();
            this.deviceEntryFaceAuthRepositoryImplProvider = new DelegateFactory();
            this.bouncerMessageInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 589));
            this.indicationHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 592));
            this.secRotationWatcherProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 593));
            this.pluginLockMediatorImplProvider = new DelegateFactory();
            this.pluginLockDataImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 594));
            this.provideGoodLockLifecycleProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 596));
            this.pluginLockStarManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 595));
            this.pluginWallpaperManagerImplProvider = new DelegateFactory();
            this.provideWallpaperLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 599));
            this.pluginLockUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.BUSY_EVERYWHERE));
            this.pluginFaceWidgetManagerProvider = new DelegateFactory();
            this.provideTaskStackChangeListenersProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 602));
            this.subScreenManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 601));
            this.wallpaperChangeNotifierProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DECLINE));
            this.coverWallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 598));
            this.keyguardWallpaperControllerProvider = new DelegateFactory();
            this.provideKeyguardEditModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 597));
            this.provideKeyguardIndicationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 587));
            this.providesNotificationShadeWindowViewProvider = new DelegateFactory();
            this.providesNotificationPanelViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.DOES_NOT_EXIST_ANYWHERE));
            this.providesSecLockIconViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 607));
            this.udfpsControllerProvider = new DelegateFactory();
            this.secLockIconViewControllerProvider = new DelegateFactory();
            this.dozeLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 611));
            this.dozeScrimControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 610));
            this.biometricUnlockLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 612));
            this.provideNotificationMediaManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 613));
            this.screenOffAnimationControllerProvider = new DelegateFactory();
            this.biometricUnlockInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 614));
            this.biometricUnlockControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 609));
            this.provideScrimLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 616));
            this.providesLightRevealScrimProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 615));
            this.deviceEntrySourceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 618));
            this.authRippleInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 617));
            this.providesAuthRippleViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 619));
            this.authRippleControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 608));
            this.providesViewMediatorCallbackProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 620);
            DelegateFactory.setDelegate(this.secLockIconViewControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VolteConstants.ErrorCode.NOT_ACCEPTABLE2)));
            this.providesKeyguardRootViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 622));
            this.emptyLockIconViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 621));
            this.provideLockIconViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 605));
            this.alternateBouncerToAodTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 624));
            this.alternateBouncerToDozingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 625));
            this.keyguardDismissInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 628));
            this.keyguardDismissActionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 627));
            this.alternateBouncerToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 626));
            this.alternateBouncerToOccludedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 629));
            this.alternateBouncerToPrimaryBouncerTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 630));
            this.aodToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 631));
            this.aodToOccludedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 632));
        }

        public final void initialize7(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.aodToPrimaryBouncerTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 633));
            this.dozingToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 634));
            this.dozingToOccludedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 635));
            this.dozingToPrimaryBouncerTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 636));
            this.dreamingToAodTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 637));
            this.goneToAodTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 638));
            this.goneToDozingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 639));
            this.occludedToAodTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 640));
            this.primaryBouncerToAodTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 641));
            this.primaryBouncerToDozingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 642));
            this.glanceableHubToOccludedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 643));
            this.occludedToGlanceableHubTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 644));
            this.goneToGlanceableHubTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 645));
            this.accessibilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 646));
            this.deviceEntryIconViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 623));
            this.deviceEntryForegroundViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 647));
            this.deviceEntryBackgroundViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 648));
            this.dreamingToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 650));
            this.goneToDreamingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 651));
            this.occludedToDozingTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 652));
            this.primaryBouncerToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 653));
            this.headsUpNotificationIconViewStateRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 657));
            this.ongoingCallRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 659));
            this.ongoingCallLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 660));
            this.statusBarWindowControllerProvider = new DelegateFactory();
            this.provideSwipeUpLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 663));
            this.swipeUpGestureLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 662));
            this.swipeStatusBarAwayGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 661));
            this.letterboxBackgroundProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 667));
            this.letterboxAppearanceCalculatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 666));
            this.statusBarModePerDisplayRepositoryFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 665));
            this.statusBarModeRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 664));
            this.ongoingCallControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 658));
            this.notificationIconContainerAlwaysOnDisplayViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 656));
            this.keyguardClockViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 655));
            this.aodBurnInViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 654));
            this.aodAlphaViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 668));
            this.keyguardRootViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 649));
            this.keyguardBlueprintInteractorProvider = new DelegateFactory();
            this.occludingAppDeviceEntryInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 671));
            this.occludingAppDeviceEntryMessageViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 670));
            this.provideChipbarLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 674));
            this.chipbarLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 673));
            this.chipbarAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 675));
            this.swipeChipbarAwayGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 676));
            this.viewUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 677));
            this.temporaryViewUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 678));
            this.chipbarCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 672));
            this.deviceEntryBiometricAuthInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 680));
            this.keyEventRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 682));
            this.keyEventInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 681));
            this.deviceEntryHapticsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 679));
            this.factoryProvider18 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 685));
            this.lockscreenSmartspaceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 684));
            this.keyguardSmartspaceRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 687));
            this.keyguardSmartspaceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 686));
            this.keyguardSmartspaceViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 683));
            this.lockscreenContentViewModelProvider = new DelegateFactory();
            this.keyguardSurfaceControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 690));
            this.aODAmbientWallpaperHelperProvider = new DelegateFactory();
            this.keyguardSecLegacyUnlockAnimationControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 689));
            this.providesKeyguardMediaHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 691));
            this.providesSharedNotificationContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 693));
            this.occludedToGoneTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 695));
            this.unfoldTransitionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 696));
            this.sharedNotificationContainerViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 694));
            this.provideAllowNotificationLongPressProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 699));
            this.extensionControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, KnoxEnterpriseLicenseManager.ERROR_LICENSE_QUANTITY_EXHAUSTED_ON_AUTO_RELEASE));
            this.notificationPersonExtractorPluginBoundaryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, KnoxEnterpriseLicenseManager.ERROR_LICENSE_ACTIVATION_NOT_FOUND));
            this.peopleNotificationIdentifierImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 702));
            this.highPriorityProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 701));
            this.peopleSpaceWidgetManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 705));
            this.channelEditorDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 706));
            this.assistantFeedbackControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 707));
            this.provideShadeControllerProvider = new DelegateFactory();
            this.provideNotificationInterruptLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 711));
            this.keyguardNotificationVisibilityProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 712));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 713);
            this.eventLogImplProvider = switchingProvider;
            this.bindEventLogProvider = DoubleCheck.provider(switchingProvider);
            this.notificationInterruptStateProviderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 710));
            this.avalancheProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 715));
            this.visualInterruptionDecisionProviderImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 714);
            this.provideVisualInterruptionDecisionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 709));
            this.provideSensitiveNotificationProtectionLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 717));
            this.sensitiveNotificationProtectionControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 716));
            this.provideBubblesManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 708));
            this.shadeAnimationRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 722));
            this.shadeAnimationInteractorSceneContainerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 721));
            this.shadeAnimationInteractorLegacyImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 723));
            this.provideShadeAnimationInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, DeviceState.CAPTURED_BLUR_THRESHOLD_WIDTH));
            this.seenNotificationsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 724));
            this.visibilityLocationProviderDelegatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 725));
            this.visualStabilityCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 719));
            this.onUserInteractionCallbackImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 718));
            this.windowRootViewVisibilityRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 727));
            this.windowRootViewVisibilityInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 726));
            this.providesSecPanelBackgroundProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 730));
            this.secPanelBackgroundControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 729));
            this.providesCaptruedBlurContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 732));
            this.capturedBlurContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 731));
        }

        public final void initialize8(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.dcmMascotViewContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 735));
            this.keyguardTouchDymLockInjectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 737));
            this.keyguardTouchLoggingInjectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 738));
            this.keyguardTouchSecurityInjectorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 739));
            this.provideLSShadeTransitionControllerBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 741));
            this.lockscreenGestureLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 742));
            this.provideKeyguardMediaControllerLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 746));
            this.keyguardMediaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 745));
            this.notificationSectionsFeatureManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 747));
            this.mediaContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 748));
            this.notificationRoundnessManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 749));
            this.sectionHeaderControllerSubcomponentBuilderProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 751);
            this.providesIncomingHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 750));
            this.providesPeopleHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 752));
            this.providesAlertingHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 753));
            this.providesSilentHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 754));
            this.providesFavoriteHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 755));
            this.providesOngoingActivityHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 756));
            this.providesHighlightsHeaderSubcomponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 757));
            this.notificationSectionsManagerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 744);
            this.largeScreenShadeInterpolatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 758));
            this.ambientStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 743));
            this.factoryProvider19 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 762));
            this.samsungStatusBarGrayIconHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 763));
            this.darkIconDispatcherImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 761));
            this.lightBarControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 760));
            this.factoryProvider20 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 764));
            this.wallpaperRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 765));
            this.coverHostImplProvider = new DelegateFactory();
            this.secLsScrimControlHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 766));
            this.scrimControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 759));
            this.factoryProvider21 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 767));
            this.blurUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 769));
            this.wallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 770));
            this.notificationShadeDepthControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 768));
            this.factoryProvider22 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 771));
            this.factoryProvider23 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 772));
            this.factoryProvider24 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 773));
            this.shadeLockscreenInteractorImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 775);
            this.notificationPanelViewControllerProvider = new DelegateFactory();
            this.provideShadeLockscreenInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 774));
            this.naturalScrollingSettingObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 776));
            this.providesQSMediaHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 779));
            this.providesQuickQSMediaHostProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 780));
            this.provideQSFragmentDisableLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 781));
            this.fgsManagerControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 783));
            this.footerActionsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 782));
            this.securityControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 787));
            this.qSSecurityFooterUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 786));
            this.securityRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 788));
            this.foregroundServicesRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 789));
            this.userInfoControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 791));
            this.userSwitcherRepositoryImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 790));
            this.footerActionsInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 785));
            this.globalActionsDialogLiteProvider = new DelegateFactory();
            this.globalActionsImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 794);
            this.globalActionsComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 793));
            this.sysuiColorExtractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 795));
            this.globalActionsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 797));
            this.globalActionsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 796));
            DelegateFactory.setDelegate(this.globalActionsDialogLiteProvider, new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 792));
            this.isPMLiteEnabledProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 798));
            this.factoryProvider25 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 784));
            this.provideDisplayMetricsRepoLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VpnErrorValues.ERROR_STORING_PROXY_PASSWORD));
            this.displayMetricsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 802));
            this.qsFrameTranslateImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 801));
            this.provideNotificationLockScreenLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 806));
            this.notificationWakeUpCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VpnErrorValues.ERROR_INVALID_IPV6_CONFIGURATION));
            this.lockscreenShadeTransitionControllerProvider = new DelegateFactory();
            this.pulseExpansionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VpnErrorValues.ERROR_INVALID_PROXY_CONFIGURATION));
            this.provideSmartReplyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 808));
            this.remoteInputUriControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 809));
            this.provideNotificationRemoteInputLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 811));
            this.remoteInputControllerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 810));
            this.provideNotifInteractionLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 812));
            this.notificationRemoteInputManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 807));
            this.notificationStackScrollLayoutControllerProvider = new DelegateFactory();
            this.providesShadeHeaderViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 814));
            this.airplaneModeInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 819));
            this.airplaneModeViewModelImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 818));
            this.provideMobileViewLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 823));
            this.mobileViewLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 822));
            this.provideVerboseMobileViewLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 825));
            this.verboseMobileViewLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 824));
            this.connectivityConstantsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 826));
            this.mobileIconsViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 821));
            this.provideFirstMobileSubShowingNetworkTypeIconProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 820));
            this.wifiConstantsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 827));
            this.wifiViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 817));
            this.wifiUiAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 816));
            this.mobileUiAdapterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 828));
            this.mobileContextProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 829));
            this.factoryProvider26 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 815));
            this.privacyConfigProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 831));
            this.providePrivacyLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 833));
            this.appOpsPrivacyItemMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 832));
            this.privacyItemControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 830));
            this.providesOngoingPrivacyChipProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 834));
            this.privacyDialogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 835));
            this.privacyDialogControllerV2Provider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 836));
        }

        public final void initialize9(DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.providesStatusIconContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 837));
            this.provideShadeLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 838));
            this.provideTimeTickHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 839));
            this.providesBatteryMeterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 841));
            this.slimIndicatorViewMediatorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 842));
            this.providesBatteryMeterViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 840));
            this.provideShadeCarrierLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 844));
            this.shadeCarrierGroupControllerLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 843));
            this.carrierTextUtilProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 845));
            this.provideCarrierTextManagerLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 846));
            this.wifiTextManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 847));
            this.subscriptionManagerSlotIndexResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 848));
            this.providesCombinedShadeHeadersConstraintManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 849));
            this.provideStatusIconContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 850));
            this.provideNetspeedViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 851));
            this.shadeHeaderControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 813));
            this.unlockedScreenOffAnimationControllerProvider = new DelegateFactory();
            this.statusBarTouchableRegionManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 852));
            this.quickSettingsControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 800));
            this.secPanelSplitHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 799));
            this.qSImplProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 778);
            this.qSSceneAdapterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 777));
            DelegateFactory.setDelegate(this.lockscreenShadeTransitionControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 740)));
            this.keyguardStatusViewAlphaChangeControllerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 853));
            this.provideKeyguardClickControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 854));
            this.keyguardTouchAnimatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 736));
            this.dynamicPrivacyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 855));
            this.statusBarWindowStateControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 856));
            this.builderProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 857);
            this.bindEventManagerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 859));
            this.conversationNotificationManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 858));
            this.notificationGutsManagerProvider = new DelegateFactory();
            this.providesNotificationsQuickSettingsContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 861));
            this.notificationsQSContainerControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 860));
            this.providesTapAgainViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 863));
            this.tapAgainViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 862));
            this.navigationBarControllerImplProvider = new DelegateFactory();
            this.quickSettingsControllerSceneImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 866));
            this.provideQuickSettingsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 865));
            this.keyguardSecBottomAreaViewControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 864);
            this.provideListContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 867));
            this.notificationStackSizeCalculatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 868));
            this.goneToDreamingLockscreenHostedTransitionViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 869));
            this.coverWindowDelegateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 871));
            this.coverScreenManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 870));
            this.keyguardViewConfiguratorProvider = new DelegateFactory();
            this.notificationShelfManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 872));
            this.indicatorTouchHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 873));
            this.faceWidgetNotificationControllerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 875));
            this.lockscreenNotificationIconsOnlyControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 874));
            this.dataUsageLabelManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 876));
            this.qsStatusEventLogProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 877));
            DelegateFactory.setDelegate(this.notificationPanelViewControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 734)));
            this.provideAssistUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 879));
            this.optionalOfCentralSurfacesProvider = new DelegateFactory();
            this.phoneStateMonitorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 880));
            this.assistLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 882));
            this.assistManagerProvider = new DelegateFactory();
            this.defaultUiControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 881));
            this.assistRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 884));
            this.assistInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 883));
            DelegateFactory.setDelegate(this.assistManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 878)));
            this.shadeControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 733));
            this.secQpBlurControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 728));
            DelegateFactory.setDelegate(this.notificationGutsManagerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, KnoxEnterpriseLicenseManager.ERROR_LICENSE_DEACTIVATED)));
            this.notificationListenerSettingsRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 888));
            this.notificationListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 887));
            this.targetSdkResolverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 889));
            this.notifCoordinatorsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 891));
            this.notifInflationErrorManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 893));
            this.provideNotifInflationLogBufferProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 894));
            this.notifInflaterImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 892));
            this.sectionHeaderVisibilityProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 896));
            this.notifViewBarnProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 897));
            this.shadeViewManagerFactoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 895));
            this.notifPipelineInitializerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 890));
            this.notifBindPipelineProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 898));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, VpnErrorValues.ERROR_USB_TETHERING_FAILED);
            this.notifRemoteViewCacheImplProvider = switchingProvider;
            this.provideNotifRemoteViewCacheProvider = DoubleCheck.provider(switchingProvider);
            this.provideNotifInflationLooperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 904));
            this.provideNotifInflationExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 903));
            this.smartReplyConstantsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 905));
            this.provideDevicePolicyManagerWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 906));
            this.notificationStackInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 911));
            this.notificationViewFlipperViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 910));
            this.notificationViewFlipperFactoryProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 909);
            SwitchingProvider switchingProvider2 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 908);
            this.notifRemoteViewsFactoryContainerImplProvider = switchingProvider2;
            this.provideNotifRemoteViewsFactoryContainerProvider = DoubleCheck.provider(switchingProvider2);
            this.providerProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 907));
            SwitchingProvider switchingProvider3 = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 912);
            this.headsUpStyleProviderImplProvider = switchingProvider3;
            this.provideHeadsUpStyleManagerProvider = DoubleCheck.provider(switchingProvider3);
            this.notificationContentInflaterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 901));
            this.notificationRowContentBinderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 913));
            this.provideNotificationRowContentBinderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 900));
            this.rowContentBindStageProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 899));
            this.provideNotificationPanelLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 915));
            this.provideLegacyLoggerOptionalProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 914));
            this.rowInflaterTaskProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 917);
            this.iconManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 918));
            this.notificationRowBinderImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 916));
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(SystemUIAppComponentFactoryBase systemUIAppComponentFactoryBase) {
            injectSystemUIAppComponentFactoryBase(systemUIAppComponentFactoryBase);
        }

        public final AODIntentService injectAODIntentService(AODIntentService aODIntentService) {
            aODIntentService.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            aODIntentService.mHandler = (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get();
            return aODIntentService;
        }

        public final BinderCallMonitorImpl injectBinderCallMonitorImpl(BinderCallMonitorImpl binderCallMonitorImpl) {
            binderCallMonitorImpl.mLogger = (SamsungServiceLogger) this.provideBinderCallMonitorLoggerProvider.get();
            return binderCallMonitorImpl;
        }

        public final CentralSurfacesImpl injectCentralSurfacesImpl(CentralSurfacesImpl centralSurfacesImpl) {
            centralSurfacesImpl.mSecLightRevealScrimHelper = (SecLightRevealScrimHelper) this.secLightRevealScrimHelperProvider.get();
            centralSurfacesImpl.mKeyguardFastBioUnlockController = (KeyguardFastBioUnlockController) this.keyguardFastBioUnlockControllerProvider.get();
            return centralSurfacesImpl;
        }

        public final CustomizationProvider injectCustomizationProvider(CustomizationProvider customizationProvider) {
            customizationProvider.interactor = (KeyguardQuickAffordanceInteractor) this.keyguardQuickAffordanceInteractorProvider.get();
            customizationProvider.previewManager = (KeyguardRemotePreviewManager) this.keyguardRemotePreviewManagerProvider.get();
            customizationProvider.mainDispatcher = (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get();
            return customizationProvider;
        }

        public final Dependency injectDependency(Dependency dependency) {
            dependency.mOnUserInteractionCallback = DoubleCheck.lazy(this.onUserInteractionCallbackImplProvider);
            dependency.mChannelEditorDialogController = DoubleCheck.lazy(this.channelEditorDialogControllerProvider);
            dependency.mHighPriorityProvider = DoubleCheck.lazy(this.highPriorityProvider);
            dependency.mAssistantFeedbackController = DoubleCheck.lazy(this.assistantFeedbackControllerProvider);
            dependency.mPeopleSpaceWidgetManager = DoubleCheck.lazy(this.peopleSpaceWidgetManagerProvider);
            dependency.mUserContextProvider = DoubleCheck.lazy(this.provideUserTrackerProvider);
            dependency.mBubblesManagerOptional = DoubleCheck.lazy(this.provideBubblesManagerProvider);
            dependency.mBgHandler = DoubleCheck.lazy(this.provideBgHandlerProvider);
            dependency.mLauncherApps = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideLauncherAppsProvider);
            dependency.mNotifCollection = DoubleCheck.lazy(this.notifCollectionProvider);
            dependency.mSubscreenNotificationController = DoubleCheck.lazy(this.subscreenNotificationControllerProvider);
            dependency.mSubscreenMusicWidgetController = DoubleCheck.lazy(this.subscreenMusicWidgetControllerProvider);
            dependency.mDumpManager = (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get();
            dependency.mBroadcastDispatcher = DoubleCheck.lazy(this.broadcastDispatcherProvider);
            dependency.mBluetoothController = DoubleCheck.lazy(this.bluetoothControllerImplProvider);
            dependency.mKeyguardUpdateMonitor = DoubleCheck.lazy(this.keyguardSecUpdateMonitorImplProvider);
            dependency.mDeviceProvisionedController = DoubleCheck.lazy(this.bindDeviceProvisionedControllerProvider);
            dependency.mPluginManager = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.providesPluginManagerProvider);
            dependency.mAssistManager = DoubleCheck.lazy(this.assistManagerProvider);
            dependency.mSecurityController = DoubleCheck.lazy(this.securityControllerImplProvider);
            dependency.mTunerService = DoubleCheck.lazy(this.tunerServiceImplProvider);
            dependency.mDarkIconDispatcher = DoubleCheck.lazy(this.darkIconDispatcherImplProvider);
            dependency.mConfigurationController = DoubleCheck.lazy(this.configurationControllerImplProvider);
            dependency.mStatusBarIconControllerLazy = DoubleCheck.lazy(this.statusBarIconControllerImplProvider);
            dependency.mWakefulnessLifecycle = DoubleCheck.lazy(this.wakefulnessLifecycleProvider);
            dependency.mFragmentService = DoubleCheck.lazy(this.fragmentServiceProvider);
            dependency.mVolumeDialogController = DoubleCheck.lazy(this.volumeDialogControllerImplProvider);
            dependency.mVolumeManager = DoubleCheck.lazy(this.volumeManagerProvider);
            dependency.mMetricsLogger = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider);
            dependency.mTunablePaddingService = DoubleCheck.lazy(this.tunablePaddingServiceProvider);
            dependency.mUiOffloadThread = DoubleCheck.lazy(this.uiOffloadThreadProvider);
            dependency.mLightBarController = DoubleCheck.lazy(this.lightBarControllerProvider);
            dependency.mOverviewProxyService = DoubleCheck.lazy(this.overviewProxyServiceProvider);
            dependency.mNavBarModeController = DoubleCheck.lazy(this.navigationModeControllerProvider);
            dependency.mNavigationBarController = DoubleCheck.lazy(this.navigationBarControllerImplProvider);
            dependency.mStatusBarStateController = DoubleCheck.lazy(this.statusBarStateControllerImplProvider);
            dependency.mSensitiveNotificationProtectionController = DoubleCheck.lazy(this.sensitiveNotificationProtectionControllerImplProvider);
            dependency.mNotificationLockscreenUserManager = DoubleCheck.lazy(this.notificationLockscreenUserManagerImplProvider);
            dependency.mNotificationMediaManager = DoubleCheck.lazy(this.provideNotificationMediaManagerProvider);
            dependency.mBgLooper = DoubleCheck.lazy(this.provideBgLooperProvider);
            dependency.mMainHandler = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideMainHandlerProvider);
            dependency.mTimeTickHandler = DoubleCheck.lazy(this.provideTimeTickHandlerProvider);
            dependency.mSysUiStateFlagsContainer = DoubleCheck.lazy(this.provideSysUiStateProvider);
            dependency.mWallpaperManager = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideIWallPaperManagerProvider);
            dependency.mCommandQueue = DoubleCheck.lazy(this.provideCommandQueueProvider);
            dependency.mUiEventLogger = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider);
            dependency.mContentInsetsProviderLazy = DoubleCheck.lazy(this.statusBarContentInsetsProvider);
            dependency.mFeatureFlagsLazy = DoubleCheck.lazy(this.featureFlagsClassicReleaseProvider);
            dependency.mNotificationSectionsManagerLazy = DoubleCheck.lazy(this.notificationSectionsManagerProvider);
            dependency.mINotificationManager = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideINotificationManagerProvider);
            dependency.mScreenOffAnimationController = DoubleCheck.lazy(this.screenOffAnimationControllerProvider);
            dependency.mAmbientStateLazy = DoubleCheck.lazy(this.ambientStateProvider);
            dependency.mGroupMembershipManagerLazy = DoubleCheck.lazy(this.groupMembershipManagerImplProvider);
            dependency.mGroupExpansionManagerLazy = DoubleCheck.lazy(this.groupExpansionManagerImplProvider);
            dependency.mSystemUIDialogManagerLazy = DoubleCheck.lazy(this.systemUIDialogManagerProvider);
            dependency.mDialogTransitionAnimatorLazy = DoubleCheck.lazy(this.provideDialogTransitionAnimatorProvider);
            dependency.mUserTrackerLazy = DoubleCheck.lazy(this.provideUserTrackerProvider);
            dependency.mSensorPrivacyManager = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideSensorPrivacyManagerProvider);
            dependency.mStatusBarWindowControllerLazy = DoubleCheck.lazy(this.statusBarWindowControllerProvider);
            dependency.mSettingsHelper = DoubleCheck.lazy(this.settingsHelperProvider);
            dependency.mDesktopManager = DoubleCheck.lazy(this.provideDesktopManagerProvider);
            dependency.mPluginLockManager = DoubleCheck.lazy(this.pluginLockManagerImplProvider);
            dependency.mPluginWallpaperManager = DoubleCheck.lazy(this.pluginWallpaperManagerImplProvider);
            dependency.mPluginWallController = DoubleCheck.lazy(this.pluginWallpaperControllerProvider);
            dependency.mPluginLockStarManager = DoubleCheck.lazy(this.pluginLockStarManagerProvider);
            dependency.mSearcleManager = DoubleCheck.lazy(this.provideSearcleManagerProvider);
            dependency.mWallpaperEventNotifier = DoubleCheck.lazy(this.wallpaperEventNotifierProvider);
            dependency.mWallpaperChangeNotifier = DoubleCheck.lazy(this.wallpaperChangeNotifierProvider);
            dependency.mQSClockBellTower = DoubleCheck.lazy(this.qSClockBellTowerProvider);
            dependency.mSecHideNotificationShadeInMirrorInteractor = DoubleCheck.lazy(this.secHideNotificationShadeInMirrorInteractorProvider);
            dependency.mSecQSPanelResourcePicker = DoubleCheck.lazy(this.secQSPanelResourcePickerProvider);
            dependency.mShadeHeaderController = DoubleCheck.lazy(this.shadeHeaderControllerProvider);
            dependency.mShadeRepository = DoubleCheck.lazy(this.shadeRepositoryImplProvider);
            dependency.mSecNotificationShadeWindowStateInteractor = DoubleCheck.lazy(this.secNotificationShadeWindowStateInteractorProvider);
            dependency.mColoredBGHelper = DoubleCheck.lazy(this.coloredBGHelperProvider);
            dependency.mSecQpBlurController = DoubleCheck.lazy(this.secQpBlurControllerProvider);
            dependency.mActivityStarter = DoubleCheck.lazy(this.activityStarterImplProvider);
            dependency.mSecPanelExpansionStateInteractor = DoubleCheck.lazy(this.secPanelExpansionStateInteractorProvider);
            dependency.mQuickPanelExternalLogger = DoubleCheck.lazy(this.quickPanelExternalLoggerProvider);
            dependency.mSecQSExpansionStateInteractor = DoubleCheck.lazy(this.secQSExpansionStateInteractorProvider);
            dependency.mPanelSplitHelper = DoubleCheck.lazy(this.secPanelSplitHelperProvider);
            dependency.mSecPanelTouchBlockHelper = DoubleCheck.lazy(this.secPanelTouchBlockHelperProvider);
            dependency.mSecPanelTouchProximityInteractor = DoubleCheck.lazy(this.secPanelTouchProximityInteractorProvider);
            dependency.mQSScrimViewSwitch = DoubleCheck.lazy(this.qSScrimViewSwitchProvider);
            dependency.mSecPanelSAStatusLogInteractor = DoubleCheck.lazy(this.secPanelSAStatusLogInteractorProvider);
            dependency.mSecQSCoverResourcePicker = DoubleCheck.lazy(this.secQSCoverResourcePickerProvider);
            dependency.mPrivacyDialogController = DoubleCheck.lazy(this.privacyDialogControllerProvider);
            dependency.mSecQSDetailController = DoubleCheck.lazy(this.secQSDetailControllerProvider);
            dependency.mFalsingManager = DoubleCheck.lazy(this.falsingManagerProxyProvider);
            dependency.mResetSettingsManager = DoubleCheck.lazy(this.providerQsResetSettingsManagerProvider);
            dependency.mQSBackupRestoreManager = DoubleCheck.lazy(this.qSBackupRestoreManagerProvider);
            dependency.mSystemUIIndexMediator = DoubleCheck.lazy(this.systemUIIndexMediatorProvider);
            dependency.mKnoxStateMonitor = DoubleCheck.lazy(this.providesKnoxStateMonitorProvider);
            dependency.mMultiSIMControllerLazy = DoubleCheck.lazy(this.multiSIMControllerProvider);
            dependency.mNavBarBgHandler = DoubleCheck.lazy(this.provideNavbarBgHandlerProvider);
            dependency.mNavBarStore = DoubleCheck.lazy(this.provideNavbarStoreProvider);
            dependency.mShadeController = DoubleCheck.lazy(this.provideShadeControllerProvider);
            dependency.mSecQuickSettingsAffordanceInteractor = DoubleCheck.lazy(this.secQuickSettingsAffordanceInteractorProvider);
            dependency.mFullExpansionPanelNotiAlphaController = DoubleCheck.lazy(this.fullExpansionPanelNotiAlphaControllerProvider);
            dependency.mTaskbarDelegate = DoubleCheck.lazy(this.secTaskBarManagerImplProvider);
            dependency.mRotationLockController = DoubleCheck.lazy(this.rotationLockControllerImplProvider);
            dependency.mNetworkController = DoubleCheck.lazy(this.networkControllerImplProvider);
            dependency.mVibratorHelper = DoubleCheck.lazy(this.vibratorHelperProvider);
            dependency.mSecRotationWatcher = DoubleCheck.lazy(this.secRotationWatcherProvider);
            dependency.mUserInfoController = DoubleCheck.lazy(this.userInfoControllerImplProvider);
            dependency.mUserSwitcherController = DoubleCheck.lazy(this.userSwitcherControllerProvider);
            dependency.mUserSwitcherInteractor = DoubleCheck.lazy(this.userSwitcherInteractorProvider);
            dependency.mSelectedUserInteractor = DoubleCheck.lazy(this.selectedUserInteractorProvider);
            dependency.mDisplayLifecycle = DoubleCheck.lazy(this.displayLifecycleProvider);
            dependency.mCoverUtilWrapper = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.coverUtilWrapperProvider);
            dependency.mGlobalActionsComponent = DoubleCheck.lazy(this.globalActionsComponentProvider);
            dependency.mLooperSlowLogController = DoubleCheck.lazy(this.looperSlowLogControllerImplProvider);
            dependency.mKeyguardShortcutManager = DoubleCheck.lazy(this.keyguardShortcutManagerProvider);
            dependency.mFlashlightController = DoubleCheck.lazy(this.flashlightControllerImplProvider);
            dependency.mKeyguardMonitor = DoubleCheck.lazy(this.keyguardStateControllerImplProvider);
            dependency.mKeyguardVisibilityMonitor = DoubleCheck.lazy(this.keyguardVisibilityMonitorProvider);
            dependency.mFaceWidgetController = DoubleCheck.lazy(this.faceWidgetPluginControllerImplProvider);
            dependency.mPluginFaceWidgetManager = DoubleCheck.lazy(this.pluginFaceWidgetManagerProvider);
            dependency.mExternalClockProvider = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.externalClockProvider);
            dependency.mSubScreenManager = DoubleCheck.lazy(this.subScreenManagerProvider);
            dependency.mCoverScreenManager = DoubleCheck.lazy(this.coverScreenManagerProvider);
            dependency.mSPluginManager = DoubleCheck.lazy(this.provideSPluginManagerProvider);
            dependency.mSPluginDependencyProvider = DoubleCheck.lazy(this.sPluginDependencyProvider);
            dependency.mNotifLiveDataStore = DoubleCheck.lazy(this.notifLiveDataStoreImplProvider);
            dependency.mHeadsUpManager = DoubleCheck.lazy(this.headsUpManagerPhoneProvider);
            dependency.mNotificationShelfManager = DoubleCheck.lazy(this.notificationShelfManagerProvider);
            dependency.mSubscreenQsPanelController = DoubleCheck.lazy(this.providerSubscreenQsPanelControllerProvider);
            dependency.mPanelScreenShotBufferLogger = DoubleCheck.lazy(this.panelScreenShotBufferLoggerProvider);
            dependency.mNotiCinemaLogger = DoubleCheck.lazy(this.notiCinemaLoggerProvider);
            dependency.mNotificationBackupRestoreManager = DoubleCheck.lazy(this.notificationBackupRestoreManagerProvider);
            dependency.mShelfToolTipManager = DoubleCheck.lazy(this.shelfToolTipManagerProvider);
            dependency.mNotificationColorPicker = DoubleCheck.lazy(this.notificationColorPickerProvider);
            dependency.mNotificationGutsManager = DoubleCheck.lazy(this.notificationGutsManagerProvider);
            dependency.mFastUnlockController = DoubleCheck.lazy(this.keyguardFastBioUnlockControllerProvider);
            dependency.mCentralSurfaces = DoubleCheck.lazy(this.centralSurfacesImplProvider);
            dependency.mQuickSettingsController = DoubleCheck.lazy(this.provideQuickSettingsControllerProvider);
            dependency.mFoldController = DoubleCheck.lazy(this.keyguardFoldControllerImplProvider);
            dependency.mUnlockedScreenOffAnimationHelper = DoubleCheck.lazy(this.secUnlockedScreenOffAnimationHelperProvider);
            dependency.mSubscreenUtil = DoubleCheck.lazy(this.subscreenUtilProvider);
            dependency.mAiBriefManagerLazy = DoubleCheck.lazy(this.aiBriefManagerImplProvider);
            dependency.mSecSTQuickControlRequestReceiver = DoubleCheck.lazy(this.secSTQuickControlRequestReceiverProvider);
            dependency.mAppLockNotificationController = DoubleCheck.lazy(this.appLockNotificationControllerImplProvider);
            DoubleCheck.lazy(this.summarizeControllerProvider);
            DoubleCheck.lazy(this.notificationHighlightDpPreferenceProvider);
            return dependency;
        }

        public final DozeService injectDozeService(DozeService dozeService) {
            dozeService.mKeyguardUpdateMonitor = (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get();
            dozeService.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            dozeService.mFaceWidgetManagerLazy = DoubleCheck.lazy(this.pluginFaceWidgetManagerProvider);
            dozeService.mDozeServiceHost = (DozeServiceHost) this.dozeServiceHostProvider.get();
            dozeService.mAODAmbientWallpaperHelper = (AODAmbientWallpaperHelper) this.aODAmbientWallpaperHelperProvider.get();
            dozeService.mWakefulnessLifecycle = (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get();
            return dozeService;
        }

        public final DozeServiceHost injectDozeServiceHost(DozeServiceHost dozeServiceHost) {
            dozeServiceHost.mLooperSlowLogController = (LooperSlowLogController) this.looperSlowLogControllerImplProvider.get();
            dozeServiceHost.mPluginAODManagerLazy = DoubleCheck.lazy(this.pluginAODManagerProvider);
            return dozeServiceHost;
        }

        public final FaceWidgetNotificationControllerWrapper injectFaceWidgetNotificationControllerWrapper(FaceWidgetNotificationControllerWrapper faceWidgetNotificationControllerWrapper) {
            faceWidgetNotificationControllerWrapper.mPanelViewControllerLazy = DoubleCheck.lazy(this.notificationPanelViewControllerProvider);
            return faceWidgetNotificationControllerWrapper;
        }

        public final KeyguardSecAffordanceView injectKeyguardSecAffordanceView(KeyguardSecAffordanceView keyguardSecAffordanceView) {
            keyguardSecAffordanceView.mVibrationUtil = (VibrationUtil) this.referenceGlobalRootComponentImpl.vibrationUtilProvider.get();
            return keyguardSecAffordanceView;
        }

        public final KeyguardSecurityModel injectKeyguardSecurityModel(KeyguardSecurityModel keyguardSecurityModel) {
            keyguardSecurityModel.mKeyguardStateController = (KeyguardStateController) this.keyguardStateControllerImplProvider.get();
            return keyguardSecurityModel;
        }

        public final KeyguardSliceProvider injectKeyguardSliceProvider(KeyguardSliceProvider keyguardSliceProvider) {
            keyguardSliceProvider.mDozeParameters = (DozeParameters) this.dozeParametersProvider.get();
            keyguardSliceProvider.mZenModeController = (ZenModeController) this.zenModeControllerImplProvider.get();
            keyguardSliceProvider.mNextAlarmController = (NextAlarmController) this.nextAlarmControllerImplProvider.get();
            keyguardSliceProvider.mAlarmManager = (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get();
            keyguardSliceProvider.mContentResolver = (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get();
            keyguardSliceProvider.mMediaManager = (NotificationMediaManager) this.provideNotificationMediaManagerProvider.get();
            keyguardSliceProvider.mStatusBarStateController = (StatusBarStateController) this.statusBarStateControllerImplProvider.get();
            keyguardSliceProvider.mKeyguardBypassController = (KeyguardBypassController) this.keyguardBypassControllerProvider.get();
            keyguardSliceProvider.mKeyguardUpdateMonitor = (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get();
            keyguardSliceProvider.mUserTracker = (UserTracker) this.provideUserTrackerProvider.get();
            keyguardSliceProvider.mWakeLockLogger = wakeLockLogger();
            keyguardSliceProvider.mBgHandler = (Handler) this.provideBgHandlerProvider.get();
            return keyguardSliceProvider;
        }

        public final NotificationPanelViewController injectNotificationPanelViewController(NotificationPanelViewController notificationPanelViewController) {
            notificationPanelViewController.mBioUnlockControllerLazy = DoubleCheck.lazy(this.biometricUnlockControllerProvider);
            return notificationPanelViewController;
        }

        public final NotificationShadeWindowViewController injectNotificationShadeWindowViewController(NotificationShadeWindowViewController notificationShadeWindowViewController) {
            notificationShadeWindowViewController.mPresentationDisabler = (KeyguardPresentationDisabler) this.keyguardPresentationDisablerProvider.get();
            return notificationShadeWindowViewController;
        }

        public final PeopleProvider injectPeopleProvider(PeopleProvider peopleProvider) {
            peopleProvider.mPeopleSpaceWidgetManager = (PeopleSpaceWidgetManager) this.peopleSpaceWidgetManagerProvider.get();
            return peopleProvider;
        }

        public final PluginAODManager injectPluginAODManager(PluginAODManager pluginAODManager) {
            pluginAODManager.mEmm = (EngineeringModeManagerWrapper) this.engineeringModeManagerWrapperProvider.get();
            pluginAODManager.mPanelViewControllerLazy = DoubleCheck.lazy(this.notificationPanelViewControllerProvider);
            pluginAODManager.mScrimController = (ScrimController) this.scrimControllerProvider.get();
            pluginAODManager.mKeyguardFastBioUnlockController = (KeyguardFastBioUnlockController) this.keyguardFastBioUnlockControllerProvider.get();
            return pluginAODManager;
        }

        public final PluginFaceWidgetManager injectPluginFaceWidgetManager(PluginFaceWidgetManager pluginFaceWidgetManager) {
            pluginFaceWidgetManager.mBatteryMeterViewControllerFactory = (BatteryMeterViewController.Factory) this.factoryProvider27.get();
            return pluginFaceWidgetManager;
        }

        public final ScrimController injectScrimController(ScrimController scrimController) {
            scrimController.mSecLsScrimControlHelper = (SecLsScrimControlHelper) this.secLsScrimControlHelperProvider.get();
            scrimController.mAODAmbientWallpaperHelper = (AODAmbientWallpaperHelper) this.aODAmbientWallpaperHelperProvider.get();
            return scrimController;
        }

        public final SecVendorServices injectSecVendorServices(SecVendorServices secVendorServices) {
            secVendorServices.binderCallMonitor = (BinderCallMonitor) this.binderCallMonitorImplProvider.get();
            secVendorServices.uiThreadMonitor = (UiThreadMonitor) this.uiThreadMonitorProvider.get();
            secVendorServices.looperSlowLogController = (LooperSlowLogController) this.looperSlowLogControllerImplProvider.get();
            return secVendorServices;
        }

        public final StatusBarStateControllerImpl injectStatusBarStateControllerImpl(StatusBarStateControllerImpl statusBarStateControllerImpl) {
            statusBarStateControllerImpl.mLooperSlowLogController = (LooperSlowLogController) this.looperSlowLogControllerImplProvider.get();
            StatusBarStateControllerImpl_MembersInjector.injectMSettingHelper(statusBarStateControllerImpl, (SettingsHelper) this.settingsHelperProvider.get());
            return statusBarStateControllerImpl;
        }

        public final SystemUIAppComponentFactoryBase injectSystemUIAppComponentFactoryBase(SystemUIAppComponentFactoryBase systemUIAppComponentFactoryBase) {
            systemUIAppComponentFactoryBase.componentHelper = (ContextComponentHelper) this.contextComponentResolverProvider.get();
            return systemUIAppComponentFactoryBase;
        }

        public final TestProtocolProvider injectTestProtocolProvider(TestProtocolProvider testProtocolProvider) {
            testProtocolProvider.plankComponent = (PlankComponent) this.plankComponentProvider.get();
            return testProtocolProvider;
        }

        public final InternetDialogController internetDialogController() {
            SettingsHelper settingsHelper = (SettingsHelper) this.settingsHelperProvider.get();
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new InternetDialogController(settingsHelper, referenceGlobalRootComponentImpl.context, (UiEventLogger) referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (AccessPointController) this.provideAccessPointControllerImplProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (WifiManager) this.referenceGlobalRootComponentImpl.provideWifiManagerProvider.get(), (ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (GlobalSettings) globalSettingsImpl(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (ToastFactory) this.toastFactoryProvider.get(), (Handler) this.provideBgHandlerProvider.get(), (CarrierConfigTracker) this.carrierConfigTrackerProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get(), (WifiStateWorker) this.wifiStateWorkerProvider.get(), (FeatureFlags) this.featureFlagsClassicReleaseProvider.get());
        }

        public final InternetTile internetTile() {
            return new InternetTile((QSHost) this.qSHostAdapterProvider.get(), (QsEventLogger) this.qsEventLoggerImplProvider.get(), (Looper) this.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), qSLogger(), (NetworkController) this.networkControllerImplProvider.get(), (AccessPointController) this.provideAccessPointControllerImplProvider.get(), (InternetDialogManager) this.internetDialogManagerProvider.get());
        }

        public final InternetTileDataInteractor internetTileDataInteractor() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new InternetTileDataInteractor(referenceGlobalRootComponentImpl.context, (CoroutineContext) referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (AirplaneModeRepository) this.airplaneModeRepositoryImplProvider.get(), (ConnectivityRepository) this.connectivityRepositoryImplProvider.get(), (EthernetInteractor) this.ethernetInteractorProvider.get(), (MobileIconsInteractor) this.mobileIconsInteractorImplProvider.get(), (WifiInteractor) this.wifiInteractorImplProvider.get());
        }

        public final InternetTileMapper internetTileMapper() {
            return new InternetTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme(), this.referenceGlobalRootComponentImpl.context);
        }

        public final InternetTileNewImpl internetTileNewImpl() {
            return new InternetTileNewImpl((QSHost) this.qSHostAdapterProvider.get(), (QsEventLogger) this.qsEventLoggerImplProvider.get(), (Looper) this.provideBgLooperProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), (StatusBarStateController) this.statusBarStateControllerImplProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), qSLogger(), (InternetTileViewModel) this.internetTileViewModelProvider.get(), (InternetDialogManager) this.internetDialogManagerProvider.get(), (AccessPointController) this.provideAccessPointControllerImplProvider.get());
        }

        public final InternetTileUserActionInteractor internetTileUserActionInteractor() {
            return new InternetTileUserActionInteractor((CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (InternetDialogManager) this.internetDialogManagerProvider.get(), (AccessPointController) this.provideAccessPointControllerImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final KeyguardBlueprintViewModel keyguardBlueprintViewModel() {
            return new KeyguardBlueprintViewModel((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardBlueprintInteractor) this.keyguardBlueprintInteractorProvider.get());
        }

        public final KeyguardBottomAreaView keyguardBottomAreaView() {
            NotificationPanelView notificationPanelView = (NotificationPanelView) this.providesNotificationPanelViewProvider.get();
            ShadeViewProviderModule.Companion.getClass();
            ViewStub viewStub = (ViewStub) notificationPanelView.requireViewById(R.id.keyguard_bottom_area_switcher);
            viewStub.setLayoutResource(R.layout.keyguard_sec_bottom_area);
            View inflate = viewStub.inflate();
            inflate.setVisibility(8);
            return (KeyguardBottomAreaView) inflate;
        }

        public final KeyguardBottomAreaViewModel keyguardBottomAreaViewModel() {
            return new KeyguardBottomAreaViewModel((KeyguardInteractor) this.keyguardInteractorProvider.get(), (KeyguardQuickAffordanceInteractor) this.keyguardQuickAffordanceInteractorProvider.get(), (KeyguardBottomAreaInteractor) this.keyguardBottomAreaInteractorProvider.get(), new BurnInHelperWrapper(), (KeyguardLongPressViewModel) this.keyguardLongPressViewModelProvider.get(), keyguardSettingsMenuViewModel());
        }

        public final KeyguardBouncerViewModel keyguardBouncerViewModel() {
            return new KeyguardBouncerViewModel((BouncerView) this.bouncerViewImplProvider.get(), (PrimaryBouncerInteractor) this.primaryBouncerInteractorProvider.get());
        }

        public final KeyguardIndicationAreaViewModel keyguardIndicationAreaViewModel() {
            return new KeyguardIndicationAreaViewModel((KeyguardInteractor) this.keyguardInteractorProvider.get(), (KeyguardBottomAreaInteractor) this.keyguardBottomAreaInteractorProvider.get(), keyguardBottomAreaViewModel(), new BurnInHelperWrapper(), (BurnInInteractor) this.burnInInteractorProvider.get(), keyguardQuickAffordancesCombinedViewModel(), (ConfigurationInteractor) this.configurationInteractorProvider.get(), (KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get(), (CoroutineContext) this.bgCoroutineContextProvider.get(), (CoroutineDispatcher) this.referenceGlobalRootComponentImpl.mainDispatcherProvider.get());
        }

        public final KeyguardLogger keyguardLogger() {
            return new KeyguardLogger((LogBuffer) this.provideKeyguardLogBufferProvider.get());
        }

        public final KeyguardMediaControllerLogger keyguardMediaControllerLogger() {
            return new KeyguardMediaControllerLogger((LogBuffer) this.provideKeyguardMediaControllerLogBufferProvider.get());
        }

        public final KeyguardMediaViewModel keyguardMediaViewModel() {
            return new KeyguardMediaViewModel((MediaCarouselInteractor) this.mediaCarouselInteractorProvider.get());
        }

        public final KeyguardMessageAreaController.Factory keyguardMessageAreaControllerFactory() {
            return new KeyguardMessageAreaController.Factory((KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get());
        }

        public final KeyguardPreviewClockViewModel keyguardPreviewClockViewModel() {
            return new KeyguardPreviewClockViewModel((KeyguardClockInteractor) this.keyguardClockInteractorProvider.get());
        }

        public final KeyguardPreviewSmartspaceViewModel keyguardPreviewSmartspaceViewModel() {
            return new KeyguardPreviewSmartspaceViewModel((KeyguardClockInteractor) this.keyguardClockInteractorProvider.get(), (KeyguardSmartspaceViewModel) this.keyguardSmartspaceViewModelProvider.get(), (KeyguardClockViewModel) this.keyguardClockViewModelProvider.get());
        }

        public final KeyguardPunchHoleVIViewController.Factory keyguardPunchHoleVIViewControllerFactory() {
            return new KeyguardPunchHoleVIViewController.Factory((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.settingsHelperProvider.get(), (DisplayLifecycle) this.displayLifecycleProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (KeyguardEditModeController) this.provideKeyguardEditModeControllerProvider.get(), (PluginLockStarManager) this.pluginLockStarManagerProvider.get());
        }

        public final KeyguardQuickAffordanceProviderClientFactoryImpl keyguardQuickAffordanceProviderClientFactoryImpl() {
            return new KeyguardQuickAffordanceProviderClientFactoryImpl((UserTracker) this.provideUserTrackerProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get());
        }

        public final KeyguardQuickAffordancesCombinedViewModel keyguardQuickAffordancesCombinedViewModel() {
            return new KeyguardQuickAffordancesCombinedViewModel((KeyguardQuickAffordanceInteractor) this.keyguardQuickAffordanceInteractorProvider.get(), (KeyguardInteractor) this.keyguardInteractorProvider.get(), (ShadeInteractor) this.shadeInteractorImplProvider.get(), (AodToLockscreenTransitionViewModel) this.aodToLockscreenTransitionViewModelProvider.get(), (DozingToLockscreenTransitionViewModel) this.dozingToLockscreenTransitionViewModelProvider.get(), (DreamingHostedToLockscreenTransitionViewModel) this.dreamingHostedToLockscreenTransitionViewModelProvider.get(), (DreamingToLockscreenTransitionViewModel) this.dreamingToLockscreenTransitionViewModelProvider.get(), (GoneToLockscreenTransitionViewModel) this.goneToLockscreenTransitionViewModelProvider.get(), (OccludedToLockscreenTransitionViewModel) this.occludedToLockscreenTransitionViewModelProvider.get(), (OffToLockscreenTransitionViewModel) this.offToLockscreenTransitionViewModelProvider.get(), (PrimaryBouncerToLockscreenTransitionViewModel) this.primaryBouncerToLockscreenTransitionViewModelProvider.get(), (GlanceableHubToLockscreenTransitionViewModel) this.glanceableHubToLockscreenTransitionViewModelProvider.get(), (LockscreenToAodTransitionViewModel) this.lockscreenToAodTransitionViewModelProvider.get(), (LockscreenToDozingTransitionViewModel) this.lockscreenToDozingTransitionViewModelProvider.get(), (LockscreenToDreamingHostedTransitionViewModel) this.lockscreenToDreamingHostedTransitionViewModelProvider.get(), (LockscreenToDreamingTransitionViewModel) this.lockscreenToDreamingTransitionViewModelProvider.get(), (LockscreenToGoneTransitionViewModel) this.lockscreenToGoneTransitionViewModelProvider.get(), (LockscreenToOccludedTransitionViewModel) this.lockscreenToOccludedTransitionViewModelProvider.get(), (LockscreenToPrimaryBouncerTransitionViewModel) this.lockscreenToPrimaryBouncerTransitionViewModelProvider.get(), (LockscreenToGlanceableHubTransitionViewModel) this.lockscreenToGlanceableHubTransitionViewModelProvider.get(), (KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get());
        }

        public final KeyguardSettingsMenuViewModel keyguardSettingsMenuViewModel() {
            return new KeyguardSettingsMenuViewModel((KeyguardLongPressInteractor) this.keyguardLongPressInteractorProvider.get());
        }

        public final KeyguardSliceViewSection keyguardSliceViewSection() {
            return new KeyguardSliceViewSection((LockscreenSmartspaceController) this.lockscreenSmartspaceControllerProvider.get());
        }

        public final KeyguardTransitionAnimationLogger keyguardTransitionAnimationLogger() {
            return new KeyguardTransitionAnimationLogger((LogBuffer) this.provideKeyguardTransitionAnimationLogBufferProvider.get());
        }

        public final KeyguardUpdateMonitorLogger keyguardUpdateMonitorLogger() {
            return new KeyguardUpdateMonitorLogger((LogBuffer) this.provideKeyguardUpdateMonitorLogBufferProvider.get());
        }

        public final KeyguardUpdateMonitorWrapper keyguardUpdateMonitorWrapper() {
            return new KeyguardUpdateMonitorWrapper(this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get());
        }

        public final KeyguardWallpaperEventHandler keyguardWallpaperEventHandler() {
            return new KeyguardWallpaperEventHandler(this.referenceGlobalRootComponentImpl.context, (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get(), (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final LSShadeTransitionLogger lSShadeTransitionLogger() {
            return new LSShadeTransitionLogger((LogBuffer) this.provideLSShadeTransitionControllerBufferProvider.get(), (LockscreenGestureLogger) this.lockscreenGestureLoggerProvider.get(), this.referenceGlobalRootComponentImpl.displayMetrics());
        }

        public final LatinNetworkNameProviderImpl latinNetworkNameProviderImpl() {
            return new LatinNetworkNameProviderImpl(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ImsRegStateUtil) this.imsRegStateUtilProvider.get(), (SubscriptionsOrder) this.subscriptionsOrderProvider.get());
        }

        public final LayoutUtil layoutUtil() {
            return new LayoutUtil(this.referenceGlobalRootComponentImpl.context);
        }

        public final LegacyMediaDataFilterImpl legacyMediaDataFilterImpl() {
            return new LegacyMediaDataFilterImpl(this.referenceGlobalRootComponentImpl.context, (UserTracker) this.provideUserTrackerProvider.get(), (BroadcastSender) this.broadcastSenderProvider.get(), (NotificationLockscreenUserManager) this.notificationLockscreenUserManagerImplProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (MediaUiEventLogger) this.mediaUiEventLoggerProvider.get(), (MediaFlags) this.mediaFlagsProvider.get());
        }

        public final LocalMediaManagerFactory localMediaManagerFactory() {
            return new LocalMediaManagerFactory(this.referenceGlobalRootComponentImpl.context, (LocalBluetoothManager) this.provideLocalBluetoothControllerProvider.get());
        }

        public final LocationTileDataInteractor locationTileDataInteractor() {
            return new LocationTileDataInteractor((LocationController) this.locationControllerImplProvider.get());
        }

        public final LocationTileMapper locationTileMapper() {
            return new LocationTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final LocationTileUserActionInteractor locationTileUserActionInteractor() {
            return new LocationTileUserActionInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get());
        }

        public final LockSection lockSection() {
            return new LockSection((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (AuthController) this.authControllerProvider.get(), (FeatureFlagsClassic) this.featureFlagsClassicReleaseProvider.get(), DoubleCheck.lazy(this.secLockIconViewControllerProvider), DoubleCheck.lazy(this.deviceEntryIconViewModelProvider), DoubleCheck.lazy(this.deviceEntryForegroundViewModelProvider), DoubleCheck.lazy(this.deviceEntryBackgroundViewModelProvider), DoubleCheck.lazy(this.falsingManagerProxyProvider), DoubleCheck.lazy(this.vibratorHelperProvider), (NotificationPanelView) this.providesNotificationPanelViewProvider.get());
        }

        public final LockscreenNotificationManagerLogger lockscreenNotificationManagerLogger() {
            return new LockscreenNotificationManagerLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final LockscreenPrecondition lockscreenPrecondition() {
            return new LockscreenPrecondition((DeviceProvisionedController) this.bindDeviceProvisionedControllerProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get());
        }

        public final LockscreenShadeScrimTransitionController lockscreenShadeScrimTransitionController() {
            return new LockscreenShadeScrimTransitionController((ScrimController) this.scrimControllerProvider.get(), this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.configurationControllerImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (SplitShadeStateController) this.splitShadeStateControllerImplProvider.get());
        }

        public final LogBufferFreezer logBufferFreezer() {
            return new LogBufferFreezer((DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
        }

        public final LongTapClassifier longTapClassifier() {
            return new LongTapClassifier((FalsingDataProvider) this.falsingDataProvider.get(), namedFloat2());
        }

        public final MWOverheatWarningViewModel mWOverheatWarningViewModel() {
            return new MWOverheatWarningViewModel(popupUIAlertDialogFactory(), (LogWrapper) this.providesPopupUILogWrapperProvider.get(), popupUIIntentWrapper());
        }

        public final MessageRouter mainMessageRouter() {
            return SysUIConcurrencyModule_ProvidesMainMessageRouterFactory.providesMainMessageRouter((DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
        }

        public final Map<Class<?>, javax.inject.Provider> mapOfClassOfAndProviderOfActivity() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(38);
            newMapBuilder.contributions.put(TunerActivity.class, this.tunerActivityProvider);
            newMapBuilder.contributions.put(ForegroundServicesDialog.class, this.foregroundServicesDialogProvider);
            newMapBuilder.contributions.put(WorkLockActivity.class, this.workLockActivityProvider);
            newMapBuilder.contributions.put(BrightnessDialog.class, this.brightnessDialogProvider);
            newMapBuilder.contributions.put(UsbDebuggingActivity.class, this.usbDebuggingActivityProvider);
            newMapBuilder.contributions.put(UsbDebuggingSecondaryUserActivity.class, this.usbDebuggingSecondaryUserActivityProvider);
            newMapBuilder.contributions.put(UsbPermissionActivity.class, this.usbPermissionActivityProvider);
            newMapBuilder.contributions.put(UsbConfirmActivity.class, this.usbConfirmActivityProvider);
            newMapBuilder.contributions.put(UsbAccessoryUriActivity.class, this.usbAccessoryUriActivityProvider);
            newMapBuilder.contributions.put(CreateUserActivity.class, this.createUserActivityProvider);
            newMapBuilder.contributions.put(PeopleSpaceActivity.class, this.peopleSpaceActivityProvider);
            newMapBuilder.contributions.put(LongScreenshotActivity.class, this.longScreenshotActivityProvider);
            newMapBuilder.contributions.put(AppClipsTrampolineActivity.class, this.appClipsTrampolineActivityProvider);
            newMapBuilder.contributions.put(AppClipsActivity.class, this.appClipsActivityProvider);
            newMapBuilder.contributions.put(LaunchConversationActivity.class, this.launchConversationActivityProvider);
            newMapBuilder.contributions.put(SensorUseStartedActivity.class, this.sensorUseStartedActivityProvider);
            newMapBuilder.contributions.put(EditWidgetsActivity.class, this.editWidgetsActivityProvider);
            newMapBuilder.contributions.put(CoverHomeActivity.class, this.coverHomeActivityProvider);
            newMapBuilder.contributions.put(SwitchToManagedProfileForCallActivity.class, this.switchToManagedProfileForCallActivityProvider);
            newMapBuilder.contributions.put(TouchpadTutorialActivity.class, this.touchpadTutorialActivityProvider);
            newMapBuilder.contributions.put(SubscreenNotificationReplyActivity.class, this.subscreenNotificationReplyActivityProvider);
            newMapBuilder.contributions.put(SubscreenNotificationIntelligenceStartActivity.class, this.subscreenNotificationIntelligenceStartActivityProvider);
            newMapBuilder.contributions.put(SubHomeActivity.class, this.subHomeActivityProvider);
            newMapBuilder.contributions.put(SubScreenFallback.class, this.subScreenFallbackProvider);
            newMapBuilder.contributions.put(ControlsRequestDialog.class, this.controlsRequestDialogProvider);
            newMapBuilder.contributions.put(MediaProjectionAppSelectorActivity.class, this.mediaProjectionAppSelectorActivityProvider);
            newMapBuilder.contributions.put(MediaProjectionPermissionActivity.class, this.mediaProjectionPermissionActivityProvider);
            newMapBuilder.contributions.put(LaunchNoteTaskActivity.class, this.launchNoteTaskActivityProvider);
            newMapBuilder.contributions.put(LaunchNotesRoleSettingsTrampolineActivity.class, this.launchNotesRoleSettingsTrampolineActivityProvider);
            newMapBuilder.contributions.put(CreateNoteTaskShortcutActivity.class, this.createNoteTaskShortcutActivityProvider);
            newMapBuilder.contributions.put(WalletActivity.class, this.walletActivityProvider);
            newMapBuilder.contributions.put(SecControlsProviderSelectorActivity.class, this.secControlsProviderSelectorActivityProvider);
            newMapBuilder.contributions.put(SecControlsFavoritingActivity.class, this.secControlsFavoritingActivityProvider);
            newMapBuilder.contributions.put(SecControlsActivity.class, this.secControlsActivityProvider);
            newMapBuilder.contributions.put(SecControlsReorderActivity.class, this.secControlsReorderActivityProvider);
            newMapBuilder.contributions.put(ControlsSettingActivity.class, this.controlsSettingActivityProvider);
            newMapBuilder.contributions.put(MediaOutputActivity.class, this.mediaOutputActivityProvider);
            newMapBuilder.contributions.put(ShortcutHelperActivity.class, this.shortcutHelperActivityProvider);
            return newMapBuilder.build();
        }

        public final Map<Class<?>, javax.inject.Provider> mapOfClassOfAndProviderOfBroadcastReceiver() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(10);
            newMapBuilder.contributions.put(SmartActionsReceiver.class, this.smartActionsReceiverProvider);
            newMapBuilder.contributions.put(MediaOutputDialogReceiver.class, this.mediaOutputDialogReceiverProvider);
            newMapBuilder.contributions.put(PeopleSpaceWidgetPinnedReceiver.class, this.peopleSpaceWidgetPinnedReceiverProvider);
            newMapBuilder.contributions.put(PeopleSpaceWidgetProvider.class, this.peopleSpaceWidgetProvider);
            newMapBuilder.contributions.put(GuestResetOrExitSessionReceiver.class, this.guestResetOrExitSessionReceiverProvider);
            newMapBuilder.contributions.put(HearingDevicesDialogReceiver.class, this.hearingDevicesDialogReceiverProvider);
            newMapBuilder.contributions.put(ControlsRequestReceiver.class, this.controlsRequestReceiverProvider);
            newMapBuilder.contributions.put(ControlsBackupRestoreReceiver.class, this.controlsBackupRestoreReceiverProvider);
            newMapBuilder.contributions.put(KeyboardShortcutsReceiver.class, this.keyboardShortcutsReceiverProvider);
            newMapBuilder.contributions.put(VolumePanelDialogReceiver.class, this.volumePanelDialogReceiverProvider);
            return newMapBuilder.build();
        }

        public final Map<Class<?>, javax.inject.Provider> mapOfClassOfAndProviderOfRecentsImplementation() {
            return Collections.singletonMap(OverviewProxyRecentsImpl.class, this.overviewProxyRecentsImplProvider);
        }

        public final Map<Class<?>, javax.inject.Provider> mapOfClassOfAndProviderOfService() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(19);
            newMapBuilder.contributions.put(DozeService.class, this.dozeServiceProvider);
            newMapBuilder.contributions.put(ImageWallpaper.class, this.imageWallpaperProvider);
            newMapBuilder.contributions.put(KeyguardService.class, this.keyguardServiceProvider);
            newMapBuilder.contributions.put(DreamOverlayService.class, this.dreamOverlayServiceProvider);
            newMapBuilder.contributions.put(NotificationListenerWithPlugins.class, this.notificationListenerWithPluginsProvider);
            newMapBuilder.contributions.put(SystemUIService.class, this.systemUIServiceProvider);
            newMapBuilder.contributions.put(SystemUIAuxiliaryDumpService.class, this.systemUIAuxiliaryDumpServiceProvider);
            newMapBuilder.contributions.put(RecordingService.class, this.recordingServiceProvider);
            newMapBuilder.contributions.put(IssueRecordingService.class, this.issueRecordingServiceProvider);
            newMapBuilder.contributions.put(SysUICoverService.class, this.sysUICoverServiceProvider);
            newMapBuilder.contributions.put(SystemUISecondaryUserService.class, this.systemUISecondaryUserServiceProvider);
            newMapBuilder.contributions.put(HomeControlsDreamService.class, this.homeControlsDreamServiceProvider);
            newMapBuilder.contributions.put(TakeScreenshotService.class, this.takeScreenshotServiceProvider);
            newMapBuilder.contributions.put(AppClipsScreenshotHelperService.class, this.appClipsScreenshotHelperServiceProvider);
            newMapBuilder.contributions.put(AppClipsService.class, this.appClipsServiceProvider);
            newMapBuilder.contributions.put(ScreenshotProxyService.class, this.screenshotProxyServiceProvider);
            newMapBuilder.contributions.put(NoteTaskControllerUpdateService.class, this.noteTaskControllerUpdateServiceProvider);
            newMapBuilder.contributions.put(NoteTaskBubblesController.NoteTaskBubblesService.class, this.noteTaskBubblesServiceProvider);
            newMapBuilder.contributions.put(WalletContextualLocationsService.class, this.walletContextualLocationsServiceProvider);
            return newMapBuilder.build();
        }

        public final Map<GridLayoutType, GridLayout> mapOfGridLayoutTypeAndGridLayout() {
            Set<Pair<GridLayoutType, GridLayout>> ofPairOfGridLayoutTypeAndGridLayout = setOfPairOfGridLayoutTypeAndGridLayout();
            PanelsModule.Companion.getClass();
            return MapsKt__MapsKt.toMap(ofPairOfGridLayoutTypeAndGridLayout);
        }

        public final Map<GridLayoutType, GridTypeConsistencyInteractor> mapOfGridLayoutTypeAndGridTypeConsistencyInteractor() {
            Set<Pair<GridLayoutType, GridTypeConsistencyInteractor>> ofPairOfGridLayoutTypeAndGridTypeConsistencyInteractor = setOfPairOfGridLayoutTypeAndGridTypeConsistencyInteractor();
            PanelsModule.Companion.getClass();
            return MapsKt__MapsKt.toMap(ofPairOfGridLayoutTypeAndGridTypeConsistencyInteractor);
        }

        public final Map<String, javax.inject.Provider> mapOfStringAndProviderOfQSTileImplOf() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(40);
            newMapBuilder.contributions.put(ImsProfile.PDN_INTERNET, this.bindInternetTileProvider);
            newMapBuilder.contributions.put("ColorInversion", this.colorInversionTileProvider);
            newMapBuilder.contributions.put("night", this.nightDisplayTileProvider);
            newMapBuilder.contributions.put("ReduceBrightColors", this.reduceBrightColorsTileProvider);
            newMapBuilder.contributions.put("onehanded", this.oneHandedModeTileProvider);
            newMapBuilder.contributions.put("ColorCorrection", this.colorCorrectionTileProvider);
            newMapBuilder.contributions.put(BcSmartspaceDataPlugin.UI_SURFACE_DREAM, this.dreamTileProvider);
            newMapBuilder.contributions.put("font_scaling", this.fontScalingTileProvider);
            newMapBuilder.contributions.put("hearing_devices", this.hearingDevicesTileProvider);
            newMapBuilder.contributions.put("ColorAdjustment", this.colorAdjustmentTileProvider);
            newMapBuilder.contributions.put("HighContrastFont", this.highContrastFontTileProvider);
            newMapBuilder.contributions.put("ColorLens", this.colorLensTileProvider);
            newMapBuilder.contributions.put("Wifi", this.wifiTileProvider);
            newMapBuilder.contributions.put("Bluetooth", this.sBluetoothTileProvider);
            newMapBuilder.contributions.put("MobileData", this.mobileDataTileProvider);
            newMapBuilder.contributions.put("cast", this.castTileProvider);
            newMapBuilder.contributions.put("Hotspot", this.hotspotTileProvider);
            newMapBuilder.contributions.put("AirplaneMode", this.airplaneModeTileProvider);
            newMapBuilder.contributions.put("saver", this.dataSaverTileProvider);
            newMapBuilder.contributions.put("nfc", this.nfcTileProvider);
            newMapBuilder.contributions.put("DeviceControl", this.secDeviceControlsTileProvider);
            newMapBuilder.contributions.put(PluginLockShortcutTask.DO_NOT_DISTURB_TASK, this.dndTileProvider);
            newMapBuilder.contributions.put("WorkMode", this.sWorkModeTileProvider);
            newMapBuilder.contributions.put(PluginLockShortcutTask.FLASH_LIGHT_TASK, this.flashlightTileProvider);
            newMapBuilder.contributions.put("BlueLightFilter", this.blueLightFilterTileProvider);
            newMapBuilder.contributions.put("Location", this.locationTileProvider);
            newMapBuilder.contributions.put("CameraToggle", this.cameraToggleTileProvider);
            newMapBuilder.contributions.put("MicrophoneToggle", this.microphoneToggleTileProvider);
            newMapBuilder.contributions.put("alarm", this.alarmTileProvider);
            newMapBuilder.contributions.put("UiModeNight", this.uiModeNightTileProvider);
            newMapBuilder.contributions.put("Sync", this.syncTileProvider);
            newMapBuilder.contributions.put("ScreenCapture", this.screenCaptureTileProvider);
            newMapBuilder.contributions.put("qr_code_scanner", this.qRCodeScannerTileProvider);
            newMapBuilder.contributions.put("record_issue", this.recordIssueTileProvider);
            newMapBuilder.contributions.put("screenrecord", this.screenRecordTileProvider);
            newMapBuilder.contributions.put("wallet", this.quickAccessWalletTileProvider);
            newMapBuilder.contributions.put("SoundMode", this.soundModeTileProvider);
            newMapBuilder.contributions.put("MediaOutput", this.mediaOutputTileProvider);
            newMapBuilder.contributions.put("battery", this.batterySaverTileProvider);
            newMapBuilder.contributions.put("RotationLock", this.sRotationLockTileProvider);
            return newMapBuilder.build();
        }

        public final Map<String, javax.inject.Provider> mapOfStringAndProviderOfQSTileViewModel() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(20);
            newMapBuilder.contributions.put("color_correction", this.provideColorCorrectionTileViewModelProvider);
            newMapBuilder.contributions.put("inversion", this.provideColorInversionTileViewModelProvider);
            newMapBuilder.contributions.put("font_scaling", this.provideFontScalingTileViewModelProvider);
            newMapBuilder.contributions.put("reduce_brightness", this.provideReduceBrightColorsTileViewModelProvider);
            newMapBuilder.contributions.put("onehanded", this.provideOneHandedModeTileViewModelProvider);
            newMapBuilder.contributions.put("night", this.provideNightDisplayTileViewModelProvider);
            newMapBuilder.contributions.put(SubRoom.EXTRA_KEY_AIRPLANE_MODE, this.provideAirplaneModeTileViewModelProvider);
            newMapBuilder.contributions.put("saver", this.provideDataSaverTileViewModelProvider);
            newMapBuilder.contributions.put(ImsProfile.PDN_INTERNET, this.provideInternetTileViewModelProvider);
            newMapBuilder.contributions.put("flashlight", this.provideFlashlightTileViewModelProvider);
            newMapBuilder.contributions.put("location", this.provideLocationTileViewModelProvider);
            newMapBuilder.contributions.put("alarm", this.provideAlarmTileViewModelProvider);
            newMapBuilder.contributions.put("dark", this.provideUiModeNightTileViewModelProvider);
            newMapBuilder.contributions.put("work", this.provideWorkModeTileViewModelProvider);
            newMapBuilder.contributions.put("cameratoggle", this.provideCameraToggleTileViewModelProvider);
            newMapBuilder.contributions.put("mictoggle", this.provideMicrophoneToggleTileViewModelProvider);
            newMapBuilder.contributions.put("qr_code_scanner", this.provideQRCodeScannerTileViewModelProvider);
            newMapBuilder.contributions.put("screenrecord", this.provideScreenRecordTileViewModelProvider);
            newMapBuilder.contributions.put("battery", this.provideBatterySaverTileViewModelProvider);
            newMapBuilder.contributions.put("rotation", this.provideRotationTileViewModelProvider);
            return newMapBuilder.build();
        }

        public final Map<String, QSTileAvailabilityInteractor> mapOfStringAndQSTileAvailabilityInteractor() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(20);
            newMapBuilder.contributions.put("cameratoggle", provideCameraToggleAvailabilityInteractor());
            newMapBuilder.contributions.put("mictoggle", provideMicToggleModeAvailabilityInteractor());
            newMapBuilder.contributions.put("color_correction", colorCorrectionTileDataInteractor());
            newMapBuilder.contributions.put("inversion", colorCorrectionTileDataInteractor());
            newMapBuilder.contributions.put("font_scaling", new FontScalingTileDataInteractor());
            newMapBuilder.contributions.put("reduce_brightness", reduceBrightColorsTileDataInteractor());
            newMapBuilder.contributions.put("onehanded", oneHandedModeTileDataInteractor());
            newMapBuilder.contributions.put("night", nightDisplayTileDataInteractor());
            newMapBuilder.contributions.put(SubRoom.EXTRA_KEY_AIRPLANE_MODE, airplaneModeTileDataInteractor());
            newMapBuilder.contributions.put("saver", dataSaverTileDataInteractor());
            newMapBuilder.contributions.put(ImsProfile.PDN_INTERNET, internetTileDataInteractor());
            newMapBuilder.contributions.put("flashlight", flashlightTileDataInteractor());
            newMapBuilder.contributions.put("location", locationTileDataInteractor());
            newMapBuilder.contributions.put("alarm", alarmTileDataInteractor());
            newMapBuilder.contributions.put("dark", uiModeNightTileDataInteractor());
            newMapBuilder.contributions.put("work", workModeTileDataInteractor());
            newMapBuilder.contributions.put("qr_code_scanner", qRCodeScannerTileDataInteractor());
            newMapBuilder.contributions.put("screenrecord", screenRecordTileDataInteractor());
            newMapBuilder.contributions.put("battery", batterySaverTileDataInteractor());
            newMapBuilder.contributions.put("rotation", rotationLockTileDataInteractor());
            return newMapBuilder.build();
        }

        public final Map<String, QSTileConfig> mapOfStringAndQSTileConfig() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(27);
            newMapBuilder.contributions.put("color_correction", provideColorCorrectionTileConfig());
            newMapBuilder.contributions.put("inversion", provideColorInversionTileConfig());
            newMapBuilder.contributions.put("font_scaling", provideFontScalingTileConfig());
            newMapBuilder.contributions.put("reduce_brightness", provideReduceBrightColorsTileConfig());
            newMapBuilder.contributions.put("onehanded", provideOneHandedTileConfig());
            newMapBuilder.contributions.put("night", provideNightDisplayTileConfig());
            newMapBuilder.contributions.put(SubRoom.EXTRA_KEY_AIRPLANE_MODE, provideAirplaneModeTileConfig());
            newMapBuilder.contributions.put("saver", provideDataSaverTileConfig());
            newMapBuilder.contributions.put(ImsProfile.PDN_INTERNET, provideInternetTileConfig());
            newMapBuilder.contributions.put("hotspot", provideHotspotTileConfig());
            newMapBuilder.contributions.put("cast", provideCastTileConfig());
            newMapBuilder.contributions.put("bt", provideBluetoothTileConfig());
            newMapBuilder.contributions.put("controls", provideDeviceControlsTileConfig());
            newMapBuilder.contributions.put(BcSmartspaceDataPlugin.UI_SURFACE_DREAM, provideDreamTileConfig());
            newMapBuilder.contributions.put("flashlight", provideFlashlightTileConfig());
            newMapBuilder.contributions.put("location", provideLocationTileConfig());
            newMapBuilder.contributions.put("alarm", provideAlarmTileConfig());
            newMapBuilder.contributions.put("dark", provideUiModeNightTileConfig());
            newMapBuilder.contributions.put("work", provideWorkModeTileConfig());
            newMapBuilder.contributions.put("cameratoggle", provideCameraToggleTileConfig());
            newMapBuilder.contributions.put("mictoggle", provideMicrophoneToggleTileConfig());
            newMapBuilder.contributions.put("dnd", provideDndTileConfig());
            newMapBuilder.contributions.put("qr_code_scanner", provideQRCodeScannerTileConfig());
            newMapBuilder.contributions.put("record_issue", provideRecordIssueTileConfig());
            newMapBuilder.contributions.put("screenrecord", provideScreenRecordTileConfig());
            newMapBuilder.contributions.put("battery", provideBatterySaverTileConfig());
            newMapBuilder.contributions.put("rotation", provideRotationTileConfig());
            return newMapBuilder.build();
        }

        public final MediaBrowserFactory mediaBrowserFactory() {
            return new MediaBrowserFactory(this.referenceGlobalRootComponentImpl.context);
        }

        public final MediaCarouselSection mediaCarouselSection() {
            return new MediaCarouselSection((MediaCarouselController) this.mediaCarouselControllerProvider.get(), (MediaHost) this.providesKeyguardMediaHostProvider.get(), keyguardMediaViewModel());
        }

        public final MediaControllerFactory mediaControllerFactory() {
            return new MediaControllerFactory(this.referenceGlobalRootComponentImpl.context);
        }

        public final MediaDeviceManager mediaDeviceManager() {
            return new MediaDeviceManager(this.referenceGlobalRootComponentImpl.context, mediaControllerFactory(), localMediaManagerFactory(), DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideMediaRouter2ManagerProvider), (MediaMuteAwaitConnectionManagerFactory) this.mediaMuteAwaitConnectionManagerFactoryProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), DoubleCheck.lazy(this.provideLocalBluetoothControllerProvider), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get());
        }

        public final MediaFeatureFlag mediaFeatureFlag() {
            return new MediaFeatureFlag(this.referenceGlobalRootComponentImpl.context);
        }

        public final MediaLogWriter mediaLogWriter() {
            return new MediaLogWriter((LogBuffer) this.provideMediaLogBufferProvider.get());
        }

        public final MediaOutputBroadcastDialogManager mediaOutputBroadcastDialogManager() {
            return new MediaOutputBroadcastDialogManager(this.referenceGlobalRootComponentImpl.context, (BroadcastSender) this.broadcastSenderProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get(), (MediaOutputController.Factory) this.factoryProvider16.get());
        }

        public final MediaOutputDetailAdapter mediaOutputDetailAdapter() {
            return new MediaOutputDetailAdapter(this.referenceGlobalRootComponentImpl.context, (SecMediaHost) this.secMediaHostProvider.get(), (ShadeController) this.provideShadeControllerProvider.get(), this.provideMediaOutputViewProvider);
        }

        public final MediaOutputDeviceOperationImpl mediaOutputDeviceOperationImpl() {
            return new MediaOutputDeviceOperationImpl((MediaSdkSupportServiceClient) this.referenceGlobalRootComponentImpl.mediaSdkSupportServiceClientProvider.get());
        }

        public final MediaOutputDialogManager mediaOutputDialogManager() {
            return new MediaOutputDialogManager(this.referenceGlobalRootComponentImpl.context, (BroadcastSender) this.broadcastSenderProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get(), (MediaOutputController.Factory) this.factoryProvider16.get());
        }

        public final MediaSdkOperationManager mediaSdkOperationManager() {
            return new MediaSdkOperationManager((DeviceControlOperationImpl) this.referenceGlobalRootComponentImpl.deviceControlOperationImplProvider.get(), (DeviceStatusOperationImpl) this.referenceGlobalRootComponentImpl.deviceStatusOperationImplProvider.get(), (MediaContentOperationImpl) this.referenceGlobalRootComponentImpl.mediaContentOperationImplProvider.get(), (MediaOutputSelectedOperationImpl) this.referenceGlobalRootComponentImpl.mediaOutputSelectedOperationImplProvider.get(), (MediaPolicyOperationImpl) this.referenceGlobalRootComponentImpl.mediaPolicyOperationImplProvider.get(), mediaOutputDeviceOperationImpl());
        }

        public final MediaSessionBasedFilter mediaSessionBasedFilter() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            return new MediaSessionBasedFilter(context, FrameworkServicesModule_ProvideMediaSessionManagerFactory.provideMediaSessionManager(context), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final MediaTttReceiverRippleController mediaTttReceiverRippleController() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new MediaTttReceiverRippleController(referenceGlobalRootComponentImpl.context, (WindowManager) referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
        }

        public final MessageContainerController messageContainerController() {
            return new MessageContainerController(workProfileMessageController(), profileMessageController(), screenshotDetectionController(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
        }

        public final MinimumTilesInteractor minimumTilesInteractor() {
            return new MinimumTilesInteractor((MinimumTilesRepository) this.minimumTilesResourceRepositoryProvider.get());
        }

        public final MirroringConfirmationDialogDelegate$Factory mirroringConfirmationDialogDelegateFactory() {
            final Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
            final SystemUIBottomSheetDialog$Factory systemUIBottomSheetDialogFactory = systemUIBottomSheetDialogFactory();
            return new Object(context, systemUIBottomSheetDialogFactory) { // from class: com.android.systemui.display.ui.view.MirroringConfirmationDialogDelegate$Factory
            };
        }

        public final MobileConnectionRepositoryImpl.Factory mobileConnectionRepositoryImplFactory() {
            return new MobileConnectionRepositoryImpl.Factory(this.referenceGlobalRootComponentImpl.context, (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get(), (MobileInputLogger) this.mobileInputLoggerProvider.get(), (CarrierConfigRepository) this.carrierConfigRepositoryProvider.get(), new MobileMappingsProxyImpl(), (FeatureFlagsClassic) this.featureFlagsClassicReleaseProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (SimCardInfoUtil) this.simCardInfoUtilProvider.get(), (SettingsHelper) this.settingsHelperProvider.get(), (ImsRegStateUtil) this.imsRegStateUtilProvider.get(), (CarrierConfigManager) this.referenceGlobalRootComponentImpl.provideCarrierConfigManagerProvider.get());
        }

        public final MobileDataIconResource mobileDataIconResource() {
            return new MobileDataIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), new MobileMappingsProxyImpl(), (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get());
        }

        public final MobileDeviceWarningViewModel mobileDeviceWarningViewModel() {
            return new MobileDeviceWarningViewModel(popupUIToastWrapper(), (LogWrapper) this.providesPopupUILogWrapperProvider.get(), popupUIIntentWrapper());
        }

        public final MobileDisabledDataIconResource mobileDisabledDataIconResource() {
            return new MobileDisabledDataIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get(), (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final MobileRoamingIconResource mobileRoamingIconResource() {
            return new MobileRoamingIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get());
        }

        public final MobileSignalIconResource mobileSignalIconResource() {
            return new MobileSignalIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get());
        }

        public final MotionToolManager motionToolManager() {
            MotionToolModule.Companion.getClass();
            return MotionToolModule_Companion_ProvideMotionToolManagerFactory.provideMotionToolManager(WindowManagerGlobal.getInstance());
        }

        public final MusicControlActionInteractor musicControlActionInteractor() {
            return new MusicControlActionInteractor(this.referenceGlobalRootComponentImpl.context);
        }

        public final boolean namedBoolean() {
            try {
                return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getIntArray(android.R.array.preloaded_freeform_multi_window_drawables).length != 0;
            } catch (Resources.NotFoundException unused) {
                return false;
            }
        }

        public final boolean namedBoolean2() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getBoolean(android.R.bool.config_earcFeatureDisabled_default);
        }

        public final boolean namedBoolean3() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getBoolean(android.R.bool.config_earcFeatureDisabled_allowed);
        }

        public final Boolean namedBoolean4() {
            try {
                return Boolean.valueOf(((PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get()).getServiceInfo(namedComponentName(), 128).enabled);
            } catch (PackageManager.NameNotFoundException unused) {
                return Boolean.FALSE;
            }
        }

        public final ComponentName namedComponentName() {
            return new ComponentName(this.referenceGlobalRootComponentImpl.context, (Class<?>) DreamOverlayService.class);
        }

        public final ComponentName namedComponentName2() {
            LowLightDreamModule lowLightDreamModule = LowLightDreamModule.INSTANCE;
            Context context = this.referenceGlobalRootComponentImpl.context;
            lowLightDreamModule.getClass();
            String string = context.getResources().getString(R.string.config_lowLightDreamComponent);
            if (string.length() == 0) {
                return null;
            }
            return ComponentName.unflattenFromString(string);
        }

        public final ComponentName namedComponentName3() {
            String string = this.referenceGlobalRootComponentImpl.context.getResources().getString(R.string.config_homePanelDreamComponent);
            if (string.isEmpty()) {
                return null;
            }
            return ComponentName.unflattenFromString(string);
        }

        public final float namedFloat() {
            return ((ViewConfiguration) this.referenceGlobalRootComponentImpl.provideViewConfigurationProvider.get()).getScaledTouchSlop();
        }

        public final float namedFloat2() {
            return ((ViewConfiguration) this.referenceGlobalRootComponentImpl.provideViewConfigurationProvider.get()).getScaledTouchSlop() * 1.25f;
        }

        public final float namedFloat3() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimension(R.dimen.double_tap_slop);
        }

        public final com.android.systemui.ambient.touch.scrim.ScrimController namedScrimController() {
            BouncerScrimController bouncerScrimController = bouncerScrimController();
            Preconditions.checkNotNullFromProvides(bouncerScrimController);
            return bouncerScrimController;
        }

        public final com.android.systemui.ambient.touch.scrim.ScrimController namedScrimController2() {
            BouncerlessScrimController bouncerlessScrimController = (BouncerlessScrimController) this.bouncerlessScrimControllerProvider.get();
            Preconditions.checkNotNullFromProvides(bouncerlessScrimController);
            return bouncerlessScrimController;
        }

        public final Set<FalsingClassifier> namedSetOfFalsingClassifier() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(1);
            newSetBuilder.addAll(providesBrightLineGestureClassifiers());
            return newSetBuilder.build();
        }

        public final String namedString() {
            String string = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getString(R.string.app_label);
            Preconditions.checkNotNullFromProvides(string);
            return string;
        }

        public final String namedString2() {
            String string = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getString(R.string.launcher_overlayable_package);
            Preconditions.checkNotNullFromProvides(string);
            return string;
        }

        public final String namedString3() {
            String string = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getString(R.string.themepicker_overlayable_package);
            Preconditions.checkNotNullFromProvides(string);
            return string;
        }

        public final String[] namedStringArray() {
            String[] stringArray = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getStringArray(17236282);
            Preconditions.checkNotNullFromProvides(stringArray);
            return stringArray;
        }

        public final String[] namedStringArray2() {
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            CommunalWidgetModule.Companion.getClass();
            return provideResources.getStringArray(R.array.config_communalWidgetAllowlist);
        }

        public final TouchInsetManager namedTouchInsetManager() {
            return new TouchInsetManager((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
        }

        public final NavBarRemoteViewManager navBarRemoteViewManager() {
            return new NavBarRemoteViewManager(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.settingsHelperProvider.get());
        }

        public final NightDisplayListenerModule$Builder nightDisplayListenerModuleBuilder() {
            return new NightDisplayListenerModule$Builder(this.referenceGlobalRootComponentImpl.context, (Handler) this.provideBgHandlerProvider.get());
        }

        public final NightDisplayRepository nightDisplayRepository() {
            return new NightDisplayRepository((CoroutineContext) this.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (GlobalSettings) globalSettingsImpl(), (SecureSettings) this.secureSettingsImplProvider.get(), nightDisplayListenerModuleBuilder(), (UserScopedService) this.referenceGlobalRootComponentImpl.provideScopedColorDisplayManagerProvider.get(), (LocationController) this.locationControllerImplProvider.get());
        }

        public final NightDisplayTileDataInteractor nightDisplayTileDataInteractor() {
            return new NightDisplayTileDataInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), dateFormatUtil(), nightDisplayRepository());
        }

        public final NightDisplayTileMapper nightDisplayTileMapper() {
            return new NightDisplayTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme(), (QSTileLogger) this.qSTileLoggerProvider.get());
        }

        public final NightDisplayTileUserActionInteractor nightDisplayTileUserActionInteractor() {
            return new NightDisplayTileUserActionInteractor(nightDisplayRepository(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get());
        }

        public final NodeSpecBuilderLogger nodeSpecBuilderLogger() {
            return new NodeSpecBuilderLogger(notifPipelineFlags(), (LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final NotOccludedCondition notOccludedCondition() {
            return new NotOccludedCondition(DoubleCheck.lazy(this.keyguardTransitionInteractorProvider));
        }

        public final boolean noteTaskEnabledKeyBoolean() {
            NoteTaskModule.Companion companion = NoteTaskModule.Companion;
            FeatureFlags featureFlags = (FeatureFlags) this.featureFlagsClassicReleaseProvider.get();
            RoleManager roleManager = (RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get();
            companion.getClass();
            return roleManager.isRoleAvailable("android.app.role.NOTES") && ((FeatureFlagsClassicRelease) featureFlags).isEnabled(com.android.systemui.flags.Flags.NOTE_TASKS);
        }

        public final NoteTaskEventLogger noteTaskEventLogger() {
            return new NoteTaskEventLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
        }

        public final NoteTaskInfoResolver noteTaskInfoResolver() {
            return new NoteTaskInfoResolver((RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
        }

        public final NoteTaskInitializer noteTaskInitializer() {
            return new NoteTaskInitializer((NoteTaskController) this.noteTaskControllerProvider.get(), (RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get(), (CommandQueue) this.provideCommandQueueProvider.get(), this.setBubbles, (UserTracker) this.provideUserTrackerProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), noteTaskEnabledKeyBoolean());
        }

        public final NoteTaskQuickAffordanceConfig noteTaskQuickAffordanceConfig() {
            return new NoteTaskQuickAffordanceConfig(this.referenceGlobalRootComponentImpl.context, (NoteTaskController) this.noteTaskControllerProvider.get(), noteTaskInfoResolver(), (StylusManager) this.stylusManagerProvider.get(), (RoleManager) this.referenceGlobalRootComponentImpl.provideRoleManagerProvider.get(), (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), DoubleCheck.lazy(this.keyguardQuickAffordanceRepositoryProvider), noteTaskEnabledKeyBoolean(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final NotifBindPipelineInitializer notifBindPipelineInitializer() {
            return new NotifBindPipelineInitializer((NotifBindPipeline) this.notifBindPipelineProvider.get(), (RowContentBindStage) this.rowContentBindStageProvider.get());
        }

        public final NotifBindPipelineLogger notifBindPipelineLogger() {
            return new NotifBindPipelineLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final NotifCollectionLogger notifCollectionLogger() {
            return new NotifCollectionLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final NotifInflaterLogger notifInflaterLogger() {
            return new NotifInflaterLogger((LogBuffer) this.provideNotifInflationLogBufferProvider.get());
        }

        public final NotifPipelineFlags notifPipelineFlags() {
            return new NotifPipelineFlags((FeatureFlags) this.featureFlagsClassicReleaseProvider.get());
        }

        public final NotificationClicker.Builder notificationClickerBuilder() {
            return new NotificationClicker.Builder(notificationClickerLogger(), (PowerInteractor) this.powerInteractorProvider.get());
        }

        public final NotificationClickerLogger notificationClickerLogger() {
            return new NotificationClickerLogger((LogBuffer) this.provideNotifInteractionLogBufferProvider.get());
        }

        public final NotificationControlActionInteractor notificationControlActionInteractor() {
            return new NotificationControlActionInteractor(this.referenceGlobalRootComponentImpl.context, (NotificationController) this.notificationControllerProvider.get());
        }

        public final NotificationEntryProcessorFactoryLooperImpl notificationEntryProcessorFactoryLooperImpl() {
            return new NotificationEntryProcessorFactoryLooperImpl(GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper());
        }

        public final NotificationIconAreaController notificationIconAreaController() {
            Provider provider = this.legacyNotificationIconAreaControllerImplProvider;
            NotificationIconAreaControllerModule.INSTANCE.getClass();
            Object obj = provider.get();
            Intrinsics.checkNotNull(obj);
            return (NotificationIconAreaController) obj;
        }

        public final NotificationIconContainerShelfViewBinder notificationIconContainerShelfViewBinder() {
            return new NotificationIconContainerShelfViewBinder(notificationIconContainerShelfViewModel(), configurationState(), systemBarUtilsState(), (StatusBarIconViewBindingFailureTracker) this.statusBarIconViewBindingFailureTrackerProvider.get(), shelfNotificationIconViewStore());
        }

        public final NotificationIconContainerShelfViewModel notificationIconContainerShelfViewModel() {
            return new NotificationIconContainerShelfViewModel((CoroutineContext) this.bgCoroutineContextProvider.get(), notificationIconsInteractor());
        }

        public final NotificationIconContainerStatusBarViewBinder notificationIconContainerStatusBarViewBinder() {
            return new NotificationIconContainerStatusBarViewBinder(notificationIconContainerStatusBarViewModel(), configurationState(), systemBarUtilsState(), (StatusBarIconViewBindingFailureTracker) this.statusBarIconViewBindingFailureTrackerProvider.get(), statusBarNotificationIconViewStore());
        }

        public final NotificationIconContainerStatusBarViewModel notificationIconContainerStatusBarViewModel() {
            return new NotificationIconContainerStatusBarViewModel((CoroutineContext) this.bgCoroutineContextProvider.get(), darkIconInteractor(), statusBarNotificationIconsInteractor(), headsUpNotificationIconInteractor(), (KeyguardInteractor) this.keyguardInteractorProvider.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (ShadeInteractor) this.shadeInteractorImplProvider.get());
        }

        public final NotificationIconsInteractor notificationIconsInteractor() {
            return new NotificationIconsInteractor((ActiveNotificationsInteractor) this.activeNotificationsInteractorProvider.get(), this.setBubbles, headsUpNotificationIconInteractor(), (NotificationsKeyguardViewStateRepository) this.notificationsKeyguardViewStateRepositoryProvider.get(), (OngoingCallController) this.ongoingCallControllerProvider.get());
        }

        public final NotificationInterruptLogger notificationInterruptLogger() {
            return new NotificationInterruptLogger((LogBuffer) this.provideNotificationInterruptLogBufferProvider.get());
        }

        public final NotificationListViewBinder notificationListViewBinder() {
            return new NotificationListViewBinder((CoroutineDispatcher) this.bgDispatcherProvider.get(), displaySwitchNotificationsHiderTracker(), configurationState(), (FalsingManager) this.falsingManagerProxyProvider.get(), headsUpNotificationViewBinder(), notificationIconAreaController(), NotificationStatsLoggerModule_Companion_ProvideStatsLoggerFactory.provideStatsLogger(), (MetricsLogger) this.referenceGlobalRootComponentImpl.provideMetricsLoggerProvider.get(), notificationIconContainerShelfViewBinder(), this.statusBarNotificationActivityStarterProvider, silentHeaderSectionHeaderController(), notificationListViewModel(), (NotificationShelfManager) this.notificationShelfManagerProvider.get());
        }

        public final NotificationListViewModel notificationListViewModel() {
            NotificationShelfViewModel notificationShelfViewModel = (NotificationShelfViewModel) this.notificationShelfViewModelProvider.get();
            HideListViewModel hideListViewModel = (HideListViewModel) this.hideListViewModelProvider.get();
            Optional optional = (Optional) this.provideOptionalProvider.get();
            NotificationStatsLoggerModule.Companion.getClass();
            Flags.notificationsLiveDataStoreRefactor();
            Optional empty = Optional.empty();
            Intrinsics.checkNotNull(empty);
            return new NotificationListViewModel(notificationShelfViewModel, hideListViewModel, optional, empty, (ActiveNotificationsInteractor) this.activeNotificationsInteractorProvider.get(), (NotificationStackInteractor) this.notificationStackInteractorProvider.get(), headsUpNotificationInteractor(), (RemoteInputInteractor) this.remoteInputInteractorProvider.get(), (SeenNotificationsInteractor) this.seenNotificationsInteractorProvider.get(), (ShadeInteractor) this.shadeInteractorImplProvider.get(), userSetupInteractor(), zenModeInteractor(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get());
        }

        public final NotificationRowBinderLogger notificationRowBinderLogger() {
            return new NotificationRowBinderLogger((LogBuffer) this.provideNotifInflationLogBufferProvider.get());
        }

        public final NotificationRowContentBinderLogger notificationRowContentBinderLogger() {
            return new NotificationRowContentBinderLogger((LogBuffer) this.provideNotifInflationLogBufferProvider.get());
        }

        public final NotificationRowStatsLogger notificationRowStatsLogger() {
            Provider provider = this.notificationStatsLoggerImplProvider;
            Optional optional = (Optional) this.provideLegacyLoggerOptionalProvider.get();
            NotificationStatsLoggerModule.Companion.getClass();
            NotificationLogger notificationLogger = (NotificationLogger) optional.orElse(null);
            return notificationLogger != null ? notificationLogger : (NotificationRowStatsLogger) provider.get();
        }

        public final NotificationStackScrollLogger notificationStackScrollLogger() {
            return new NotificationStackScrollLogger((LogBuffer) this.provideNotificationHeadsUpLogBufferProvider.get(), (LogBuffer) this.provideNotificationRenderLogBufferProvider.get(), (LogBuffer) this.provideShadeLogBufferProvider.get());
        }

        public final Object notificationSwipeHelperBuilder() {
            return new NotificationSwipeHelper.Builder(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (ViewConfiguration) this.referenceGlobalRootComponentImpl.provideViewConfigurationProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (FeatureFlags) this.featureFlagsClassicReleaseProvider.get(), (NotificationRoundnessManager) this.notificationRoundnessManagerProvider.get());
        }

        public final NotificationWakeUpCoordinatorLogger notificationWakeUpCoordinatorLogger() {
            return new NotificationWakeUpCoordinatorLogger((LogBuffer) this.provideNotificationLockScreenLogBufferProvider.get());
        }

        public final NotificationsKeyguardInteractor notificationsKeyguardInteractor() {
            return new NotificationsKeyguardInteractor((NotificationsKeyguardViewStateRepository) this.notificationsKeyguardViewStateRepositoryProvider.get());
        }

        public final OneHandedModeTileDataInteractor oneHandedModeTileDataInteractor() {
            return new OneHandedModeTileDataInteractor((OneHandedModeRepository) this.oneHandedModeRepositoryImplProvider.get());
        }

        public final OneHandedModeTileMapper oneHandedModeTileMapper() {
            return new OneHandedModeTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final OneHandedModeTileUserActionInteractor oneHandedModeTileUserActionInteractor() {
            return new OneHandedModeTileUserActionInteractor((OneHandedModeRepository) this.oneHandedModeRepositoryImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final NodeController ongoingActivityHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesOngoingActivityHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController ongoingActivityHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesOngoingActivityHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final OperatorNameViewController$Factory operatorNameViewControllerFactory() {
            final DarkIconDispatcher darkIconDispatcher = (DarkIconDispatcher) this.darkIconDispatcherImplProvider.get();
            final TunerService tunerService = (TunerService) this.tunerServiceImplProvider.get();
            final TelephonyManager telephonyManager = (TelephonyManager) this.referenceGlobalRootComponentImpl.provideTelephonyManagerProvider.get();
            final KeyguardUpdateMonitor keyguardUpdateMonitor = (KeyguardUpdateMonitor) this.keyguardSecUpdateMonitorImplProvider.get();
            final CarrierConfigTracker carrierConfigTracker = (CarrierConfigTracker) this.carrierConfigTrackerProvider.get();
            final AirplaneModeInteractor airplaneModeInteractor = (AirplaneModeInteractor) this.airplaneModeInteractorProvider.get();
            final SubscriptionManagerProxyImpl subscriptionManagerProxyImpl = subscriptionManagerProxyImpl();
            final JavaAdapter javaAdapter = (JavaAdapter) this.javaAdapterProvider.get();
            return new Object(darkIconDispatcher, tunerService, telephonyManager, keyguardUpdateMonitor, carrierConfigTracker, airplaneModeInteractor, subscriptionManagerProxyImpl, javaAdapter) { // from class: com.android.systemui.statusbar.OperatorNameViewController$Factory
                public final DarkIconDispatcher mDarkIconDispatcher;

                {
                    this.mDarkIconDispatcher = darkIconDispatcher;
                }
            };
        }

        public final Optional<NotificationLoggerViewModel> optionalOfNotificationLoggerViewModel() {
            NotificationStatsLoggerModule.Companion.getClass();
            Flags.notificationsLiveDataStoreRefactor();
            Optional<NotificationLoggerViewModel> empty = Optional.empty();
            Intrinsics.checkNotNull(empty);
            return empty;
        }

        public final Optional<NotificationStatsLogger> optionalOfNotificationStatsLogger() {
            return NotificationStatsLoggerModule_Companion_ProvideStatsLoggerFactory.provideStatsLogger();
        }

        public final Context overlayWindowContextContext() {
            DisplayManager displayManager = (DisplayManager) this.referenceGlobalRootComponentImpl.provideDisplayManagerProvider.get();
            DisplayTracker displayTracker = (DisplayTracker) this.provideDisplayTrackerProvider.get();
            Context context = this.referenceGlobalRootComponentImpl.context;
            displayTracker.getClass();
            Context createWindowContext = context.createWindowContext(displayManager.getDisplay(0), 2036, null);
            Preconditions.checkNotNullFromProvides(createWindowContext);
            return createWindowContext;
        }

        public final PackageManagerAdapter packageManagerAdapter() {
            return new PackageManagerAdapter(this.referenceGlobalRootComponentImpl.context);
        }

        public final PanelInteractor panelInteractor() {
            QSTileHost qSTileHost = (QSTileHost) this.qSTileHostProvider.get();
            QSHostModule.Companion.getClass();
            Flags.qsNewPipeline();
            return qSTileHost;
        }

        public final PendingRemovalStore pendingRemovalStore() {
            return new PendingRemovalStore(broadcastDispatcherLogger());
        }

        public final NodeController peopleHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesPeopleHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController peopleHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesPeopleHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final PeopleViewModel.Factory peopleViewModelFactory() {
            return new PeopleViewModel.Factory((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (PeopleTileRepository) this.peopleTileRepositoryImplProvider.get(), (PeopleWidgetRepository) this.peopleWidgetRepositoryImplProvider.get());
        }

        public final UserHandle personalProfileUserHandle() {
            MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule = this.mediaProjectionDevicePolicyModule;
            return MediaProjectionDevicePolicyModule_PersonalUserHandleFactory.personalUserHandle(mediaProjectionDevicePolicyModule);
        }

        public final PhoneStatusBarPolicy phoneStatusBarPolicy() {
            return new PhoneStatusBarPolicy((StatusBarIconController) this.statusBarIconControllerImplProvider.get(), (CommandQueue) this.provideCommandQueueProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (CastController) this.castControllerImplProvider.get(), (HotspotController) this.hotspotControllerImplProvider.get(), (SBluetoothController) this.sBluetoothControllerImplProvider.get(), (NextAlarmController) this.nextAlarmControllerImplProvider.get(), (UserInfoController) this.userInfoControllerImplProvider.get(), (RotationLockController) this.rotationLockControllerImplProvider.get(), (DataSaverController) this.provideDataSaverControllerProvider.get(), (ZenModeController) this.zenModeControllerImplProvider.get(), (DeviceProvisionedController) this.bindDeviceProvisionedControllerProvider.get(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get(), (LocationController) this.locationControllerImplProvider.get(), (SensorPrivacyController) this.provideSensorPrivacyControllerProvider.get(), (AlarmManager) this.referenceGlobalRootComponentImpl.provideAlarmManagerProvider.get(), (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (UserTracker) this.provideUserTrackerProvider.get(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get(), (RecordingController) this.recordingControllerProvider.get(), (TelecomManager) this.referenceGlobalRootComponentImpl.provideTelecomManagerProvider.get(), this.referenceGlobalRootComponentImpl.context.getDisplayId(), this.referenceGlobalRootComponentImpl.mainSharedPreferences(), dateFormatUtil(), (RingerModeTracker) this.ringerModeTrackerImplProvider.get(), (PrivacyItemController) this.privacyItemControllerProvider.get(), privacyLogger(), (ConnectedDisplayInteractor) this.connectedDisplayInteractorImplProvider.get(), (JavaAdapter) this.javaAdapterProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (KnoxStateMonitor) this.providesKnoxStateMonitorProvider.get(), (ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get());
        }

        public final PluggedInCondition pluggedInCondition() {
            return new PluggedInCondition(DoubleCheck.lazy(this.provideBatteryControllerProvider));
        }

        public final Object pointerCountClassifier() {
            return new PointerCountClassifier((FalsingDataProvider) this.falsingDataProvider.get());
        }

        public final PopupUIAlertDialogFactory popupUIAlertDialogFactory() {
            return new PopupUIAlertDialogFactory(this.referenceGlobalRootComponentImpl.context, new PopupUIUtil(), (LogWrapper) this.providesPopupUILogWrapperProvider.get(), keyguardUpdateMonitorWrapper());
        }

        public final PopupUIIntentWrapper popupUIIntentWrapper() {
            return new PopupUIIntentWrapper(this.referenceGlobalRootComponentImpl.context);
        }

        public final PopupUIToastWrapper popupUIToastWrapper() {
            return new PopupUIToastWrapper(this.referenceGlobalRootComponentImpl.context);
        }

        public final ThresholdSensor primaryProxSensorThresholdSensor() {
            return SensorModule_ProvidePrimaryProximitySensorFactory.providePrimaryProximitySensor((SensorManager) this.referenceGlobalRootComponentImpl.providesSensorManagerProvider.get(), thresholdSensorImplBuilder());
        }

        public final ThresholdSensor[] primaryProxSensorThresholdSensorArray() {
            return SensorModule_ProvidePostureToProximitySensorMappingFactory.providePostureToProximitySensorMapping(builderFactory(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
        }

        public final PrivacyLogger privacyLogger() {
            return new PrivacyLogger((LogBuffer) this.providePrivacyLogBufferProvider.get());
        }

        public final PrivateProfilePolicy privateProfilePolicy() {
            return new PrivateProfilePolicy((ProfileTypeRepository) this.bindProfileTypeRepositoryProvider.get());
        }

        public final ProfileMessageController profileMessageController() {
            return new ProfileMessageController((PackageLabelIconProvider) this.bindPackageLabelIconProvider.get(), (ProfileFirstRunFileResources) this.bindProfileFirstRunResourcesProvider.get(), (ProfileFirstRunSettings) this.bindProfileFirstRunSettingsProvider.get(), (ProfileTypeRepository) this.bindProfileTypeRepositoryProvider.get());
        }

        public final PromptCredentialInteractor promptCredentialInteractor() {
            return new PromptCredentialInteractor((CoroutineDispatcher) this.bgDispatcherProvider.get(), (PromptRepository) this.promptRepositoryImplProvider.get(), (CredentialInteractor) this.providesCredentialInteractorProvider.get());
        }

        public final QSTileConfig provideAirplaneModeTileConfig() {
            return ConnectivityModule_Companion_ProvideAirplaneModeTileConfigFactory.provideAirplaneModeTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideAlarmTileConfig() {
            return PolicyModule_Companion_ProvideAlarmTileConfigFactory.provideAlarmTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideBatterySaverTileConfig() {
            return BatterySaverModule_Companion_ProvideBatterySaverTileConfigFactory.provideBatterySaverTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideBluetoothTileConfig() {
            return ConnectivityModule_Companion_ProvideBluetoothTileConfigFactory.provideBluetoothTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final BootAnimationFinishedCacheImpl provideBootAnimationFinishedImpl() {
            return (BootAnimationFinishedCacheImpl) this.bootAnimationFinishedCacheImplProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final BootAnimationFinishedTrigger provideBootAnimationFinishedTrigger() {
            return (BootAnimationFinishedTrigger) this.bootAnimationFinishedCacheImplProvider.get();
        }

        @Override // com.android.systemui.dagger.SysUIComponent
        public final BootCompleteCacheImpl provideBootCacheImpl() {
            return (BootCompleteCacheImpl) this.bootCompleteCacheImplProvider.get();
        }

        public final QSTileAvailabilityInteractor provideCameraToggleAvailabilityInteractor() {
            SwitchingProvider.AnonymousClass27 anonymousClass27 = (SwitchingProvider.AnonymousClass27) this.factoryProvider28.get();
            PolicyModule.Companion.getClass();
            SensorPrivacyToggleTileDataInteractor create = anonymousClass27.create(2);
            Preconditions.checkNotNullFromProvides(create);
            return create;
        }

        public final QSTileConfig provideCameraToggleTileConfig() {
            return PolicyModule_Companion_ProvideCameraToggleTileConfigFactory.provideCameraToggleTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideCastTileConfig() {
            return ConnectivityModule_Companion_ProvideCastTileConfigFactory.provideCastTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideColorCorrectionTileConfig() {
            return QSAccessibilityModule_Companion_ProvideColorCorrectionTileConfigFactory.provideColorCorrectionTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideColorInversionTileConfig() {
            return QSAccessibilityModule_Companion_ProvideColorInversionTileConfigFactory.provideColorInversionTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideDataSaverTileConfig() {
            return ConnectivityModule_Companion_ProvideDataSaverTileConfigFactory.provideDataSaverTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideDeviceControlsTileConfig() {
            return ControlsModule_Companion_ProvideDeviceControlsTileConfigFactory.provideDeviceControlsTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideDndTileConfig() {
            return PolicyModule_Companion_ProvideDndTileConfigFactory.provideDndTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideDreamTileConfig() {
            return DreamModule_ProvideDreamTileConfigFactory.provideDreamTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideFlashlightTileConfig() {
            return PolicyModule_Companion_ProvideFlashlightTileConfigFactory.provideFlashlightTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideFontScalingTileConfig() {
            return QSAccessibilityModule_Companion_ProvideFontScalingTileConfigFactory.provideFontScalingTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final Pair<GridLayoutType, GridTypeConsistencyInteractor> provideGridConsistencyInteractor() {
            InfiniteGridConsistencyInteractor infiniteGridConsistencyInteractor = (InfiniteGridConsistencyInteractor) this.infiniteGridConsistencyInteractorProvider.get();
            PanelsModule.Companion.getClass();
            return new Pair<>(InfiniteGridLayoutType.INSTANCE, infiniteGridConsistencyInteractor);
        }

        public final Pair<GridLayoutType, GridLayout> provideGridLayout() {
            InfiniteGridLayout infiniteGridLayout = (InfiniteGridLayout) this.infiniteGridLayoutProvider.get();
            PanelsModule.Companion.getClass();
            return new Pair<>(InfiniteGridLayoutType.INSTANCE, infiniteGridLayout);
        }

        public final QSTileConfig provideHotspotTileConfig() {
            return ConnectivityModule_Companion_ProvideHotspotTileConfigFactory.provideHotspotTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideInternetTileConfig() {
            return ConnectivityModule_Companion_ProvideInternetTileConfigFactory.provideInternetTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideLocationTileConfig() {
            return PolicyModule_Companion_ProvideLocationTileConfigFactory.provideLocationTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileAvailabilityInteractor provideMicToggleModeAvailabilityInteractor() {
            SwitchingProvider.AnonymousClass27 anonymousClass27 = (SwitchingProvider.AnonymousClass27) this.factoryProvider28.get();
            PolicyModule.Companion.getClass();
            SensorPrivacyToggleTileDataInteractor create = anonymousClass27.create(1);
            Preconditions.checkNotNullFromProvides(create);
            return create;
        }

        public final QSTileConfig provideMicrophoneToggleTileConfig() {
            return PolicyModule_Companion_ProvideMicrophoneToggleTileConfigFactory.provideMicrophoneToggleTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideNightDisplayTileConfig() {
            return QSAccessibilityModule_Companion_ProvideNightDisplayTileConfigFactory.provideNightDisplayTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideOneHandedTileConfig() {
            return QSAccessibilityModule_Companion_ProvideOneHandedTileConfigFactory.provideOneHandedTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final Pair<GridLayoutType, GridTypeConsistencyInteractor> providePartitionedGridConsistencyInteractor() {
            NoopGridConsistencyInteractor noopGridConsistencyInteractor = (NoopGridConsistencyInteractor) this.noopGridConsistencyInteractorProvider.get();
            PanelsModule.Companion.getClass();
            return new Pair<>(PartitionedGridLayoutType.INSTANCE, noopGridConsistencyInteractor);
        }

        public final Pair<GridLayoutType, GridLayout> providePartitionedGridLayout() {
            PartitionedGridLayout partitionedGridLayout = (PartitionedGridLayout) this.partitionedGridLayoutProvider.get();
            PanelsModule.Companion.getClass();
            return new Pair<>(PartitionedGridLayoutType.INSTANCE, partitionedGridLayout);
        }

        public final QSTileConfig provideQRCodeScannerTileConfig() {
            return QRCodeScannerModule_Companion_ProvideQRCodeScannerTileConfigFactory.provideQRCodeScannerTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideRecordIssueTileConfig() {
            return RecordIssueModule_Companion_ProvideRecordIssueTileConfigFactory.provideRecordIssueTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideReduceBrightColorsTileConfig() {
            return QSAccessibilityModule_Companion_ProvideReduceBrightColorsTileConfigFactory.provideReduceBrightColorsTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideRotationTileConfig() {
            return RotationLockNewModule_Companion_ProvideRotationTileConfigFactory.provideRotationTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideScreenRecordTileConfig() {
            return ScreenRecordModule_Companion_ProvideScreenRecordTileConfigFactory.provideScreenRecordTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final Pair<GridLayoutType, GridTypeConsistencyInteractor> provideStretchedGridConsistencyInteractor() {
            NoopGridConsistencyInteractor noopGridConsistencyInteractor = (NoopGridConsistencyInteractor) this.noopGridConsistencyInteractorProvider.get();
            PanelsModule.Companion.getClass();
            return new Pair<>(StretchedGridLayoutType.INSTANCE, noopGridConsistencyInteractor);
        }

        public final Pair<GridLayoutType, GridLayout> provideStretchedGridLayout() {
            StretchedGridLayout stretchedGridLayout = (StretchedGridLayout) this.stretchedGridLayoutProvider.get();
            PanelsModule.Companion.getClass();
            return new Pair<>(StretchedGridLayoutType.INSTANCE, stretchedGridLayout);
        }

        public final QSTileConfig provideUiModeNightTileConfig() {
            return PolicyModule_Companion_ProvideUiModeNightTileConfigFactory.provideUiModeNightTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final QSTileConfig provideWorkModeTileConfig() {
            return PolicyModule_Companion_ProvideWorkModeTileConfigFactory.provideWorkModeTileConfig((QsEventLogger) this.qsEventLoggerImplProvider.get());
        }

        public final Set<AutoAddable> providesA11yShortcutAutoAddable() {
            return BaseAutoAddableModule_Companion_ProvidesA11yShortcutAutoAddableFactory.providesA11yShortcutAutoAddable((SwitchingProvider.AnonymousClass49) this.factoryProvider49.get());
        }

        public final Set<AutoAddable> providesAutoAddableSetting() {
            return BaseAutoAddableModule_Companion_ProvidesAutoAddableSettingFactory.providesAutoAddableSetting(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (SwitchingProvider.AnonymousClass48) this.factoryProvider48.get());
        }

        public final Set<FalsingClassifier> providesBrightLineGestureClassifiers() {
            Object distanceClassifier = distanceClassifier();
            Object proximityClassifier = proximityClassifier();
            Object pointerCountClassifier = pointerCountClassifier();
            return new HashSet(Arrays.asList((PointerCountClassifier) pointerCountClassifier, typeClassifier(), (DiagonalClassifier) diagonalClassifier(), (DistanceClassifier) distanceClassifier, (ProximityClassifier) proximityClassifier, (ZigZagClassifier) zigZagClassifier()));
        }

        public final ProximityCheck proximityCheck() {
            return SensorModule_ProvideProximityCheckFactory.provideProximityCheck(proximitySensor(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
        }

        public final Object proximityClassifier() {
            return new ProximityClassifier((DistanceClassifier) distanceClassifier(), (FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        public final ProximitySensor proximitySensor() {
            return SensorModule_ProvideProximitySensorFactory.provideProximitySensor(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), DoubleCheck.lazy(this.postureDependentProximitySensorProvider), DoubleCheck.lazy(this.proximitySensorImplProvider));
        }

        public final QRCodeScannerTileDataInteractor qRCodeScannerTileDataInteractor() {
            return new QRCodeScannerTileDataInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), (QRCodeScannerController) this.qRCodeScannerControllerProvider.get());
        }

        public final QRCodeScannerTileMapper qRCodeScannerTileMapper() {
            return new QRCodeScannerTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final QRCodeScannerTileUserActionInteractor qRCodeScannerTileUserActionInteractor() {
            return new QRCodeScannerTileUserActionInteractor((QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final QSDisableFlagsLogger qSDisableFlagsLogger() {
            return new QSDisableFlagsLogger((LogBuffer) this.provideQSFragmentDisableLogBufferProvider.get(), (DisableFlagsLogger) this.disableFlagsLoggerProvider.get());
        }

        public final QSLogger qSLogger() {
            return new QSLogger((LogBuffer) this.provideQuickSettingsLogBufferProvider.get(), (LogBuffer) this.provideQSConfigLogBufferProvider.get());
        }

        public final QSPipelineLogger qSPipelineLogger() {
            return new QSPipelineLogger((LogBuffer) this.provideQSTileListLogBufferProvider.get(), (LogBuffer) this.provideQSAutoAddLogBufferProvider.get(), (LogBuffer) this.providesQSRestoreLogBufferProvider.get());
        }

        public final QSTileCoroutineScopeFactory qSTileCoroutineScopeFactory() {
            return new QSTileCoroutineScopeFactory((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
        }

        public final QSTileViewModelFactory$Component qSTileViewModelFactoryComponent() {
            return new QSTileViewModelFactory$Component((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), new CustomTileComponentBuilder(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0));
        }

        public final QsBatteryModeController qsBatteryModeController() {
            return new QsBatteryModeController(this.referenceGlobalRootComponentImpl.context, (StatusBarContentInsetsProvider) this.statusBarContentInsetsProvider.get());
        }

        public final Set<KeyguardQuickAffordanceConfig> quickAffordanceConfigs() {
            CameraQuickAffordanceConfig cameraQuickAffordanceConfig = (CameraQuickAffordanceConfig) this.cameraQuickAffordanceConfigProvider.get();
            DoNotDisturbQuickAffordanceConfig doNotDisturbQuickAffordanceConfig = (DoNotDisturbQuickAffordanceConfig) this.doNotDisturbQuickAffordanceConfigProvider.get();
            FlashlightQuickAffordanceConfig flashlightQuickAffordanceConfig = (FlashlightQuickAffordanceConfig) this.flashlightQuickAffordanceConfigProvider.get();
            GlanceableHubQuickAffordanceConfig glanceableHubQuickAffordanceConfig = (GlanceableHubQuickAffordanceConfig) this.glanceableHubQuickAffordanceConfigProvider.get();
            HomeControlsKeyguardQuickAffordanceConfig homeControlsKeyguardQuickAffordanceConfig = (HomeControlsKeyguardQuickAffordanceConfig) this.homeControlsKeyguardQuickAffordanceConfigProvider.get();
            MuteQuickAffordanceConfig muteQuickAffordanceConfig = (MuteQuickAffordanceConfig) this.muteQuickAffordanceConfigProvider.get();
            QuickAccessWalletKeyguardQuickAffordanceConfig quickAccessWalletKeyguardQuickAffordanceConfig = (QuickAccessWalletKeyguardQuickAffordanceConfig) this.quickAccessWalletKeyguardQuickAffordanceConfigProvider.get();
            QrCodeScannerKeyguardQuickAffordanceConfig qrCodeScannerKeyguardQuickAffordanceConfig = (QrCodeScannerKeyguardQuickAffordanceConfig) this.qrCodeScannerKeyguardQuickAffordanceConfigProvider.get();
            VideoCameraQuickAffordanceConfig videoCameraQuickAffordanceConfig = (VideoCameraQuickAffordanceConfig) this.videoCameraQuickAffordanceConfigProvider.get();
            KeyguardDataQuickAffordanceModule.Companion.getClass();
            Set<KeyguardQuickAffordanceConfig> of = SetsKt__SetsKt.setOf(cameraQuickAffordanceConfig, doNotDisturbQuickAffordanceConfig, flashlightQuickAffordanceConfig, glanceableHubQuickAffordanceConfig, homeControlsKeyguardQuickAffordanceConfig, muteQuickAffordanceConfig, quickAccessWalletKeyguardQuickAffordanceConfig, qrCodeScannerKeyguardQuickAffordanceConfig, videoCameraQuickAffordanceConfig);
            Preconditions.checkNotNullFromProvides(of);
            return of;
        }

        public final RecentsImplementation recentsImplementation() {
            return RecentsModule_ProvideRecentsImplFactory.provideRecentsImpl(this.referenceGlobalRootComponentImpl.context, (ContextComponentHelper) this.contextComponentResolverProvider.get());
        }

        public final ReduceBrightColorsTileDataInteractor reduceBrightColorsTileDataInteractor() {
            return new ReduceBrightColorsTileDataInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), ((Boolean) this.isReduceBrightColorsAvailableProvider.get()).booleanValue(), (ReduceBrightColorsController) this.reduceBrightColorsControllerImplProvider.get());
        }

        public final ReduceBrightColorsTileMapper reduceBrightColorsTileMapper() {
            return new ReduceBrightColorsTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final ReduceBrightColorsTileUserActionInteractor reduceBrightColorsTileUserActionInteractor() {
            return new ReduceBrightColorsTileUserActionInteractor((QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get(), (ReduceBrightColorsController) this.reduceBrightColorsControllerImplProvider.get());
        }

        public final GuestResetOrExitSessionReceiver.ResetSessionDialogFactory resetSessionDialogFactory() {
            return new GuestResetOrExitSessionReceiver.ResetSessionDialogFactory((SystemUIDialog.Factory) this.factoryProvider8.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (GuestResetOrExitSessionReceiver.ResetSessionDialogClickListener.Factory) this.factoryProvider14.get());
        }

        public final RestrictedLockProxy restrictedLockProxy() {
            return new RestrictedLockProxy(this.referenceGlobalRootComponentImpl.context);
        }

        public final ResumeMediaBrowserFactory resumeMediaBrowserFactory() {
            return new ResumeMediaBrowserFactory(this.referenceGlobalRootComponentImpl.context, mediaBrowserFactory(), (ResumeMediaBrowserLogger) this.resumeMediaBrowserLoggerProvider.get());
        }

        public final RotationLockTileDataInteractor rotationLockTileDataInteractor() {
            return new RotationLockTileDataInteractor((RotationLockController) this.rotationLockControllerImplProvider.get(), (BatteryController) this.provideBatteryControllerProvider.get(), (CameraAutoRotateRepository) this.cameraAutoRotateRepositoryImplProvider.get(), (CameraSensorPrivacyRepository) this.cameraSensorPrivacyRepositoryImplProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
        }

        public final RotationLockTileMapper rotationLockTileMapper() {
            return new RotationLockTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme(), (DevicePostureController) this.devicePostureControllerImplProvider.get());
        }

        public final RotationLockTileUserActionInteractor rotationLockTileUserActionInteractor() {
            return new RotationLockTileUserActionInteractor((RotationLockController) this.rotationLockControllerImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final RowContentBindStageLogger rowContentBindStageLogger() {
            return new RowContentBindStageLogger((LogBuffer) this.provideNotifInflationLogBufferProvider.get());
        }

        public final RowInflaterTaskLogger rowInflaterTaskLogger() {
            return new RowInflaterTaskLogger((LogBuffer) this.provideNotifInflationLogBufferProvider.get());
        }

        public final SamsungLightBarControlHelper samsungLightBarControlHelper() {
            return new SamsungLightBarControlHelper((KeyguardStateController) this.keyguardStateControllerImplProvider.get());
        }

        public final SamsungScreenPinningRequest samsungScreenPinningRequest() {
            return new SamsungScreenPinningRequest(this.referenceGlobalRootComponentImpl.context, (LogWrapper) this.providesPopupUILogWrapperProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get());
        }

        public final SaveableSession saveableSession() {
            final SessionStorage sessionStorage = (SessionStorage) this.provideShadeSessionStorageProvider.get();
            NotificationsShadeSessionModule.INSTANCE.getClass();
            return new SaveableSession(sessionStorage) { // from class: com.android.systemui.notifications.ui.composable.NotificationsShadeSessionModule$provideShadeSession$1
                public final /* synthetic */ SessionImpl $$delegate_0;

                {
                    new SessionImpl(sessionStorage);
                }
            };
        }

        public final SceneLogger sceneLogger() {
            return new SceneLogger((LogBuffer) this.provideSceneFrameworkLogBufferProvider.get());
        }

        public final ScreenCaptureDisabledDialogDelegate screenCaptureDisabledDialogDelegate() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            return new ScreenCaptureDisabledDialogDelegate(context, FrameworkServicesModule_ProvideResourcesFactory.provideResources(context));
        }

        public final ScreenControlActionInteractor screenControlActionInteractor() {
            return new ScreenControlActionInteractor(this.referenceGlobalRootComponentImpl.context, (ScreenController) this.screenControllerProvider.get());
        }

        public final ScreenIdleCondition screenIdleCondition() {
            return new ScreenIdleCondition(DoubleCheck.lazy(this.powerInteractorProvider));
        }

        public final ScreenRecordTileDataInteractor screenRecordTileDataInteractor() {
            return new ScreenRecordTileDataInteractor((ScreenRecordRepository) this.screenRecordRepositoryImplProvider.get());
        }

        public final ScreenRecordTileMapper screenRecordTileMapper() {
            return new ScreenRecordTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final ScreenRecordTileUserActionInteractor screenRecordTileUserActionInteractor() {
            return new ScreenRecordTileUserActionInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (CoroutineContext) this.bgCoroutineContextProvider.get(), (ScreenRecordRepository) this.screenRecordRepositoryImplProvider.get(), (RecordingController) this.recordingControllerProvider.get(), (KeyguardInteractor) this.keyguardInteractorProvider.get(), (KeyguardDismissUtil) this.keyguardDismissUtilProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get(), panelInteractor(), (MediaProjectionMetricsLogger) this.mediaProjectionMetricsLoggerProvider.get(), (FeatureFlagsClassic) this.featureFlagsClassicReleaseProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final ScreenshotDetectionController screenshotDetectionController() {
            return new ScreenshotDetectionController((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
        }

        public final ScreenshotErrorController screenshotErrorController() {
            return new ScreenshotErrorController(this.referenceGlobalRootComponentImpl.context);
        }

        public final ScreenshotShelfViewBinder screenshotShelfViewBinder() {
            return new ScreenshotShelfViewBinder(new ActionButtonViewBinder());
        }

        public final ScreenshotViewProxy.Factory screenshotViewProxyFactory() {
            SwitchingProvider.AnonymousClass42 anonymousClass42 = (SwitchingProvider.AnonymousClass42) this.factoryProvider40.get();
            Flags.screenshotShelfUi2();
            Preconditions.checkNotNullFromProvides(anonymousClass42);
            return anonymousClass42;
        }

        public final ScrimLogger scrimLogger() {
            return new ScrimLogger((LogBuffer) this.provideScrimLogBufferProvider.get());
        }

        public final ScrimManager scrimManager() {
            return new ScrimManager((Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), namedScrimController(), namedScrimController2(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get());
        }

        public final ScrollCaptureClient scrollCaptureClient() {
            return new ScrollCaptureClient((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get(), this.referenceGlobalRootComponentImpl.context);
        }

        public final ScrollCaptureController scrollCaptureController() {
            return new ScrollCaptureController(this.referenceGlobalRootComponentImpl.context, (Executor) this.provideBackgroundExecutorProvider.get(), scrollCaptureClient(), (ImageTileSet) imageTileSet(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
        }

        public final ScrollCaptureExecutor scrollCaptureExecutor() {
            return new ScrollCaptureExecutor((ActivityManager) this.referenceGlobalRootComponentImpl.provideActivityManagerProvider.get(), scrollCaptureClient(), scrollCaptureController(), (LongScreenshotData) this.longScreenshotDataProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get());
        }

        public final SecQSDetail secQSDetail() {
            NotificationsQuickSettingsContainer notificationsQuickSettingsContainer = (NotificationsQuickSettingsContainer) this.providesNotificationsQuickSettingsContainerProvider.get();
            ShadeViewProviderModule.Companion.getClass();
            return (SecQSDetail) notificationsQuickSettingsContainer.requireViewById(R.id.qs_detail);
        }

        public final SecSeekBarViewModel secSeekBarViewModel() {
            return new SecSeekBarViewModel((RepeatableExecutor) this.provideBackgroundRepeatableExecutorProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get());
        }

        public final ThresholdSensor secondaryProxSensorThresholdSensor() {
            return SensorModule_ProvideSecondaryProximitySensorFactory.provideSecondaryProximitySensor(thresholdSensorImplBuilder());
        }

        public final ThresholdSensor[] secondaryProxSensorThresholdSensorArray() {
            return SensorModule_ProvidePostureToSecondaryProximitySensorMappingFactory.providePostureToSecondaryProximitySensorMapping(builderFactory(), FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context));
        }

        public final SeekBarViewModel seekBarViewModel() {
            return new SeekBarViewModel((RepeatableExecutor) this.provideBackgroundRepeatableExecutorProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get());
        }

        public final SensitiveNotificationProtectionControllerLogger sensitiveNotificationProtectionControllerLogger() {
            return new SensitiveNotificationProtectionControllerLogger((LogBuffer) this.provideSensitiveNotificationProtectionLogBufferProvider.get());
        }

        public final Set<AutoAddable> setOfAutoAddable() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(9);
            newSetBuilder.addAll(providesAutoAddableSetting());
            newSetBuilder.addAll(providesA11yShortcutAutoAddable());
            newSetBuilder.add((AutoAddable) this.castAutoAddableProvider.get());
            newSetBuilder.add((AutoAddable) this.dataSaverAutoAddableProvider.get());
            newSetBuilder.add((AutoAddable) this.hotspotAutoAddableProvider.get());
            newSetBuilder.add((AutoAddable) this.nightDisplayAutoAddableProvider.get());
            newSetBuilder.add((AutoAddable) this.reduceBrightColorsAutoAddableProvider.get());
            newSetBuilder.add((AutoAddable) this.walletAutoAddableProvider.get());
            newSetBuilder.add((AutoAddable) this.workTileAutoAddableProvider.get());
            return newSetBuilder.build();
        }

        public final Set<ComposableLockscreenSceneBlueprint> setOfComposableLockscreenSceneBlueprint() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add(defaultBlueprint());
            newSetBuilder.add(communalBlueprint());
            newSetBuilder.add(shortcutsBesideUdfpsBlueprint());
            return newSetBuilder.build();
        }

        public final Set<ConditionalRestarter.Condition> setOfCondition() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add(screenIdleCondition());
            newSetBuilder.add(pluggedInCondition());
            newSetBuilder.add(notOccludedCondition());
            return newSetBuilder.build();
        }

        public final Set<ConfigurationController.ConfigurationListener> setOfConfigurationListener() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(8);
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.provideRecentsProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.screenPinningRequestProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.authControllerProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.secPowerUIProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.rearDisplayDialogControllerProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.systemActionsProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.toastUIProvider.get());
            newSetBuilder.add((ConfigurationController.ConfigurationListener) this.volumeUIProvider.get());
            return newSetBuilder.build();
        }

        public final Set<DeviceEntryIconTransition> setOfDeviceEntryIconTransition() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(35);
            newSetBuilder.add((DeviceEntryIconTransition) this.alternateBouncerToAodTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.alternateBouncerToDozingTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.alternateBouncerToGoneTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.alternateBouncerToOccludedTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.alternateBouncerToPrimaryBouncerTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.aodToGoneTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.aodToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.aodToOccludedTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.aodToPrimaryBouncerTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dozingToGoneTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dozingToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dozingToOccludedTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dozingToPrimaryBouncerTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dreamingToAodTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dreamingToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.lockscreenToAodTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.lockscreenToDozingTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.lockscreenToDreamingTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.lockscreenToOccludedTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.lockscreenToPrimaryBouncerTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.lockscreenToGoneTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.goneToAodTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.goneToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.goneToDozingTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.occludedToAodTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.occludedToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.offToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.primaryBouncerToAodTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.primaryBouncerToDozingTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.primaryBouncerToLockscreenTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.dreamingToGlanceableHubTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.glanceableHubToDreamingTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.glanceableHubToOccludedTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.occludedToGlanceableHubTransitionViewModelProvider.get());
            newSetBuilder.add((DeviceEntryIconTransition) this.goneToGlanceableHubTransitionViewModelProvider.get());
            return newSetBuilder.build();
        }

        public final Set<KeyguardBlueprint> setOfKeyguardBlueprint() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add((KeyguardBlueprint) this.defaultKeyguardBlueprintProvider.get());
            newSetBuilder.add((KeyguardBlueprint) this.splitShadeKeyguardBlueprintProvider.get());
            newSetBuilder.add((KeyguardBlueprint) this.shortcutsBesideUdfpsKeyguardBlueprintProvider.get());
            return newSetBuilder.build();
        }

        public final Set<KeyguardQuickAffordanceConfig> setOfKeyguardQuickAffordanceConfig() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(2);
            newSetBuilder.addAll(quickAffordanceConfigs());
            newSetBuilder.add(noteTaskQuickAffordanceConfig());
            return newSetBuilder.build();
        }

        public final Set<StatusBarInitializer.OnStatusBarViewInitializedListener> setOfOnStatusBarViewInitializedListener() {
            return Collections.singleton((StatusBarInitializer.OnStatusBarViewInitializedListener) this.statusBarModeRepositoryImplProvider.get());
        }

        public final Set<Pair<GridLayoutType, GridLayout>> setOfPairOfGridLayoutTypeAndGridLayout() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add(provideGridLayout());
            newSetBuilder.add(provideStretchedGridLayout());
            newSetBuilder.add(providePartitionedGridLayout());
            return newSetBuilder.build();
        }

        public final Set<Pair<GridLayoutType, GridTypeConsistencyInteractor>> setOfPairOfGridLayoutTypeAndGridTypeConsistencyInteractor() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add(provideGridConsistencyInteractor());
            newSetBuilder.add(provideStretchedGridConsistencyInteractor());
            newSetBuilder.add(providePartitionedGridConsistencyInteractor());
            return newSetBuilder.build();
        }

        public final Set<PrivacyItemMonitor> setOfPrivacyItemMonitor() {
            return Collections.singleton((PrivacyItemMonitor) this.appOpsPrivacyItemMonitorProvider.get());
        }

        public final Set<RestoreProcessor> setOfRestoreProcessor() {
            return Collections.singleton((RestoreProcessor) this.workTileRestoreProcessorProvider.get());
        }

        public final Set<SceneResolver> setOfSceneResolver() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(3);
            newSetBuilder.add((SceneResolver) this.homeSceneFamilyResolverProvider.get());
            newSetBuilder.add((SceneResolver) this.notifShadeSceneFamilyResolverProvider.get());
            newSetBuilder.add((SceneResolver) this.quickSettingsSceneFamilyResolverProvider.get());
            return newSetBuilder.build();
        }

        public final Set<TransitionInteractor> setOfTransitionInteractor() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(10);
            newSetBuilder.add((TransitionInteractor) this.fromPrimaryBouncerTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromLockscreenTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromAodTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromGoneTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromDreamingTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromDreamingLockscreenHostedTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromOccludedTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromDozingTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromAlternateBouncerTransitionInteractorProvider.get());
            newSetBuilder.add((TransitionInteractor) this.fromGlanceableHubTransitionInteractorProvider.get());
            return newSetBuilder.build();
        }

        public final SettingsMenuSection settingsMenuSection() {
            return new SettingsMenuSection(keyguardSettingsMenuViewModel(), (KeyguardLongPressViewModel) this.keyguardLongPressViewModelProvider.get(), (VibratorHelper) this.vibratorHelperProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final ShadeCarrierGroupController.Builder shadeCarrierGroupControllerBuilder() {
            return new ShadeCarrierGroupController.Builder((ActivityStarter) this.activityStarterImplProvider.get(), (Handler) this.provideBgHandlerProvider.get(), GlobalConcurrencyModule_ProvideMainLooperFactory.provideMainLooper(), (ShadeCarrierGroupControllerLogger) this.shadeCarrierGroupControllerLoggerProvider.get(), (NetworkController) this.networkControllerImplProvider.get(), carrierTextManagerBuilder(), this.referenceGlobalRootComponentImpl.context, (CarrierConfigTracker) this.carrierConfigTrackerProvider.get(), (ShadeCarrierGroupController.SlotIndexResolver) this.subscriptionManagerSlotIndexResolverProvider.get(), (MobileUiAdapter) this.mobileUiAdapterProvider.get(), (MobileContextProvider) this.mobileContextProvider.get(), (StatusBarPipelineFlags) this.statusBarPipelineFlagsProvider.get(), latinNetworkNameProviderImpl(), (SlimIndicatorViewMediator) this.slimIndicatorViewMediatorImplProvider.get());
        }

        public final ShadeDependentFlows shadeDependentFlows() {
            return new ShadeDependentFlows((KeyguardTransitionInteractor) this.keyguardTransitionInteractorProvider.get(), (ShadeInteractor) this.shadeInteractorImplProvider.get());
        }

        public final ShadeEventCoordinatorLogger shadeEventCoordinatorLogger() {
            return new ShadeEventCoordinatorLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final ShadeHeaderColorPicker shadeHeaderColorPicker() {
            return new ShadeHeaderColorPicker(this.referenceGlobalRootComponentImpl.context);
        }

        public final ShadeListBuilderLogger shadeListBuilderLogger() {
            return new ShadeListBuilderLogger(notifPipelineFlags(), (LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final ShadeLogger shadeLogger() {
            return new ShadeLogger((LogBuffer) this.provideShadeLogBufferProvider.get());
        }

        public final ShadeViewDifferLogger shadeViewDifferLogger() {
            return new ShadeViewDifferLogger((LogBuffer) this.provideNotificationsLogBufferProvider.get());
        }

        public final ShadeWindowLogger shadeWindowLogger() {
            return new ShadeWindowLogger((LogBuffer) this.provideShadeWindowLogBufferProvider.get());
        }

        public final ShareViaActionInteractor shareViaActionInteractor() {
            return new ShareViaActionInteractor(this.referenceGlobalRootComponentImpl.context);
        }

        public final ShelfNotificationIconViewStore shelfNotificationIconViewStore() {
            return new ShelfNotificationIconViewStore((NotifCollection) this.notifCollectionProvider.get());
        }

        public final ShortcutHelperViewModel shortcutHelperViewModel() {
            return new ShortcutHelperViewModel((CoroutineDispatcher) this.bgDispatcherProvider.get(), (ShortcutHelperInteractor) this.shortcutHelperInteractorProvider.get());
        }

        public final ShortcutsBesideUdfpsBlueprint shortcutsBesideUdfpsBlueprint() {
            return new ShortcutsBesideUdfpsBlueprint((LockscreenContentViewModel) this.lockscreenContentViewModelProvider.get(), statusBarSection(), lockSection(), Optional.empty(), bottomAreaSection(), settingsMenuSection(), topAreaSection(), (NotificationSection) this.notificationSectionProvider.get());
        }

        public final ShutdownUi shutdownUi() {
            return new ShutdownUi(this.referenceGlobalRootComponentImpl.context, (BlurUtils) this.blurUtilsProvider.get(), (NearbyManager) this.referenceGlobalRootComponentImpl.provideNearbyManagerProvider.get());
        }

        public final NodeController silentHeaderNodeController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesSilentHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            NodeController nodeController = sectionHeaderControllerSubcomponent.getNodeController();
            Preconditions.checkNotNullFromProvides(nodeController);
            return nodeController;
        }

        public final SectionHeaderController silentHeaderSectionHeaderController() {
            SectionHeaderControllerSubcomponent sectionHeaderControllerSubcomponent = (SectionHeaderControllerSubcomponent) this.providesSilentHeaderSubcomponentProvider.get();
            int i = NotificationSectionHeadersModule.$r8$clinit;
            SectionHeaderController headerController = sectionHeaderControllerSubcomponent.getHeaderController();
            Preconditions.checkNotNullFromProvides(headerController);
            return headerController;
        }

        public final SilentNotificationStatusIconsVisibilityInteractor silentNotificationStatusIconsVisibilityInteractor() {
            return new SilentNotificationStatusIconsVisibilityInteractor((NotificationListenerSettingsRepository) this.notificationListenerSettingsRepositoryProvider.get());
        }

        public final SimTrayProtectionViewModel simTrayProtectionViewModel() {
            return new SimTrayProtectionViewModel(popupUIAlertDialogFactory(), (LogWrapper) this.providesPopupUILogWrapperProvider.get(), popupUIIntentWrapper(), (WakefulnessLifecycle) this.wakefulnessLifecycleProvider.get());
        }

        public final SingleTapClassifier singleTapClassifier() {
            return new SingleTapClassifier((FalsingDataProvider) this.falsingDataProvider.get(), namedFloat());
        }

        public final SmartActionInflaterImpl smartActionInflaterImpl() {
            return new SmartActionInflaterImpl((SmartReplyConstants) this.smartReplyConstantsProvider.get(), (ActivityStarter) this.activityStarterImplProvider.get(), (SmartReplyController) this.provideSmartReplyControllerProvider.get(), (HeadsUpManager) this.headsUpManagerPhoneProvider.get());
        }

        public final SmartReplyInflaterImpl smartReplyInflaterImpl() {
            return new SmartReplyInflaterImpl((SmartReplyConstants) this.smartReplyConstantsProvider.get(), (KeyguardDismissUtil) this.keyguardDismissUtilProvider.get(), (NotificationRemoteInputManager) this.notificationRemoteInputManagerProvider.get(), (SmartReplyController) this.provideSmartReplyControllerProvider.get(), this.referenceGlobalRootComponentImpl.context);
        }

        public final SmartReplyStateInflaterImpl smartReplyStateInflaterImpl() {
            return new SmartReplyStateInflaterImpl((SmartReplyConstants) this.smartReplyConstantsProvider.get(), (ActivityManagerWrapper) this.provideActivityManagerWrapperProvider.get(), (PackageManagerWrapper) this.referenceGlobalRootComponentImpl.providePackageManagerWrapperProvider.get(), (DevicePolicyManagerWrapper) this.provideDevicePolicyManagerWrapperProvider.get(), smartReplyInflaterImpl(), smartActionInflaterImpl());
        }

        public final SmartSpaceSection smartSpaceSection() {
            return new SmartSpaceSection((LockscreenSmartspaceController) this.lockscreenSmartspaceControllerProvider.get(), (KeyguardUnlockAnimationController) this.keyguardSecLegacyUnlockAnimationControllerImplProvider.get(), (KeyguardSmartspaceViewModel) this.keyguardSmartspaceViewModelProvider.get(), (AodBurnInViewModel) this.aodBurnInViewModelProvider.get(), (LockscreenContentViewModel) this.lockscreenContentViewModelProvider.get());
        }

        public final SmartThingsMediaSdkManager smartThingsMediaSdkManager() {
            return new SmartThingsMediaSdkManager(supportServiceClientStateManager(), mediaSdkOperationManager());
        }

        public final SmartspaceInteractionHandler smartspaceInteractionHandler() {
            return new SmartspaceInteractionHandler((ActivityStarter) this.activityStarterImplProvider.get());
        }

        public final SoundAssistantManagerWrapper soundAssistantManagerWrapper() {
            return new SoundAssistantManagerWrapper(this.referenceGlobalRootComponentImpl.context);
        }

        public final SoundCraftViewComponent soundCraftViewComponent() {
            return new SoundCraftViewComponent((SoundCraftViewModelFactory) this.soundCraftViewModelFactoryProvider.get(), (ModelProvider) this.modelProvider.get());
        }

        public final SplitShadeMediaSection splitShadeMediaSection() {
            return new SplitShadeMediaSection(this.referenceGlobalRootComponentImpl.context, (NotificationPanelView) this.providesNotificationPanelViewProvider.get(), (KeyguardMediaController) this.keyguardMediaControllerProvider.get());
        }

        public final SplitShadeNotificationStackScrollLayoutSection splitShadeNotificationStackScrollLayoutSection() {
            return new SplitShadeNotificationStackScrollLayoutSection(this.referenceGlobalRootComponentImpl.context, (NotificationPanelView) this.providesNotificationPanelViewProvider.get(), (SharedNotificationContainer) this.providesSharedNotificationContainerProvider.get(), (SharedNotificationContainerViewModel) this.sharedNotificationContainerViewModelProvider.get(), (SharedNotificationContainerBinder) this.sharedNotificationContainerBinderProvider.get());
        }

        public final StackStateLogger stackStateLogger() {
            return new StackStateLogger((LogBuffer) this.provideNotificationHeadsUpLogBufferProvider.get(), (LogBuffer) this.provideNotificationRenderLogBufferProvider.get());
        }

        public final QSTileViewModelFactory$Static staticOfAirplaneModeTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfAlarmTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfBatterySaverTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfColorCorrectionTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfColorInversionTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfDataSaverTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfFlashlightTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfFontScalingTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfInternetTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfLocationTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfNightDisplayTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfOneHandedModeTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfQRCodeScannerTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfReduceBrightColorsTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfRotationLockTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfScreenRecordModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfSensorPrivacyToggleTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfUiModeNightTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final QSTileViewModelFactory$Static staticOfWorkModeTileModel() {
            return new QSTileViewModelFactory$Static((DisabledByPolicyInteractor) this.disabledByPolicyInteractorImplProvider.get(), (UserRepository) this.userRepositoryImplProvider.get(), (FalsingManager) this.falsingManagerProxyProvider.get(), (QSTileAnalytics) this.qSTileAnalyticsProvider.get(), (QSTileLogger) this.qSTileLoggerProvider.get(), (QSTileConfigProvider) this.qSTileConfigProviderImplProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), qSTileCoroutineScopeFactory());
        }

        public final StatusBarNotificationActivityStarterLogger statusBarNotificationActivityStarterLogger() {
            return new StatusBarNotificationActivityStarterLogger((LogBuffer) this.provideNotifInteractionLogBufferProvider.get());
        }

        public final StatusBarNotificationIconViewStore statusBarNotificationIconViewStore() {
            return new StatusBarNotificationIconViewStore((NotifCollection) this.notifCollectionProvider.get());
        }

        public final StatusBarNotificationIconsInteractor statusBarNotificationIconsInteractor() {
            return new StatusBarNotificationIconsInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), notificationIconsInteractor(), (NotificationListenerSettingsRepository) this.notificationListenerSettingsRepositoryProvider.get());
        }

        public final StatusBarSection statusBarSection() {
            return new StatusBarSection(new KeyguardStatusBarViewComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0), DoubleCheck.lazy(this.providesNotificationPanelViewProvider));
        }

        public final StatusBarVisibilityExt statusBarVisibilityExt() {
            return new StatusBarVisibilityExt((Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (KeyguardStateController) this.keyguardStateControllerImplProvider.get());
        }

        public final StatusBarWindowControllerExt statusBarWindowControllerExt() {
            return new StatusBarWindowControllerExt((IndicatorCutoutUtil) this.indicatorCutoutUtilProvider.get());
        }

        public final StatusOverlayHoverListenerFactory statusOverlayHoverListenerFactory() {
            return new StatusOverlayHoverListenerFactory(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (ConfigurationController) this.configurationControllerImplProvider.get(), (SysuiDarkIconDispatcher) this.darkIconDispatcherImplProvider.get());
        }

        public final StickyKeysIndicatorViewModel stickyKeysIndicatorViewModel() {
            return new StickyKeysIndicatorViewModel((StickyKeysRepository) this.stickyKeysRepositoryImplProvider.get(), (KeyboardRepository) this.keyboardRepositoryImplProvider.get(), (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get());
        }

        public final StickyKeysLogger stickyKeysLogger() {
            return new StickyKeysLogger((LogBuffer) this.provideKeyboardLogBufferProvider.get());
        }

        public final SubscriptionManagerProxyImpl subscriptionManagerProxyImpl() {
            return new SubscriptionManagerProxyImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get(), (SubscriptionManager) this.referenceGlobalRootComponentImpl.provideSubscriptionManagerProvider.get());
        }

        public final SupportServiceClientStateManager supportServiceClientStateManager() {
            return new SupportServiceClientStateManager((MediaSdkSupportServiceClient) this.referenceGlobalRootComponentImpl.mediaSdkSupportServiceClientProvider.get());
        }

        public final SystemBarUtilsProxyImpl systemBarUtilsProxyImpl() {
            return new SystemBarUtilsProxyImpl((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
        }

        public final SystemBarUtilsState systemBarUtilsState() {
            return new SystemBarUtilsState((CoroutineContext) this.bgCoroutineContextProvider.get(), (CoroutineContext) this.referenceGlobalRootComponentImpl.mainCoroutineContextProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), systemBarUtilsProxyImpl());
        }

        public final SystemDialogsCloser systemDialogsCloser() {
            return new DreamModule$$ExternalSyntheticLambda0(this.referenceGlobalRootComponentImpl.context);
        }

        public final SystemEventChipAnimationController systemEventChipAnimationController() {
            return new SystemEventChipAnimationController(this.referenceGlobalRootComponentImpl.context, (StatusBarWindowController) this.statusBarWindowControllerProvider.get(), (StatusBarContentInsetsProvider) this.statusBarContentInsetsProvider.get(), (ShadeExpansionStateManager) this.shadeExpansionStateManagerProvider.get(), privacyLogger(), (IndicatorGardenPresenter) this.indicatorGardenPresenterProvider.get(), (IndicatorScaleGardener) this.indicatorScaleGardenerProvider.get());
        }

        public final SystemExitRestarter systemExitRestarter() {
            return new SystemExitRestarter((IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get());
        }

        public final SystemProcessCondition systemProcessCondition() {
            return new SystemProcessCondition((CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get(), new ProcessWrapper());
        }

        public final Object systemSettingsImpl() {
            return SystemSettingsImpl_Factory.newInstance((ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (UserTracker) this.provideUserTrackerProvider.get());
        }

        public final SystemUIBottomSheetDialog$Factory systemUIBottomSheetDialogFactory() {
            final Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
            final CoroutineScope coroutineScope = (CoroutineScope) this.referenceGlobalRootComponentImpl.applicationScopeProvider.get();
            final Lazy lazy = DoubleCheck.lazy(this.limitedEdgeToEdgeProvider);
            final ConfigurationController configurationController = (ConfigurationController) this.configurationControllerImplProvider.get();
            return new Object(context, coroutineScope, lazy, configurationController) { // from class: com.android.systemui.statusbar.phone.SystemUIBottomSheetDialog$Factory
            };
        }

        public final SystemUIDialogFactory systemUIDialogFactory() {
            return new SystemUIDialogFactory((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (SystemUIDialogManager) this.systemUIDialogManagerProvider.get(), (SysUiState) this.provideSysUiStateProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (DialogTransitionAnimator) this.provideDialogTransitionAnimatorProvider.get());
        }

        public final SystemWallpaperColors systemWallpaperColors() {
            return new SystemWallpaperColors(FrameworkServicesModule_ProvideWallpaperManagerFactory.provideWallpaperManager(this.referenceGlobalRootComponentImpl.context));
        }

        public final TaskSwitcherNotificationViewModel taskSwitcherNotificationViewModel() {
            return new TaskSwitcherNotificationViewModel((TaskSwitchInteractor) this.taskSwitchInteractorProvider.get(), (CoroutineDispatcher) this.bgDispatcherProvider.get());
        }

        public final Resources.Theme theme() {
            Context context = this.referenceGlobalRootComponentImpl.context;
            QSTilesModule.Companion.getClass();
            return context.getTheme();
        }

        public final ThresholdSensorImpl.Builder thresholdSensorImplBuilder() {
            return ThresholdSensorImpl_Builder_Factory.newInstance(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), (AsyncSensorManager) this.asyncSensorManagerProvider.get(), (Execution) this.referenceGlobalRootComponentImpl.provideExecutionProvider.get());
        }

        public final TimeoutHandler timeoutHandler() {
            return new TimeoutHandler(this.referenceGlobalRootComponentImpl.context);
        }

        public final ToastLogger toastLogger() {
            return new ToastLogger((LogBuffer) this.provideToastLogBufferProvider.get());
        }

        public final TopAreaSection topAreaSection() {
            return new TopAreaSection((KeyguardClockViewModel) this.keyguardClockViewModelProvider.get(), smartSpaceSection(), mediaCarouselSection(), defaultClockSection(), weatherClockSection(), (KeyguardClockInteractor) this.keyguardClockInteractorProvider.get());
        }

        public final TypeClassifier typeClassifier() {
            return new TypeClassifier((FalsingDataProvider) this.falsingDataProvider.get());
        }

        public final UiModeNightTileDataInteractor uiModeNightTileDataInteractor() {
            return new UiModeNightTileDataInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), (UiModeManager) this.referenceGlobalRootComponentImpl.provideUiModeManagerProvider.get(), (BatteryController) this.provideBatteryControllerProvider.get(), (LocationController) this.locationControllerImplProvider.get(), dateFormatUtil());
        }

        public final UiModeNightTileMapper uiModeNightTileMapper() {
            return new UiModeNightTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme());
        }

        public final UiModeNightTileUserActionInteractor uiModeNightTileUserActionInteractor() {
            return new UiModeNightTileUserActionInteractor((CoroutineContext) this.bgCoroutineContextProvider.get(), (UiModeManager) this.referenceGlobalRootComponentImpl.provideUiModeManagerProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final UserCreator userCreator() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new UserCreator(referenceGlobalRootComponentImpl.context, (UserManager) referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Executor) this.provideBackgroundExecutorProvider.get());
        }

        public final UserSetupInteractor userSetupInteractor() {
            return new UserSetupInteractor((UserSetupRepository) this.userSetupRepositoryImplProvider.get());
        }

        public final VariableDateViewController$Factory variableDateViewControllerFactory() {
            final SystemClock systemClock = (SystemClock) this.bindSystemClockProvider.get();
            final BroadcastDispatcher broadcastDispatcher = (BroadcastDispatcher) this.broadcastDispatcherProvider.get();
            final ShadeInteractor shadeInteractor = (ShadeInteractor) this.shadeInteractorImplProvider.get();
            final ShadeLogger shadeLogger = shadeLogger();
            final Handler handler = (Handler) this.provideTimeTickHandlerProvider.get();
            return new Object(systemClock, broadcastDispatcher, shadeInteractor, shadeLogger, handler) { // from class: com.android.systemui.statusbar.policy.VariableDateViewController$Factory
                public final SystemClock systemClock;

                {
                    this.systemClock = systemClock;
                }
            };
        }

        public final ViewModelFactory viewModelFactory() {
            return new ViewModelFactory(this.mediaSessionViewModelFactoryProvider, this.sessionAudioPathViewModelFactoryProvider, this.mediaDeviceViewModelFactoryProvider, this.deviceAudioPathViewModelFactoryProvider, this.settingViewModelProvider, this.labsViewModelProvider);
        }

        public final VisualInterruptionDecisionLogger visualInterruptionDecisionLogger() {
            return new VisualInterruptionDecisionLogger((LogBuffer) this.provideNotificationInterruptLogBufferProvider.get());
        }

        public final VolumeDialog volumeDialog() {
            return VolumeModule_ProvideVolumeDialogFactory.provideVolumeDialog(this.referenceGlobalRootComponentImpl.context, (VolumeDialogController) this.volumeDialogControllerImplProvider.get(), (AccessibilityManagerWrapper) this.accessibilityManagerWrapperProvider.get(), (DeviceProvisionedController) this.bindDeviceProvisionedControllerProvider.get(), (ConfigurationController) this.configurationControllerImplProvider.get(), mediaOutputDialogManager(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), volumePanelNavigationInteractor(), (VolumeNavigator) this.volumeNavigatorProvider.get(), (CsdWarningDialog.Factory) this.factoryProvider35.get(), (DevicePostureController) this.devicePostureControllerImplProvider.get(), new VolumePanelFlag(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), DoubleCheck.lazy(this.secureSettingsImplProvider), (VibratorHelper) this.vibratorHelperProvider.get(), (SystemClock) this.bindSystemClockProvider.get(), (VolumeDialogInteractor) this.volumeDialogInteractorProvider.get());
        }

        public final VolumePanelNavigationInteractor volumePanelNavigationInteractor() {
            return new VolumePanelNavigationInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), new VolumePanelFlag());
        }

        public final VolumePanelViewModel.Factory volumePanelViewModelFactory() {
            return new VolumePanelViewModel.Factory((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), new VolumePanelComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0), (ConfigurationController) this.configurationControllerImplProvider.get(), (BroadcastDispatcher) this.broadcastDispatcherProvider.get(), (VolumePanelGlobalStateInteractor) this.volumePanelGlobalStateInteractorProvider.get());
        }

        public final WakeLock.Builder wakeLockBuilder() {
            return new WakeLock.Builder(this.referenceGlobalRootComponentImpl.context, wakeLockLogger());
        }

        public final WakeLockLogger wakeLockLogger() {
            return new WakeLockLogger((LogBuffer) this.provideWakeLockLogProvider.get());
        }

        public final WallpaperImageInjectCreator wallpaperImageInjectCreator() {
            return new WallpaperImageInjectCreator(this.referenceGlobalRootComponentImpl.context, (SettingsHelper) this.settingsHelperProvider.get(), (PluginWallpaperManager) this.pluginWallpaperManagerImplProvider.get(), (CoverWallpaper) this.coverWallpaperControllerProvider.get(), (SelectedUserInteractor) this.selectedUserInteractorProvider.get(), (KeyguardWallpaper) this.keyguardWallpaperControllerProvider.get());
        }

        public final WeatherClockSection weatherClockSection() {
            return new WeatherClockSection((KeyguardClockViewModel) this.keyguardClockViewModelProvider.get(), (AodBurnInViewModel) this.aodBurnInViewModelProvider.get());
        }

        public final WifiSignalIconResource wifiSignalIconResource() {
            return new WifiSignalIconResource((CarrierInfraMediator) this.fakeCarrierInfraMediatorImplProvider.get());
        }

        public final WifiStatusTrackerFactory wifiStatusTrackerFactory() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new WifiStatusTrackerFactory(referenceGlobalRootComponentImpl.context, (WifiManager) referenceGlobalRootComponentImpl.provideWifiManagerProvider.get(), (NetworkScoreManager) this.referenceGlobalRootComponentImpl.provideNetworkScoreManagerProvider.get(), (ConnectivityManager) this.referenceGlobalRootComponentImpl.provideConnectivityManagagerProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get());
        }

        public final WorkModeTileDataInteractor workModeTileDataInteractor() {
            return new WorkModeTileDataInteractor((ManagedProfileController) this.managedProfileControllerImplProvider.get());
        }

        public final WorkModeTileMapper workModeTileMapper() {
            return new WorkModeTileMapper(FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context), theme(), (DevicePolicyManager) this.referenceGlobalRootComponentImpl.provideDevicePolicyManagerProvider.get());
        }

        public final WorkModeTileUserActionInteractor workModeTileUserActionInteractor() {
            return new WorkModeTileUserActionInteractor((ManagedProfileController) this.managedProfileControllerImplProvider.get(), (QSTileIntentUserInputHandler) this.qSTileIntentUserInputHandlerImplProvider.get());
        }

        public final WorkProfileMessageController workProfileMessageController() {
            ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
            return new WorkProfileMessageController(referenceGlobalRootComponentImpl.context, (UserManager) referenceGlobalRootComponentImpl.provideUserManagerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
        }

        public final WorkProfilePolicy workProfilePolicy() {
            return new WorkProfilePolicy((ProfileTypeRepository) this.bindProfileTypeRepositoryProvider.get());
        }

        public final UserHandle workProfileUserHandle() {
            Object obj;
            MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule = this.mediaProjectionDevicePolicyModule;
            UserTracker userTracker = (UserTracker) this.provideUserTrackerProvider.get();
            mediaProjectionDevicePolicyModule.getClass();
            Iterator it = ((UserTrackerImpl) userTracker).getUserProfiles().iterator();
            while (true) {
                if (!it.hasNext()) {
                    obj = null;
                    break;
                }
                obj = it.next();
                if (((UserInfo) obj).isManagedProfile()) {
                    break;
                }
            }
            UserInfo userInfo = (UserInfo) obj;
            if (userInfo != null) {
                return userInfo.getUserHandle();
            }
            return null;
        }

        public final ZenModeInteractor zenModeInteractor() {
            return new ZenModeInteractor(zenModeRepositoryImpl());
        }

        public final ZenModeRepositoryImpl zenModeRepositoryImpl() {
            return new ZenModeRepositoryImpl((ZenModeController) this.zenModeControllerImplProvider.get());
        }

        public final Object zigZagClassifier() {
            return new ZigZagClassifier((FalsingDataProvider) this.falsingDataProvider.get(), (DeviceConfigProxy) this.deviceConfigProxyProvider.get());
        }

        private ReferenceSysUIComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, DependencyProvider dependencyProvider, LeakModule leakModule, SharedLibraryModule sharedLibraryModule, MediaProjectionDevicePolicyModule mediaProjectionDevicePolicyModule, SysUICoroutinesModule sysUICoroutinesModule, SoundCraftNowBarViewModule soundCraftNowBarViewModule, SysUIUnfoldModule sysUIUnfoldModule, ShellInterface shellInterface, Optional<Pip> optional, Optional<SplitScreen> optional2, Optional<OneHanded> optional3, Optional<Bubbles> optional4, Optional<TaskViewFactoryController.TaskViewFactoryImpl> optional5, ShellTransitions shellTransitions, KeyguardTransitions keyguardTransitions, Optional<StartingWindowController.StartingSurfaceImpl> optional6, Optional<Object> optional7, Optional<RecentTasks> optional8, Optional<BackAnimationController.BackAnimationImpl> optional9, Optional<DesktopMode> optional10, Optional<EnterSplitGestureHandler> optional11, Optional<SplitScreenController> optional12, Optional<DisplayController> optional13) {
            this.referenceSysUIComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.sysUICoroutinesModule = sysUICoroutinesModule;
            this.leakModule = leakModule;
            this.dependencyProvider = dependencyProvider;
            this.sysUIUnfoldModule = sysUIUnfoldModule;
            this.setTaskViewFactory = optional5;
            this.mediaProjectionDevicePolicyModule = mediaProjectionDevicePolicyModule;
            this.sharedLibraryModule = sharedLibraryModule;
            this.setShell = shellInterface;
            this.setBubbles = optional4;
            this.setPip = optional;
            this.setDesktopMode = optional10;
            this.setBackAnimation = optional9;
            this.soundCraftNowBarViewModule = soundCraftNowBarViewModule;
            this.setKeyguardTransitions = keyguardTransitions;
            this.setStartingSurface = optional6;
            this.setShellTransitions = shellTransitions;
            this.setSplitScreen = optional2;
            this.setOneHanded = optional3;
            this.setRecentTasks = optional8;
            this.setEnterSplitGestureHandler = optional11;
            this.setSplitScreenController = optional12;
            this.setDisplayAreaHelper = optional7;
            initialize(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize2(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize3(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize4(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize5(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize6(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize7(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize8(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize9(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize10(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize11(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize12(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize13(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize14(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize15(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize16(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize17(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize18(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
            initialize19(dependencyProvider, leakModule, sharedLibraryModule, mediaProjectionDevicePolicyModule, sysUICoroutinesModule, soundCraftNowBarViewModule, sysUIUnfoldModule, shellInterface, optional, optional2, optional3, optional4, optional5, shellTransitions, keyguardTransitions, optional6, optional7, optional8, optional9, optional10, optional11, optional12, optional13);
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(KeyguardSliceProvider keyguardSliceProvider) {
            injectKeyguardSliceProvider(keyguardSliceProvider);
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(PeopleProvider peopleProvider) {
            injectPeopleProvider(peopleProvider);
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(AODIntentService aODIntentService) {
            injectAODIntentService(aODIntentService);
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(TestProtocolProvider testProtocolProvider) {
            injectTestProtocolProvider(testProtocolProvider);
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent, com.android.systemui.dagger.SysUIComponent
        public void inject(KeyguardSecAffordanceView keyguardSecAffordanceView) {
            injectKeyguardSecAffordanceView(keyguardSecAffordanceView);
        }

        @Override // com.android.systemui.dagger.ReferenceSysUIComponent
        public void inject(CustomizationProvider customizationProvider) {
            injectCustomizationProvider(customizationProvider);
        }
    }

    public final class RemoteInputViewSubcomponentFactory implements RemoteInputViewSubcomponent.Factory {
        public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ RemoteInputViewSubcomponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, expandableNotificationRowComponentImpl);
        }

        @Override // com.android.systemui.statusbar.policy.dagger.RemoteInputViewSubcomponent.Factory
        public final RemoteInputViewSubcomponent create(RemoteInputView remoteInputView, RemoteInputController remoteInputController) {
            remoteInputView.getClass();
            remoteInputController.getClass();
            return new RemoteInputViewSubcomponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.expandableNotificationRowComponentImpl, remoteInputView, remoteInputController, 0);
        }

        private RemoteInputViewSubcomponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.expandableNotificationRowComponentImpl = expandableNotificationRowComponentImpl;
        }
    }

    public final class RemoteInputViewSubcomponentImpl implements RemoteInputViewSubcomponent {
        public final ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final RemoteInputController remoteInputController;
        public final RemoteInputViewSubcomponentImpl remoteInputViewSubcomponentImpl;
        public final RemoteInputView view;

        public /* synthetic */ RemoteInputViewSubcomponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, RemoteInputView remoteInputView, RemoteInputController remoteInputController, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, expandableNotificationRowComponentImpl, remoteInputView, remoteInputController);
        }

        @Override // com.android.systemui.statusbar.policy.dagger.RemoteInputViewSubcomponent
        public final RemoteInputViewController getController() {
            return remoteInputViewControllerImpl();
        }

        public final RemoteInputViewControllerImpl remoteInputViewControllerImpl() {
            return new RemoteInputViewControllerImpl(this.view, this.expandableNotificationRowComponentImpl.notificationEntry, (RemoteInputQuickSettingsDisabler) this.referenceSysUIComponentImpl.remoteInputQuickSettingsDisablerProvider.get(), this.remoteInputController, (ShortcutManager) this.referenceGlobalRootComponentImpl.provideShortcutManagerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get());
        }

        private RemoteInputViewSubcomponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ExpandableNotificationRowComponentImpl expandableNotificationRowComponentImpl, RemoteInputView remoteInputView, RemoteInputController remoteInputController) {
            this.remoteInputViewSubcomponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.expandableNotificationRowComponentImpl = expandableNotificationRowComponentImpl;
            this.view = remoteInputView;
            this.remoteInputController = remoteInputController;
        }
    }

    public final class ScreenDecorationsComponentFactory implements ScreenDecorationsComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ ScreenDecorationsComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.ScreenDecorationsComponent.Factory
        public final ScreenDecorationsComponent create(Context context, PrivacyDotViewController privacyDotViewController, PrivacyDotDecorProviderFactory privacyDotDecorProviderFactory) {
            context.getClass();
            privacyDotViewController.getClass();
            privacyDotDecorProviderFactory.getClass();
            return new ScreenDecorationsComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, context, privacyDotViewController, privacyDotDecorProviderFactory, 0);
        }

        private ScreenDecorationsComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class ScreenDecorationsComponentImpl implements ScreenDecorationsComponent {
        public final Context context;
        public final PrivacyDotDecorProviderFactory dotFactory;
        public final PrivacyDotViewController dotViewController;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final ScreenDecorationsComponentImpl screenDecorationsComponentImpl;
        public Provider screenDecorationsProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
            public final ScreenDecorationsComponentImpl screenDecorationsComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, ScreenDecorationsComponentImpl screenDecorationsComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.screenDecorationsComponentImpl = screenDecorationsComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    return (T) new ScreenDecorations(this.screenDecorationsComponentImpl.context, (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get(), (CommandRegistry) this.referenceSysUIComponentImpl.commandRegistryProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (DisplayTracker) this.referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), this.screenDecorationsComponentImpl.dotViewController, ThreadFactoryImpl_Factory.newInstance(), this.screenDecorationsComponentImpl.dotFactory, (FaceScanningProviderFactory) this.referenceSysUIComponentImpl.faceScanningProviderFactoryProvider.get(), (ScreenDecorationsLogger) this.referenceSysUIComponentImpl.screenDecorationsLoggerProvider.get(), (FacePropertyRepository) this.referenceSysUIComponentImpl.facePropertyRepositoryImplProvider.get(), (JavaAdapter) this.referenceSysUIComponentImpl.javaAdapterProvider.get(), this.referenceSysUIComponentImpl.cameraProtectionLoaderImpl(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get());
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ ScreenDecorationsComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Context context, PrivacyDotViewController privacyDotViewController, PrivacyDotDecorProviderFactory privacyDotDecorProviderFactory, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, context, privacyDotViewController, privacyDotDecorProviderFactory);
        }

        @Override // com.android.systemui.ScreenDecorationsComponent
        public final ScreenDecorations getScreenDecorations() {
            return (ScreenDecorations) this.screenDecorationsProvider.get();
        }

        public final void initialize(Context context, PrivacyDotViewController privacyDotViewController, PrivacyDotDecorProviderFactory privacyDotDecorProviderFactory) {
            this.screenDecorationsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.screenDecorationsComponentImpl, 0));
        }

        private ScreenDecorationsComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Context context, PrivacyDotViewController privacyDotViewController, PrivacyDotDecorProviderFactory privacyDotDecorProviderFactory) {
            this.screenDecorationsComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.context = context;
            this.dotViewController = privacyDotViewController;
            this.dotFactory = privacyDotDecorProviderFactory;
            initialize(context, privacyDotViewController, privacyDotDecorProviderFactory);
        }
    }

    public final class SectionHeaderControllerSubcomponentBuilder {
        public String clickIntentAction;
        public Integer headerText;
        public String nodeLabel;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ SectionHeaderControllerSubcomponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        public final SectionHeaderControllerSubcomponent build() {
            Preconditions.checkBuilderRequirement(String.class, this.nodeLabel);
            Preconditions.checkBuilderRequirement(Integer.class, this.headerText);
            Preconditions.checkBuilderRequirement(String.class, this.clickIntentAction);
            return new SectionHeaderControllerSubcomponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.nodeLabel, this.headerText, this.clickIntentAction, 0);
        }

        public final SectionHeaderControllerSubcomponentBuilder clickIntentAction(String str) {
            str.getClass();
            this.clickIntentAction = str;
            return this;
        }

        public final SectionHeaderControllerSubcomponentBuilder headerText(int i) {
            this.headerText = Integer.valueOf(i);
            return this;
        }

        public final SectionHeaderControllerSubcomponentBuilder nodeLabel(String str) {
            str.getClass();
            this.nodeLabel = str;
            return this;
        }

        private SectionHeaderControllerSubcomponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class SectionHeaderControllerSubcomponentImpl implements SectionHeaderControllerSubcomponent {
        public final String clickIntentAction;
        public final Integer headerText;
        public final String nodeLabel;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final SectionHeaderControllerSubcomponentImpl sectionHeaderControllerSubcomponentImpl;
        public Provider sectionHeaderNodeControllerImplProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
            public final SectionHeaderControllerSubcomponentImpl sectionHeaderControllerSubcomponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, SectionHeaderControllerSubcomponentImpl sectionHeaderControllerSubcomponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.sectionHeaderControllerSubcomponentImpl = sectionHeaderControllerSubcomponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                if (this.id == 0) {
                    return (T) new SectionHeaderNodeControllerImpl(this.sectionHeaderControllerSubcomponentImpl.nodeLabel, (LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get(), this.sectionHeaderControllerSubcomponentImpl.headerText.intValue(), (ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.sectionHeaderControllerSubcomponentImpl.clickIntentAction);
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ SectionHeaderControllerSubcomponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, String str, Integer num, String str2, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, str, num, str2);
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent
        public final SectionHeaderController getHeaderController() {
            return (SectionHeaderController) this.sectionHeaderNodeControllerImplProvider.get();
        }

        @Override // com.android.systemui.statusbar.notification.dagger.SectionHeaderControllerSubcomponent
        public final NodeController getNodeController() {
            return (NodeController) this.sectionHeaderNodeControllerImplProvider.get();
        }

        public final void initialize(String str, Integer num, String str2) {
            this.sectionHeaderNodeControllerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sectionHeaderControllerSubcomponentImpl, 0));
        }

        private SectionHeaderControllerSubcomponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, String str, Integer num, String str2) {
            this.sectionHeaderControllerSubcomponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.nodeLabel = str;
            this.headerText = num;
            this.clickIntentAction = str2;
            initialize(str, num, str2);
        }
    }

    public final class StatusBarFragmentComponentFactory implements StatusBarFragmentComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ StatusBarFragmentComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent.Factory
        public final StatusBarFragmentComponent create(PhoneStatusBarView phoneStatusBarView) {
            phoneStatusBarView.getClass();
            return new StatusBarFragmentComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, phoneStatusBarView, 0);
        }

        private StatusBarFragmentComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class StatusBarFragmentComponentImpl implements StatusBarFragmentComponent {
        public Provider endSideContentProvider;
        public Provider getStatusBarLocationProvider;
        public Provider headsUpAppearanceControllerProvider;
        public Provider legacyLightsOutNotifControllerProvider;
        public final PhoneStatusBarView phoneStatusBarView;
        public Provider provideBatteryMeterViewProvider;
        public Provider provideCarrierLogoFrameViewProvider;
        public Provider provideLeftClockContainerProvider;
        public Provider provideLightsOutNotifViewProvider;
        public Provider provideNetspeedViewControllerProvider;
        public Provider provideOperatorFrameNameViewProvider;
        public Provider provideOperatorNameViewProvider;
        public Provider providePhoneStatusBarClockManagerProvider;
        public Provider providePhoneStatusBarTransitionsProvider;
        public Provider providePhoneStatusBarViewControllerProvider;
        public Provider provideQSClockIndicatorViewProvider;
        public Provider provideStatusIconContainerProvider;
        public Provider providesHeasdUpStatusBarViewProvider;
        public Provider qSClockIndicatorViewControllerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public Provider startSideContentProvider;
        public Provider statusBarBoundsProvider;
        public Provider statusBarDemoModeProvider;
        public final StatusBarFragmentComponentImpl statusBarFragmentComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
            public final StatusBarFragmentComponentImpl statusBarFragmentComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, StatusBarFragmentComponentImpl statusBarFragmentComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.statusBarFragmentComponentImpl = statusBarFragmentComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        T t = (T) ((BatteryMeterView) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.battery));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1:
                        T t2 = (T) StatusBarLocation.HOME;
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 2:
                        return (T) StatusBarFragmentModule_ProvidePhoneStatusBarViewControllerFactory.providePhoneStatusBarViewController(this.statusBarFragmentComponentImpl.phoneStatusBarViewControllerFactory(), this.statusBarFragmentComponentImpl.phoneStatusBarView);
                    case 3:
                        T t3 = (T) ((StatusIconContainer) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.statusIcons));
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 4:
                        return (T) new PhoneStatusBarClockManager(this.statusBarFragmentComponentImpl.phoneStatusBarView, (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (QSClockIndicatorView) this.statusBarFragmentComponentImpl.provideQSClockIndicatorViewProvider.get());
                    case 5:
                        T t4 = (T) ((QSClockIndicatorView) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.clock));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 6:
                        PhoneStatusBarView phoneStatusBarView = this.statusBarFragmentComponentImpl.phoneStatusBarView;
                        IndicatorScaleGardener indicatorScaleGardener = (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get();
                        IndicatorCutoutUtil indicatorCutoutUtil = (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get();
                        UserTracker userTracker = (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get();
                        WakefulnessLifecycle wakefulnessLifecycle = (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get();
                        if (BasicRune.STATUS_REAL_TIME_NETWORK_SPEED) {
                            return (T) new NetspeedViewController((NetspeedView) phoneStatusBarView.findViewById(R.id.networkSpeed), indicatorScaleGardener, indicatorCutoutUtil, userTracker, wakefulnessLifecycle);
                        }
                        return null;
                    case 7:
                        return (T) new HeadsUpAppearanceController(this.referenceSysUIComponentImpl.notificationIconAreaController(), (HeadsUpManager) this.referenceSysUIComponentImpl.headsUpManagerPhoneProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (PhoneStatusBarTransitions) this.statusBarFragmentComponentImpl.providePhoneStatusBarTransitionsProvider.get(), (KeyguardBypassController) this.referenceSysUIComponentImpl.keyguardBypassControllerProvider.get(), (NotificationWakeUpCoordinator) this.referenceSysUIComponentImpl.notificationWakeUpCoordinatorProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get(), (NotificationStackScrollLayoutController) this.referenceSysUIComponentImpl.notificationStackScrollLayoutControllerProvider.get(), (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get(), (NotificationRoundnessManager) this.referenceSysUIComponentImpl.notificationRoundnessManagerProvider.get(), (HeadsUpStatusBarView) this.statusBarFragmentComponentImpl.providesHeasdUpStatusBarViewProvider.get(), (View) this.statusBarFragmentComponentImpl.provideLeftClockContainerProvider.get(), (Optional) this.statusBarFragmentComponentImpl.provideCarrierLogoFrameViewProvider.get(), (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), this.referenceSysUIComponentImpl.headsUpNotificationIconInteractor(), (Optional) this.statusBarFragmentComponentImpl.provideOperatorFrameNameViewProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get());
                    case 8:
                        return (T) new PhoneStatusBarTransitions(this.statusBarFragmentComponentImpl.phoneStatusBarView, ((StatusBarWindowController) this.referenceSysUIComponentImpl.statusBarWindowControllerProvider.get()).mStatusBarWindowView.findViewById(R.id.status_bar_container));
                    case 9:
                        T t5 = (T) ((HeadsUpStatusBarView) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.heads_up_status_bar_view));
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 10:
                        T t6 = (T) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.left_clock_container);
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 11:
                        T t7 = (T) Optional.ofNullable(this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.carrier_logo_frame));
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 12:
                        T t8 = (T) Optional.ofNullable(this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.operator_name_frame));
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    case 13:
                        return (T) new LegacyLightsOutNotifController((View) this.statusBarFragmentComponentImpl.provideLightsOutNotifViewProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (NotifLiveDataStore) this.referenceSysUIComponentImpl.notifLiveDataStoreImplProvider.get(), (CommandQueue) this.referenceSysUIComponentImpl.provideCommandQueueProvider.get());
                    case 14:
                        T t9 = (T) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.notification_lights_out);
                        Preconditions.checkNotNullFromProvides(t9);
                        return t9;
                    case 15:
                        return (T) new StatusBarDemoMode((QSClockIndicatorView) this.statusBarFragmentComponentImpl.provideQSClockIndicatorViewProvider.get(), (View) this.statusBarFragmentComponentImpl.provideOperatorNameViewProvider.get(), (DemoModeController) this.referenceSysUIComponentImpl.provideDemoModeControllerProvider.get(), (PhoneStatusBarTransitions) this.statusBarFragmentComponentImpl.providePhoneStatusBarTransitionsProvider.get(), (NavigationBarController) this.referenceSysUIComponentImpl.navigationBarControllerImplProvider.get(), this.referenceGlobalRootComponentImpl.context.getDisplayId());
                    case 16:
                        ?? r0 = (T) ((ViewStub) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.operator_name_stub)).inflate();
                        r0.setVisibility(8);
                        return r0;
                    case 17:
                        return (T) new StatusBarBoundsProvider((View) this.statusBarFragmentComponentImpl.startSideContentProvider.get(), (View) this.statusBarFragmentComponentImpl.endSideContentProvider.get());
                    case 18:
                        T t10 = (T) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.status_bar_start_side_content);
                        Preconditions.checkNotNullFromProvides(t10);
                        return t10;
                    case 19:
                        T t11 = (T) this.statusBarFragmentComponentImpl.phoneStatusBarView.findViewById(R.id.status_bar_end_side_content);
                        Preconditions.checkNotNullFromProvides(t11);
                        return t11;
                    case 20:
                        return (T) new QSClockIndicatorViewController((QSClockIndicatorView) this.statusBarFragmentComponentImpl.provideQSClockIndicatorViewProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (QSClockBellTower) this.referenceSysUIComponentImpl.qSClockBellTowerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ StatusBarFragmentComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, PhoneStatusBarView phoneStatusBarView, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, phoneStatusBarView);
        }

        public final BatteryMeterViewController getBatteryMeterViewController() {
            return new BatteryMeterViewController((BatteryMeterView) this.provideBatteryMeterViewProvider.get(), (StatusBarLocation) this.getStatusBarLocationProvider.get(), (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final StatusBarBoundsProvider getBoundsProvider() {
            return (StatusBarBoundsProvider) this.statusBarBoundsProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final HeadsUpAppearanceController getHeadsUpAppearanceController() {
            return (HeadsUpAppearanceController) this.headsUpAppearanceControllerProvider.get();
        }

        public final LegacyLightsOutNotifController getLegacyLightsOutNotifController() {
            return (LegacyLightsOutNotifController) this.legacyLightsOutNotifControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final PhoneStatusBarTransitions getPhoneStatusBarTransitions() {
            return (PhoneStatusBarTransitions) this.providePhoneStatusBarTransitionsProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final PhoneStatusBarView getPhoneStatusBarView() {
            return this.phoneStatusBarView;
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final PhoneStatusBarViewController getPhoneStatusBarViewController() {
            return (PhoneStatusBarViewController) this.providePhoneStatusBarViewControllerProvider.get();
        }

        public final QSClockIndicatorViewController getQSClockIndicatorViewController() {
            return (QSClockIndicatorViewController) this.qSClockIndicatorViewControllerProvider.get();
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final Set<StatusBarBoundsProvider> getStartables() {
            return Collections.singleton((StatusBarBoundsProvider) this.statusBarBoundsProvider.get());
        }

        public final StatusBarDemoMode getStatusBarDemoMode() {
            return (StatusBarDemoMode) this.statusBarDemoModeProvider.get();
        }

        public final IndicatorMarqueeGardener indicatorMarqueeGardener() {
            return new IndicatorMarqueeGardener(this.referenceGlobalRootComponentImpl.context, (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get());
        }

        @Override // com.android.systemui.statusbar.phone.fragment.dagger.StatusBarFragmentComponent
        public final void init() {
            getBatteryMeterViewController().init();
            getHeadsUpAppearanceController().init();
            getPhoneStatusBarViewController().init();
            int i = NotificationsLiveDataStoreRefactor.$r8$clinit;
            Flags.notificationsLiveDataStoreRefactor();
            getLegacyLightsOutNotifController().init();
            getStatusBarDemoMode().init();
            getQSClockIndicatorViewController().init();
        }

        public final void initialize(PhoneStatusBarView phoneStatusBarView) {
            this.provideBatteryMeterViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 0));
            this.getStatusBarLocationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 1));
            this.provideStatusIconContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 3));
            this.provideQSClockIndicatorViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 5));
            this.providePhoneStatusBarClockManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 4));
            this.provideNetspeedViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 6));
            this.providePhoneStatusBarViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 2));
            this.providePhoneStatusBarTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 8));
            this.providesHeasdUpStatusBarViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 9));
            this.provideLeftClockContainerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 10));
            this.provideCarrierLogoFrameViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 11));
            this.provideOperatorFrameNameViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 12));
            this.headsUpAppearanceControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 7));
            this.provideLightsOutNotifViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 14));
            this.legacyLightsOutNotifControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 13));
            this.provideOperatorNameViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 16));
            this.statusBarDemoModeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 15));
            this.startSideContentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 18));
            this.endSideContentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 19));
            this.statusBarBoundsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 17));
            this.qSClockIndicatorViewControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.statusBarFragmentComponentImpl, 20));
        }

        public final KnoxStatusBarControlViewModel knoxStatusBarControlViewModel() {
            return new KnoxStatusBarControlViewModel((KnoxStatusBarControlInteractor) this.referenceSysUIComponentImpl.knoxStatusBarControlInteractorProvider.get(), (KeyguardStateController) this.referenceSysUIComponentImpl.keyguardStateControllerImplProvider.get(), (DarkIconDispatcher) this.referenceSysUIComponentImpl.darkIconDispatcherImplProvider.get());
        }

        public final PhoneStatusBarViewController.Factory phoneStatusBarViewControllerFactory() {
            Optional optional = (Optional) this.referenceSysUIComponentImpl.sysUiUnfoldComponentProvider.get();
            Optional optional2 = (Optional) this.referenceGlobalRootComponentImpl.provideStatusBarScopedTransitionProvider.get();
            FeatureFlags featureFlags = (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
            StatusBarUserChipViewModel statusBarUserChipViewModel = statusBarUserChipViewModel();
            CentralSurfaces centralSurfaces = (CentralSurfaces) this.referenceSysUIComponentImpl.centralSurfacesImplProvider.get();
            StatusBarWindowStateController statusBarWindowStateController = (StatusBarWindowStateController) this.referenceSysUIComponentImpl.statusBarWindowStateControllerProvider.get();
            ShadeController shadeController = (ShadeController) this.referenceSysUIComponentImpl.provideShadeControllerProvider.get();
            ShadeViewController shadeViewController = (ShadeViewController) this.referenceSysUIComponentImpl.provideShadeSurfaceProvider.get();
            PanelExpansionInteractor panelExpansionInteractor = (PanelExpansionInteractor) this.referenceSysUIComponentImpl.providePanelExpansionInteractorProvider.get();
            ReferenceSysUIComponentImpl referenceSysUIComponentImpl = this.referenceSysUIComponentImpl;
            return new PhoneStatusBarViewController.Factory(optional, optional2, featureFlags, statusBarUserChipViewModel, centralSurfaces, statusBarWindowStateController, shadeController, shadeViewController, panelExpansionInteractor, referenceSysUIComponentImpl.providesWindowRootViewProvider, referenceSysUIComponentImpl.shadeLogger(), (ViewUtil) this.referenceSysUIComponentImpl.viewUtilProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), this.referenceSysUIComponentImpl.statusOverlayHoverListenerFactory(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (PrivacyDotViewController) this.referenceSysUIComponentImpl.privacyDotViewControllerProvider.get(), (DumpManager) this.referenceGlobalRootComponentImpl.dumpManagerProvider.get(), (IndicatorGardenViewTreeLogHelper) this.referenceSysUIComponentImpl.indicatorGardenViewTreeLogHelperProvider.get(), indicatorMarqueeGardener(), statusIconContainerController(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get(), (TwoPhoneModeIconController) this.referenceSysUIComponentImpl.twoPhoneModeIconControllerProvider.get(), (PhoneStatusBarClockManager) this.providePhoneStatusBarClockManagerProvider.get(), knoxStatusBarControlViewModel(), (NetspeedViewController) this.provideNetspeedViewControllerProvider.get(), (SamsungStatusBarGrayIconHelper) this.referenceSysUIComponentImpl.samsungStatusBarGrayIconHelperProvider.get());
        }

        public final StatusBarUserChipViewModel statusBarUserChipViewModel() {
            return new StatusBarUserChipViewModel((UserSwitcherInteractor) this.referenceSysUIComponentImpl.userSwitcherInteractorProvider.get());
        }

        public final StatusIconContainerController statusIconContainerController() {
            return new StatusIconContainerController((StatusIconContainer) this.provideStatusIconContainerProvider.get(), this.referenceGlobalRootComponentImpl.context, (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (IndicatorGardenPresenter) this.referenceSysUIComponentImpl.indicatorGardenPresenterProvider.get(), (IndicatorCutoutUtil) this.referenceSysUIComponentImpl.indicatorCutoutUtilProvider.get());
        }

        private StatusBarFragmentComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, PhoneStatusBarView phoneStatusBarView) {
            this.statusBarFragmentComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.phoneStatusBarView = phoneStatusBarView;
            initialize(phoneStatusBarView);
        }
    }

    public final class SubScreenQuickPanelComponentFactory implements SubScreenQuickPanelComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ SubScreenQuickPanelComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.subscreen.dagger.SubScreenQuickPanelComponent.Factory
        public final SubScreenQuickPanelComponent create(SubScreenQuickPanelWindowView subScreenQuickPanelWindowView) {
            subScreenQuickPanelWindowView.getClass();
            return new SubScreenQuickPanelComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, subScreenQuickPanelWindowView, 0);
        }

        private SubScreenQuickPanelComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class SubScreenQuickPanelComponentImpl implements SubScreenQuickPanelComponent {
        public final SubScreenQuickPanelWindowView quickPanelWindowView;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final SubScreenQuickPanelComponentImpl subScreenQuickPanelComponentImpl;

        public /* synthetic */ SubScreenQuickPanelComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, SubScreenQuickPanelWindowView subScreenQuickPanelWindowView, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, subScreenQuickPanelWindowView);
        }

        public final BatteryMeterView batteryMeterView() {
            SubScreenQuickPanelHeader provideSubScreenQuickPanelHeader = SubScreenQuickPanelModule_ProvideSubScreenQuickPanelHeaderFactory.provideSubScreenQuickPanelHeader(this.quickPanelWindowView);
            SubScreenQuickPanelModule.INSTANCE.getClass();
            View findViewById = provideSubScreenQuickPanelHeader.findViewById(R.id.batteryRemainingIcon);
            Intrinsics.checkNotNull(findViewById);
            return (BatteryMeterView) findViewById;
        }

        public final BatteryMeterViewController batteryMeterViewController() {
            BatteryMeterView batteryMeterView = batteryMeterView();
            SubScreenQuickPanelModule.INSTANCE.getClass();
            StatusBarLocation statusBarLocation = StatusBarLocation.SUB_SCREEN_QUICK_PANEL;
            Preconditions.checkNotNullFromProvides(statusBarLocation);
            return new BatteryMeterViewController(batteryMeterView, statusBarLocation, (UserTracker) this.referenceSysUIComponentImpl.provideUserTrackerProvider.get(), (ConfigurationController) this.referenceSysUIComponentImpl.configurationControllerImplProvider.get(), (TunerService) this.referenceSysUIComponentImpl.tunerServiceImplProvider.get(), (Handler) this.referenceGlobalRootComponentImpl.provideMainHandlerProvider.get(), (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get(), (FeatureFlags) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get(), (BatteryController) this.referenceSysUIComponentImpl.provideBatteryControllerProvider.get(), (SettingsHelper) this.referenceSysUIComponentImpl.settingsHelperProvider.get(), (IndicatorScaleGardener) this.referenceSysUIComponentImpl.indicatorScaleGardenerProvider.get(), (SlimIndicatorViewMediator) this.referenceSysUIComponentImpl.slimIndicatorViewMediatorImplProvider.get());
        }

        @Override // com.android.systemui.subscreen.dagger.SubScreenQuickPanelComponent
        public final SubScreenQuickPanelHeaderController getSubScreenQuickPanelHeaderController() {
            return new SubScreenQuickPanelHeaderController(SubScreenQuickPanelModule_ProvideSubScreenQuickPanelHeaderFactory.provideSubScreenQuickPanelHeader(this.quickPanelWindowView), batteryMeterViewController(), (StatusBarIconController) this.referenceSysUIComponentImpl.statusBarIconControllerImplProvider.get(), (StatusBarPipelineFlags) this.referenceSysUIComponentImpl.statusBarPipelineFlagsProvider.get(), (WifiUiAdapter) this.referenceSysUIComponentImpl.wifiUiAdapterProvider.get(), (MobileUiAdapter) this.referenceSysUIComponentImpl.mobileUiAdapterProvider.get(), (MobileContextProvider) this.referenceSysUIComponentImpl.mobileContextProvider.get(), this.referenceSysUIComponentImpl.bTTetherUiAdapter());
        }

        public final SubScreenQuickPanelHeader subScreenQuickPanelHeader() {
            return SubScreenQuickPanelModule_ProvideSubScreenQuickPanelHeaderFactory.provideSubScreenQuickPanelHeader(this.quickPanelWindowView);
        }

        private SubScreenQuickPanelComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, SubScreenQuickPanelWindowView subScreenQuickPanelWindowView) {
            this.subScreenQuickPanelComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.quickPanelWindowView = subScreenQuickPanelWindowView;
        }
    }

    public final class SysUIUnfoldComponentFactory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ SysUIUnfoldComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        public final SysUIUnfoldComponent create(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider2) {
            unfoldTransitionProgressProvider.getClass();
            naturalRotationUnfoldProgressProvider.getClass();
            scopedUnfoldTransitionProgressProvider.getClass();
            unfoldTransitionProgressProvider2.getClass();
            return new SysUIUnfoldComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, unfoldTransitionProgressProvider, naturalRotationUnfoldProgressProvider, scopedUnfoldTransitionProgressProvider, unfoldTransitionProgressProvider2, 0);
        }

        private SysUIUnfoldComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class SysUIUnfoldComponentImpl implements SysUIUnfoldComponent {
        public Provider bindNaturalRotationUnfoldProgressProvider;
        public Provider bindsFoldLightRevealOverlayAnimationProvider;
        public Provider factoryProvider;
        public Provider foldAodAnimationControllerProvider;
        public Provider foldLightRevealOverlayAnimationProvider;
        public Provider keyguardUnfoldTransitionProvider;
        public Provider notificationPanelUnfoldAnimationControllerProvider;
        public Provider p1Provider;
        public final NaturalRotationUnfoldProgressProvider p2;
        public Provider p2Provider;
        public final ScopedUnfoldTransitionProgressProvider p3;
        public Provider p4Provider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public Provider statusBarMoveFromCenterAnimationControllerProvider;
        public final SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl;
        public Provider unfoldHapticsPlayerProvider;
        public Provider unfoldLatencyTrackerProvider;
        public Provider unfoldLightRevealOverlayAnimationProvider;
        public Provider unfoldTransitionWallpaperControllerProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
            public final SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.sysUIUnfoldComponentImpl = sysUIUnfoldComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        return (T) new KeyguardUnfoldTransition(this.referenceGlobalRootComponentImpl.context, (KeyguardRootView) this.referenceSysUIComponentImpl.providesKeyguardRootViewProvider.get(), (NotificationShadeWindowView) this.referenceSysUIComponentImpl.providesNotificationShadeWindowViewProvider.get(), (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), (UnfoldTransitionProgressProvider) this.sysUIUnfoldComponentImpl.bindNaturalRotationUnfoldProgressProvider.get());
                    case 1:
                        return (T) new StatusBarMoveFromCenterAnimationController(this.sysUIUnfoldComponentImpl.p3, (CurrentActivityTypeProvider) this.referenceGlobalRootComponentImpl.activityManagerActivityTypeProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
                    case 2:
                        return (T) new NotificationPanelUnfoldAnimationController(this.referenceGlobalRootComponentImpl.context, (StatusBarStateController) this.referenceSysUIComponentImpl.statusBarStateControllerImplProvider.get(), this.sysUIUnfoldComponentImpl.p2);
                    case 3:
                        DelayableExecutor delayableExecutor = (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl = this.referenceGlobalRootComponentImpl;
                        return (T) new FoldAodAnimationController(delayableExecutor, referenceGlobalRootComponentImpl.context, (DeviceStateManager) referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), (WakefulnessLifecycle) this.referenceSysUIComponentImpl.wakefulnessLifecycleProvider.get(), (GlobalSettings) this.referenceSysUIComponentImpl.globalSettingsImpl(), (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get(), DoubleCheck.lazy(this.referenceSysUIComponentImpl.keyguardInteractorProvider), DoubleCheck.lazy(this.referenceSysUIComponentImpl.toAodFoldTransitionInteractorProvider));
                    case 4:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        FeatureFlagsClassic featureFlagsClassic = (FeatureFlagsClassic) this.referenceSysUIComponentImpl.featureFlagsClassicReleaseProvider.get();
                        ContentResolver contentResolver = (ContentResolver) this.referenceGlobalRootComponentImpl.provideContentResolverProvider.get();
                        Handler handler = (Handler) this.referenceGlobalRootComponentImpl.unfoldBgProgressHandlerProvider.get();
                        SysUIUnfoldComponentImpl sysUIUnfoldComponentImpl = this.sysUIUnfoldComponentImpl;
                        return (T) new UnfoldLightRevealOverlayAnimation(context, featureFlagsClassic, contentResolver, handler, sysUIUnfoldComponentImpl.p4Provider, sysUIUnfoldComponentImpl.p1Provider, (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get(), ThreadFactoryImpl_Factory.newInstance(), (FullscreenLightRevealAnimationController.Factory) this.sysUIUnfoldComponentImpl.factoryProvider.get());
                    case 5:
                        return (T) new FullscreenLightRevealAnimationController.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.SysUIUnfoldComponentImpl.SwitchingProvider.1
                            public final FullscreenLightRevealAnimationController create(Function1 function1, Function1 function12, String str) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = switchingProvider.referenceGlobalRootComponentImpl;
                                Context context2 = referenceGlobalRootComponentImpl2.context;
                                DisplayManager displayManager = (DisplayManager) referenceGlobalRootComponentImpl2.provideDisplayManagerProvider.get();
                                ThreadFactoryImpl newInstance = ThreadFactoryImpl_Factory.newInstance();
                                Handler handler2 = (Handler) switchingProvider.referenceGlobalRootComponentImpl.unfoldBgProgressHandlerProvider.get();
                                RotationChangeProvider rotationChangeProvider = (RotationChangeProvider) switchingProvider.referenceGlobalRootComponentImpl.provideBgRotationChangeProvider.get();
                                ReferenceSysUIComponentImpl referenceSysUIComponentImpl = switchingProvider.referenceSysUIComponentImpl;
                                return new FullscreenLightRevealAnimationController(context2, displayManager, newInstance, handler2, rotationChangeProvider, referenceSysUIComponentImpl.setDisplayAreaHelper, (DisplayTracker) referenceSysUIComponentImpl.provideDisplayTrackerProvider.get(), (CoroutineScope) switchingProvider.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), (Executor) switchingProvider.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), function1, function12, str);
                            }
                        };
                    case 6:
                        return (T) new FoldLightRevealOverlayAnimation((CoroutineDispatcher) this.referenceGlobalRootComponentImpl.unfoldBgDispatcherProvider.get(), this.referenceSysUIComponentImpl.deviceStateRepositoryImpl(), (PowerInteractor) this.referenceSysUIComponentImpl.powerInteractorProvider.get(), (CoroutineScope) this.referenceSysUIComponentImpl.bgApplicationScopeProvider.get(), this.referenceSysUIComponentImpl.animationStatusRepositoryImpl(), (FullscreenLightRevealAnimationController.Factory) this.sysUIUnfoldComponentImpl.factoryProvider.get(), (FoldLockSettingAvailabilityProvider) this.referenceGlobalRootComponentImpl.provideFoldLockSettingAvailabilityProvider.get());
                    case 7:
                        return (T) new UnfoldTransitionWallpaperController((UnfoldTransitionProgressProvider) this.sysUIUnfoldComponentImpl.p1Provider.get(), (WallpaperController) this.referenceSysUIComponentImpl.wallpaperControllerProvider.get());
                    case 8:
                        return (T) new UnfoldHapticsPlayer((UnfoldTransitionProgressProvider) this.sysUIUnfoldComponentImpl.p1Provider.get(), (FoldProvider) this.referenceGlobalRootComponentImpl.deviceStateManagerFoldProvider.get(), (UnfoldTransitionConfig) this.referenceGlobalRootComponentImpl.resourceUnfoldTransitionConfigProvider.get(), (Executor) this.referenceGlobalRootComponentImpl.provideMainExecutorProvider.get(), (Vibrator) this.referenceGlobalRootComponentImpl.provideVibratorProvider.get());
                    case 9:
                        LatencyTracker latencyTracker = (LatencyTracker) this.referenceGlobalRootComponentImpl.provideLatencyTrackerProvider.get();
                        DeviceStateManager deviceStateManager = (DeviceStateManager) this.referenceGlobalRootComponentImpl.provideDeviceStateManagerProvider.get();
                        Optional optional = (Optional) this.referenceGlobalRootComponentImpl.unfoldTransitionProgressProvider.get();
                        Executor executor = (Executor) this.referenceGlobalRootComponentImpl.provideUiBackgroundExecutorProvider.get();
                        ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl2 = this.referenceGlobalRootComponentImpl;
                        return (T) new UnfoldLatencyTracker(latencyTracker, deviceStateManager, optional, executor, referenceGlobalRootComponentImpl2.context, (ContentResolver) referenceGlobalRootComponentImpl2.provideContentResolverProvider.get(), (ScreenLifecycle) this.referenceGlobalRootComponentImpl.screenLifecycleProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ SysUIUnfoldComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider2, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, unfoldTransitionProgressProvider, naturalRotationUnfoldProgressProvider, scopedUnfoldTransitionProgressProvider, unfoldTransitionProgressProvider2);
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final FoldAodAnimationController getFoldAodAnimationController() {
            return (FoldAodAnimationController) this.foldAodAnimationControllerProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final Set<FullscreenLightRevealAnimation> getFullScreenLightRevealAnimations() {
            SetBuilder newSetBuilder = SetBuilder.newSetBuilder(2);
            newSetBuilder.add((FullscreenLightRevealAnimation) this.unfoldLightRevealOverlayAnimationProvider.get());
            newSetBuilder.add((FullscreenLightRevealAnimation) this.bindsFoldLightRevealOverlayAnimationProvider.get());
            return newSetBuilder.build();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final KeyguardUnfoldTransition getKeyguardUnfoldTransition() {
            return (KeyguardUnfoldTransition) this.keyguardUnfoldTransitionProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final NaturalRotationUnfoldProgressProvider getNaturalRotationUnfoldProgressProvider() {
            return this.p2;
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final NotificationPanelUnfoldAnimationController getNotificationPanelUnfoldAnimationController() {
            return (NotificationPanelUnfoldAnimationController) this.notificationPanelUnfoldAnimationControllerProvider.get();
        }

        public final StatusBarMoveFromCenterAnimationController getStatusBarMoveFromCenterAnimationController() {
            return (StatusBarMoveFromCenterAnimationController) this.statusBarMoveFromCenterAnimationControllerProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final UnfoldHapticsPlayer getUnfoldHapticsPlayer() {
            return (UnfoldHapticsPlayer) this.unfoldHapticsPlayerProvider.get();
        }

        public final UnfoldKeyguardVisibilityManager getUnfoldKeyguardVisibilityManager() {
            return (UnfoldKeyguardVisibilityManager) this.referenceGlobalRootComponentImpl.unfoldKeyguardVisibilityManagerProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final UnfoldLatencyTracker getUnfoldLatencyTracker() {
            return (UnfoldLatencyTracker) this.unfoldLatencyTrackerProvider.get();
        }

        @Override // com.android.systemui.unfold.SysUIUnfoldComponent
        public final UnfoldTransitionWallpaperController getUnfoldTransitionWallpaperController() {
            return (UnfoldTransitionWallpaperController) this.unfoldTransitionWallpaperControllerProvider.get();
        }

        public final void initialize(UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider2) {
            InstanceFactory create = InstanceFactory.create(naturalRotationUnfoldProgressProvider);
            this.p2Provider = create;
            this.bindNaturalRotationUnfoldProgressProvider = DoubleCheck.provider(create);
            this.keyguardUnfoldTransitionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 0));
            this.statusBarMoveFromCenterAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 1));
            this.notificationPanelUnfoldAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 2));
            this.foldAodAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 3));
            this.p4Provider = InstanceFactory.create(unfoldTransitionProgressProvider2);
            this.p1Provider = InstanceFactory.create(unfoldTransitionProgressProvider);
            this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 5));
            this.unfoldLightRevealOverlayAnimationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 4));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 6);
            this.foldLightRevealOverlayAnimationProvider = switchingProvider;
            this.bindsFoldLightRevealOverlayAnimationProvider = DoubleCheck.provider(switchingProvider);
            this.unfoldTransitionWallpaperControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 7));
            this.unfoldHapticsPlayerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 8));
            this.unfoldLatencyTrackerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.sysUIUnfoldComponentImpl, 9));
        }

        private SysUIUnfoldComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider, NaturalRotationUnfoldProgressProvider naturalRotationUnfoldProgressProvider, ScopedUnfoldTransitionProgressProvider scopedUnfoldTransitionProgressProvider, UnfoldTransitionProgressProvider unfoldTransitionProgressProvider2) {
            this.sysUIUnfoldComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.p3 = scopedUnfoldTransitionProgressProvider;
            this.p2 = naturalRotationUnfoldProgressProvider;
            initialize(unfoldTransitionProgressProvider, naturalRotationUnfoldProgressProvider, scopedUnfoldTransitionProgressProvider, unfoldTransitionProgressProvider2);
        }
    }

    public final class ViewInstanceCreatorFactory implements InjectionInflationController.ViewInstanceCreator.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ ViewInstanceCreatorFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.qs.InjectionInflationController.ViewInstanceCreator.Factory
        public final InjectionInflationController.ViewInstanceCreator build(Context context, AttributeSet attributeSet) {
            context.getClass();
            attributeSet.getClass();
            return new ViewInstanceCreatorImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, context, attributeSet, 0);
        }

        private ViewInstanceCreatorFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class ViewInstanceCreatorImpl implements InjectionInflationController.ViewInstanceCreator {
        public final AttributeSet attributeSet;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final ViewInstanceCreatorImpl viewInstanceCreatorImpl;

        public /* synthetic */ ViewInstanceCreatorImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Context context, AttributeSet attributeSet, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, context, attributeSet);
        }

        public final SubroomQuickSettingsBaseView createSubroomQuickSettingsBaseView() {
            return new SubroomQuickSettingsBaseView(this.referenceGlobalRootComponentImpl.context, this.attributeSet);
        }

        private ViewInstanceCreatorImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Context context, AttributeSet attributeSet) {
            this.viewInstanceCreatorImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.attributeSet = attributeSet;
        }
    }

    public final class VolumePanelComponentFactory implements com.android.systemui.volume.panel.dagger.factory.VolumePanelComponentFactory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ VolumePanelComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.volume.panel.dagger.factory.VolumePanelComponentFactory
        public final VolumePanelComponent create(VolumePanelViewModel volumePanelViewModel, CoroutineScope coroutineScope) {
            volumePanelViewModel.getClass();
            coroutineScope.getClass();
            return new VolumePanelComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, volumePanelViewModel, coroutineScope, 0);
        }

        private VolumePanelComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class VolumePanelComponentImpl implements VolumePanelComponent {
        public Provider alwaysAvailableCriteriaProvider;
        public Provider ancAvailabilityCriteriaProvider;
        public Provider ancButtonComponentProvider;
        public Provider ancSliceInteractorProvider;
        public Provider ancViewModelProvider;
        public Provider audioModeLoggerStartableProvider;
        public Provider audioOutputInteractorProvider;
        public Provider audioSlidersInteractorProvider;
        public Provider audioVolumeComponentViewModelProvider;
        public Provider bottomBarComponentProvider;
        public Provider bottomBarViewModelProvider;
        public Provider captioningAvailabilityCriteriaProvider;
        public Provider captioningViewModelProvider;
        public Provider componentsFactoryProvider;
        public Provider componentsInteractorImplProvider;
        public Provider defaultComponentsLayoutManagerProvider;
        public Provider deviceIconInteractorProvider;
        public Provider factoryProvider;
        public Provider factoryProvider2;
        public Provider mediaDeviceSessionInteractorProvider;
        public Provider mediaOutputActionsInteractorProvider;
        public Provider mediaOutputComponentInteractorProvider;
        public Provider mediaOutputComponentProvider;
        public Provider mediaOutputInteractorProvider;
        public Provider mediaOutputViewModelProvider;
        public Provider provideBottomBarKeyProvider;
        public Provider provideEnabledComponentsProvider;
        public Provider provideFooterComponentsProvider;
        public Provider provideHeaderComponentsProvider;
        public Provider provideVolumePanelUiComponentProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final CoroutineScope scope;
        public Provider spatialAudioAvailabilityCriteriaProvider;
        public Provider spatialAudioComponentInteractorProvider;
        public Provider spatialAudioComponentProvider;
        public Provider spatialAudioViewModelProvider;
        public final VolumePanelViewModel viewModel;
        public final VolumePanelComponentImpl volumePanelComponentImpl;
        public Provider volumeSlidersComponentProvider;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
            public final VolumePanelComponentImpl volumePanelComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, VolumePanelComponentImpl volumePanelComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this.volumePanelComponentImpl = volumePanelComponentImpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                switch (this.id) {
                    case 0:
                        Collection collection = (Collection) this.volumePanelComponentImpl.provideEnabledComponentsProvider.get();
                        VolumePanelComponentImpl volumePanelComponentImpl = this.volumePanelComponentImpl;
                        return (T) new ComponentsInteractorImpl(collection, volumePanelComponentImpl.alwaysAvailableCriteriaProvider, volumePanelComponentImpl.scope, volumePanelComponentImpl.mapOfStringAndProviderOfComponentAvailabilityCriteria());
                    case 1:
                        return (T) DomainModule_Companion_ProvideEnabledComponentsFactory.provideEnabledComponents();
                    case 2:
                        return (T) new AlwaysAvailableCriteria();
                    case 3:
                        return (T) new AncAvailabilityCriteria((AncSliceInteractor) this.volumePanelComponentImpl.ancSliceInteractorProvider.get());
                    case 4:
                        return (T) new AncSliceInteractor((AudioOutputInteractor) this.volumePanelComponentImpl.audioOutputInteractorProvider.get(), (AncSliceRepository) this.referenceSysUIComponentImpl.provideAncSliceRepositoryProvider.get(), this.volumePanelComponentImpl.scope);
                    case 5:
                        return (T) new AudioOutputInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get(), (AudioRepository) this.referenceSysUIComponentImpl.provideAudioRepositoryProvider.get(), (AudioModeInteractor) this.referenceSysUIComponentImpl.provideAudioModeInteractorProvider.get(), this.volumePanelComponentImpl.scope, (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (LocalBluetoothManager) this.referenceSysUIComponentImpl.provideLocalBluetoothControllerProvider.get(), (BluetoothAdapter) this.referenceGlobalRootComponentImpl.provideBluetoothAdapterProvider.get(), (DeviceIconInteractor) this.volumePanelComponentImpl.deviceIconInteractorProvider.get(), (MediaOutputInteractor) this.volumePanelComponentImpl.mediaOutputInteractorProvider.get(), (AudioSharingRepository) this.referenceSysUIComponentImpl.provideAudioSharingRepositoryProvider.get());
                    case 6:
                        return (T) new DeviceIconInteractor((Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get());
                    case 7:
                        return (T) new MediaOutputInteractor((LocalMediaRepositoryFactory) this.referenceSysUIComponentImpl.localMediaRepositoryFactoryImplProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get(), this.volumePanelComponentImpl.scope, (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (MediaControllerRepository) this.referenceSysUIComponentImpl.provideMediaDeviceSessionRepositoryProvider.get(), (MediaControllerInteractor) this.referenceSysUIComponentImpl.mediaControllerInteractorImplProvider.get());
                    case 8:
                        return (T) new SpatialAudioAvailabilityCriteria((SpatialAudioComponentInteractor) this.volumePanelComponentImpl.spatialAudioComponentInteractorProvider.get());
                    case 9:
                        return (T) new SpatialAudioComponentInteractor((AudioOutputInteractor) this.volumePanelComponentImpl.audioOutputInteractorProvider.get(), (SpatializerInteractor) this.referenceSysUIComponentImpl.provideSpatializerInetractorProvider.get(), (AudioRepository) this.referenceSysUIComponentImpl.provideAudioRepositoryProvider.get(), (CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), this.volumePanelComponentImpl.scope);
                    case 10:
                        return (T) new CaptioningAvailabilityCriteria((CaptioningInteractor) this.referenceSysUIComponentImpl.provideCaptioningInteractorProvider.get(), this.volumePanelComponentImpl.scope, (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 11:
                        return (T) new ComponentsFactory(this.volumePanelComponentImpl.mapOfStringAndProviderOfVolumePanelUiComponent());
                    case 12:
                        return (T) CaptioningModule_Companion_ProvideVolumePanelUiComponentFactory.provideVolumePanelUiComponent((CaptioningViewModel) this.volumePanelComponentImpl.captioningViewModelProvider.get());
                    case 13:
                        return (T) new CaptioningViewModel(this.referenceGlobalRootComponentImpl.context, (CaptioningInteractor) this.referenceSysUIComponentImpl.provideCaptioningInteractorProvider.get(), this.volumePanelComponentImpl.scope, (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 14:
                        return (T) new BottomBarComponent((BottomBarViewModel) this.volumePanelComponentImpl.bottomBarViewModelProvider.get());
                    case 15:
                        return (T) new BottomBarViewModel((ActivityStarter) this.referenceSysUIComponentImpl.activityStarterImplProvider.get(), this.volumePanelComponentImpl.viewModel, (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 16:
                        return (T) new AncButtonComponent((AncViewModel) this.volumePanelComponentImpl.ancViewModelProvider.get(), this.volumePanelComponentImpl.ancPopup());
                    case 17:
                        VolumePanelComponentImpl volumePanelComponentImpl2 = this.volumePanelComponentImpl;
                        return (T) new AncViewModel(volumePanelComponentImpl2.scope, (AncSliceInteractor) volumePanelComponentImpl2.ancSliceInteractorProvider.get(), (AncAvailabilityCriteria) this.volumePanelComponentImpl.ancAvailabilityCriteriaProvider.get());
                    case 18:
                        return (T) new SpatialAudioComponent((com.android.systemui.volume.panel.component.spatial.ui.viewmodel.SpatialAudioViewModel) this.volumePanelComponentImpl.spatialAudioViewModelProvider.get(), this.volumePanelComponentImpl.spatialAudioPopup());
                    case 19:
                        Context context = (Context) this.referenceGlobalRootComponentImpl.provideApplicationContextProvider.get();
                        VolumePanelComponentImpl volumePanelComponentImpl3 = this.volumePanelComponentImpl;
                        return (T) new com.android.systemui.volume.panel.component.spatial.ui.viewmodel.SpatialAudioViewModel(context, volumePanelComponentImpl3.scope, (SpatialAudioAvailabilityCriteria) volumePanelComponentImpl3.spatialAudioAvailabilityCriteriaProvider.get(), (SpatialAudioComponentInteractor) this.volumePanelComponentImpl.spatialAudioComponentInteractorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 20:
                        return (T) new VolumeSlidersComponent((AudioVolumeComponentViewModel) this.volumePanelComponentImpl.audioVolumeComponentViewModelProvider.get());
                    case 21:
                        VolumePanelComponentImpl volumePanelComponentImpl4 = this.volumePanelComponentImpl;
                        return (T) new AudioVolumeComponentViewModel(volumePanelComponentImpl4.scope, (MediaOutputInteractor) volumePanelComponentImpl4.mediaOutputInteractorProvider.get(), (MediaDeviceSessionInteractor) this.volumePanelComponentImpl.mediaDeviceSessionInteractorProvider.get(), (AudioStreamSliderViewModel.Factory) this.volumePanelComponentImpl.factoryProvider.get(), (CastVolumeSliderViewModel.Factory) this.volumePanelComponentImpl.factoryProvider2.get(), (AudioSlidersInteractor) this.volumePanelComponentImpl.audioSlidersInteractorProvider.get());
                    case 22:
                        return (T) new MediaDeviceSessionInteractor((CoroutineContext) this.referenceSysUIComponentImpl.bgCoroutineContextProvider.get(), (MediaControllerInteractor) this.referenceSysUIComponentImpl.mediaControllerInteractorImplProvider.get(), (MediaControllerRepository) this.referenceSysUIComponentImpl.provideMediaDeviceSessionRepositoryProvider.get());
                    case 23:
                        return (T) new AudioStreamSliderViewModel.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.VolumePanelComponentImpl.SwitchingProvider.1
                            @Override // com.android.systemui.volume.panel.component.volume.slider.ui.viewmodel.AudioStreamSliderViewModel.Factory
                            public final AudioStreamSliderViewModel create(AudioStreamSliderViewModel.FactoryAudioStreamWrapper factoryAudioStreamWrapper, CoroutineScope coroutineScope) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new AudioStreamSliderViewModel(factoryAudioStreamWrapper, coroutineScope, switchingProvider.referenceGlobalRootComponentImpl.context, (AudioVolumeInteractor) switchingProvider.referenceSysUIComponentImpl.provideAudioVolumeInteractorProvider.get(), (UiEventLogger) switchingProvider.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                            }
                        };
                    case 24:
                        return (T) new CastVolumeSliderViewModel.Factory() { // from class: com.android.systemui.dagger.DaggerReferenceGlobalRootComponent.VolumePanelComponentImpl.SwitchingProvider.2
                            @Override // com.android.systemui.volume.panel.component.volume.slider.ui.viewmodel.CastVolumeSliderViewModel.Factory
                            public final CastVolumeSliderViewModel create(MediaDeviceSession mediaDeviceSession, CoroutineScope coroutineScope) {
                                SwitchingProvider switchingProvider = SwitchingProvider.this;
                                return new CastVolumeSliderViewModel(mediaDeviceSession, coroutineScope, switchingProvider.referenceGlobalRootComponentImpl.context, (MediaDeviceSessionInteractor) switchingProvider.volumePanelComponentImpl.mediaDeviceSessionInteractorProvider.get());
                            }
                        };
                    case 25:
                        VolumePanelComponentImpl volumePanelComponentImpl5 = this.volumePanelComponentImpl;
                        return (T) new AudioSlidersInteractor(volumePanelComponentImpl5.scope, (MediaOutputInteractor) volumePanelComponentImpl5.mediaOutputInteractorProvider.get(), (AudioRepository) this.referenceSysUIComponentImpl.provideAudioRepositoryProvider.get());
                    case 26:
                        return (T) new MediaOutputComponent((MediaOutputViewModel) this.volumePanelComponentImpl.mediaOutputViewModelProvider.get());
                    case 27:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        VolumePanelComponentImpl volumePanelComponentImpl6 = this.volumePanelComponentImpl;
                        return (T) new MediaOutputViewModel(context2, volumePanelComponentImpl6.scope, (MediaOutputActionsInteractor) volumePanelComponentImpl6.mediaOutputActionsInteractorProvider.get(), (MediaOutputComponentInteractor) this.volumePanelComponentImpl.mediaOutputComponentInteractorProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 28:
                        return (T) new MediaOutputActionsInteractor(this.referenceSysUIComponentImpl.mediaOutputDialogManager());
                    case 29:
                        VolumePanelComponentImpl volumePanelComponentImpl7 = this.volumePanelComponentImpl;
                        return (T) new MediaOutputComponentInteractor(volumePanelComponentImpl7.scope, (MediaDeviceSessionInteractor) volumePanelComponentImpl7.mediaDeviceSessionInteractorProvider.get(), (AudioOutputInteractor) this.volumePanelComponentImpl.audioOutputInteractorProvider.get(), (AudioModeInteractor) this.referenceSysUIComponentImpl.provideAudioModeInteractorProvider.get(), (MediaOutputInteractor) this.volumePanelComponentImpl.mediaOutputInteractorProvider.get());
                    case 30:
                        return (T) new DefaultComponentsLayoutManager((String) this.volumePanelComponentImpl.provideBottomBarKeyProvider.get(), (Collection) this.volumePanelComponentImpl.provideHeaderComponentsProvider.get(), (Collection) this.volumePanelComponentImpl.provideFooterComponentsProvider.get());
                    case 31:
                        UiModule.Companion.getClass();
                        return "bottom_bar";
                    case 32:
                        UiModule.Companion.getClass();
                        return (T) Collections.singleton("media_output");
                    case 33:
                        UiModule.Companion.getClass();
                        List listOf = CollectionsKt__CollectionsKt.listOf("anc", "spatial_audio", "captioning");
                        Preconditions.checkNotNullFromProvides(listOf);
                        return (T) listOf;
                    case 34:
                        return (T) new AudioModeLoggerStartable(this.volumePanelComponentImpl.scope, (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (AudioModeInteractor) this.referenceSysUIComponentImpl.provideAudioModeInteractorProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }
        }

        public /* synthetic */ VolumePanelComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, VolumePanelViewModel volumePanelViewModel, CoroutineScope coroutineScope, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, volumePanelViewModel, coroutineScope);
        }

        public final AncPopup ancPopup() {
            return new AncPopup(volumePanelPopup(), (AncViewModel) this.ancViewModelProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
        }

        @Override // com.android.systemui.volume.panel.dagger.VolumePanelComponent
        public final ComponentsFactory componentsFactory() {
            return (ComponentsFactory) this.componentsFactoryProvider.get();
        }

        @Override // com.android.systemui.volume.panel.dagger.VolumePanelComponent
        public final ComponentsInteractor componentsInteractor() {
            return (ComponentsInteractor) this.componentsInteractorImplProvider.get();
        }

        @Override // com.android.systemui.volume.panel.dagger.VolumePanelComponent
        public final ComponentsLayoutManager componentsLayoutManager() {
            return (ComponentsLayoutManager) this.defaultComponentsLayoutManagerProvider.get();
        }

        @Override // com.android.systemui.volume.panel.dagger.VolumePanelComponent
        public final CoroutineScope coroutineScope() {
            return this.scope;
        }

        public final void initialize(VolumePanelViewModel volumePanelViewModel, CoroutineScope coroutineScope) {
            this.provideEnabledComponentsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 1));
            this.alwaysAvailableCriteriaProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 2));
            this.deviceIconInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 6));
            this.mediaOutputInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 7));
            this.audioOutputInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 5));
            this.ancSliceInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 4));
            this.ancAvailabilityCriteriaProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 3));
            this.spatialAudioComponentInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 9));
            this.spatialAudioAvailabilityCriteriaProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 8));
            this.captioningAvailabilityCriteriaProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 10));
            this.componentsInteractorImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 0));
            this.captioningViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 13));
            this.provideVolumePanelUiComponentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 12);
            this.bottomBarViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 15));
            this.bottomBarComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 14));
            this.ancViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 17));
            this.ancButtonComponentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 16);
            this.spatialAudioViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 19));
            this.spatialAudioComponentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 18);
            this.mediaDeviceSessionInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 22));
            this.factoryProvider = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 23));
            this.factoryProvider2 = SingleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 24));
            this.audioSlidersInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 25));
            this.audioVolumeComponentViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 21));
            this.volumeSlidersComponentProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 20);
            this.mediaOutputActionsInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 28));
            this.mediaOutputComponentInteractorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 29));
            this.mediaOutputViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 27));
            this.mediaOutputComponentProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 26));
            this.componentsFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 11));
            this.provideBottomBarKeyProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 31));
            this.provideHeaderComponentsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 32));
            this.provideFooterComponentsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 33));
            this.defaultComponentsLayoutManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 30));
            this.audioModeLoggerStartableProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this.volumePanelComponentImpl, 34));
        }

        public final Map<String, javax.inject.Provider> mapOfStringAndProviderOfComponentAvailabilityCriteria() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(6);
            newMapBuilder.contributions.put("bottom_bar", this.alwaysAvailableCriteriaProvider);
            newMapBuilder.contributions.put("anc", this.ancAvailabilityCriteriaProvider);
            newMapBuilder.contributions.put("spatial_audio", this.spatialAudioAvailabilityCriteriaProvider);
            newMapBuilder.contributions.put("volume_sliders", this.alwaysAvailableCriteriaProvider);
            newMapBuilder.contributions.put("captioning", this.captioningAvailabilityCriteriaProvider);
            newMapBuilder.contributions.put("media_output", this.alwaysAvailableCriteriaProvider);
            return newMapBuilder.build();
        }

        public final Map<String, javax.inject.Provider> mapOfStringAndProviderOfVolumePanelUiComponent() {
            MapBuilder newMapBuilder = MapBuilder.newMapBuilder(6);
            newMapBuilder.contributions.put("captioning", this.provideVolumePanelUiComponentProvider);
            newMapBuilder.contributions.put("bottom_bar", this.bottomBarComponentProvider);
            newMapBuilder.contributions.put("anc", this.ancButtonComponentProvider);
            newMapBuilder.contributions.put("spatial_audio", this.spatialAudioComponentProvider);
            newMapBuilder.contributions.put("volume_sliders", this.volumeSlidersComponentProvider);
            newMapBuilder.contributions.put("media_output", this.mediaOutputComponentProvider);
            return newMapBuilder.build();
        }

        public final SpatialAudioPopup spatialAudioPopup() {
            return new SpatialAudioPopup((com.android.systemui.volume.panel.component.spatial.ui.viewmodel.SpatialAudioViewModel) this.spatialAudioViewModelProvider.get(), volumePanelPopup(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
        }

        public final VolumePanelPopup volumePanelPopup() {
            return new VolumePanelPopup(this.referenceSysUIComponentImpl.systemUIDialogFactory(), (DialogTransitionAnimator) this.referenceSysUIComponentImpl.provideDialogTransitionAnimatorProvider.get());
        }

        @Override // com.android.systemui.volume.panel.dagger.VolumePanelComponent
        public final Set<AudioModeLoggerStartable> volumePanelStartables() {
            return Collections.singleton((AudioModeLoggerStartable) this.audioModeLoggerStartableProvider.get());
        }

        private VolumePanelComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, VolumePanelViewModel volumePanelViewModel, CoroutineScope coroutineScope) {
            this.volumePanelComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.scope = coroutineScope;
            this.viewModel = volumePanelViewModel;
            initialize(volumePanelViewModel, coroutineScope);
        }
    }

    public final class WMComponentBuilder implements WMComponent.Builder {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public HandlerThread setShellMainThread;

        public /* synthetic */ WMComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl);
        }

        @Override // com.android.systemui.dagger.WMComponent.Builder
        public final WMComponent build() {
            return new WMComponentImpl(this.referenceGlobalRootComponentImpl, this.setShellMainThread, 0);
        }

        public final WMComponentBuilder setShellMainThread(HandlerThread handlerThread) {
            this.setShellMainThread = handlerThread;
            return this;
        }

        private WMComponentBuilder(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
        }
    }

    public final class WMComponentImpl implements WMComponent {
        public Provider compatUIConfigurationProvider;
        public Provider compatUIShellCommandHandlerProvider;
        public Provider dockStateReaderProvider;
        public Provider dynamicOverrideOptionalOfUnfoldAnimationControllerProvider;
        public Provider dynamicOverrideOptionalOfUnfoldTransitionHandlerProvider;
        public Provider pipDisplayLayoutStateProvider;
        public Provider provideActivityEmbeddingControllerProvider;
        public Provider provideBackAnimationBackgroundProvider;
        public Provider provideBackAnimationControllerProvider;
        public Provider provideBackAnimationProvider;
        public Provider provideBubbleControllerProvider;
        public Provider provideBubbleDataProvider;
        public Provider provideBubbleEducationProvider;
        public Provider provideBubbleLoggerProvider;
        public Provider provideBubblePositionerProvider;
        public Provider provideBubblesProvider;
        public Provider provideCompatUIComponentFactoryProvider;
        public Provider provideCompatUIComponentIdGeneratorProvider;
        public Provider provideCompatUIControllerProvider;
        public Provider provideCompatUIRepositoryProvider;
        public Provider provideCompatUIStateProvider;
        public Provider provideCompatUIStatusManagerProvider;
        public Provider provideDesktopModeEventLoggerProvider;
        public Provider provideDesktopModeLoggerTransitionObserverProvider;
        public Provider provideDesktopModeProvider;
        public Provider provideDesktopModeTaskRepositoryProvider;
        public Provider provideDesktopTaskRepositoryProvider;
        public Provider provideDesktopTasksControllerProvider;
        public Provider provideDesktopTasksLimiterProvider;
        public Provider provideDesktopTasksTransitionObserverProvider;
        public Provider provideDevicePostureControllerProvider;
        public Provider provideDexCompatRestartDialogUtilsProvider;
        public Provider provideDexWindowDecorViewModelProvider;
        public Provider provideDisplayAreaHelperProvider;
        public Provider provideDisplayControllerOptionalProvider;
        public Provider provideDisplayControllerProvider;
        public Provider provideDisplayImeControllerProvider;
        public Provider provideDisplayInsetsControllerProvider;
        public Provider provideDisplayLayoutProvider;
        public Provider provideDragAndDropControllerProvider;
        public Provider provideDragToDesktopTransitionHandlerProvider;
        public Provider provideEnterDesktopModeTaskTransitionHandlerProvider;
        public Provider provideEnterSplitGestureHandlerProvider;
        public Provider provideExitDesktopTaskTransitionHandlerProvider;
        public Provider provideFlexPanelStartControllerProvider;
        public Provider provideFloatingContentCoordinatorProvider;
        public Provider provideFreeformComponentsProvider;
        public Provider provideFreeformComponentsProvider2;
        public Provider provideFreeformTaskListenerProvider;
        public Provider provideFreeformTaskTransitionHandlerProvider;
        public Provider provideFreeformTaskTransitionObserverProvider;
        public Provider provideFullscreenTaskListenerProvider;
        public Provider provideGlobalDragListenerProvider;
        public Provider provideHideDisplayCutoutControllerProvider;
        public Provider provideHomeTransitionObserverProvider;
        public Provider provideIconProvider;
        public Provider provideIndependentShellComponentsToCreateProvider;
        public Provider provideIndependentShellComponentsToCreateProvider2;
        public Provider provideKeyguardTransitionHandlerProvider;
        public Provider provideKeyguardTransitionsProvider;
        public Provider provideLaunchAdjacentControllerProvider;
        public Provider provideMixedTransitionHandlerProvider;
        public Provider provideMixedTransitionHandlerProvider2;
        public Provider provideMultiInstanceHelperProvider;
        public Provider provideNaturalSwitchingDropTargetControllerProvider;
        public Provider provideOneHandedControllerProvider;
        public Provider provideOneHandedProvider;
        public Provider providePhonePipKeepClearAlgorithmProvider;
        public Provider providePip1Provider;
        public Provider providePipAnimationControllerProvider;
        public Provider providePipAppOpsListenerProvider;
        public Provider providePipBoundsStateProvider;
        public Provider providePipControllerProvider;
        public Provider providePipMediaControllerProvider;
        public Provider providePipMotionHelperProvider;
        public Provider providePipMotionHelperProvider2;
        public Provider providePipParamsChangedForwarderProvider;
        public Provider providePipPerfHintControllerProvider;
        public Provider providePipPhoneMenuControllerProvider;
        public Provider providePipSchedulerProvider;
        public Provider providePipSnapAlgorithmProvider;
        public Provider providePipSurfaceTransactionHelperProvider;
        public Provider providePipTaskOrganizerProvider;
        public Provider providePipTouchHandlerProvider;
        public Provider providePipTouchHandlerProvider2;
        public Provider providePipTransitionControllerProvider;
        public Provider providePipTransitionProvider;
        public Provider providePipTransitionProvider2;
        public Provider providePipTransitionStateProvider;
        public Provider providePipTransitionStateProvider2;
        public Provider providePipUiEventLoggerProvider;
        public Provider provideProtoLogControllerProvider;
        public Provider provideRecentTasksControllerProvider;
        public Provider provideRecentTasksProvider;
        public Provider provideRecentsTransitionHandlerProvider;
        public Provider provideRemoteTransitionsProvider;
        public Provider provideRootDisplayAreaOrganizerProvider;
        public Provider provideRootTaskDisplayAreaOrganizerProvider;
        public Provider provideSharedBackgroundExecutorProvider;
        public Provider provideSharedBackgroundHandlerProvider;
        public Provider provideShellAnimationExecutorProvider;
        public Provider provideShellCommandHandlerProvider;
        public Provider provideShellControllerProvider;
        public Provider provideShellInitProvider;
        public Provider provideShellMainChoreographerProvider;
        public Provider provideShellMainExecutorProvider;
        public Provider provideShellMainHandlerProvider;
        public Provider provideShellSplitTaskUnfoldAnimatorProvider;
        public Provider provideShellSysuiCallbacksProvider;
        public Provider provideShellTaskOrganizerProvider;
        public Provider provideShortcutControllerProvider;
        public Provider provideSizeSpecSourceProvider;
        public Provider provideSplashScreenExecutorProvider;
        public Provider provideSplitScreenControllerProvider;
        public Provider provideSplitScreenProvider;
        public Provider provideSplitTaskUnfoldAnimatorBaseProvider;
        public Provider provideSplitTaskUnfoldAnimatorProvider;
        public Provider provideStartingSurfaceProvider;
        public Provider provideStartingWindowControllerProvider;
        public Provider provideStartingWindowTypeAlgorithmProvider;
        public Provider provideSyncTransactionQueueProvider;
        public Provider provideSysUIMainExecutorProvider;
        public Provider provideSystemPerformanceHinterProvider;
        public Provider provideSystemWindowsProvider;
        public Provider provideTabletopModeControllerProvider;
        public Provider provideTaskStackTransitionObserverProvider;
        public Provider provideTaskViewFactoryControllerProvider;
        public Provider provideTaskViewFactoryProvider;
        public Provider provideTaskViewTransitionsProvider;
        public Provider provideToggleResizeDesktopTaskTransitionHandlerProvider;
        public Provider provideTransactionPoolProvider;
        public Provider provideTransitionsProvider;
        public Provider provideUnfoldAnimationControllerProvider;
        public Provider provideUnfoldBackgroundControllerProvider;
        public Provider provideUnfoldControllerProvider;
        public Provider provideUnfoldTransitionHandlerProvider;
        public Provider provideUnfoldTransitionHandlerProvider2;
        public Provider provideWindowDecorViewModelProvider;
        public Provider provideWindowManagerShellWrapperProvider;
        public Provider providerTaskStackListenerImplProvider;
        public Provider providesDesktopTasksControllerProvider;
        public Provider providesOneHandedControllerProvider;
        public Provider providesPipBoundsAlgorithmProvider;
        public Provider providesPipPhoneMenuControllerProvider;
        public Provider providesSplitScreenControllerProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final HandlerThread setShellMainThread;
        public final WMComponentImpl wMComponentImpl;

        public final class SwitchingProvider<T> implements Provider {
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final WMComponentImpl wMComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, WMComponentImpl wMComponentImpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.wMComponentImpl = wMComponentImpl;
                this.id = i;
            }

            private T get0() {
                switch (this.id) {
                    case 0:
                        this.wMComponentImpl.provideIndependentShellComponentsToCreateProvider2.get();
                        T t = (T) ((ShellController) this.wMComponentImpl.provideShellControllerProvider.get()).mImpl;
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 1:
                        Optional.of((BubbleController) this.wMComponentImpl.provideBubbleControllerProvider.get());
                        Optional.of((RecentsTransitionHandler) this.wMComponentImpl.provideRecentsTransitionHandlerProvider.get());
                        Optional.of(this.wMComponentImpl.provideIndependentShellComponentsToCreateProvider.get());
                        return (T) new Object();
                    case 2:
                        return (T) new DisplayController(this.referenceGlobalRootComponentImpl.context, (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 3:
                        return (T) new ShellInit((ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 4:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        Handler handler = (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get();
                        T t2 = (T) ((ShellExecutor) this.wMComponentImpl.provideSysUIMainExecutorProvider.get());
                        if (context.getResources().getBoolean(R.bool.config_enableShellMainThread)) {
                            t2 = (T) new com.android.wm.shell.common.HandlerExecutor(handler);
                        }
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 5:
                        return (T) WMShellConcurrencyModule_ProvideShellMainHandlerFactory.provideShellMainHandler(this.referenceGlobalRootComponentImpl.context, this.wMComponentImpl.setShellMainThread, new Handler(Looper.getMainLooper()));
                    case 6:
                        return (T) new com.android.wm.shell.common.HandlerExecutor(new Handler(Looper.getMainLooper()));
                    case 7:
                        return (T) new DisplayImeController((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get(), (TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), DoubleCheck.lazy(this.wMComponentImpl.provideTransitionsProvider));
                    case 8:
                        return (T) new DisplayInsetsController((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 9:
                        return (T) new TransactionPool();
                    case 10:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        ShellInit shellInit = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        ShellCommandHandler shellCommandHandler = (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get();
                        ShellController shellController = (ShellController) this.wMComponentImpl.provideShellControllerProvider.get();
                        ShellTaskOrganizer shellTaskOrganizer = (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get();
                        TransactionPool transactionPool = (TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get();
                        DisplayController displayController = (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get();
                        ShellExecutor shellExecutor = (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get();
                        return (T) new Transitions(context2, !context2.getResources().getBoolean(R.bool.config_registerShellTransitionsOnInit) ? new ShellInit(shellExecutor) : shellInit, shellCommandHandler, shellController, shellTaskOrganizer, transactionPool, displayController, shellExecutor, (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellAnimationExecutorProvider.get(), (RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get(), (HomeTransitionObserver) this.wMComponentImpl.provideHomeTransitionObserverProvider.get());
                    case 11:
                        return (T) new ShellCommandHandler();
                    case 12:
                        return (T) new ShellController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 13:
                        return (T) WMShellBaseModule_ProvideShellTaskOrganizerFactory.provideShellTaskOrganizer(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (Optional) this.wMComponentImpl.provideCompatUIControllerProvider.get(), (Optional) this.wMComponentImpl.provideUnfoldControllerProvider.get(), (Optional) this.wMComponentImpl.provideRecentTasksControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get());
                    case 14:
                        Context context3 = this.referenceGlobalRootComponentImpl.context;
                        ShellInit shellInit2 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        ShellController shellController2 = (ShellController) this.wMComponentImpl.provideShellControllerProvider.get();
                        DisplayController displayController2 = (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get();
                        DisplayInsetsController displayInsetsController = (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get();
                        DisplayImeController displayImeController = (DisplayImeController) this.wMComponentImpl.provideDisplayImeControllerProvider.get();
                        SyncTransactionQueue syncTransactionQueue = (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get();
                        ShellExecutor shellExecutor2 = (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get();
                        Lazy lazy = DoubleCheck.lazy(this.wMComponentImpl.provideTransitionsProvider);
                        Lazy lazy2 = DoubleCheck.lazy(this.wMComponentImpl.dockStateReaderProvider);
                        Lazy lazy3 = DoubleCheck.lazy(this.wMComponentImpl.compatUIConfigurationProvider);
                        Lazy lazy4 = DoubleCheck.lazy(this.wMComponentImpl.compatUIShellCommandHandlerProvider);
                        Lazy lazy5 = DoubleCheck.lazy(this.referenceGlobalRootComponentImpl.provideAccessibilityManagerProvider);
                        return (T) WMShellBaseModule_ProvideCompatUIControllerFactory.provideCompatUIController(context3, shellInit2, shellController2, displayController2, displayInsetsController, displayImeController, syncTransactionQueue, shellExecutor2, lazy, lazy2, lazy3, lazy4, lazy5, (CompatUIStatusManager) this.wMComponentImpl.provideCompatUIStatusManagerProvider.get());
                    case 15:
                        return (T) new SyncTransactionQueue((TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 16:
                        return (T) new DockStateReader(this.referenceGlobalRootComponentImpl.context);
                    case 17:
                        return (T) new CompatUIConfiguration(this.referenceGlobalRootComponentImpl.context, (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 18:
                        return (T) new CompatUIShellCommandHandler((ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (CompatUIConfiguration) this.wMComponentImpl.compatUIConfigurationProvider.get());
                    case 19:
                        return (T) WMShellBaseModule_ProvideCompatUIRepositoryFactory.provideCompatUIRepository();
                    case 20:
                        return (T) new CompatUIState();
                    case 21:
                        return (T) new DefaultComponentIdGenerator();
                    case 22:
                        return (T) new DefaultCompatUIComponentFactory(this.referenceGlobalRootComponentImpl.context, (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get());
                    case 23:
                        Context unused = this.referenceGlobalRootComponentImpl.context;
                        return (T) new CompatUIStatusManager();
                    case 24:
                        return (T) WMShellBaseModule_ProvideUnfoldControllerFactory.provideUnfoldController(DoubleCheck.lazy(this.wMComponentImpl.dynamicOverrideOptionalOfUnfoldAnimationControllerProvider), Optional.of((ShellUnfoldProgressProvider) this.referenceGlobalRootComponentImpl.provideShellProgressProvider.get()));
                    case 25:
                        return (T) Optional.of((UnfoldAnimationController) this.wMComponentImpl.provideUnfoldAnimationControllerProvider.get());
                    case 26:
                        Optional of = Optional.of((ShellUnfoldProgressProvider) this.referenceGlobalRootComponentImpl.provideShellProgressProvider.get());
                        TransactionPool transactionPool2 = (TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get();
                        SplitTaskUnfoldAnimator splitTaskUnfoldAnimator = (SplitTaskUnfoldAnimator) this.wMComponentImpl.provideSplitTaskUnfoldAnimatorProvider.get();
                        FullscreenUnfoldTaskAnimator fullscreenUnfoldTaskAnimator = this.wMComponentImpl.fullscreenUnfoldTaskAnimator();
                        Lazy lazy6 = DoubleCheck.lazy(this.wMComponentImpl.provideUnfoldTransitionHandlerProvider2);
                        ShellInit shellInit3 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        ShellExecutor shellExecutor3 = (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get();
                        ArrayList arrayList = new ArrayList();
                        arrayList.add(splitTaskUnfoldAnimator);
                        arrayList.add(fullscreenUnfoldTaskAnimator);
                        return (T) new UnfoldAnimationController(shellInit3, transactionPool2, (ShellUnfoldProgressProvider) of.get(), arrayList, lazy6, shellExecutor3);
                    case 27:
                        return (T) new SplitTaskUnfoldAnimator(this.referenceGlobalRootComponentImpl.context, (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), DoubleCheck.lazy(this.wMComponentImpl.providesSplitScreenControllerProvider), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (UnfoldBackgroundController) this.wMComponentImpl.provideUnfoldBackgroundControllerProvider.get(), (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get());
                    case 28:
                        return (T) new UnfoldBackgroundController(this.referenceGlobalRootComponentImpl.context);
                    case 29:
                        T t3 = (T) Optional.of((SplitScreenController) this.wMComponentImpl.provideSplitScreenControllerProvider.get());
                        Context context4 = this.referenceGlobalRootComponentImpl.context;
                        if (!ActivityTaskManager.deviceSupportsMultiWindow(context4) && !ActivityTaskManager.supportsSplitScreenMultiWindow(context4)) {
                            t3 = (T) Optional.empty();
                        }
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 30:
                        return (T) new SplitScreenController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (DisplayImeController) this.wMComponentImpl.provideDisplayImeControllerProvider.get(), (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get(), (DragAndDropController) this.wMComponentImpl.provideDragAndDropControllerProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get(), (IconProvider) this.wMComponentImpl.provideIconProvider.get(), (Optional) this.wMComponentImpl.provideRecentTasksControllerProvider.get(), (LaunchAdjacentController) this.wMComponentImpl.provideLaunchAdjacentControllerProvider.get(), Optional.of((WindowDecorViewModel) this.wMComponentImpl.provideWindowDecorViewModelProvider.get()), (Optional) this.wMComponentImpl.providesDesktopTasksControllerProvider.get(), null, (MultiInstanceHelper) this.wMComponentImpl.provideMultiInstanceHelperProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (NaturalSwitchingDropTargetController) this.wMComponentImpl.provideNaturalSwitchingDropTargetControllerProvider.get(), (FlexPanelStartController) this.wMComponentImpl.provideFlexPanelStartControllerProvider.get());
                    case 31:
                        return (T) new RootTaskDisplayAreaOrganizer((ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get());
                    case 32:
                        return (T) new DragAndDropController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (IconProvider) this.wMComponentImpl.provideIconProvider.get(), (GlobalDragListener) this.wMComponentImpl.provideGlobalDragListenerProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (MultiInstanceHelper) this.wMComponentImpl.provideMultiInstanceHelperProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 33:
                        return (T) new IconProvider(this.referenceGlobalRootComponentImpl.context);
                    case 34:
                        return (T) new GlobalDragListener((IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 35:
                        Context context5 = this.referenceGlobalRootComponentImpl.context;
                        PackageManager packageManager = context5.getPackageManager();
                        com.android.window.flags.Flags.supportsMultiInstanceSystemUi();
                        return (T) new MultiInstanceHelper(context5, packageManager, true);
                    case 36:
                        Context context6 = this.referenceGlobalRootComponentImpl.context;
                        T t4 = (T) Optional.ofNullable(context6.getResources().getBoolean(android.R.bool.config_isDisplayHingeAlwaysSeparating) ? new RecentTasksController(context6, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get(), (ActivityTaskManager) this.referenceGlobalRootComponentImpl.provideActivityTaskManagerProvider.get(), (Optional) this.wMComponentImpl.provideDesktopTaskRepositoryProvider.get(), (TaskStackTransitionObserver) this.wMComponentImpl.provideTaskStackTransitionObserverProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get()) : null);
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 37:
                        return (T) new TaskStackListenerImpl((Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get());
                    case 38:
                        final Context context7 = this.referenceGlobalRootComponentImpl.context;
                        final int i = 1;
                        T t5 = (T) Optional.of(DoubleCheck.lazy(this.wMComponentImpl.provideDesktopModeTaskRepositoryProvider)).flatMap(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda0
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                int i2 = i;
                                Context context8 = context7;
                                Lazy lazy7 = (Lazy) obj;
                                switch (i2) {
                                    case 0:
                                        return (DesktopModeStatus.canEnterDesktopMode(context8) || CoreRune.MD_DEX_STANDALONE_LAUNCH_POLICY) ? Optional.of((DesktopTasksController) lazy7.get()) : Optional.empty();
                                    default:
                                        return DesktopModeStatus.canEnterDesktopMode(context8) ? Optional.of((DesktopModeTaskRepository) lazy7.get()) : Optional.empty();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 39:
                        return (T) new DesktopModeTaskRepository();
                    case 40:
                        return (T) new TaskStackTransitionObserver(DoubleCheck.lazy(this.wMComponentImpl.provideTransitionsProvider), (ShellInit) this.wMComponentImpl.provideShellInitProvider.get());
                    case 41:
                        return (T) new LaunchAdjacentController((SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get());
                    case 42:
                        Context context8 = this.referenceGlobalRootComponentImpl.context;
                        ShellExecutor shellExecutor4 = (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get();
                        Handler handler2 = (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get();
                        Choreographer choreographer = (Choreographer) this.wMComponentImpl.provideShellMainChoreographerProvider.get();
                        ShellInit shellInit4 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        IWindowManager iWindowManager = (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get();
                        ShellCommandHandler shellCommandHandler2 = (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get();
                        ShellTaskOrganizer shellTaskOrganizer2 = (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get();
                        DisplayController displayController3 = (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get();
                        ShellController shellController3 = (ShellController) this.wMComponentImpl.provideShellControllerProvider.get();
                        DisplayInsetsController displayInsetsController2 = (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get();
                        NaturalSwitchingDropTargetController naturalSwitchingDropTargetController = (NaturalSwitchingDropTargetController) this.wMComponentImpl.provideNaturalSwitchingDropTargetControllerProvider.get();
                        SyncTransactionQueue syncTransactionQueue2 = (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get();
                        Transitions transitions = (Transitions) this.wMComponentImpl.provideTransitionsProvider.get();
                        Optional optional = (Optional) this.wMComponentImpl.providesDesktopTasksControllerProvider.get();
                        RootTaskDisplayAreaOrganizer rootTaskDisplayAreaOrganizer = (RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get();
                        return DesktopModeStatus.canEnterDesktopMode(context8) ? (T) new DesktopModeWindowDecorViewModel(context8, shellExecutor4, handler2, choreographer, shellInit4, shellCommandHandler2, iWindowManager, shellTaskOrganizer2, displayController3, shellController3, displayInsetsController2, syncTransactionQueue2, transitions, optional, rootTaskDisplayAreaOrganizer) : CoreRune.MW_CAPTION_SHELL ? (T) new MultiTaskingWindowDecorViewModel(context8, handler2, choreographer, shellTaskOrganizer2, displayController3, syncTransactionQueue2, transitions, (ShellExecutor) this.wMComponentImpl.provideShellAnimationExecutorProvider.get(), displayInsetsController2, naturalSwitchingDropTargetController, (DexCompatRestartDialogUtils) this.wMComponentImpl.provideDexCompatRestartDialogUtilsProvider.get(), shellController3, iWindowManager, Optional.of((RecentsTransitionHandler) this.wMComponentImpl.provideRecentsTransitionHandlerProvider.get())) : (T) new CaptionWindowDecorViewModel(context8, handler2, choreographer, shellTaskOrganizer2, displayController3, rootTaskDisplayAreaOrganizer, syncTransactionQueue2, transitions);
                    case 43:
                        return (T) WMShellConcurrencyModule_ProvideShellMainChoreographerFactory.provideShellMainChoreographer((ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 44:
                        return (T) new NaturalSwitchingDropTargetController(this.referenceGlobalRootComponentImpl.context, (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get());
                    case 45:
                        final Context context9 = this.referenceGlobalRootComponentImpl.context;
                        final int i2 = 0;
                        T t6 = (T) Optional.of(DoubleCheck.lazy(this.wMComponentImpl.provideDesktopTasksControllerProvider)).flatMap(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda0
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                int i22 = i2;
                                Context context82 = context9;
                                Lazy lazy7 = (Lazy) obj;
                                switch (i22) {
                                    case 0:
                                        return (DesktopModeStatus.canEnterDesktopMode(context82) || CoreRune.MD_DEX_STANDALONE_LAUNCH_POLICY) ? Optional.of((DesktopTasksController) lazy7.get()) : Optional.empty();
                                    default:
                                        return DesktopModeStatus.canEnterDesktopMode(context82) ? Optional.of((DesktopModeTaskRepository) lazy7.get()) : Optional.empty();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 46:
                        return (T) new DesktopTasksController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get(), (DragAndDropController) this.wMComponentImpl.provideDragAndDropControllerProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (EnterDesktopTaskTransitionHandler) this.wMComponentImpl.provideEnterDesktopModeTaskTransitionHandlerProvider.get(), (ExitDesktopTaskTransitionHandler) this.wMComponentImpl.provideExitDesktopTaskTransitionHandlerProvider.get(), (ToggleResizeDesktopTaskTransitionHandler) this.wMComponentImpl.provideToggleResizeDesktopTaskTransitionHandlerProvider.get(), (DragToDesktopTransitionHandler) this.wMComponentImpl.provideDragToDesktopTransitionHandlerProvider.get(), (DesktopModeTaskRepository) this.wMComponentImpl.provideDesktopModeTaskRepositoryProvider.get(), (DesktopModeLoggerTransitionObserver) this.wMComponentImpl.provideDesktopModeLoggerTransitionObserverProvider.get(), (LaunchAdjacentController) this.wMComponentImpl.provideLaunchAdjacentControllerProvider.get(), (RecentsTransitionHandler) this.wMComponentImpl.provideRecentsTransitionHandlerProvider.get(), (MultiInstanceHelper) this.wMComponentImpl.provideMultiInstanceHelperProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Optional) this.wMComponentImpl.provideDesktopTasksLimiterProvider.get(), (RecentTasksController) ((Optional) this.wMComponentImpl.provideRecentTasksControllerProvider.get()).orElse(null));
                    case 47:
                        Transitions transitions2 = (Transitions) this.wMComponentImpl.provideTransitionsProvider.get();
                        return (T) new EnterDesktopTaskTransitionHandler(transitions2);
                    case 48:
                        Context context10 = this.referenceGlobalRootComponentImpl.context;
                        if (DesktopModeStatus.canEnterDesktopMode(context10)) {
                            com.android.window.flags.Flags.enableDesktopWindowingTaskLimit();
                        }
                        T t7 = (T) Optional.empty();
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 49:
                        return (T) new ExitDesktopTaskTransitionHandler((Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), this.referenceGlobalRootComponentImpl.context);
                    case 50:
                        return (T) new ToggleResizeDesktopTaskTransitionHandler((Transitions) this.wMComponentImpl.provideTransitionsProvider.get());
                    case 51:
                        Context context11 = this.referenceGlobalRootComponentImpl.context;
                        Transitions transitions3 = (Transitions) this.wMComponentImpl.provideTransitionsProvider.get();
                        RootTaskDisplayAreaOrganizer rootTaskDisplayAreaOrganizer2 = (RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get();
                        return (T) new DragToDesktopTransitionHandler(context11, transitions3, rootTaskDisplayAreaOrganizer2);
                    case 52:
                        return (T) new DesktopModeLoggerTransitionObserver(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (DesktopModeEventLogger) this.wMComponentImpl.provideDesktopModeEventLoggerProvider.get());
                    case 53:
                        return (T) new DesktopModeEventLogger();
                    case 54:
                        return (T) new RecentsTransitionHandler((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (RecentTasksController) ((Optional) this.wMComponentImpl.provideRecentTasksControllerProvider.get()).orElse(null), (HomeTransitionObserver) this.wMComponentImpl.provideHomeTransitionObserverProvider.get());
                    case 55:
                        return (T) new HomeTransitionObserver(this.referenceGlobalRootComponentImpl.context, (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 56:
                        return (T) WMShellConcurrencyModule_ProvideShellAnimationExecutorFactory.provideShellAnimationExecutor();
                    case 57:
                        return (T) new DexCompatRestartDialogUtils(this.referenceGlobalRootComponentImpl.context, (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get());
                    case 58:
                        return (T) new FlexPanelStartController(this.referenceGlobalRootComponentImpl.context);
                    case 59:
                        return (T) WMShellBaseModule_ProvideUnfoldTransitionHandlerFactory.provideUnfoldTransitionHandler(DoubleCheck.lazy(this.wMComponentImpl.dynamicOverrideOptionalOfUnfoldTransitionHandlerProvider), Optional.of((ShellUnfoldProgressProvider) this.referenceGlobalRootComponentImpl.provideShellProgressProvider.get()));
                    case 60:
                        return (T) Optional.of((UnfoldTransitionHandler) this.wMComponentImpl.provideUnfoldTransitionHandlerProvider.get());
                    case 61:
                        return (T) new UnfoldTransitionHandler((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellUnfoldProgressProvider) Optional.of((ShellUnfoldProgressProvider) this.referenceGlobalRootComponentImpl.provideShellProgressProvider.get()).get(), this.wMComponentImpl.fullscreenUnfoldTaskAnimator(), (SplitTaskUnfoldAnimator) this.wMComponentImpl.provideShellSplitTaskUnfoldAnimatorProvider.get(), (TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get());
                    case 62:
                        Context context12 = this.referenceGlobalRootComponentImpl.context;
                        ShellInit shellInit5 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        ShellCommandHandler shellCommandHandler3 = (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get();
                        ShellController shellController4 = (ShellController) this.wMComponentImpl.provideShellControllerProvider.get();
                        BubbleData bubbleData = (BubbleData) this.wMComponentImpl.provideBubbleDataProvider.get();
                        FloatingContentCoordinator floatingContentCoordinator = (FloatingContentCoordinator) this.wMComponentImpl.provideFloatingContentCoordinatorProvider.get();
                        IStatusBarService iStatusBarService = (IStatusBarService) this.referenceGlobalRootComponentImpl.provideIStatusBarServiceProvider.get();
                        WindowManager windowManager = (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get();
                        WindowManagerShellWrapper windowManagerShellWrapper = (WindowManagerShellWrapper) this.wMComponentImpl.provideWindowManagerShellWrapperProvider.get();
                        UserManager userManager = (UserManager) this.referenceGlobalRootComponentImpl.provideUserManagerProvider.get();
                        LauncherApps launcherApps = (LauncherApps) this.referenceGlobalRootComponentImpl.provideLauncherAppsProvider.get();
                        TaskStackListenerImpl taskStackListenerImpl = (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get();
                        BubbleLogger bubbleLogger = (BubbleLogger) this.wMComponentImpl.provideBubbleLoggerProvider.get();
                        ShellTaskOrganizer shellTaskOrganizer3 = (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get();
                        BubblePositioner bubblePositioner = (BubblePositioner) this.wMComponentImpl.provideBubblePositionerProvider.get();
                        DisplayController displayController4 = (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get();
                        Optional of2 = Optional.of((OneHandedController) this.wMComponentImpl.provideOneHandedControllerProvider.get());
                        DragAndDropController dragAndDropController = (DragAndDropController) this.wMComponentImpl.provideDragAndDropControllerProvider.get();
                        ShellExecutor shellExecutor5 = (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get();
                        return (T) new BubbleController(context12, shellInit5, shellCommandHandler3, shellController4, bubbleData, null, floatingContentCoordinator, new BubbleDataRepository(launcherApps, shellExecutor5, new BubblePersistentRepository(context12)), iStatusBarService, windowManager, windowManagerShellWrapper, userManager, launcherApps, bubbleLogger, taskStackListenerImpl, shellTaskOrganizer3, bubblePositioner, displayController4, of2, dragAndDropController, shellExecutor5, (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideSharedBackgroundExecutorProvider.get(), (TaskViewTransitions) this.wMComponentImpl.provideTaskViewTransitionsProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), ProdBubbleProperties.INSTANCE);
                    case 63:
                        return (T) new BubbleData(this.referenceGlobalRootComponentImpl.context, (BubbleLogger) this.wMComponentImpl.provideBubbleLoggerProvider.get(), (BubblePositioner) this.wMComponentImpl.provideBubblePositionerProvider.get(), (BubbleEducationController) this.wMComponentImpl.provideBubbleEducationProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 64:
                        return (T) new BubbleLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get());
                    case 65:
                        return (T) new BubblePositioner(this.referenceGlobalRootComponentImpl.context, (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get());
                    case 66:
                        return (T) new BubbleEducationController(this.referenceGlobalRootComponentImpl.context);
                    case 67:
                        return (T) new FloatingContentCoordinator();
                    case 68:
                        return (T) new WindowManagerShellWrapper((ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 69:
                        return (T) WMShellModule_ProvideOneHandedControllerFactory.provideOneHandedController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (WindowManager) this.referenceGlobalRootComponentImpl.provideWindowManagerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (DisplayLayout) this.wMComponentImpl.provideDisplayLayoutProvider.get(), (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get(), (UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (InteractionJankMonitor) this.referenceGlobalRootComponentImpl.provideInteractionJankMonitorProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get());
                    case 70:
                        return (T) new DisplayLayout();
                    case 71:
                        return (T) new com.android.wm.shell.common.HandlerExecutor((Handler) this.wMComponentImpl.provideSharedBackgroundHandlerProvider.get());
                    case 72:
                        HandlerThread handlerThread = new HandlerThread("wmshell.background", 10);
                        handlerThread.start();
                        T t8 = (T) handlerThread.getThreadHandler();
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    case 73:
                        return (T) new TaskViewTransitions((Transitions) this.wMComponentImpl.provideTransitionsProvider.get());
                    case 74:
                        Optional empty = Optional.empty();
                        T t9 = empty.isPresent() ? (T) ((FullscreenTaskListener) empty.get()) : (T) new FullscreenTaskListener((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (Optional) this.wMComponentImpl.provideRecentTasksControllerProvider.get(), Optional.of((WindowDecorViewModel) this.wMComponentImpl.provideWindowDecorViewModelProvider.get()), Optional.of((DexWindowDecorViewModel) this.wMComponentImpl.provideDexWindowDecorViewModelProvider.get()), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get(), this.referenceGlobalRootComponentImpl.context);
                        Preconditions.checkNotNullFromProvides(t9);
                        return t9;
                    case 75:
                        return (T) new DexWindowDecorViewModel(this.referenceGlobalRootComponentImpl.context, (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (Choreographer) this.wMComponentImpl.provideShellMainChoreographerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get());
                    case 76:
                        T t10 = (T) Optional.of((FreeformComponents) this.wMComponentImpl.provideFreeformComponentsProvider.get());
                        if (!FreeformComponents.isFreeformEnabled(this.referenceGlobalRootComponentImpl.context)) {
                            t10 = (T) Optional.empty();
                        }
                        Preconditions.checkNotNullFromProvides(t10);
                        return t10;
                    case 77:
                        return (T) new FreeformComponents((FreeformTaskListener) this.wMComponentImpl.provideFreeformTaskListenerProvider.get(), Optional.of((FreeformTaskTransitionHandler) this.wMComponentImpl.provideFreeformTaskTransitionHandlerProvider.get()), Optional.of((FreeformTaskTransitionObserver) this.wMComponentImpl.provideFreeformTaskTransitionObserverProvider.get()));
                    case 78:
                        Context context13 = this.referenceGlobalRootComponentImpl.context;
                        return (T) new FreeformTaskListener(context13, (DisplayImeController) this.wMComponentImpl.provideDisplayImeControllerProvider.get(), FreeformComponents.isFreeformEnabled(context13) ? (ShellInit) this.wMComponentImpl.provideShellInitProvider.get() : null, (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (Optional) this.wMComponentImpl.provideDesktopTaskRepositoryProvider.get(), (WindowDecorViewModel) this.wMComponentImpl.provideWindowDecorViewModelProvider.get(), (DexWindowDecorViewModel) this.wMComponentImpl.provideDexWindowDecorViewModelProvider.get());
                    case 79:
                        return (T) new FreeformTaskTransitionHandler((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), this.referenceGlobalRootComponentImpl.context, (WindowDecorViewModel) this.wMComponentImpl.provideWindowDecorViewModelProvider.get(), (ShortcutController) this.wMComponentImpl.provideShortcutControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellAnimationExecutorProvider.get());
                    case 80:
                        return (T) new ShortcutController(this.referenceGlobalRootComponentImpl.context, (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (WindowDecorViewModel) this.wMComponentImpl.provideWindowDecorViewModelProvider.get(), (DexCompatRestartDialogUtils) this.wMComponentImpl.provideDexCompatRestartDialogUtilsProvider.get());
                    case 81:
                        return (T) new FreeformTaskTransitionObserver(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (WindowDecorViewModel) this.wMComponentImpl.provideWindowDecorViewModelProvider.get(), (DexWindowDecorViewModel) this.wMComponentImpl.provideDexWindowDecorViewModelProvider.get());
                    case 82:
                        T t11 = (T) Optional.of((OneHandedController) this.wMComponentImpl.provideOneHandedControllerProvider.get());
                        if (!SystemProperties.getBoolean("ro.support_one_handed_mode", false)) {
                            t11 = (T) Optional.empty();
                        }
                        Preconditions.checkNotNullFromProvides(t11);
                        return t11;
                    case 83:
                        return (T) WMShellBaseModule_ProvideHideDisplayCutoutControllerFactory.provideHideDisplayCutoutController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 84:
                        T t12 = (T) Optional.ofNullable(ActivityEmbeddingController.create(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get()));
                        Preconditions.checkNotNullFromProvides(t12);
                        return t12;
                    case 85:
                        Optional optional2 = (T) Optional.of((MixedTransitionHandler) this.wMComponentImpl.provideMixedTransitionHandlerProvider.get());
                        boolean isPresent = optional2.isPresent();
                        Object obj = optional2;
                        if (!isPresent) {
                            obj = (T) Optional.empty();
                        }
                        Preconditions.checkNotNullFromProvides(obj);
                        return (T) obj;
                    case 86:
                        return (T) new DefaultMixedHandler((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get(), (PipTransitionController) this.wMComponentImpl.providePipTransitionControllerProvider.get(), Optional.of((RecentsTransitionHandler) this.wMComponentImpl.provideRecentsTransitionHandlerProvider.get()), (KeyguardTransitionHandler) this.wMComponentImpl.provideKeyguardTransitionHandlerProvider.get(), (Optional) this.wMComponentImpl.providesDesktopTasksControllerProvider.get(), (Optional) this.wMComponentImpl.provideUnfoldTransitionHandlerProvider2.get(), (Optional) this.wMComponentImpl.provideActivityEmbeddingControllerProvider.get(), (TaskViewTransitions) this.wMComponentImpl.provideTaskViewTransitionsProvider.get());
                    case 87:
                        T t13 = (T) ((PipTransition) this.wMComponentImpl.providePipTransitionProvider.get());
                        com.android.wm.shell.pip2.phone.PipTransition pipTransition = (com.android.wm.shell.pip2.phone.PipTransition) this.wMComponentImpl.providePipTransitionProvider2.get();
                        if (PipUtils.isPip2ExperimentEnabled()) {
                            t13 = (T) pipTransition;
                        }
                        Preconditions.checkNotNullFromProvides(t13);
                        return t13;
                    case 88:
                        return (T) new PipTransition(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get(), (PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider.get(), (PhonePipMenuController) this.wMComponentImpl.providesPipPhoneMenuControllerProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (PipAnimationController) this.wMComponentImpl.providePipAnimationControllerProvider.get(), (PipSurfaceTransactionHelper) this.wMComponentImpl.providePipSurfaceTransactionHelperProvider.get(), (HomeTransitionObserver) this.wMComponentImpl.provideHomeTransitionObserverProvider.get(), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get());
                    case 89:
                        return (T) new PipAnimationController((PipSurfaceTransactionHelper) this.wMComponentImpl.providePipSurfaceTransactionHelperProvider.get());
                    case 90:
                        return (T) new PipSurfaceTransactionHelper(this.referenceGlobalRootComponentImpl.context);
                    case 91:
                        return (T) new PipBoundsAlgorithm(this.referenceGlobalRootComponentImpl.context, (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipSnapAlgorithm) this.wMComponentImpl.providePipSnapAlgorithmProvider.get(), (PhonePipKeepClearAlgorithm) this.wMComponentImpl.providePhonePipKeepClearAlgorithmProvider.get(), (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get(), (SizeSpecSource) this.wMComponentImpl.provideSizeSpecSourceProvider.get());
                    case 92:
                        return (T) new PipBoundsState(this.referenceGlobalRootComponentImpl.context, (SizeSpecSource) this.wMComponentImpl.provideSizeSpecSourceProvider.get(), (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get());
                    case 93:
                        return (T) new PhoneSizeSpecSource(this.referenceGlobalRootComponentImpl.context, (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get());
                    case 94:
                        return (T) new PipDisplayLayoutState(this.referenceGlobalRootComponentImpl.context);
                    case 95:
                        return (T) new PipSnapAlgorithm();
                    case 96:
                        return (T) new PhonePipKeepClearAlgorithm(this.referenceGlobalRootComponentImpl.context);
                    case 97:
                        return (T) new PipTransitionState();
                    case 98:
                        return (T) new PhonePipMenuController(this.referenceGlobalRootComponentImpl.context, (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipMediaController) this.wMComponentImpl.providePipMediaControllerProvider.get(), (SystemWindows) this.wMComponentImpl.provideSystemWindowsProvider.get(), (PipUiEventLogger) this.wMComponentImpl.providePipUiEventLoggerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get());
                    case 99:
                        return (T) new PipMediaController(this.referenceGlobalRootComponentImpl.context, (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get());
                    default:
                        throw new AssertionError(this.id);
                }
            }

            private T get1() {
                switch (this.id) {
                    case 100:
                        return (T) new SystemWindows((DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get());
                    case 101:
                        return (T) new PipUiEventLogger((UiEventLogger) this.referenceGlobalRootComponentImpl.provideUiEventLoggerProvider.get(), (PackageManager) this.referenceGlobalRootComponentImpl.providePackageManagerProvider.get());
                    case 102:
                        Context context = this.referenceGlobalRootComponentImpl.context;
                        ShellInit shellInit = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        ShellTaskOrganizer shellTaskOrganizer = (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get();
                        Transitions transitions = (Transitions) this.wMComponentImpl.provideTransitionsProvider.get();
                        PipBoundsState pipBoundsState = (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get();
                        PipBoundsAlgorithm pipBoundsAlgorithm = (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get();
                        return (T) new com.android.wm.shell.pip2.phone.PipTransition(context, shellInit, shellTaskOrganizer, transitions, pipBoundsState, null, pipBoundsAlgorithm, (PipScheduler) this.wMComponentImpl.providePipSchedulerProvider.get(), (com.android.wm.shell.pip2.phone.PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider2.get());
                    case 103:
                        T t = !PipUtils.isPip2ExperimentEnabled() ? (T) Optional.empty() : (T) Optional.ofNullable(PipController.create(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get(), (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get(), (PipScheduler) this.wMComponentImpl.providePipSchedulerProvider.get(), (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (com.android.wm.shell.pip2.phone.PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider2.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get()));
                        Preconditions.checkNotNullFromProvides(t);
                        return t;
                    case 104:
                        return (T) new PipScheduler(this.referenceGlobalRootComponentImpl.context, (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (com.android.wm.shell.pip2.phone.PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider2.get());
                    case 105:
                        return (T) new com.android.wm.shell.pip2.phone.PipTransitionState((Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get());
                    case 106:
                        return (T) new PipTouchHandler(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (com.android.wm.shell.pip2.phone.PhonePipMenuController) this.wMComponentImpl.providePipPhoneMenuControllerProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (com.android.wm.shell.pip2.phone.PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider2.get(), (PipScheduler) this.wMComponentImpl.providePipSchedulerProvider.get(), (SizeSpecSource) this.wMComponentImpl.provideSizeSpecSourceProvider.get(), (PipMotionHelper) this.wMComponentImpl.providePipMotionHelperProvider.get(), (FloatingContentCoordinator) this.wMComponentImpl.provideFloatingContentCoordinatorProvider.get(), (PipUiEventLogger) this.wMComponentImpl.providePipUiEventLoggerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Optional) this.wMComponentImpl.providePipPerfHintControllerProvider.get());
                    case 107:
                        return (T) new com.android.wm.shell.pip2.phone.PhonePipMenuController(this.referenceGlobalRootComponentImpl.context, (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipMediaController) this.wMComponentImpl.providePipMediaControllerProvider.get(), (SystemWindows) this.wMComponentImpl.provideSystemWindowsProvider.get(), (PipUiEventLogger) this.wMComponentImpl.providePipUiEventLoggerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get());
                    case 108:
                        return (T) new PipMotionHelper(this.referenceGlobalRootComponentImpl.context, (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (com.android.wm.shell.pip2.phone.PhonePipMenuController) this.wMComponentImpl.providePipPhoneMenuControllerProvider.get(), (PipSnapAlgorithm) this.wMComponentImpl.providePipSnapAlgorithmProvider.get(), (FloatingContentCoordinator) this.wMComponentImpl.provideFloatingContentCoordinatorProvider.get(), (PipScheduler) this.wMComponentImpl.providePipSchedulerProvider.get(), (Optional) this.wMComponentImpl.providePipPerfHintControllerProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (com.android.wm.shell.pip2.phone.PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider2.get());
                    case 109:
                        return (T) WMShellBaseModule_ProvidePipPerfHintControllerFactory.providePipPerfHintController((PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Optional) this.wMComponentImpl.provideSystemPerformanceHinterProvider.get());
                    case 110:
                        Context context2 = this.referenceGlobalRootComponentImpl.context;
                        ShellInit shellInit2 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        ShellCommandHandler shellCommandHandler = (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get();
                        RootTaskDisplayAreaOrganizer rootTaskDisplayAreaOrganizer = (RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get();
                        com.android.window.flags.Flags.explicitRefreshRateHints();
                        T t2 = (T) Optional.of(new PerfHintController(context2, shellInit2, shellCommandHandler, rootTaskDisplayAreaOrganizer).hinter);
                        Preconditions.checkNotNullFromProvides(t2);
                        return t2;
                    case 111:
                        return (T) new KeyguardTransitionHandler((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (Transitions) this.wMComponentImpl.provideTransitionsProvider.get(), (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 112:
                        return (T) new StartingWindowController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideSplashScreenExecutorProvider.get(), (StartingWindowTypeAlgorithm) this.wMComponentImpl.provideStartingWindowTypeAlgorithmProvider.get(), (IconProvider) this.wMComponentImpl.provideIconProvider.get(), (TransactionPool) this.wMComponentImpl.provideTransactionPoolProvider.get());
                    case 113:
                        return (T) WMShellConcurrencyModule_ProvideSplashScreenExecutorFactory.provideSplashScreenExecutor();
                    case 114:
                        Optional empty = Optional.empty();
                        T t3 = empty.isPresent() ? (T) ((StartingWindowTypeAlgorithm) empty.get()) : (T) new PhoneStartingWindowTypeAlgorithm();
                        Preconditions.checkNotNullFromProvides(t3);
                        return t3;
                    case 115:
                        T t4 = (T) Optional.of(new EnterSplitGestureHandler(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (Handler) this.wMComponentImpl.provideShellMainHandlerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (IWindowManager) this.referenceGlobalRootComponentImpl.provideIWindowManagerProvider.get(), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get()));
                        Preconditions.checkNotNullFromProvides(t4);
                        return t4;
                    case 116:
                        return (T) new ProtoLogController((ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get());
                    case 117:
                        return (T) new Object();
                    case 118:
                        final Context context3 = this.referenceGlobalRootComponentImpl.context;
                        Optional optional = (Optional) this.wMComponentImpl.provideDesktopTaskRepositoryProvider.get();
                        final Transitions transitions2 = (Transitions) this.wMComponentImpl.provideTransitionsProvider.get();
                        final ShellInit shellInit3 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        T t5 = (T) optional.flatMap(new Function() { // from class: com.android.wm.shell.dagger.WMShellModule$$ExternalSyntheticLambda0
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                return Optional.of(new DesktopTasksTransitionObserver(context3, (DesktopModeTaskRepository) obj, transitions2, shellInit3));
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t5);
                        return t5;
                    case 119:
                        final int i = 3;
                        T t6 = (T) ((Optional) this.wMComponentImpl.providesOneHandedControllerProvider.get()).map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                switch (i) {
                                    case 0:
                                        return ((RecentTasksController) obj).mImpl;
                                    case 1:
                                        return ((SplitScreenController) obj).mImpl;
                                    case 2:
                                        return ((BackAnimationController) obj).mBackAnimation;
                                    case 3:
                                        return ((OneHandedController) obj).mImpl;
                                    case 4:
                                        return ((DesktopTasksController) obj).desktopMode;
                                    default:
                                        return ((BubbleController) obj).asBubbles();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t6);
                        return t6;
                    case 120:
                        return (T) Pip1Module_ProvidePip1Factory.providePip1(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get(), (ShellController) this.wMComponentImpl.provideShellControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (PipAnimationController) this.wMComponentImpl.providePipAnimationControllerProvider.get(), (PipAppOpsListener) this.wMComponentImpl.providePipAppOpsListenerProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (PhonePipKeepClearAlgorithm) this.wMComponentImpl.providePhonePipKeepClearAlgorithmProvider.get(), (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get(), (com.android.wm.shell.pip.phone.PipMotionHelper) this.wMComponentImpl.providePipMotionHelperProvider2.get(), (PipMediaController) this.wMComponentImpl.providePipMediaControllerProvider.get(), (PhonePipMenuController) this.wMComponentImpl.providesPipPhoneMenuControllerProvider.get(), (PipTaskOrganizer) this.wMComponentImpl.providePipTaskOrganizerProvider.get(), (PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider.get(), (com.android.wm.shell.pip.phone.PipTouchHandler) this.wMComponentImpl.providePipTouchHandlerProvider2.get(), (PipTransitionController) this.wMComponentImpl.providePipTransitionControllerProvider.get(), (WindowManagerShellWrapper) this.wMComponentImpl.provideWindowManagerShellWrapperProvider.get(), (TaskStackListenerImpl) this.wMComponentImpl.providerTaskStackListenerImplProvider.get(), (PipParamsChangedForwarder) this.wMComponentImpl.providePipParamsChangedForwarderProvider.get(), (DisplayInsetsController) this.wMComponentImpl.provideDisplayInsetsControllerProvider.get(), (TabletopModeController) this.wMComponentImpl.provideTabletopModeControllerProvider.get(), (Optional) this.wMComponentImpl.providesOneHandedControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 121:
                        return (T) new PipAppOpsListener(this.referenceGlobalRootComponentImpl.context, ((com.android.wm.shell.pip.phone.PipTouchHandler) this.wMComponentImpl.providePipTouchHandlerProvider2.get()).mMotionHelper, (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 122:
                        return (T) new com.android.wm.shell.pip.phone.PipTouchHandler(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (PhonePipMenuController) this.wMComponentImpl.providesPipPhoneMenuControllerProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (SizeSpecSource) this.wMComponentImpl.provideSizeSpecSourceProvider.get(), (PipTaskOrganizer) this.wMComponentImpl.providePipTaskOrganizerProvider.get(), (com.android.wm.shell.pip.phone.PipMotionHelper) this.wMComponentImpl.providePipMotionHelperProvider2.get(), (FloatingContentCoordinator) this.wMComponentImpl.provideFloatingContentCoordinatorProvider.get(), (PipUiEventLogger) this.wMComponentImpl.providePipUiEventLoggerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (Optional) this.wMComponentImpl.providePipPerfHintControllerProvider.get(), (NaturalSwitchingDropTargetController) this.wMComponentImpl.provideNaturalSwitchingDropTargetControllerProvider.get());
                    case 123:
                        return (T) new PipTaskOrganizer(this.referenceGlobalRootComponentImpl.context, (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (PipTransitionState) this.wMComponentImpl.providePipTransitionStateProvider.get(), (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipDisplayLayoutState) this.wMComponentImpl.pipDisplayLayoutStateProvider.get(), (PipBoundsAlgorithm) this.wMComponentImpl.providesPipBoundsAlgorithmProvider.get(), (PhonePipMenuController) this.wMComponentImpl.providesPipPhoneMenuControllerProvider.get(), (PipAnimationController) this.wMComponentImpl.providePipAnimationControllerProvider.get(), (PipSurfaceTransactionHelper) this.wMComponentImpl.providePipSurfaceTransactionHelperProvider.get(), (PipTransitionController) this.wMComponentImpl.providePipTransitionControllerProvider.get(), (PipParamsChangedForwarder) this.wMComponentImpl.providePipParamsChangedForwarderProvider.get(), (Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get(), (Optional) this.wMComponentImpl.providePipPerfHintControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (PipUiEventLogger) this.wMComponentImpl.providePipUiEventLoggerProvider.get(), (ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 124:
                        return (T) new PipParamsChangedForwarder();
                    case 125:
                        return (T) new com.android.wm.shell.pip.phone.PipMotionHelper(this.referenceGlobalRootComponentImpl.context, (PipBoundsState) this.wMComponentImpl.providePipBoundsStateProvider.get(), (PipTaskOrganizer) this.wMComponentImpl.providePipTaskOrganizerProvider.get(), (PhonePipMenuController) this.wMComponentImpl.providesPipPhoneMenuControllerProvider.get(), (PipSnapAlgorithm) this.wMComponentImpl.providePipSnapAlgorithmProvider.get(), (PipTransitionController) this.wMComponentImpl.providePipTransitionControllerProvider.get(), (FloatingContentCoordinator) this.wMComponentImpl.provideFloatingContentCoordinatorProvider.get(), (Optional) this.wMComponentImpl.providePipPerfHintControllerProvider.get(), (SizeSpecSource) this.wMComponentImpl.provideSizeSpecSourceProvider.get());
                    case 126:
                        return (T) new TabletopModeController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (com.android.wm.shell.common.DevicePostureController) this.wMComponentImpl.provideDevicePostureControllerProvider.get(), (DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 127:
                        return (T) new com.android.wm.shell.common.DevicePostureController(this.referenceGlobalRootComponentImpl.context, (ShellInit) this.wMComponentImpl.provideShellInitProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get());
                    case 128:
                        final int i2 = 1;
                        T t7 = (T) ((Optional) this.wMComponentImpl.providesSplitScreenControllerProvider.get()).map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                switch (i2) {
                                    case 0:
                                        return ((RecentTasksController) obj).mImpl;
                                    case 1:
                                        return ((SplitScreenController) obj).mImpl;
                                    case 2:
                                        return ((BackAnimationController) obj).mBackAnimation;
                                    case 3:
                                        return ((OneHandedController) obj).mImpl;
                                    case 4:
                                        return ((DesktopTasksController) obj).desktopMode;
                                    default:
                                        return ((BubbleController) obj).asBubbles();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t7);
                        return t7;
                    case 129:
                        final int i3 = 5;
                        T t8 = (T) Optional.of((BubbleController) this.wMComponentImpl.provideBubbleControllerProvider.get()).map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                switch (i3) {
                                    case 0:
                                        return ((RecentTasksController) obj).mImpl;
                                    case 1:
                                        return ((SplitScreenController) obj).mImpl;
                                    case 2:
                                        return ((BackAnimationController) obj).mBackAnimation;
                                    case 3:
                                        return ((OneHandedController) obj).mImpl;
                                    case 4:
                                        return ((DesktopTasksController) obj).desktopMode;
                                    default:
                                        return ((BubbleController) obj).asBubbles();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t8);
                        return t8;
                    case 130:
                        T t9 = (T) Optional.of(((TaskViewFactoryController) this.wMComponentImpl.provideTaskViewFactoryControllerProvider.get()).mImpl);
                        Preconditions.checkNotNullFromProvides(t9);
                        return t9;
                    case 131:
                        return (T) new TaskViewFactoryController((ShellTaskOrganizer) this.wMComponentImpl.provideShellTaskOrganizerProvider.get(), (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (SyncTransactionQueue) this.wMComponentImpl.provideSyncTransactionQueueProvider.get(), (TaskViewTransitions) this.wMComponentImpl.provideTaskViewTransitionsProvider.get());
                    case 132:
                        T t10 = (T) ((Transitions) this.wMComponentImpl.provideTransitionsProvider.get()).mImpl;
                        Preconditions.checkNotNullFromProvides(t10);
                        return t10;
                    case 133:
                        KeyguardTransitionHandler keyguardTransitionHandler = (KeyguardTransitionHandler) this.wMComponentImpl.provideKeyguardTransitionHandlerProvider.get();
                        keyguardTransitionHandler.getClass();
                        return (T) new KeyguardTransitionHandler.KeyguardTransitionsImpl(keyguardTransitionHandler, 0);
                    case 134:
                        T t11 = (T) Optional.of(((StartingWindowController) this.wMComponentImpl.provideStartingWindowControllerProvider.get()).mImpl);
                        Preconditions.checkNotNullFromProvides(t11);
                        return t11;
                    case 135:
                        T t12 = (T) Optional.of(new DisplayAreaHelperController((ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (RootDisplayAreaOrganizer) this.wMComponentImpl.provideRootDisplayAreaOrganizerProvider.get()));
                        Preconditions.checkNotNullFromProvides(t12);
                        return t12;
                    case 136:
                        return (T) new RootDisplayAreaOrganizer((ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get(), (ShellInit) this.wMComponentImpl.provideShellInitProvider.get());
                    case 137:
                        final int i4 = 0;
                        T t13 = (T) ((Optional) this.wMComponentImpl.provideRecentTasksControllerProvider.get()).map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                switch (i4) {
                                    case 0:
                                        return ((RecentTasksController) obj).mImpl;
                                    case 1:
                                        return ((SplitScreenController) obj).mImpl;
                                    case 2:
                                        return ((BackAnimationController) obj).mBackAnimation;
                                    case 3:
                                        return ((OneHandedController) obj).mImpl;
                                    case 4:
                                        return ((DesktopTasksController) obj).desktopMode;
                                    default:
                                        return ((BubbleController) obj).asBubbles();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t13);
                        return t13;
                    case 138:
                        final int i5 = 2;
                        T t14 = (T) ((Optional) this.wMComponentImpl.provideBackAnimationControllerProvider.get()).map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                switch (i5) {
                                    case 0:
                                        return ((RecentTasksController) obj).mImpl;
                                    case 1:
                                        return ((SplitScreenController) obj).mImpl;
                                    case 2:
                                        return ((BackAnimationController) obj).mBackAnimation;
                                    case 3:
                                        return ((OneHandedController) obj).mImpl;
                                    case 4:
                                        return ((DesktopTasksController) obj).desktopMode;
                                    default:
                                        return ((BubbleController) obj).asBubbles();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t14);
                        return t14;
                    case 139:
                        final Context context4 = this.referenceGlobalRootComponentImpl.context;
                        final ShellInit shellInit4 = (ShellInit) this.wMComponentImpl.provideShellInitProvider.get();
                        final ShellController shellController = (ShellController) this.wMComponentImpl.provideShellControllerProvider.get();
                        final ShellExecutor shellExecutor = (ShellExecutor) this.wMComponentImpl.provideShellMainExecutorProvider.get();
                        final Handler handler = (Handler) this.wMComponentImpl.provideSharedBackgroundHandlerProvider.get();
                        final BackAnimationBackground backAnimationBackground = (BackAnimationBackground) this.wMComponentImpl.provideBackAnimationBackgroundProvider.get();
                        Optional of = Optional.of(this.wMComponentImpl.shellBackAnimationRegistry());
                        final ShellCommandHandler shellCommandHandler2 = (ShellCommandHandler) this.wMComponentImpl.provideShellCommandHandlerProvider.get();
                        T t15 = BackAnimationController.IS_ENABLED ? (T) of.map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda6
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                return new BackAnimationController(ShellInit.this, shellController, shellExecutor, handler, context4, backAnimationBackground, (ShellBackAnimationRegistry) obj, shellCommandHandler2);
                            }
                        }) : (T) Optional.empty();
                        Preconditions.checkNotNullFromProvides(t15);
                        return t15;
                    case 140:
                        return (T) new BackAnimationBackground((RootTaskDisplayAreaOrganizer) this.wMComponentImpl.provideRootTaskDisplayAreaOrganizerProvider.get());
                    case 141:
                        final int i6 = 4;
                        T t16 = (T) ((Optional) this.wMComponentImpl.providesDesktopTasksControllerProvider.get()).map(new Function() { // from class: com.android.wm.shell.dagger.WMShellBaseModule$$ExternalSyntheticLambda1
                            @Override // java.util.function.Function
                            public final Object apply(Object obj) {
                                switch (i6) {
                                    case 0:
                                        return ((RecentTasksController) obj).mImpl;
                                    case 1:
                                        return ((SplitScreenController) obj).mImpl;
                                    case 2:
                                        return ((BackAnimationController) obj).mBackAnimation;
                                    case 3:
                                        return ((OneHandedController) obj).mImpl;
                                    case 4:
                                        return ((DesktopTasksController) obj).desktopMode;
                                    default:
                                        return ((BubbleController) obj).asBubbles();
                                }
                            }
                        });
                        Preconditions.checkNotNullFromProvides(t16);
                        return t16;
                    case 142:
                        T t17 = (T) Optional.of((DisplayController) this.wMComponentImpl.provideDisplayControllerProvider.get());
                        Preconditions.checkNotNullFromProvides(t17);
                        return t17;
                    default:
                        throw new AssertionError(this.id);
                }
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id / 100;
                if (i == 0) {
                    return get0();
                }
                if (i == 1) {
                    return get1();
                }
                throw new AssertionError(this.id);
            }
        }

        public /* synthetic */ WMComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, HandlerThread handlerThread, int i) {
            this(referenceGlobalRootComponentImpl, handlerThread);
        }

        public final CrossTaskBackAnimation crossTaskBackAnimation() {
            return new CrossTaskBackAnimation(this.referenceGlobalRootComponentImpl.context, (BackAnimationBackground) this.provideBackAnimationBackgroundProvider.get());
        }

        public final CustomCrossActivityBackAnimation customCrossActivityBackAnimation() {
            return new CustomCrossActivityBackAnimation(this.referenceGlobalRootComponentImpl.context, (BackAnimationBackground) this.provideBackAnimationBackgroundProvider.get(), (RootTaskDisplayAreaOrganizer) this.provideRootTaskDisplayAreaOrganizerProvider.get());
        }

        public final DefaultCrossActivityBackAnimation defaultCrossActivityBackAnimation() {
            return new DefaultCrossActivityBackAnimation(this.referenceGlobalRootComponentImpl.context, (BackAnimationBackground) this.provideBackAnimationBackgroundProvider.get(), (RootTaskDisplayAreaOrganizer) this.provideRootTaskDisplayAreaOrganizerProvider.get());
        }

        public final FullscreenUnfoldTaskAnimator fullscreenUnfoldTaskAnimator() {
            return new FullscreenUnfoldTaskAnimator(this.referenceGlobalRootComponentImpl.context, (UnfoldBackgroundController) this.provideUnfoldBackgroundControllerProvider.get(), (ShellController) this.provideShellControllerProvider.get(), (DisplayInsetsController) this.provideDisplayInsetsControllerProvider.get());
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<BackAnimationController.BackAnimationImpl> getBackAnimation() {
            return (Optional) this.provideBackAnimationProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<Bubbles> getBubbles() {
            return (Optional) this.provideBubblesProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<DesktopMode> getDesktopMode() {
            return (Optional) this.provideDesktopModeProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<Object> getDisplayAreaHelper() {
            return (Optional) this.provideDisplayAreaHelperProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<DisplayController> getDisplayController() {
            return (Optional) this.provideDisplayControllerOptionalProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<EnterSplitGestureHandler> getEnterSplitGestureHandler() {
            return (Optional) this.provideEnterSplitGestureHandlerProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final KeyguardTransitions getKeyguardTransitions() {
            return (KeyguardTransitions) this.provideKeyguardTransitionsProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<OneHanded> getOneHanded() {
            return (Optional) this.provideOneHandedProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<Pip> getPip() {
            return (Optional) this.providePip1Provider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<RecentTasks> getRecentTasks() {
            return (Optional) this.provideRecentTasksProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final ShellInterface getShell() {
            return (ShellInterface) this.provideShellSysuiCallbacksProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final ShellTransitions getShellTransitions() {
            return (ShellTransitions) this.provideRemoteTransitionsProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<SplitScreen> getSplitScreen() {
            return (Optional) this.provideSplitScreenProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<SplitScreenController> getSplitScreenController() {
            return (Optional) this.providesSplitScreenControllerProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<StartingWindowController.StartingSurfaceImpl> getStartingSurface() {
            return (Optional) this.provideStartingSurfaceProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final Optional<TaskViewFactoryController.TaskViewFactoryImpl> getTaskViewFactory() {
            return (Optional) this.provideTaskViewFactoryProvider.get();
        }

        @Override // com.android.systemui.dagger.WMComponent
        public final void init() {
            getShell().onInit();
        }

        public final void initialize(HandlerThread handlerThread) {
            this.provideShellMainHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 5));
            this.provideSysUIMainExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 6));
            this.provideShellMainExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 4));
            this.provideShellInitProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 3));
            this.provideDisplayControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 2));
            this.provideDisplayInsetsControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 8));
            this.provideTransactionPoolProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 9));
            this.provideShellCommandHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 11));
            this.provideShellControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 12));
            this.provideDisplayImeControllerProvider = new DelegateFactory();
            this.provideSyncTransactionQueueProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 15));
            this.provideTransitionsProvider = new DelegateFactory();
            this.dockStateReaderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 16));
            this.compatUIConfigurationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 17));
            this.compatUIShellCommandHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 18));
            this.provideCompatUIRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 19));
            this.provideCompatUIStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 20));
            this.provideCompatUIComponentIdGeneratorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 21));
            this.provideCompatUIComponentFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 22));
            this.provideCompatUIStatusManagerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 23));
            this.provideCompatUIControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 14));
            this.provideUnfoldBackgroundControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 28));
            this.provideShellTaskOrganizerProvider = new DelegateFactory();
            this.provideRootTaskDisplayAreaOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 31));
            this.provideIconProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 33));
            this.provideGlobalDragListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 34));
            this.provideMultiInstanceHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 35));
            this.provideDragAndDropControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 32));
            this.providerTaskStackListenerImplProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 37));
            this.provideDesktopModeTaskRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 39));
            this.provideDesktopTaskRepositoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 38));
            this.provideTaskStackTransitionObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 40));
            this.provideRecentTasksControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 36));
            this.provideLaunchAdjacentControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 41));
            this.provideShellMainChoreographerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 43));
            this.provideNaturalSwitchingDropTargetControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 44));
            this.provideDesktopTasksLimiterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 48));
            this.provideEnterDesktopModeTaskTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 47));
            this.provideExitDesktopTaskTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 49));
            this.provideToggleResizeDesktopTaskTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 50));
            this.provideDragToDesktopTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 51));
            this.provideDesktopModeEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 53));
            this.provideDesktopModeLoggerTransitionObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 52));
            this.provideHomeTransitionObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 55));
            this.provideRecentsTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 54));
            this.provideDesktopTasksControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 46));
            this.providesDesktopTasksControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 45));
            this.provideShellAnimationExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 56));
            this.provideDexCompatRestartDialogUtilsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 57));
            this.provideWindowDecorViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 42));
            this.provideFlexPanelStartControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 58));
            this.provideSplitScreenControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 30));
            this.providesSplitScreenControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 29));
            SwitchingProvider switchingProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 27);
            this.provideSplitTaskUnfoldAnimatorBaseProvider = switchingProvider;
            this.provideSplitTaskUnfoldAnimatorProvider = DoubleCheck.provider(switchingProvider);
            this.provideShellSplitTaskUnfoldAnimatorProvider = DoubleCheck.provider(this.provideSplitTaskUnfoldAnimatorBaseProvider);
            this.provideUnfoldTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 61));
            this.dynamicOverrideOptionalOfUnfoldTransitionHandlerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 60);
            this.provideUnfoldTransitionHandlerProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 59));
            this.provideUnfoldAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 26));
            this.dynamicOverrideOptionalOfUnfoldAnimationControllerProvider = new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 25);
            this.provideUnfoldControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 24));
            DelegateFactory.setDelegate(this.provideShellTaskOrganizerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 13)));
            DelegateFactory.setDelegate(this.provideTransitionsProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 10)));
            DelegateFactory.setDelegate(this.provideDisplayImeControllerProvider, DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 7)));
            this.provideBubbleLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 64));
            this.provideBubblePositionerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 65));
            this.provideBubbleEducationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 66));
            this.provideBubbleDataProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 63));
            this.provideFloatingContentCoordinatorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 67));
            this.provideWindowManagerShellWrapperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 68));
            this.provideDisplayLayoutProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 70));
            this.provideOneHandedControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 69));
            this.provideSharedBackgroundHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 72));
            this.provideSharedBackgroundExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 71));
            this.provideTaskViewTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 73));
            this.provideBubbleControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 62));
            this.provideDexWindowDecorViewModelProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 75));
            this.provideFullscreenTaskListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 74));
            this.provideFreeformTaskListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 78));
            this.provideShortcutControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 80));
            this.provideFreeformTaskTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 79));
            this.provideFreeformTaskTransitionObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 81));
            this.provideFreeformComponentsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 77));
            this.provideFreeformComponentsProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 76));
            this.providesOneHandedControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 82));
            this.provideHideDisplayCutoutControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 83));
            this.provideActivityEmbeddingControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 84));
            this.providePipSurfaceTransactionHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 90));
            this.providePipAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 89));
            this.pipDisplayLayoutStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 94));
            this.provideSizeSpecSourceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 93));
            this.providePipBoundsStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 92));
            this.providePipSnapAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 95));
            this.providePhonePipKeepClearAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 96));
            this.providesPipBoundsAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 91));
            this.providePipTransitionStateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 97));
            this.providePipMediaControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 99));
            this.provideSystemWindowsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 100));
            this.providePipUiEventLoggerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 101));
        }

        public final void initialize2(HandlerThread handlerThread) {
            this.providesPipPhoneMenuControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 98));
            this.providePipTransitionProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 88));
            this.providePipTransitionStateProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 105));
            this.providePipSchedulerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 104));
            this.providePipControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 103));
            this.providePipPhoneMenuControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 107));
            this.provideSystemPerformanceHinterProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 110));
            this.providePipPerfHintControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 109));
            this.providePipMotionHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 108));
            this.providePipTouchHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 106));
            this.providePipTransitionProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 102));
            this.providePipTransitionControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 87));
            this.provideKeyguardTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 111));
            this.provideMixedTransitionHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 86));
            this.provideMixedTransitionHandlerProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 85));
            this.provideSplashScreenExecutorProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 113));
            this.provideStartingWindowTypeAlgorithmProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 114));
            this.provideStartingWindowControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 112));
            this.provideEnterSplitGestureHandlerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 115));
            this.provideProtoLogControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 116));
            this.provideDesktopTasksTransitionObserverProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 118));
            this.provideIndependentShellComponentsToCreateProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 117));
            this.provideIndependentShellComponentsToCreateProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 1));
            this.provideShellSysuiCallbacksProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 0));
            this.provideOneHandedProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 119));
            this.providePipParamsChangedForwarderProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 124));
            this.providePipTaskOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 123));
            this.providePipMotionHelperProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 125));
            this.providePipTouchHandlerProvider2 = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 122));
            this.providePipAppOpsListenerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 121));
            this.provideDevicePostureControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 127));
            this.provideTabletopModeControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 126));
            this.providePip1Provider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 120));
            this.provideSplitScreenProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 128));
            this.provideBubblesProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 129));
            this.provideTaskViewFactoryControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 131));
            this.provideTaskViewFactoryProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 130));
            this.provideRemoteTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 132));
            this.provideKeyguardTransitionsProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 133));
            this.provideStartingSurfaceProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 134));
            this.provideRootDisplayAreaOrganizerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 136));
            this.provideDisplayAreaHelperProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 135));
            this.provideRecentTasksProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 137));
            this.provideBackAnimationBackgroundProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 140));
            this.provideBackAnimationControllerProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 139));
            this.provideBackAnimationProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 138));
            this.provideDesktopModeProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 141));
            this.provideDisplayControllerOptionalProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.wMComponentImpl, 142));
        }

        public final SamsungCrossActivityBackAnimation injectSamsungCrossActivityBackAnimation(SamsungCrossActivityBackAnimation samsungCrossActivityBackAnimation) {
            samsungCrossActivityBackAnimation.mRootTaskDisplayAreaOrganizer = (RootTaskDisplayAreaOrganizer) this.provideRootTaskDisplayAreaOrganizerProvider.get();
            return samsungCrossActivityBackAnimation;
        }

        public final SamsungCrossActivityBackAnimation samsungCrossActivityBackAnimation() {
            return injectSamsungCrossActivityBackAnimation(new SamsungCrossActivityBackAnimation(this.referenceGlobalRootComponentImpl.context));
        }

        public final ShellBackAnimationRegistry shellBackAnimationRegistry() {
            DefaultCrossActivityBackAnimation defaultCrossActivityBackAnimation = defaultCrossActivityBackAnimation();
            CrossTaskBackAnimation crossTaskBackAnimation = crossTaskBackAnimation();
            CustomCrossActivityBackAnimation customCrossActivityBackAnimation = customCrossActivityBackAnimation();
            SamsungCrossActivityBackAnimation samsungCrossActivityBackAnimation = samsungCrossActivityBackAnimation();
            if (!CoreRune.FW_PREDICTIVE_BACK_ANIM) {
                samsungCrossActivityBackAnimation = null;
            }
            return new ShellBackAnimationRegistry(defaultCrossActivityBackAnimation, crossTaskBackAnimation, null, customCrossActivityBackAnimation, null, samsungCrossActivityBackAnimation);
        }

        private WMComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, HandlerThread handlerThread) {
            this.wMComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.setShellMainThread = handlerThread;
            initialize(handlerThread);
            initialize2(handlerThread);
        }
    }

    public final class WindowRootViewComponentFactory implements WindowRootViewComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ WindowRootViewComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.scene.ui.view.WindowRootViewComponent.Factory
        public final WindowRootViewComponent create() {
            return new WindowRootViewComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, 0);
        }

        private WindowRootViewComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class WindowRootViewComponentImpl implements WindowRootViewComponent {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final WindowRootViewComponentImpl windowRootViewComponentImpl;

        public /* synthetic */ WindowRootViewComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.scene.ui.view.WindowRootViewComponent
        public final WindowRootView getWindowRootView() {
            return (WindowRootView) this.referenceSysUIComponentImpl.providesWindowRootViewProvider.get();
        }

        private WindowRootViewComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.windowRootViewComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class cascd_ComplicationComponentFactory implements ComplicationComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ cascd_ComplicationComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.complication.dagger.ComplicationComponent.Factory
        public final ComplicationComponent create(LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager) {
            lifecycleOwner.getClass();
            host.getClass();
            viewModelStore.getClass();
            touchInsetManager.getClass();
            return new cascd_ComplicationComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, lifecycleOwner, host, viewModelStore, touchInsetManager, 0);
        }

        private cascd_ComplicationComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class cascd_ComplicationComponentImpl implements ComplicationComponent {
        public final cascd_ComplicationComponentImpl _cascd_ComplicationComponentImpl;
        public Provider complicationLayoutEngineProvider;
        public final Complication.Host host;
        public final LifecycleOwner lifecycleOwner;
        public Provider providesComplicationHostViewProvider;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final TouchInsetManager touchInsetManager;
        public final ViewModelStore viewModelStore;

        public final class SwitchingProvider<T> implements Provider {
            public final cascd_ComplicationComponentImpl _cascd_ComplicationComponentImpl;
            public final int id;
            public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
            public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

            public SwitchingProvider(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, cascd_ComplicationComponentImpl cascd_complicationcomponentimpl, int i) {
                this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
                this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
                this._cascd_ComplicationComponentImpl = cascd_complicationcomponentimpl;
                this.id = i;
            }

            @Override // javax.inject.Provider
            public final T get() {
                int i = this.id;
                if (i != 0) {
                    if (i == 1) {
                        return (T) new ComplicationLayoutEngine((ConstraintLayout) this._cascd_ComplicationComponentImpl.providesComplicationHostViewProvider.get(), this._cascd_ComplicationComponentImpl.namedInteger(), this._cascd_ComplicationComponentImpl.namedInteger2(), this._cascd_ComplicationComponentImpl.namedInteger3(), this._cascd_ComplicationComponentImpl.namedInteger4(), this._cascd_ComplicationComponentImpl.namedInteger5(), this._cascd_ComplicationComponentImpl.touchInsetManager.createSession(), this._cascd_ComplicationComponentImpl.namedInteger6(), this._cascd_ComplicationComponentImpl.namedInteger7());
                    }
                    throw new AssertionError(this.id);
                }
                T t = (T) ((ConstraintLayout) com.android.internal.util.Preconditions.checkNotNull((ConstraintLayout) ((LayoutInflater) this.referenceGlobalRootComponentImpl.providerLayoutInflaterProvider.get()).inflate(R.layout.dream_overlay_complications_layer, (ViewGroup) null), "R.layout.dream_overlay_complications_layer did not properly inflated"));
                Preconditions.checkNotNullFromProvides(t);
                return t;
            }
        }

        public /* synthetic */ cascd_ComplicationComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, lifecycleOwner, host, viewModelStore, touchInsetManager);
        }

        public final ComplicationCollectionLiveData complicationCollectionLiveData() {
            return new ComplicationCollectionLiveData((DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get());
        }

        public final ComplicationCollectionViewModel complicationCollectionViewModel() {
            return new ComplicationCollectionViewModel(complicationCollectionLiveData(), complicationViewModelTransformer());
        }

        public final ComplicationViewModelTransformer complicationViewModelTransformer() {
            return new ComplicationViewModelTransformer(new ComplicationViewModelComponentFactory(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this._cascd_ComplicationComponentImpl, 0));
        }

        @Override // com.android.systemui.complication.dagger.ComplicationComponent
        public final ComplicationHostViewController getComplicationHostViewController() {
            return new ComplicationHostViewController((ConstraintLayout) this.providesComplicationHostViewProvider.get(), (ComplicationLayoutEngine) this.complicationLayoutEngineProvider.get(), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get(), this.lifecycleOwner, namedComplicationCollectionViewModel(), (SecureSettings) this.referenceSysUIComponentImpl.secureSettingsImplProvider.get());
        }

        @Override // com.android.systemui.complication.dagger.ComplicationComponent
        public final ComplicationLayoutEngine getVisibilityController() {
            return (ComplicationLayoutEngine) this.complicationLayoutEngineProvider.get();
        }

        public final void initialize(LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager) {
            this.providesComplicationHostViewProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this._cascd_ComplicationComponentImpl, 0));
            this.complicationLayoutEngineProvider = DoubleCheck.provider(new SwitchingProvider(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, this._cascd_ComplicationComponentImpl, 1));
        }

        public final ComplicationCollectionViewModel namedComplicationCollectionViewModel() {
            ViewModelStore viewModelStore = this.viewModelStore;
            final ComplicationCollectionViewModel complicationCollectionViewModel = complicationCollectionViewModel();
            return (ComplicationCollectionViewModel) new ViewModelProvider(viewModelStore, new DaggerViewModelProviderFactory(new DaggerViewModelProviderFactory.ViewModelCreator() { // from class: com.android.systemui.complication.dagger.ComplicationModule$$ExternalSyntheticLambda0
                @Override // com.android.systemui.complication.dagger.DaggerViewModelProviderFactory.ViewModelCreator
                public final ViewModel create() {
                    return ComplicationCollectionViewModel.this;
                }
            })).get(ComplicationCollectionViewModel.class);
        }

        public final int namedInteger() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_complication_margin);
        }

        public final int namedInteger2() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_container_padding_start);
        }

        public final int namedInteger3() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_container_padding_top);
        }

        public final int namedInteger4() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_container_padding_end);
        }

        public final int namedInteger5() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getDimensionPixelSize(R.dimen.dream_overlay_container_padding_bottom);
        }

        public final int namedInteger6() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.complicationFadeInMs);
        }

        public final int namedInteger7() {
            return FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context).getInteger(R.integer.complicationFadeOutMs);
        }

        public final TouchInsetManager.TouchInsetSession touchInsetSession() {
            return this.touchInsetManager.createSession();
        }

        private cascd_ComplicationComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, LifecycleOwner lifecycleOwner, Complication.Host host, ViewModelStore viewModelStore, TouchInsetManager touchInsetManager) {
            this._cascd_ComplicationComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.touchInsetManager = touchInsetManager;
            this.lifecycleOwner = lifecycleOwner;
            this.viewModelStore = viewModelStore;
            this.host = host;
            initialize(lifecycleOwner, host, viewModelStore, touchInsetManager);
        }
    }

    public final class casdcd_ComplicationComponentFactory implements ComplicationComponent.Factory {
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;

        public /* synthetic */ casdcd_ComplicationComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl);
        }

        @Override // com.android.systemui.dreams.complication.dagger.ComplicationComponent.Factory
        public final com.android.systemui.dreams.complication.dagger.ComplicationComponent create(Complication.VisibilityController visibilityController, TouchInsetManager touchInsetManager) {
            visibilityController.getClass();
            touchInsetManager.getClass();
            return new casdcd_ComplicationComponentImpl(this.referenceGlobalRootComponentImpl, this.referenceSysUIComponentImpl, visibilityController, touchInsetManager, 0);
        }

        private casdcd_ComplicationComponentFactory(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl) {
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
        }
    }

    public final class casdcd_ComplicationComponentImpl implements com.android.systemui.dreams.complication.dagger.ComplicationComponent {
        public final casdcd_ComplicationComponentImpl _casdcd_ComplicationComponentImpl;
        public final ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl;
        public final ReferenceSysUIComponentImpl referenceSysUIComponentImpl;
        public final TouchInsetManager touchInsetManager;
        public final Complication.VisibilityController visibilityController;

        public /* synthetic */ casdcd_ComplicationComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Complication.VisibilityController visibilityController, TouchInsetManager touchInsetManager, int i) {
            this(referenceGlobalRootComponentImpl, referenceSysUIComponentImpl, visibilityController, touchInsetManager);
        }

        @Override // com.android.systemui.dreams.complication.dagger.ComplicationComponent
        public final HideComplicationTouchHandler getHideComplicationTouchHandler() {
            return new HideComplicationTouchHandler(this.visibilityController, namedInteger(), namedInteger2(), this.touchInsetManager, (StatusBarKeyguardViewManager) this.referenceSysUIComponentImpl.provideStatusBarKeyguardViewManagerProvider.get(), (DelayableExecutor) this.referenceGlobalRootComponentImpl.provideMainDelayableExecutorProvider.get(), (DreamOverlayStateController) this.referenceSysUIComponentImpl.dreamOverlayStateControllerProvider.get());
        }

        public final int namedInteger() {
            ComplicationModule complicationModule = ComplicationModule.INSTANCE;
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            complicationModule.getClass();
            return provideResources.getInteger(R.integer.complicationRestoreMs);
        }

        public final int namedInteger2() {
            ComplicationModule complicationModule = ComplicationModule.INSTANCE;
            Resources provideResources = FrameworkServicesModule_ProvideResourcesFactory.provideResources(this.referenceGlobalRootComponentImpl.context);
            complicationModule.getClass();
            return provideResources.getInteger(R.integer.complicationFadeOutDelayMs);
        }

        private casdcd_ComplicationComponentImpl(ReferenceGlobalRootComponentImpl referenceGlobalRootComponentImpl, ReferenceSysUIComponentImpl referenceSysUIComponentImpl, Complication.VisibilityController visibilityController, TouchInsetManager touchInsetManager) {
            this._casdcd_ComplicationComponentImpl = this;
            this.referenceGlobalRootComponentImpl = referenceGlobalRootComponentImpl;
            this.referenceSysUIComponentImpl = referenceSysUIComponentImpl;
            this.visibilityController = visibilityController;
            this.touchInsetManager = touchInsetManager;
        }
    }

    private DaggerReferenceGlobalRootComponent() {
    }

    public static ReferenceGlobalRootComponent.Builder builder() {
        return new Builder(0);
    }
}
