package com.android.systemui;

import android.app.INotificationManager;
import android.app.IWallpaperManager;
import android.content.Context;
import android.content.pm.LauncherApps;
import android.content.res.Resources;
import android.hardware.SensorPrivacyManager;
import android.os.Handler;
import android.os.HandlerThread;
import android.util.ArrayMap;
import android.util.Log;
import com.android.internal.logging.MetricsLogger;
import com.android.internal.logging.UiEventLogger;
import com.android.keyguard.KeyguardUpdateMonitor;
import com.android.keyguard.SecRotationWatcher;
import com.android.systemui.aibrief.AiBriefManager;
import com.android.systemui.animation.DialogTransitionAnimator;
import com.android.systemui.assist.AssistManager;
import com.android.systemui.audio.soundcraft.interfaces.volume.VolumeManager;
import com.android.systemui.basic.util.CoverUtilWrapper;
import com.android.systemui.blur.SecQpBlurController;
import com.android.systemui.broadcast.BroadcastDispatcher;
import com.android.systemui.cover.CoverScreenManager;
import com.android.systemui.dagger.DaggerReferenceGlobalRootComponent;
import com.android.systemui.dagger.GlobalRootComponent;
import com.android.systemui.dagger.ReferenceGlobalRootComponent;
import com.android.systemui.dagger.ReferenceSysUIComponent;
import com.android.systemui.dagger.SysUIComponent;
import com.android.systemui.dagger.WMComponent;
import com.android.systemui.facewidget.plugin.ExternalClockProvider;
import com.android.systemui.facewidget.plugin.FaceWidgetPluginControllerImpl;
import com.android.systemui.facewidget.plugin.PluginFaceWidgetManager;
import com.android.systemui.flags.FeatureFlags;
import com.android.systemui.fragments.FragmentService;
import com.android.systemui.globalactions.GlobalActionsComponent;
import com.android.systemui.indexsearch.SystemUIIndexMediator;
import com.android.systemui.keyguard.DisplayLifecycle;
import com.android.systemui.keyguard.KeyguardFastBioUnlockController;
import com.android.systemui.keyguard.KeyguardFoldController;
import com.android.systemui.keyguard.KeyguardVisibilityMonitor;
import com.android.systemui.keyguard.WakefulnessLifecycle;
import com.android.systemui.knox.KnoxStateMonitor;
import com.android.systemui.lockstar.PluginLockStarManager;
import com.android.systemui.log.QuickPanelExternalLogger;
import com.android.systemui.logging.NotiCinemaLogger;
import com.android.systemui.logging.PanelScreenShotBufferLogger;
import com.android.systemui.media.SubscreenMusicWidgetController;
import com.android.systemui.model.SysUiState;
import com.android.systemui.navigationbar.NavigationBarController;
import com.android.systemui.navigationbar.NavigationModeController;
import com.android.systemui.navigationbar.TaskbarDelegate;
import com.android.systemui.navigationbar.store.NavBarStore;
import com.android.systemui.notification.FullExpansionPanelNotiAlphaController;
import com.android.systemui.notification.NotificationBackupRestoreManager;
import com.android.systemui.people.widget.PeopleSpaceWidgetManager;
import com.android.systemui.pluginlock.PluginLockManager;
import com.android.systemui.pluginlock.PluginWallpaperManager;
import com.android.systemui.plugins.ActivityStarter;
import com.android.systemui.plugins.DarkIconDispatcher;
import com.android.systemui.plugins.FalsingManager;
import com.android.systemui.plugins.PluginManager;
import com.android.systemui.plugins.VolumeDialogController;
import com.android.systemui.plugins.statusbar.StatusBarStateController;
import com.android.systemui.privacy.PrivacyDialogController;
import com.android.systemui.qp.SubscreenQsPanelController;
import com.android.systemui.qp.util.SubscreenUtil;
import com.android.systemui.qs.QSBackupRestoreManager;
import com.android.systemui.qs.SecQSCoverResourcePicker;
import com.android.systemui.qs.SecQSDetailController;
import com.android.systemui.qs.SecQSPanelResourcePicker;
import com.android.systemui.qs.SecSTQuickControlRequestReceiver;
import com.android.systemui.qs.bar.ColoredBGHelper;
import com.android.systemui.recents.OverviewProxyService;
import com.android.systemui.searcle.SearcleManager;
import com.android.systemui.settings.UserContextProvider;
import com.android.systemui.settings.UserTracker;
import com.android.systemui.settings.multisim.MultiSIMController;
import com.android.systemui.shade.QuickSettingsController;
import com.android.systemui.shade.SecPanelSplitHelper;
import com.android.systemui.shade.SecPanelTouchBlockHelper;
import com.android.systemui.shade.ShadeController;
import com.android.systemui.shade.ShadeHeaderController;
import com.android.systemui.shade.data.repository.ShadeRepository;
import com.android.systemui.shade.domain.interactor.SecHideNotificationShadeInMirrorInteractor;
import com.android.systemui.shade.domain.interactor.SecNotificationShadeWindowStateInteractor;
import com.android.systemui.shade.domain.interactor.SecPanelExpansionStateInteractor;
import com.android.systemui.shade.domain.interactor.SecPanelSAStatusLogInteractor;
import com.android.systemui.shade.domain.interactor.SecPanelTouchProximityInteractor;
import com.android.systemui.shade.domain.interactor.SecQSExpansionStateInteractor;
import com.android.systemui.shade.domain.interactor.SecQuickSettingsAffordanceInteractor;
import com.android.systemui.statusbar.CommandQueue;
import com.android.systemui.statusbar.KeyguardShortcutManager;
import com.android.systemui.statusbar.NotificationLockscreenUserManager;
import com.android.systemui.statusbar.NotificationMediaManager;
import com.android.systemui.statusbar.NotificationShelfManager;
import com.android.systemui.statusbar.VibratorHelper;
import com.android.systemui.statusbar.connectivity.NetworkController;
import com.android.systemui.statusbar.notification.AssistantFeedbackController;
import com.android.systemui.statusbar.notification.SubscreenNotificationController;
import com.android.systemui.statusbar.notification.collection.NotifCollection;
import com.android.systemui.statusbar.notification.collection.NotifLiveDataStore;
import com.android.systemui.statusbar.notification.collection.provider.HighPriorityProvider;
import com.android.systemui.statusbar.notification.collection.render.GroupExpansionManager;
import com.android.systemui.statusbar.notification.collection.render.GroupMembershipManager;
import com.android.systemui.statusbar.notification.row.ChannelEditorDialogController;
import com.android.systemui.statusbar.notification.row.NotificationGutsManager;
import com.android.systemui.statusbar.notification.row.OnUserInteractionCallback;
import com.android.systemui.statusbar.notification.stack.AmbientState;
import com.android.systemui.statusbar.notification.stack.NotificationSectionsManager;
import com.android.systemui.statusbar.phone.CentralSurfaces;
import com.android.systemui.statusbar.phone.LightBarController;
import com.android.systemui.statusbar.phone.QSScrimViewSwitch;
import com.android.systemui.statusbar.phone.ScreenOffAnimationController;
import com.android.systemui.statusbar.phone.SecUnlockedScreenOffAnimationHelper;
import com.android.systemui.statusbar.phone.StatusBarContentInsetsProvider;
import com.android.systemui.statusbar.phone.SystemUIDialogManager;
import com.android.systemui.statusbar.phone.ui.StatusBarIconController;
import com.android.systemui.statusbar.policy.AppLockNotificationController;
import com.android.systemui.statusbar.policy.BluetoothController;
import com.android.systemui.statusbar.policy.ConfigurationController;
import com.android.systemui.statusbar.policy.DeviceProvisionedController;
import com.android.systemui.statusbar.policy.FlashlightController;
import com.android.systemui.statusbar.policy.HeadsUpManager;
import com.android.systemui.statusbar.policy.KeyguardStateController;
import com.android.systemui.statusbar.policy.QSClockBellTower;
import com.android.systemui.statusbar.policy.RotationLockController;
import com.android.systemui.statusbar.policy.SecurityController;
import com.android.systemui.statusbar.policy.SensitiveNotificationProtectionController;
import com.android.systemui.statusbar.policy.UserInfoController;
import com.android.systemui.statusbar.policy.UserSwitcherController;
import com.android.systemui.statusbar.window.StatusBarWindowController;
import com.android.systemui.subscreen.SubScreenManager;
import com.android.systemui.tuner.TunablePadding$TunablePaddingService;
import com.android.systemui.tuner.TunerService;
import com.android.systemui.uithreadmonitor.LooperSlowLogController;
import com.android.systemui.user.domain.interactor.SelectedUserInteractor;
import com.android.systemui.user.domain.interactor.UserSwitcherInteractor;
import com.android.systemui.util.DesktopManager;
import com.android.systemui.util.InitializationChecker;
import com.android.systemui.util.QsResetSettingsManager;
import com.android.systemui.util.SettingsHelper;
import com.android.systemui.wallpaper.PluginWallpaperController;
import com.android.systemui.wallpaper.WallpaperChangeNotifier;
import com.android.systemui.wallpaper.WallpaperEventNotifier;
import com.android.wm.shell.back.BackAnimationController;
import com.android.wm.shell.bubbles.Bubbles;
import com.android.wm.shell.common.DisplayController;
import com.android.wm.shell.dagger.WMShellConcurrencyModule;
import com.android.wm.shell.desktopmode.DesktopMode;
import com.android.wm.shell.keyguard.KeyguardTransitions;
import com.android.wm.shell.onehanded.OneHanded;
import com.android.wm.shell.pip.Pip;
import com.android.wm.shell.recents.RecentTasks;
import com.android.wm.shell.shared.ShellTransitions;
import com.android.wm.shell.splitscreen.EnterSplitGestureHandler;
import com.android.wm.shell.splitscreen.SplitScreen;
import com.android.wm.shell.splitscreen.SplitScreenController;
import com.android.wm.shell.startingsurface.StartingWindowController;
import com.android.wm.shell.sysui.ShellInterface;
import com.android.wm.shell.taskview.TaskViewFactoryController;
import com.samsung.systemui.splugins.SPluginDependencyProvider;
import com.samsung.systemui.splugins.SPluginManager;
import dagger.Lazy;
import java.util.Objects;
import java.util.Optional;
import java.util.concurrent.ExecutionException;
import noticolorpicker.NotificationColorPicker;

public abstract class SystemUIInitializer {
    private static final String TAG = "SystemUIFactory";
    private final Context mContext;
    private InitializationChecker mInitializationChecker;
    private GlobalRootComponent mRootComponent;
    private SysUIComponent mSysUIComponent;
    private WMComponent mWMComponent;

    /* renamed from: $r8$lambda$fBfwJ9DNI3xhFIGRtch-IdPgV14, reason: not valid java name */
    public static void m880$r8$lambda$fBfwJ9DNI3xhFIGRtchIdPgV14(SystemUIInitializer systemUIInitializer, WMComponent.Builder builder, HandlerThread handlerThread) {
        systemUIInitializer.getClass();
        DaggerReferenceGlobalRootComponent.WMComponentBuilder wMComponentBuilder = (DaggerReferenceGlobalRootComponent.WMComponentBuilder) builder;
        wMComponentBuilder.setShellMainThread = handlerThread;
        systemUIInitializer.mWMComponent = wMComponentBuilder.build();
    }

    public SystemUIInitializer(Context context) {
        this.mContext = context;
    }

    public abstract GlobalRootComponent.Builder getGlobalRootComponentBuilder();

    public GlobalRootComponent getRootComponent() {
        return this.mRootComponent;
    }

    public SysUIComponent getSysUIComponent() {
        return this.mSysUIComponent;
    }

    public String getVendorComponent(Resources resources) {
        return resources.getString(R.string.config_systemUIVendorServiceComponent);
    }

    public WMComponent getWMComponent() {
        return this.mWMComponent;
    }

    public void init(boolean z) throws ExecutionException, InterruptedException {
        DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentBuilder referenceSysUIComponentBuilder;
        GlobalRootComponent.Builder globalRootComponentBuilder = getGlobalRootComponentBuilder();
        Context context = this.mContext;
        DaggerReferenceGlobalRootComponent.Builder builder = (DaggerReferenceGlobalRootComponent.Builder) globalRootComponentBuilder;
        builder.getClass();
        context.getClass();
        builder.context = context;
        builder.instrumentationTest = Boolean.valueOf(z);
        ReferenceGlobalRootComponent build = builder.build();
        this.mRootComponent = build;
        InitializationChecker initializationChecker = build.getInitializationChecker();
        this.mInitializationChecker = initializationChecker;
        boolean initializeComponents = initializationChecker.initializeComponents();
        Context context2 = this.mContext;
        final WMComponent.Builder wMComponentBuilder = this.mRootComponent.getWMComponentBuilder();
        if (this.mInitializationChecker.initializeComponents() && context2.getResources().getBoolean(R.bool.config_enableShellMainThread)) {
            final HandlerThread createShellMainThread = WMShellConcurrencyModule.createShellMainThread();
            createShellMainThread.start();
            if (!Handler.createAsync(createShellMainThread.getLooper()).runWithScissors(new Runnable() { // from class: com.android.systemui.SystemUIInitializer$$ExternalSyntheticLambda0
                @Override // java.lang.Runnable
                public final void run() {
                    SystemUIInitializer.m880$r8$lambda$fBfwJ9DNI3xhFIGRtchIdPgV14(SystemUIInitializer.this, wMComponentBuilder, createShellMainThread);
                }
            }, 5000L)) {
                Log.w(TAG, "Failed to initialize WMComponent");
                throw new RuntimeException();
            }
        } else {
            this.mWMComponent = wMComponentBuilder.build();
        }
        ReferenceSysUIComponent.Builder sysUIComponent = ((DaggerReferenceGlobalRootComponent.ReferenceGlobalRootComponentImpl) this.mRootComponent).getSysUIComponent();
        if (initializeComponents) {
            SysUIComponent.Builder prepareSysUIComponentBuilder = prepareSysUIComponentBuilder(sysUIComponent, this.mWMComponent);
            ShellInterface shell = this.mWMComponent.getShell();
            referenceSysUIComponentBuilder = (DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentBuilder) prepareSysUIComponentBuilder;
            referenceSysUIComponentBuilder.getClass();
            shell.getClass();
            referenceSysUIComponentBuilder.setShell = shell;
            Optional<Pip> pip = this.mWMComponent.getPip();
            pip.getClass();
            referenceSysUIComponentBuilder.setPip = pip;
            Optional<SplitScreen> splitScreen = this.mWMComponent.getSplitScreen();
            splitScreen.getClass();
            referenceSysUIComponentBuilder.setSplitScreen = splitScreen;
            Optional<OneHanded> oneHanded = this.mWMComponent.getOneHanded();
            oneHanded.getClass();
            referenceSysUIComponentBuilder.setOneHanded = oneHanded;
            Optional<Bubbles> bubbles = this.mWMComponent.getBubbles();
            bubbles.getClass();
            referenceSysUIComponentBuilder.setBubbles = bubbles;
            Optional<TaskViewFactoryController.TaskViewFactoryImpl> taskViewFactory = this.mWMComponent.getTaskViewFactory();
            taskViewFactory.getClass();
            referenceSysUIComponentBuilder.setTaskViewFactory = taskViewFactory;
            ShellTransitions shellTransitions = this.mWMComponent.getShellTransitions();
            shellTransitions.getClass();
            referenceSysUIComponentBuilder.setShellTransitions = shellTransitions;
            KeyguardTransitions keyguardTransitions = this.mWMComponent.getKeyguardTransitions();
            keyguardTransitions.getClass();
            referenceSysUIComponentBuilder.setKeyguardTransitions = keyguardTransitions;
            Optional<StartingWindowController.StartingSurfaceImpl> startingSurface = this.mWMComponent.getStartingSurface();
            startingSurface.getClass();
            referenceSysUIComponentBuilder.setStartingSurface = startingSurface;
            Optional<Object> displayAreaHelper = this.mWMComponent.getDisplayAreaHelper();
            displayAreaHelper.getClass();
            referenceSysUIComponentBuilder.setDisplayAreaHelper = displayAreaHelper;
            Optional<RecentTasks> recentTasks = this.mWMComponent.getRecentTasks();
            recentTasks.getClass();
            referenceSysUIComponentBuilder.setRecentTasks = recentTasks;
            Optional<BackAnimationController.BackAnimationImpl> backAnimation = this.mWMComponent.getBackAnimation();
            backAnimation.getClass();
            referenceSysUIComponentBuilder.setBackAnimation = backAnimation;
            Optional<DesktopMode> desktopMode = this.mWMComponent.getDesktopMode();
            desktopMode.getClass();
            referenceSysUIComponentBuilder.setDesktopMode = desktopMode;
            Optional<EnterSplitGestureHandler> enterSplitGestureHandler = this.mWMComponent.getEnterSplitGestureHandler();
            enterSplitGestureHandler.getClass();
            referenceSysUIComponentBuilder.setEnterSplitGestureHandler = enterSplitGestureHandler;
            Optional<SplitScreenController> splitScreenController = this.mWMComponent.getSplitScreenController();
            splitScreenController.getClass();
            referenceSysUIComponentBuilder.setSplitScreenController = splitScreenController;
            Optional<DisplayController> displayController = this.mWMComponent.getDisplayController();
            displayController.getClass();
            referenceSysUIComponentBuilder.setDisplayController = displayController;
            this.mWMComponent.init();
        } else {
            SysUIComponent.Builder prepareSysUIComponentBuilder2 = prepareSysUIComponentBuilder(sysUIComponent, this.mWMComponent);
            ShellInterface shellInterface = new ShellInterface(this) { // from class: com.android.systemui.SystemUIInitializer.3
            };
            referenceSysUIComponentBuilder = (DaggerReferenceGlobalRootComponent.ReferenceSysUIComponentBuilder) prepareSysUIComponentBuilder2;
            referenceSysUIComponentBuilder.getClass();
            referenceSysUIComponentBuilder.setShell = shellInterface;
            Optional<Pip> ofNullable = Optional.ofNullable(null);
            ofNullable.getClass();
            referenceSysUIComponentBuilder.setPip = ofNullable;
            Optional<SplitScreen> ofNullable2 = Optional.ofNullable(null);
            ofNullable2.getClass();
            referenceSysUIComponentBuilder.setSplitScreen = ofNullable2;
            Optional<OneHanded> ofNullable3 = Optional.ofNullable(null);
            ofNullable3.getClass();
            referenceSysUIComponentBuilder.setOneHanded = ofNullable3;
            Optional<Bubbles> ofNullable4 = Optional.ofNullable(null);
            ofNullable4.getClass();
            referenceSysUIComponentBuilder.setBubbles = ofNullable4;
            Optional<TaskViewFactoryController.TaskViewFactoryImpl> ofNullable5 = Optional.ofNullable(null);
            ofNullable5.getClass();
            referenceSysUIComponentBuilder.setTaskViewFactory = ofNullable5;
            referenceSysUIComponentBuilder.setShellTransitions = new ShellTransitions(this) { // from class: com.android.systemui.SystemUIInitializer.2
            };
            referenceSysUIComponentBuilder.setKeyguardTransitions = new KeyguardTransitions(this) { // from class: com.android.systemui.SystemUIInitializer.1
            };
            Optional<Object> ofNullable6 = Optional.ofNullable(null);
            ofNullable6.getClass();
            referenceSysUIComponentBuilder.setDisplayAreaHelper = ofNullable6;
            Optional<StartingWindowController.StartingSurfaceImpl> ofNullable7 = Optional.ofNullable(null);
            ofNullable7.getClass();
            referenceSysUIComponentBuilder.setStartingSurface = ofNullable7;
            Optional<RecentTasks> ofNullable8 = Optional.ofNullable(null);
            ofNullable8.getClass();
            referenceSysUIComponentBuilder.setRecentTasks = ofNullable8;
            Optional<BackAnimationController.BackAnimationImpl> ofNullable9 = Optional.ofNullable(null);
            ofNullable9.getClass();
            referenceSysUIComponentBuilder.setBackAnimation = ofNullable9;
            Optional<DesktopMode> ofNullable10 = Optional.ofNullable(null);
            ofNullable10.getClass();
            referenceSysUIComponentBuilder.setDesktopMode = ofNullable10;
            Optional<EnterSplitGestureHandler> ofNullable11 = Optional.ofNullable(null);
            ofNullable11.getClass();
            referenceSysUIComponentBuilder.setEnterSplitGestureHandler = ofNullable11;
            Optional<SplitScreenController> ofNullable12 = Optional.ofNullable(null);
            ofNullable12.getClass();
            referenceSysUIComponentBuilder.setSplitScreenController = ofNullable12;
            Optional<DisplayController> displayController2 = this.mWMComponent.getDisplayController();
            displayController2.getClass();
            referenceSysUIComponentBuilder.setDisplayController = displayController2;
        }
        ReferenceSysUIComponent build2 = referenceSysUIComponentBuilder.build();
        this.mSysUIComponent = build2;
        Dependency createDependency = build2.createDependency();
        ArrayMap arrayMap = createDependency.mProviders;
        Lazy lazy = createDependency.mTimeTickHandler;
        Objects.requireNonNull(lazy);
        arrayMap.put(Dependency.TIME_TICK_HANDLER, new Dependency$$ExternalSyntheticLambda0(lazy));
        ArrayMap arrayMap2 = createDependency.mProviders;
        Lazy lazy2 = createDependency.mMainHandler;
        Objects.requireNonNull(lazy2);
        arrayMap2.put(Dependency.MAIN_HANDLER, new Dependency$$ExternalSyntheticLambda0(lazy2));
        ArrayMap arrayMap3 = createDependency.mProviders;
        Lazy lazy3 = createDependency.mBgLooper;
        Objects.requireNonNull(lazy3);
        arrayMap3.put(Dependency.BG_LOOPER, new Dependency$$ExternalSyntheticLambda0(lazy3));
        ArrayMap arrayMap4 = createDependency.mProviders;
        Lazy lazy4 = createDependency.mBroadcastDispatcher;
        Objects.requireNonNull(lazy4);
        arrayMap4.put(BroadcastDispatcher.class, new Dependency$$ExternalSyntheticLambda0(lazy4));
        ArrayMap arrayMap5 = createDependency.mProviders;
        Lazy lazy5 = createDependency.mBluetoothController;
        Objects.requireNonNull(lazy5);
        arrayMap5.put(BluetoothController.class, new Dependency$$ExternalSyntheticLambda0(lazy5));
        ArrayMap arrayMap6 = createDependency.mProviders;
        Lazy lazy6 = createDependency.mKeyguardUpdateMonitor;
        Objects.requireNonNull(lazy6);
        arrayMap6.put(KeyguardUpdateMonitor.class, new Dependency$$ExternalSyntheticLambda0(lazy6));
        ArrayMap arrayMap7 = createDependency.mProviders;
        Lazy lazy7 = createDependency.mDeviceProvisionedController;
        Objects.requireNonNull(lazy7);
        arrayMap7.put(DeviceProvisionedController.class, new Dependency$$ExternalSyntheticLambda0(lazy7));
        ArrayMap arrayMap8 = createDependency.mProviders;
        Lazy lazy8 = createDependency.mPluginManager;
        Objects.requireNonNull(lazy8);
        arrayMap8.put(PluginManager.class, new Dependency$$ExternalSyntheticLambda0(lazy8));
        ArrayMap arrayMap9 = createDependency.mProviders;
        Lazy lazy9 = createDependency.mAssistManager;
        Objects.requireNonNull(lazy9);
        arrayMap9.put(AssistManager.class, new Dependency$$ExternalSyntheticLambda0(lazy9));
        ArrayMap arrayMap10 = createDependency.mProviders;
        Lazy lazy10 = createDependency.mSecurityController;
        Objects.requireNonNull(lazy10);
        arrayMap10.put(SecurityController.class, new Dependency$$ExternalSyntheticLambda0(lazy10));
        ArrayMap arrayMap11 = createDependency.mProviders;
        Lazy lazy11 = createDependency.mTunerService;
        Objects.requireNonNull(lazy11);
        arrayMap11.put(TunerService.class, new Dependency$$ExternalSyntheticLambda0(lazy11));
        ArrayMap arrayMap12 = createDependency.mProviders;
        Lazy lazy12 = createDependency.mDarkIconDispatcher;
        Objects.requireNonNull(lazy12);
        arrayMap12.put(DarkIconDispatcher.class, new Dependency$$ExternalSyntheticLambda0(lazy12));
        ArrayMap arrayMap13 = createDependency.mProviders;
        Lazy lazy13 = createDependency.mFragmentService;
        Objects.requireNonNull(lazy13);
        arrayMap13.put(FragmentService.class, new Dependency$$ExternalSyntheticLambda0(lazy13));
        ArrayMap arrayMap14 = createDependency.mProviders;
        Lazy lazy14 = createDependency.mVolumeDialogController;
        Objects.requireNonNull(lazy14);
        arrayMap14.put(VolumeDialogController.class, new Dependency$$ExternalSyntheticLambda0(lazy14));
        ArrayMap arrayMap15 = createDependency.mProviders;
        Lazy lazy15 = createDependency.mVolumeManager;
        Objects.requireNonNull(lazy15);
        arrayMap15.put(VolumeManager.class, new Dependency$$ExternalSyntheticLambda0(lazy15));
        ArrayMap arrayMap16 = createDependency.mProviders;
        Lazy lazy16 = createDependency.mMetricsLogger;
        Objects.requireNonNull(lazy16);
        arrayMap16.put(MetricsLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy16));
        ArrayMap arrayMap17 = createDependency.mProviders;
        Lazy lazy17 = createDependency.mTunablePaddingService;
        Objects.requireNonNull(lazy17);
        arrayMap17.put(TunablePadding$TunablePaddingService.class, new Dependency$$ExternalSyntheticLambda0(lazy17));
        ArrayMap arrayMap18 = createDependency.mProviders;
        Lazy lazy18 = createDependency.mUiOffloadThread;
        Objects.requireNonNull(lazy18);
        arrayMap18.put(UiOffloadThread.class, new Dependency$$ExternalSyntheticLambda0(lazy18));
        ArrayMap arrayMap19 = createDependency.mProviders;
        Lazy lazy19 = createDependency.mLightBarController;
        Objects.requireNonNull(lazy19);
        arrayMap19.put(LightBarController.class, new Dependency$$ExternalSyntheticLambda0(lazy19));
        ArrayMap arrayMap20 = createDependency.mProviders;
        Lazy lazy20 = createDependency.mOverviewProxyService;
        Objects.requireNonNull(lazy20);
        arrayMap20.put(OverviewProxyService.class, new Dependency$$ExternalSyntheticLambda0(lazy20));
        ArrayMap arrayMap21 = createDependency.mProviders;
        Lazy lazy21 = createDependency.mShadeController;
        Objects.requireNonNull(lazy21);
        arrayMap21.put(ShadeController.class, new Dependency$$ExternalSyntheticLambda0(lazy21));
        ArrayMap arrayMap22 = createDependency.mProviders;
        Lazy lazy22 = createDependency.mNavBarModeController;
        Objects.requireNonNull(lazy22);
        arrayMap22.put(NavigationModeController.class, new Dependency$$ExternalSyntheticLambda0(lazy22));
        ArrayMap arrayMap23 = createDependency.mProviders;
        Lazy lazy23 = createDependency.mNavigationBarController;
        Objects.requireNonNull(lazy23);
        arrayMap23.put(NavigationBarController.class, new Dependency$$ExternalSyntheticLambda0(lazy23));
        ArrayMap arrayMap24 = createDependency.mProviders;
        Lazy lazy24 = createDependency.mStatusBarStateController;
        Objects.requireNonNull(lazy24);
        arrayMap24.put(StatusBarStateController.class, new Dependency$$ExternalSyntheticLambda0(lazy24));
        ArrayMap arrayMap25 = createDependency.mProviders;
        Lazy lazy25 = createDependency.mNotificationLockscreenUserManager;
        Objects.requireNonNull(lazy25);
        arrayMap25.put(NotificationLockscreenUserManager.class, new Dependency$$ExternalSyntheticLambda0(lazy25));
        ArrayMap arrayMap26 = createDependency.mProviders;
        Lazy lazy26 = createDependency.mNotificationMediaManager;
        Objects.requireNonNull(lazy26);
        arrayMap26.put(NotificationMediaManager.class, new Dependency$$ExternalSyntheticLambda0(lazy26));
        ArrayMap arrayMap27 = createDependency.mProviders;
        Lazy lazy27 = createDependency.mINotificationManager;
        Objects.requireNonNull(lazy27);
        arrayMap27.put(INotificationManager.class, new Dependency$$ExternalSyntheticLambda0(lazy27));
        ArrayMap arrayMap28 = createDependency.mProviders;
        Lazy lazy28 = createDependency.mSysUiStateFlagsContainer;
        Objects.requireNonNull(lazy28);
        arrayMap28.put(SysUiState.class, new Dependency$$ExternalSyntheticLambda0(lazy28));
        ArrayMap arrayMap29 = createDependency.mProviders;
        Lazy lazy29 = createDependency.mWallpaperManager;
        Objects.requireNonNull(lazy29);
        arrayMap29.put(IWallpaperManager.class, new Dependency$$ExternalSyntheticLambda0(lazy29));
        ArrayMap arrayMap30 = createDependency.mProviders;
        Lazy lazy30 = createDependency.mCommandQueue;
        Objects.requireNonNull(lazy30);
        arrayMap30.put(CommandQueue.class, new Dependency$$ExternalSyntheticLambda0(lazy30));
        ArrayMap arrayMap31 = createDependency.mProviders;
        Lazy lazy31 = createDependency.mUiEventLogger;
        Objects.requireNonNull(lazy31);
        arrayMap31.put(UiEventLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy31));
        ArrayMap arrayMap32 = createDependency.mProviders;
        Lazy lazy32 = createDependency.mFeatureFlagsLazy;
        Objects.requireNonNull(lazy32);
        arrayMap32.put(FeatureFlags.class, new Dependency$$ExternalSyntheticLambda0(lazy32));
        ArrayMap arrayMap33 = createDependency.mProviders;
        Lazy lazy33 = createDependency.mContentInsetsProviderLazy;
        Objects.requireNonNull(lazy33);
        arrayMap33.put(StatusBarContentInsetsProvider.class, new Dependency$$ExternalSyntheticLambda0(lazy33));
        ArrayMap arrayMap34 = createDependency.mProviders;
        Lazy lazy34 = createDependency.mNotificationSectionsManagerLazy;
        Objects.requireNonNull(lazy34);
        arrayMap34.put(NotificationSectionsManager.class, new Dependency$$ExternalSyntheticLambda0(lazy34));
        ArrayMap arrayMap35 = createDependency.mProviders;
        Lazy lazy35 = createDependency.mScreenOffAnimationController;
        Objects.requireNonNull(lazy35);
        arrayMap35.put(ScreenOffAnimationController.class, new Dependency$$ExternalSyntheticLambda0(lazy35));
        ArrayMap arrayMap36 = createDependency.mProviders;
        Lazy lazy36 = createDependency.mAmbientStateLazy;
        Objects.requireNonNull(lazy36);
        arrayMap36.put(AmbientState.class, new Dependency$$ExternalSyntheticLambda0(lazy36));
        ArrayMap arrayMap37 = createDependency.mProviders;
        Lazy lazy37 = createDependency.mGroupMembershipManagerLazy;
        Objects.requireNonNull(lazy37);
        arrayMap37.put(GroupMembershipManager.class, new Dependency$$ExternalSyntheticLambda0(lazy37));
        ArrayMap arrayMap38 = createDependency.mProviders;
        Lazy lazy38 = createDependency.mGroupExpansionManagerLazy;
        Objects.requireNonNull(lazy38);
        arrayMap38.put(GroupExpansionManager.class, new Dependency$$ExternalSyntheticLambda0(lazy38));
        ArrayMap arrayMap39 = createDependency.mProviders;
        Lazy lazy39 = createDependency.mSystemUIDialogManagerLazy;
        Objects.requireNonNull(lazy39);
        arrayMap39.put(SystemUIDialogManager.class, new Dependency$$ExternalSyntheticLambda0(lazy39));
        ArrayMap arrayMap40 = createDependency.mProviders;
        Lazy lazy40 = createDependency.mDialogTransitionAnimatorLazy;
        Objects.requireNonNull(lazy40);
        arrayMap40.put(DialogTransitionAnimator.class, new Dependency$$ExternalSyntheticLambda0(lazy40));
        ArrayMap arrayMap41 = createDependency.mProviders;
        Lazy lazy41 = createDependency.mUserTrackerLazy;
        Objects.requireNonNull(lazy41);
        arrayMap41.put(UserTracker.class, new Dependency$$ExternalSyntheticLambda0(lazy41));
        ArrayMap arrayMap42 = createDependency.mProviders;
        Lazy lazy42 = createDependency.mSensorPrivacyManager;
        Objects.requireNonNull(lazy42);
        arrayMap42.put(SensorPrivacyManager.class, new Dependency$$ExternalSyntheticLambda0(lazy42));
        ArrayMap arrayMap43 = createDependency.mProviders;
        Lazy lazy43 = createDependency.mSPluginManager;
        Objects.requireNonNull(lazy43);
        arrayMap43.put(SPluginManager.class, new Dependency$$ExternalSyntheticLambda0(lazy43));
        ArrayMap arrayMap44 = createDependency.mProviders;
        Lazy lazy44 = createDependency.mSPluginDependencyProvider;
        Objects.requireNonNull(lazy44);
        arrayMap44.put(SPluginDependencyProvider.class, new Dependency$$ExternalSyntheticLambda0(lazy44));
        ArrayMap arrayMap45 = createDependency.mProviders;
        Lazy lazy45 = createDependency.mStatusBarWindowControllerLazy;
        Objects.requireNonNull(lazy45);
        arrayMap45.put(StatusBarWindowController.class, new Dependency$$ExternalSyntheticLambda0(lazy45));
        ArrayMap arrayMap46 = createDependency.mProviders;
        Lazy lazy46 = createDependency.mLooperSlowLogController;
        Objects.requireNonNull(lazy46);
        arrayMap46.put(LooperSlowLogController.class, new Dependency$$ExternalSyntheticLambda0(lazy46));
        ArrayMap arrayMap47 = createDependency.mProviders;
        Lazy lazy47 = createDependency.mDesktopManager;
        Objects.requireNonNull(lazy47);
        arrayMap47.put(DesktopManager.class, new Dependency$$ExternalSyntheticLambda0(lazy47));
        ArrayMap arrayMap48 = createDependency.mProviders;
        Lazy lazy48 = createDependency.mSettingsHelper;
        Objects.requireNonNull(lazy48);
        arrayMap48.put(SettingsHelper.class, new Dependency$$ExternalSyntheticLambda0(lazy48));
        if (BasicRune.SEARCLE) {
            ArrayMap arrayMap49 = createDependency.mProviders;
            Lazy lazy49 = createDependency.mSearcleManager;
            Objects.requireNonNull(lazy49);
            arrayMap49.put(SearcleManager.class, new Dependency$$ExternalSyntheticLambda0(lazy49));
        }
        ArrayMap arrayMap50 = createDependency.mProviders;
        Lazy lazy50 = createDependency.mWallpaperEventNotifier;
        Objects.requireNonNull(lazy50);
        arrayMap50.put(WallpaperEventNotifier.class, new Dependency$$ExternalSyntheticLambda0(lazy50));
        ArrayMap arrayMap51 = createDependency.mProviders;
        Lazy lazy51 = createDependency.mWallpaperChangeNotifier;
        Objects.requireNonNull(lazy51);
        arrayMap51.put(WallpaperChangeNotifier.class, new Dependency$$ExternalSyntheticLambda0(lazy51));
        ArrayMap arrayMap52 = createDependency.mProviders;
        Lazy lazy52 = createDependency.mPluginLockManager;
        Objects.requireNonNull(lazy52);
        arrayMap52.put(PluginLockManager.class, new Dependency$$ExternalSyntheticLambda0(lazy52));
        ArrayMap arrayMap53 = createDependency.mProviders;
        Lazy lazy53 = createDependency.mPluginWallpaperManager;
        Objects.requireNonNull(lazy53);
        arrayMap53.put(PluginWallpaperManager.class, new Dependency$$ExternalSyntheticLambda0(lazy53));
        ArrayMap arrayMap54 = createDependency.mProviders;
        Lazy lazy54 = createDependency.mPluginWallController;
        Objects.requireNonNull(lazy54);
        arrayMap54.put(PluginWallpaperController.class, new Dependency$$ExternalSyntheticLambda0(lazy54));
        ArrayMap arrayMap55 = createDependency.mProviders;
        Lazy lazy55 = createDependency.mPluginLockStarManager;
        Objects.requireNonNull(lazy55);
        arrayMap55.put(PluginLockStarManager.class, new Dependency$$ExternalSyntheticLambda0(lazy55));
        ArrayMap arrayMap56 = createDependency.mProviders;
        Lazy lazy56 = createDependency.mQSClockBellTower;
        Objects.requireNonNull(lazy56);
        arrayMap56.put(QSClockBellTower.class, new Dependency$$ExternalSyntheticLambda0(lazy56));
        ArrayMap arrayMap57 = createDependency.mProviders;
        Lazy lazy57 = createDependency.mSecQuickSettingsAffordanceInteractor;
        Objects.requireNonNull(lazy57);
        arrayMap57.put(SecQuickSettingsAffordanceInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy57));
        ArrayMap arrayMap58 = createDependency.mProviders;
        Lazy lazy58 = createDependency.mSecHideNotificationShadeInMirrorInteractor;
        Objects.requireNonNull(lazy58);
        arrayMap58.put(SecHideNotificationShadeInMirrorInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy58));
        ArrayMap arrayMap59 = createDependency.mProviders;
        Lazy lazy59 = createDependency.mSecQSPanelResourcePicker;
        Objects.requireNonNull(lazy59);
        arrayMap59.put(SecQSPanelResourcePicker.class, new Dependency$$ExternalSyntheticLambda0(lazy59));
        ArrayMap arrayMap60 = createDependency.mProviders;
        Lazy lazy60 = createDependency.mShadeHeaderController;
        Objects.requireNonNull(lazy60);
        arrayMap60.put(ShadeHeaderController.class, new Dependency$$ExternalSyntheticLambda0(lazy60));
        ArrayMap arrayMap61 = createDependency.mProviders;
        Lazy lazy61 = createDependency.mShadeRepository;
        Objects.requireNonNull(lazy61);
        arrayMap61.put(ShadeRepository.class, new Dependency$$ExternalSyntheticLambda0(lazy61));
        ArrayMap arrayMap62 = createDependency.mProviders;
        Lazy lazy62 = createDependency.mSecNotificationShadeWindowStateInteractor;
        Objects.requireNonNull(lazy62);
        arrayMap62.put(SecNotificationShadeWindowStateInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy62));
        ArrayMap arrayMap63 = createDependency.mProviders;
        Lazy lazy63 = createDependency.mColoredBGHelper;
        Objects.requireNonNull(lazy63);
        arrayMap63.put(ColoredBGHelper.class, new Dependency$$ExternalSyntheticLambda0(lazy63));
        ArrayMap arrayMap64 = createDependency.mProviders;
        Lazy lazy64 = createDependency.mSecQpBlurController;
        Objects.requireNonNull(lazy64);
        arrayMap64.put(SecQpBlurController.class, new Dependency$$ExternalSyntheticLambda0(lazy64));
        ArrayMap arrayMap65 = createDependency.mProviders;
        Lazy lazy65 = createDependency.mActivityStarter;
        Objects.requireNonNull(lazy65);
        arrayMap65.put(ActivityStarter.class, new Dependency$$ExternalSyntheticLambda0(lazy65));
        ArrayMap arrayMap66 = createDependency.mProviders;
        Lazy lazy66 = createDependency.mSecPanelExpansionStateInteractor;
        Objects.requireNonNull(lazy66);
        arrayMap66.put(SecPanelExpansionStateInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy66));
        ArrayMap arrayMap67 = createDependency.mProviders;
        Lazy lazy67 = createDependency.mQuickPanelExternalLogger;
        Objects.requireNonNull(lazy67);
        arrayMap67.put(QuickPanelExternalLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy67));
        ArrayMap arrayMap68 = createDependency.mProviders;
        Lazy lazy68 = createDependency.mSecQSExpansionStateInteractor;
        Objects.requireNonNull(lazy68);
        arrayMap68.put(SecQSExpansionStateInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy68));
        ArrayMap arrayMap69 = createDependency.mProviders;
        Lazy lazy69 = createDependency.mPanelSplitHelper;
        Objects.requireNonNull(lazy69);
        arrayMap69.put(SecPanelSplitHelper.class, new Dependency$$ExternalSyntheticLambda0(lazy69));
        ArrayMap arrayMap70 = createDependency.mProviders;
        Lazy lazy70 = createDependency.mSecPanelTouchBlockHelper;
        Objects.requireNonNull(lazy70);
        arrayMap70.put(SecPanelTouchBlockHelper.class, new Dependency$$ExternalSyntheticLambda0(lazy70));
        ArrayMap arrayMap71 = createDependency.mProviders;
        Lazy lazy71 = createDependency.mSecPanelTouchProximityInteractor;
        Objects.requireNonNull(lazy71);
        arrayMap71.put(SecPanelTouchProximityInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy71));
        ArrayMap arrayMap72 = createDependency.mProviders;
        Lazy lazy72 = createDependency.mQSScrimViewSwitch;
        Objects.requireNonNull(lazy72);
        arrayMap72.put(QSScrimViewSwitch.class, new Dependency$$ExternalSyntheticLambda0(lazy72));
        ArrayMap arrayMap73 = createDependency.mProviders;
        Lazy lazy73 = createDependency.mSecPanelSAStatusLogInteractor;
        Objects.requireNonNull(lazy73);
        arrayMap73.put(SecPanelSAStatusLogInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy73));
        ArrayMap arrayMap74 = createDependency.mProviders;
        Lazy lazy74 = createDependency.mSecQSCoverResourcePicker;
        Objects.requireNonNull(lazy74);
        arrayMap74.put(SecQSCoverResourcePicker.class, new Dependency$$ExternalSyntheticLambda0(lazy74));
        ArrayMap arrayMap75 = createDependency.mProviders;
        Lazy lazy75 = createDependency.mSubscreenUtil;
        Objects.requireNonNull(lazy75);
        arrayMap75.put(SubscreenUtil.class, new Dependency$$ExternalSyntheticLambda0(lazy75));
        ArrayMap arrayMap76 = createDependency.mProviders;
        Lazy lazy76 = createDependency.mSubscreenMusicWidgetController;
        Objects.requireNonNull(lazy76);
        arrayMap76.put(SubscreenMusicWidgetController.class, new Dependency$$ExternalSyntheticLambda0(lazy76));
        ArrayMap arrayMap77 = createDependency.mProviders;
        Lazy lazy77 = createDependency.mPrivacyDialogController;
        Objects.requireNonNull(lazy77);
        arrayMap77.put(PrivacyDialogController.class, new Dependency$$ExternalSyntheticLambda0(lazy77));
        ArrayMap arrayMap78 = createDependency.mProviders;
        Lazy lazy78 = createDependency.mSecQSDetailController;
        Objects.requireNonNull(lazy78);
        arrayMap78.put(SecQSDetailController.class, new Dependency$$ExternalSyntheticLambda0(lazy78));
        ArrayMap arrayMap79 = createDependency.mProviders;
        Lazy lazy79 = createDependency.mFalsingManager;
        Objects.requireNonNull(lazy79);
        arrayMap79.put(FalsingManager.class, new Dependency$$ExternalSyntheticLambda0(lazy79));
        ArrayMap arrayMap80 = createDependency.mProviders;
        Lazy lazy80 = createDependency.mResetSettingsManager;
        Objects.requireNonNull(lazy80);
        arrayMap80.put(QsResetSettingsManager.class, new Dependency$$ExternalSyntheticLambda0(lazy80));
        ArrayMap arrayMap81 = createDependency.mProviders;
        Lazy lazy81 = createDependency.mQSBackupRestoreManager;
        Objects.requireNonNull(lazy81);
        arrayMap81.put(QSBackupRestoreManager.class, new Dependency$$ExternalSyntheticLambda0(lazy81));
        ArrayMap arrayMap82 = createDependency.mProviders;
        Lazy lazy82 = createDependency.mKnoxStateMonitor;
        Objects.requireNonNull(lazy82);
        arrayMap82.put(KnoxStateMonitor.class, new Dependency$$ExternalSyntheticLambda0(lazy82));
        ArrayMap arrayMap83 = createDependency.mProviders;
        Lazy lazy83 = createDependency.mSystemUIIndexMediator;
        Objects.requireNonNull(lazy83);
        arrayMap83.put(SystemUIIndexMediator.class, new Dependency$$ExternalSyntheticLambda0(lazy83));
        ArrayMap arrayMap84 = createDependency.mProviders;
        Lazy lazy84 = createDependency.mFullExpansionPanelNotiAlphaController;
        Objects.requireNonNull(lazy84);
        arrayMap84.put(FullExpansionPanelNotiAlphaController.class, new Dependency$$ExternalSyntheticLambda0(lazy84));
        if (BasicRune.NAVBAR_ENABLED) {
            ArrayMap arrayMap85 = createDependency.mProviders;
            Lazy lazy85 = createDependency.mNavBarStore;
            Objects.requireNonNull(lazy85);
            arrayMap85.put(NavBarStore.class, new Dependency$$ExternalSyntheticLambda0(lazy85));
            ArrayMap arrayMap86 = createDependency.mProviders;
            Lazy lazy86 = createDependency.mNavBarBgHandler;
            Objects.requireNonNull(lazy86);
            arrayMap86.put(Dependency.NAVBAR_BG_HANDLER, new Dependency$$ExternalSyntheticLambda0(lazy86));
            ArrayMap arrayMap87 = createDependency.mProviders;
            Lazy lazy87 = createDependency.mTaskbarDelegate;
            Objects.requireNonNull(lazy87);
            arrayMap87.put(TaskbarDelegate.class, new Dependency$$ExternalSyntheticLambda0(lazy87));
            ArrayMap arrayMap88 = createDependency.mProviders;
            Lazy lazy88 = createDependency.mRotationLockController;
            Objects.requireNonNull(lazy88);
            arrayMap88.put(RotationLockController.class, new Dependency$$ExternalSyntheticLambda0(lazy88));
            ArrayMap arrayMap89 = createDependency.mProviders;
            Lazy lazy89 = createDependency.mVibratorHelper;
            Objects.requireNonNull(lazy89);
            arrayMap89.put(VibratorHelper.class, new Dependency$$ExternalSyntheticLambda0(lazy89));
        }
        if (QpRune.QUICK_SUBSCREEN_SETTINGS) {
            ArrayMap arrayMap90 = createDependency.mProviders;
            Lazy lazy90 = createDependency.mNetworkController;
            Objects.requireNonNull(lazy90);
            arrayMap90.put(NetworkController.class, new Dependency$$ExternalSyntheticLambda0(lazy90));
        }
        if (NotiRune.NOTI_SUBSCREEN_NOTIFICATION_SECOND) {
            ArrayMap arrayMap91 = createDependency.mProviders;
            Lazy lazy91 = createDependency.mSubscreenQsPanelController;
            Objects.requireNonNull(lazy91);
            arrayMap91.put(SubscreenQsPanelController.class, new Dependency$$ExternalSyntheticLambda0(lazy91));
        }
        ArrayMap arrayMap92 = createDependency.mProviders;
        Lazy lazy92 = createDependency.mSecRotationWatcher;
        Objects.requireNonNull(lazy92);
        arrayMap92.put(SecRotationWatcher.class, new Dependency$$ExternalSyntheticLambda0(lazy92));
        ArrayMap arrayMap93 = createDependency.mProviders;
        Lazy lazy93 = createDependency.mUserInfoController;
        Objects.requireNonNull(lazy93);
        arrayMap93.put(UserInfoController.class, new Dependency$$ExternalSyntheticLambda0(lazy93));
        ArrayMap arrayMap94 = createDependency.mProviders;
        Lazy lazy94 = createDependency.mUserSwitcherController;
        Objects.requireNonNull(lazy94);
        arrayMap94.put(UserSwitcherController.class, new Dependency$$ExternalSyntheticLambda0(lazy94));
        ArrayMap arrayMap95 = createDependency.mProviders;
        Lazy lazy95 = createDependency.mUserSwitcherInteractor;
        Objects.requireNonNull(lazy95);
        arrayMap95.put(UserSwitcherInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy95));
        ArrayMap arrayMap96 = createDependency.mProviders;
        Lazy lazy96 = createDependency.mSelectedUserInteractor;
        Objects.requireNonNull(lazy96);
        arrayMap96.put(SelectedUserInteractor.class, new Dependency$$ExternalSyntheticLambda0(lazy96));
        ArrayMap arrayMap97 = createDependency.mProviders;
        Lazy lazy97 = createDependency.mPluginFaceWidgetManager;
        Objects.requireNonNull(lazy97);
        arrayMap97.put(PluginFaceWidgetManager.class, new Dependency$$ExternalSyntheticLambda0(lazy97));
        ArrayMap arrayMap98 = createDependency.mProviders;
        Lazy lazy98 = createDependency.mFaceWidgetController;
        Objects.requireNonNull(lazy98);
        arrayMap98.put(FaceWidgetPluginControllerImpl.class, new Dependency$$ExternalSyntheticLambda0(lazy98));
        ArrayMap arrayMap99 = createDependency.mProviders;
        Lazy lazy99 = createDependency.mExternalClockProvider;
        Objects.requireNonNull(lazy99);
        arrayMap99.put(ExternalClockProvider.class, new Dependency$$ExternalSyntheticLambda0(lazy99));
        ArrayMap arrayMap100 = createDependency.mProviders;
        Lazy lazy100 = createDependency.mDisplayLifecycle;
        Objects.requireNonNull(lazy100);
        arrayMap100.put(DisplayLifecycle.class, new Dependency$$ExternalSyntheticLambda0(lazy100));
        ArrayMap arrayMap101 = createDependency.mProviders;
        Lazy lazy101 = createDependency.mCoverUtilWrapper;
        Objects.requireNonNull(lazy101);
        arrayMap101.put(CoverUtilWrapper.class, new Dependency$$ExternalSyntheticLambda0(lazy101));
        if (LsRune.SUBSCREEN_UI) {
            ArrayMap arrayMap102 = createDependency.mProviders;
            Lazy lazy102 = createDependency.mSubScreenManager;
            Objects.requireNonNull(lazy102);
            arrayMap102.put(SubScreenManager.class, new Dependency$$ExternalSyntheticLambda0(lazy102));
        }
        if (LsRune.COVER_SUPPORTED) {
            ArrayMap arrayMap103 = createDependency.mProviders;
            Lazy lazy103 = createDependency.mCoverScreenManager;
            Objects.requireNonNull(lazy103);
            arrayMap103.put(CoverScreenManager.class, new Dependency$$ExternalSyntheticLambda0(lazy103));
        }
        ArrayMap arrayMap104 = createDependency.mProviders;
        Lazy lazy104 = createDependency.mGlobalActionsComponent;
        Objects.requireNonNull(lazy104);
        arrayMap104.put(GlobalActionsComponent.class, new Dependency$$ExternalSyntheticLambda0(lazy104));
        ArrayMap arrayMap105 = createDependency.mProviders;
        Lazy lazy105 = createDependency.mSPluginManager;
        Objects.requireNonNull(lazy105);
        arrayMap105.put(SPluginManager.class, new Dependency$$ExternalSyntheticLambda0(lazy105));
        ArrayMap arrayMap106 = createDependency.mProviders;
        Lazy lazy106 = createDependency.mSPluginDependencyProvider;
        Objects.requireNonNull(lazy106);
        arrayMap106.put(SPluginDependencyProvider.class, new Dependency$$ExternalSyntheticLambda0(lazy106));
        ArrayMap arrayMap107 = createDependency.mProviders;
        Lazy lazy107 = createDependency.mOnUserInteractionCallback;
        Objects.requireNonNull(lazy107);
        arrayMap107.put(OnUserInteractionCallback.class, new Dependency$$ExternalSyntheticLambda0(lazy107));
        ArrayMap arrayMap108 = createDependency.mProviders;
        Lazy lazy108 = createDependency.mChannelEditorDialogController;
        Objects.requireNonNull(lazy108);
        arrayMap108.put(ChannelEditorDialogController.class, new Dependency$$ExternalSyntheticLambda0(lazy108));
        ArrayMap arrayMap109 = createDependency.mProviders;
        Lazy lazy109 = createDependency.mHighPriorityProvider;
        Objects.requireNonNull(lazy109);
        arrayMap109.put(HighPriorityProvider.class, new Dependency$$ExternalSyntheticLambda0(lazy109));
        ArrayMap arrayMap110 = createDependency.mProviders;
        Lazy lazy110 = createDependency.mAssistantFeedbackController;
        Objects.requireNonNull(lazy110);
        arrayMap110.put(AssistantFeedbackController.class, new Dependency$$ExternalSyntheticLambda0(lazy110));
        ArrayMap arrayMap111 = createDependency.mProviders;
        Lazy lazy111 = createDependency.mPeopleSpaceWidgetManager;
        Objects.requireNonNull(lazy111);
        arrayMap111.put(PeopleSpaceWidgetManager.class, new Dependency$$ExternalSyntheticLambda0(lazy111));
        ArrayMap arrayMap112 = createDependency.mProviders;
        Lazy lazy112 = createDependency.mUserContextProvider;
        Objects.requireNonNull(lazy112);
        arrayMap112.put(UserContextProvider.class, new Dependency$$ExternalSyntheticLambda0(lazy112));
        ArrayMap arrayMap113 = createDependency.mProviders;
        Lazy lazy113 = createDependency.mBubblesManagerOptional;
        Objects.requireNonNull(lazy113);
        arrayMap113.put(Dependency.BUBBLE_MANAGER, new Dependency$$ExternalSyntheticLambda0(lazy113));
        ArrayMap arrayMap114 = createDependency.mProviders;
        Lazy lazy114 = createDependency.mBgHandler;
        Objects.requireNonNull(lazy114);
        arrayMap114.put(Dependency.BG_HANDLER, new Dependency$$ExternalSyntheticLambda0(lazy114));
        ArrayMap arrayMap115 = createDependency.mProviders;
        Lazy lazy115 = createDependency.mLauncherApps;
        Objects.requireNonNull(lazy115);
        arrayMap115.put(LauncherApps.class, new Dependency$$ExternalSyntheticLambda0(lazy115));
        if (NotiRune.NOTI_SUBSCREEN_ALL) {
            ArrayMap arrayMap116 = createDependency.mProviders;
            Lazy lazy116 = createDependency.mSubscreenNotificationController;
            Objects.requireNonNull(lazy116);
            arrayMap116.put(SubscreenNotificationController.class, new Dependency$$ExternalSyntheticLambda0(lazy116));
        }
        ArrayMap arrayMap117 = createDependency.mProviders;
        Lazy lazy117 = createDependency.mNotifCollection;
        Objects.requireNonNull(lazy117);
        arrayMap117.put(NotifCollection.class, new Dependency$$ExternalSyntheticLambda0(lazy117));
        ArrayMap arrayMap118 = createDependency.mProviders;
        Lazy lazy118 = createDependency.mKeyguardShortcutManager;
        Objects.requireNonNull(lazy118);
        arrayMap118.put(KeyguardShortcutManager.class, new Dependency$$ExternalSyntheticLambda0(lazy118));
        ArrayMap arrayMap119 = createDependency.mProviders;
        Lazy lazy119 = createDependency.mFlashlightController;
        Objects.requireNonNull(lazy119);
        arrayMap119.put(FlashlightController.class, new Dependency$$ExternalSyntheticLambda0(lazy119));
        ArrayMap arrayMap120 = createDependency.mProviders;
        Lazy lazy120 = createDependency.mKeyguardMonitor;
        Objects.requireNonNull(lazy120);
        arrayMap120.put(KeyguardStateController.class, new Dependency$$ExternalSyntheticLambda0(lazy120));
        ArrayMap arrayMap121 = createDependency.mProviders;
        Lazy lazy121 = createDependency.mWakefulnessLifecycle;
        Objects.requireNonNull(lazy121);
        arrayMap121.put(WakefulnessLifecycle.class, new Dependency$$ExternalSyntheticLambda0(lazy121));
        ArrayMap arrayMap122 = createDependency.mProviders;
        Lazy lazy122 = createDependency.mKeyguardVisibilityMonitor;
        Objects.requireNonNull(lazy122);
        arrayMap122.put(KeyguardVisibilityMonitor.class, new Dependency$$ExternalSyntheticLambda0(lazy122));
        ArrayMap arrayMap123 = createDependency.mProviders;
        Lazy lazy123 = createDependency.mNotificationShelfManager;
        Objects.requireNonNull(lazy123);
        arrayMap123.put(NotificationShelfManager.class, new Dependency$$ExternalSyntheticLambda0(lazy123));
        ArrayMap arrayMap124 = createDependency.mProviders;
        Lazy lazy124 = createDependency.mPanelScreenShotBufferLogger;
        Objects.requireNonNull(lazy124);
        arrayMap124.put(PanelScreenShotBufferLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy124));
        ArrayMap arrayMap125 = createDependency.mProviders;
        Lazy lazy125 = createDependency.mNotiCinemaLogger;
        Objects.requireNonNull(lazy125);
        arrayMap125.put(NotiCinemaLogger.class, new Dependency$$ExternalSyntheticLambda0(lazy125));
        ArrayMap arrayMap126 = createDependency.mProviders;
        Lazy lazy126 = createDependency.mNotificationBackupRestoreManager;
        Objects.requireNonNull(lazy126);
        arrayMap126.put(NotificationBackupRestoreManager.class, new Dependency$$ExternalSyntheticLambda0(lazy126));
        ArrayMap arrayMap127 = createDependency.mProviders;
        Lazy lazy127 = createDependency.mShelfToolTipManager;
        Objects.requireNonNull(lazy127);
        arrayMap127.put(ShelfToolTipManager.class, new Dependency$$ExternalSyntheticLambda0(lazy127));
        ArrayMap arrayMap128 = createDependency.mProviders;
        Lazy lazy128 = createDependency.mNotificationGutsManager;
        Objects.requireNonNull(lazy128);
        arrayMap128.put(NotificationGutsManager.class, new Dependency$$ExternalSyntheticLambda0(lazy128));
        ArrayMap arrayMap129 = createDependency.mProviders;
        Lazy lazy129 = createDependency.mNotificationColorPicker;
        Objects.requireNonNull(lazy129);
        arrayMap129.put(NotificationColorPicker.class, new Dependency$$ExternalSyntheticLambda0(lazy129));
        ArrayMap arrayMap130 = createDependency.mProviders;
        Lazy lazy130 = createDependency.mNotifLiveDataStore;
        Objects.requireNonNull(lazy130);
        arrayMap130.put(NotifLiveDataStore.class, new Dependency$$ExternalSyntheticLambda0(lazy130));
        ArrayMap arrayMap131 = createDependency.mProviders;
        Lazy lazy131 = createDependency.mSensitiveNotificationProtectionController;
        Objects.requireNonNull(lazy131);
        arrayMap131.put(SensitiveNotificationProtectionController.class, new Dependency$$ExternalSyntheticLambda0(lazy131));
        ArrayMap arrayMap132 = createDependency.mProviders;
        Lazy lazy132 = createDependency.mHeadsUpManager;
        Objects.requireNonNull(lazy132);
        arrayMap132.put(HeadsUpManager.class, new Dependency$$ExternalSyntheticLambda0(lazy132));
        ArrayMap arrayMap133 = createDependency.mProviders;
        Lazy lazy133 = createDependency.mFastUnlockController;
        Objects.requireNonNull(lazy133);
        arrayMap133.put(KeyguardFastBioUnlockController.class, new Dependency$$ExternalSyntheticLambda0(lazy133));
        ArrayMap arrayMap134 = createDependency.mProviders;
        Lazy lazy134 = createDependency.mCentralSurfaces;
        Objects.requireNonNull(lazy134);
        arrayMap134.put(CentralSurfaces.class, new Dependency$$ExternalSyntheticLambda0(lazy134));
        ArrayMap arrayMap135 = createDependency.mProviders;
        Lazy lazy135 = createDependency.mQuickSettingsController;
        Objects.requireNonNull(lazy135);
        arrayMap135.put(QuickSettingsController.class, new Dependency$$ExternalSyntheticLambda0(lazy135));
        ArrayMap arrayMap136 = createDependency.mProviders;
        Lazy lazy136 = createDependency.mConfigurationController;
        Objects.requireNonNull(lazy136);
        arrayMap136.put(ConfigurationController.class, new Dependency$$ExternalSyntheticLambda0(lazy136));
        ArrayMap arrayMap137 = createDependency.mProviders;
        Lazy lazy137 = createDependency.mFoldController;
        Objects.requireNonNull(lazy137);
        arrayMap137.put(KeyguardFoldController.class, new Dependency$$ExternalSyntheticLambda0(lazy137));
        if (LsRune.AOD_FULLSCREEN) {
            ArrayMap arrayMap138 = createDependency.mProviders;
            Lazy lazy138 = createDependency.mUnlockedScreenOffAnimationHelper;
            Objects.requireNonNull(lazy138);
            arrayMap138.put(SecUnlockedScreenOffAnimationHelper.class, new Dependency$$ExternalSyntheticLambda0(lazy138));
        }
        if (QpRune.QUICK_BAR_MULTISIM) {
            ArrayMap arrayMap139 = createDependency.mProviders;
            Lazy lazy139 = createDependency.mMultiSIMControllerLazy;
            Objects.requireNonNull(lazy139);
            arrayMap139.put(MultiSIMController.class, new Dependency$$ExternalSyntheticLambda0(lazy139));
            ArrayMap arrayMap140 = createDependency.mProviders;
            Lazy lazy140 = createDependency.mStatusBarIconControllerLazy;
            Objects.requireNonNull(lazy140);
            arrayMap140.put(StatusBarIconController.class, new Dependency$$ExternalSyntheticLambda0(lazy140));
        }
        ArrayMap arrayMap141 = createDependency.mProviders;
        Lazy lazy141 = createDependency.mAiBriefManagerLazy;
        Objects.requireNonNull(lazy141);
        arrayMap141.put(AiBriefManager.class, new Dependency$$ExternalSyntheticLambda0(lazy141));
        ArrayMap arrayMap142 = createDependency.mProviders;
        Lazy lazy142 = createDependency.mSecSTQuickControlRequestReceiver;
        Objects.requireNonNull(lazy142);
        arrayMap142.put(SecSTQuickControlRequestReceiver.class, new Dependency$$ExternalSyntheticLambda0(lazy142));
        ArrayMap arrayMap143 = createDependency.mProviders;
        Lazy lazy143 = createDependency.mAppLockNotificationController;
        Objects.requireNonNull(lazy143);
        arrayMap143.put(AppLockNotificationController.class, new Dependency$$ExternalSyntheticLambda0(lazy143));
        Dependency.setInstance(createDependency);
    }

    public SysUIComponent.Builder prepareSysUIComponentBuilder(SysUIComponent.Builder builder, WMComponent wMComponent) {
        return builder;
    }
}
